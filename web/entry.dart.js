var self = Object.create(this);
self.require = require;
self.module = module;
self.window = window;
self.atom = atom;
self.exports = exports;
self.Object = Object;
self.Promise = Promise;
self.setTimeout = function(f, millis) { return window.setTimeout(f, millis); };
self.clearTimeout = function(id) { window.clearTimeout(id); };
self.setInterval = function(f, millis) { return window.setInterval(f, millis); };
self.clearInterval = function(id) { window.clearInterval(id); };

// Work around interop issues.
self.getTextEditorForElement = function(element) { return element.o.getModel(); };

// Generated by dart2js, the Dart to JavaScript compiler version: 1.12.0-dev.4.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    return object.__proto__ && object.__proto__.p === cls.prototype.p;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  init.precompiled = function($collectedClasses$) {
    // ::norenaming::
    var $desc;
    function JS_CONST(code) {
      this.code = code;
      this.$deferredAction();
    }
    JS_CONST.builtin$cls = "JS_CONST";
    if (!("name" in JS_CONST))
      JS_CONST.name = "JS_CONST";
    $desc = $collectedClasses$.JS_CONST[1];
    JS_CONST.prototype = $desc;
    JS_CONST.$__fields__ = ["code"];
    function Interceptor() {
      this.$deferredAction();
    }
    Interceptor.builtin$cls = "Interceptor";
    if (!("name" in Interceptor))
      Interceptor.name = "Interceptor";
    $desc = $collectedClasses$.Interceptor[1];
    Interceptor.prototype = $desc;
    Interceptor.$__fields__ = [];
    function JSBool() {
      this.$deferredAction();
    }
    JSBool.builtin$cls = "JSBool";
    if (!("name" in JSBool))
      JSBool.name = "JSBool";
    $desc = $collectedClasses$.JSBool[1];
    JSBool.prototype = $desc;
    JSBool.$__fields__ = [];
    function JSNull() {
      this.$deferredAction();
    }
    JSNull.builtin$cls = "JSNull";
    if (!("name" in JSNull))
      JSNull.name = "JSNull";
    $desc = $collectedClasses$.JSNull[1];
    JSNull.prototype = $desc;
    JSNull.$__fields__ = [];
    function JavaScriptObject() {
      this.$deferredAction();
    }
    JavaScriptObject.builtin$cls = "JavaScriptObject";
    if (!("name" in JavaScriptObject))
      JavaScriptObject.name = "JavaScriptObject";
    $desc = $collectedClasses$.JavaScriptObject[1];
    JavaScriptObject.prototype = $desc;
    JavaScriptObject.$__fields__ = [];
    function PlainJavaScriptObject() {
      this.$deferredAction();
    }
    PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
    if (!("name" in PlainJavaScriptObject))
      PlainJavaScriptObject.name = "PlainJavaScriptObject";
    $desc = $collectedClasses$.PlainJavaScriptObject[1];
    PlainJavaScriptObject.prototype = $desc;
    PlainJavaScriptObject.$__fields__ = [];
    function UnknownJavaScriptObject() {
      this.$deferredAction();
    }
    UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
    if (!("name" in UnknownJavaScriptObject))
      UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
    $desc = $collectedClasses$.UnknownJavaScriptObject[1];
    UnknownJavaScriptObject.prototype = $desc;
    UnknownJavaScriptObject.$__fields__ = [];
    function JSArray() {
      this.$deferredAction();
    }
    JSArray.builtin$cls = "JSArray";
    if (!("name" in JSArray))
      JSArray.name = "JSArray";
    $desc = $collectedClasses$.JSArray[1];
    JSArray.prototype = $desc;
    JSArray.$__fields__ = [];
    function JSUnmodifiableArray() {
      this.$deferredAction();
    }
    JSUnmodifiableArray.builtin$cls = "JSUnmodifiableArray";
    if (!("name" in JSUnmodifiableArray))
      JSUnmodifiableArray.name = "JSUnmodifiableArray";
    $desc = $collectedClasses$.JSUnmodifiableArray[1];
    JSUnmodifiableArray.prototype = $desc;
    JSUnmodifiableArray.$__fields__ = [];
    function ArrayIterator(__interceptors$_iterable, __interceptors$_length, __interceptors$_index, __interceptors$_current) {
      this.__interceptors$_iterable = __interceptors$_iterable;
      this.__interceptors$_length = __interceptors$_length;
      this.__interceptors$_index = __interceptors$_index;
      this.__interceptors$_current = __interceptors$_current;
      this.$deferredAction();
    }
    ArrayIterator.builtin$cls = "ArrayIterator";
    if (!("name" in ArrayIterator))
      ArrayIterator.name = "ArrayIterator";
    $desc = $collectedClasses$.ArrayIterator[1];
    ArrayIterator.prototype = $desc;
    ArrayIterator.$__fields__ = ["__interceptors$_iterable", "__interceptors$_length", "__interceptors$_index", "__interceptors$_current"];
    function JSNumber() {
      this.$deferredAction();
    }
    JSNumber.builtin$cls = "JSNumber";
    if (!("name" in JSNumber))
      JSNumber.name = "JSNumber";
    $desc = $collectedClasses$.JSNumber[1];
    JSNumber.prototype = $desc;
    JSNumber.$__fields__ = [];
    function JSInt() {
      this.$deferredAction();
    }
    JSInt.builtin$cls = "JSInt";
    if (!("name" in JSInt))
      JSInt.name = "JSInt";
    $desc = $collectedClasses$.JSInt[1];
    JSInt.prototype = $desc;
    JSInt.$__fields__ = [];
    function JSDouble() {
      this.$deferredAction();
    }
    JSDouble.builtin$cls = "JSDouble";
    if (!("name" in JSDouble))
      JSDouble.name = "JSDouble";
    $desc = $collectedClasses$.JSDouble[1];
    JSDouble.prototype = $desc;
    JSDouble.$__fields__ = [];
    function JSString() {
      this.$deferredAction();
    }
    JSString.builtin$cls = "JSString";
    if (!("name" in JSString))
      JSString.name = "JSString";
    $desc = $collectedClasses$.JSString[1];
    JSString.prototype = $desc;
    JSString.$__fields__ = [];
    function startRootIsolate_closure(__isolate_helper$_box_0, _captured_entry_1) {
      this.__isolate_helper$_box_0 = __isolate_helper$_box_0;
      this._captured_entry_1 = _captured_entry_1;
      this.$deferredAction();
    }
    startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
    if (!("name" in startRootIsolate_closure))
      startRootIsolate_closure.name = "startRootIsolate_closure";
    $desc = $collectedClasses$.startRootIsolate_closure[1];
    startRootIsolate_closure.prototype = $desc;
    startRootIsolate_closure.$__fields__ = ["__isolate_helper$_box_0", "_captured_entry_1"];
    function startRootIsolate_closure0(__isolate_helper$_box_0, _captured_entry_2) {
      this.__isolate_helper$_box_0 = __isolate_helper$_box_0;
      this._captured_entry_2 = _captured_entry_2;
      this.$deferredAction();
    }
    startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
    if (!("name" in startRootIsolate_closure0))
      startRootIsolate_closure0.name = "startRootIsolate_closure0";
    $desc = $collectedClasses$.startRootIsolate_closure0[1];
    startRootIsolate_closure0.prototype = $desc;
    startRootIsolate_closure0.$__fields__ = ["__isolate_helper$_box_0", "_captured_entry_2"];
    function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
      this.nextIsolateId = nextIsolateId;
      this.currentManagerId = currentManagerId;
      this.nextManagerId = nextManagerId;
      this.currentContext = currentContext;
      this.rootContext = rootContext;
      this.topEventLoop = topEventLoop;
      this.fromCommandLine = fromCommandLine;
      this.isWorker = isWorker;
      this.supportsWorkers = supportsWorkers;
      this.isolates = isolates;
      this.mainManager = mainManager;
      this.managers = managers;
      this.entry = entry;
      this.$deferredAction();
    }
    _Manager.builtin$cls = "_Manager";
    if (!("name" in _Manager))
      _Manager.name = "_Manager";
    $desc = $collectedClasses$._Manager[1];
    _Manager.prototype = $desc;
    _Manager.$__fields__ = ["nextIsolateId", "currentManagerId", "nextManagerId", "currentContext", "rootContext", "topEventLoop", "fromCommandLine", "isWorker", "supportsWorkers", "isolates", "mainManager", "managers", "entry"];
    function _IsolateContext(id, ports, weakPorts, isolateStatics, controlPort, pauseCapability, terminateCapability, initialized, isPaused, delayedEvents, pauseTokens, doneHandlers, _scheduledControlEvents, _isExecutingEvent, errorsAreFatal, errorPorts) {
      this.id = id;
      this.ports = ports;
      this.weakPorts = weakPorts;
      this.isolateStatics = isolateStatics;
      this.controlPort = controlPort;
      this.pauseCapability = pauseCapability;
      this.terminateCapability = terminateCapability;
      this.initialized = initialized;
      this.isPaused = isPaused;
      this.delayedEvents = delayedEvents;
      this.pauseTokens = pauseTokens;
      this.doneHandlers = doneHandlers;
      this._scheduledControlEvents = _scheduledControlEvents;
      this._isExecutingEvent = _isExecutingEvent;
      this.errorsAreFatal = errorsAreFatal;
      this.errorPorts = errorPorts;
      this.$deferredAction();
    }
    _IsolateContext.builtin$cls = "_IsolateContext";
    if (!("name" in _IsolateContext))
      _IsolateContext.name = "_IsolateContext";
    $desc = $collectedClasses$._IsolateContext[1];
    _IsolateContext.prototype = $desc;
    _IsolateContext.$__fields__ = ["id", "ports", "weakPorts", "isolateStatics", "controlPort", "pauseCapability", "terminateCapability", "initialized", "isPaused", "delayedEvents", "pauseTokens", "doneHandlers", "_scheduledControlEvents", "_isExecutingEvent", "errorsAreFatal", "errorPorts"];
    _IsolateContext.prototype.get$id = function(receiver) {
      return this.id;
    };
    _IsolateContext.prototype.get$isolateStatics = function() {
      return this.isolateStatics;
    };
    _IsolateContext.prototype.get$controlPort = function() {
      return this.controlPort;
    };
    _IsolateContext.prototype.set$initialized = function(v) {
      return this.initialized = v;
    };
    _IsolateContext.prototype.get$isPaused = function() {
      return this.isPaused;
    };
    _IsolateContext.prototype.get$delayedEvents = function() {
      return this.delayedEvents;
    };
    function _IsolateContext_handlePing_respond(_captured_responsePort_0, _captured_response_1) {
      this._captured_responsePort_0 = _captured_responsePort_0;
      this._captured_response_1 = _captured_response_1;
      this.$deferredAction();
    }
    _IsolateContext_handlePing_respond.builtin$cls = "_IsolateContext_handlePing_respond";
    if (!("name" in _IsolateContext_handlePing_respond))
      _IsolateContext_handlePing_respond.name = "_IsolateContext_handlePing_respond";
    $desc = $collectedClasses$._IsolateContext_handlePing_respond[1];
    _IsolateContext_handlePing_respond.prototype = $desc;
    _IsolateContext_handlePing_respond.$__fields__ = ["_captured_responsePort_0", "_captured_response_1"];
    function _EventLoop(events, _activeJsAsyncCount) {
      this.events = events;
      this._activeJsAsyncCount = _activeJsAsyncCount;
      this.$deferredAction();
    }
    _EventLoop.builtin$cls = "_EventLoop";
    if (!("name" in _EventLoop))
      _EventLoop.name = "_EventLoop";
    $desc = $collectedClasses$._EventLoop[1];
    _EventLoop.prototype = $desc;
    _EventLoop.$__fields__ = ["events", "_activeJsAsyncCount"];
    function _EventLoop__runHelper_next(_captured_this_0) {
      this._captured_this_0 = _captured_this_0;
      this.$deferredAction();
    }
    _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
    if (!("name" in _EventLoop__runHelper_next))
      _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
    $desc = $collectedClasses$._EventLoop__runHelper_next[1];
    _EventLoop__runHelper_next.prototype = $desc;
    _EventLoop__runHelper_next.$__fields__ = ["_captured_this_0"];
    function _IsolateEvent(isolate, fn, message) {
      this.isolate = isolate;
      this.fn = fn;
      this.message = message;
      this.$deferredAction();
    }
    _IsolateEvent.builtin$cls = "_IsolateEvent";
    if (!("name" in _IsolateEvent))
      _IsolateEvent.name = "_IsolateEvent";
    $desc = $collectedClasses$._IsolateEvent[1];
    _IsolateEvent.prototype = $desc;
    _IsolateEvent.$__fields__ = ["isolate", "fn", "message"];
    _IsolateEvent.prototype.get$message = function(receiver) {
      return this.message;
    };
    function _MainManagerStub() {
      this.$deferredAction();
    }
    _MainManagerStub.builtin$cls = "_MainManagerStub";
    if (!("name" in _MainManagerStub))
      _MainManagerStub.name = "_MainManagerStub";
    $desc = $collectedClasses$._MainManagerStub[1];
    _MainManagerStub.prototype = $desc;
    _MainManagerStub.$__fields__ = [];
    function IsolateNatives__processWorkerMessage_closure(_captured_entryPoint_0, _captured_args_1, _captured_message_2, _captured_isSpawnUri_3, _captured_startPaused_4, _captured_replyTo_5) {
      this._captured_entryPoint_0 = _captured_entryPoint_0;
      this._captured_args_1 = _captured_args_1;
      this._captured_message_2 = _captured_message_2;
      this._captured_isSpawnUri_3 = _captured_isSpawnUri_3;
      this._captured_startPaused_4 = _captured_startPaused_4;
      this._captured_replyTo_5 = _captured_replyTo_5;
      this.$deferredAction();
    }
    IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
    if (!("name" in IsolateNatives__processWorkerMessage_closure))
      IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
    $desc = $collectedClasses$.IsolateNatives__processWorkerMessage_closure[1];
    IsolateNatives__processWorkerMessage_closure.prototype = $desc;
    IsolateNatives__processWorkerMessage_closure.$__fields__ = ["_captured_entryPoint_0", "_captured_args_1", "_captured_message_2", "_captured_isSpawnUri_3", "_captured_startPaused_4", "_captured_replyTo_5"];
    function IsolateNatives__startIsolate_runStartFunction(_captured_topLevel_0, _captured_args_1, _captured_message_2, _captured_isSpawnUri_3, _captured_context_4) {
      this._captured_topLevel_0 = _captured_topLevel_0;
      this._captured_args_1 = _captured_args_1;
      this._captured_message_2 = _captured_message_2;
      this._captured_isSpawnUri_3 = _captured_isSpawnUri_3;
      this._captured_context_4 = _captured_context_4;
      this.$deferredAction();
    }
    IsolateNatives__startIsolate_runStartFunction.builtin$cls = "IsolateNatives__startIsolate_runStartFunction";
    if (!("name" in IsolateNatives__startIsolate_runStartFunction))
      IsolateNatives__startIsolate_runStartFunction.name = "IsolateNatives__startIsolate_runStartFunction";
    $desc = $collectedClasses$.IsolateNatives__startIsolate_runStartFunction[1];
    IsolateNatives__startIsolate_runStartFunction.prototype = $desc;
    IsolateNatives__startIsolate_runStartFunction.$__fields__ = ["_captured_topLevel_0", "_captured_args_1", "_captured_message_2", "_captured_isSpawnUri_3", "_captured_context_4"];
    function _BaseSendPort() {
      this.$deferredAction();
    }
    _BaseSendPort.builtin$cls = "_BaseSendPort";
    if (!("name" in _BaseSendPort))
      _BaseSendPort.name = "_BaseSendPort";
    $desc = $collectedClasses$._BaseSendPort[1];
    _BaseSendPort.prototype = $desc;
    _BaseSendPort.$__fields__ = [];
    function _NativeJsSendPort(_receivePort, _isolateId) {
      this._receivePort = _receivePort;
      this._isolateId = _isolateId;
      this.$deferredAction();
    }
    _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
    if (!("name" in _NativeJsSendPort))
      _NativeJsSendPort.name = "_NativeJsSendPort";
    $desc = $collectedClasses$._NativeJsSendPort[1];
    _NativeJsSendPort.prototype = $desc;
    _NativeJsSendPort.$__fields__ = ["_receivePort", "_isolateId"];
    function _NativeJsSendPort_send_closure(_captured_this_0, _captured_msg_1) {
      this._captured_this_0 = _captured_this_0;
      this._captured_msg_1 = _captured_msg_1;
      this.$deferredAction();
    }
    _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
    if (!("name" in _NativeJsSendPort_send_closure))
      _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
    $desc = $collectedClasses$._NativeJsSendPort_send_closure[1];
    _NativeJsSendPort_send_closure.prototype = $desc;
    _NativeJsSendPort_send_closure.$__fields__ = ["_captured_this_0", "_captured_msg_1"];
    function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
      this._workerId = _workerId;
      this._receivePortId = _receivePortId;
      this._isolateId = _isolateId;
      this.$deferredAction();
    }
    _WorkerSendPort.builtin$cls = "_WorkerSendPort";
    if (!("name" in _WorkerSendPort))
      _WorkerSendPort.name = "_WorkerSendPort";
    $desc = $collectedClasses$._WorkerSendPort[1];
    _WorkerSendPort.prototype = $desc;
    _WorkerSendPort.$__fields__ = ["_workerId", "_receivePortId", "_isolateId"];
    function RawReceivePortImpl(__isolate_helper$_id, _handler, _isClosed) {
      this.__isolate_helper$_id = __isolate_helper$_id;
      this._handler = _handler;
      this._isClosed = _isClosed;
      this.$deferredAction();
    }
    RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
    if (!("name" in RawReceivePortImpl))
      RawReceivePortImpl.name = "RawReceivePortImpl";
    $desc = $collectedClasses$.RawReceivePortImpl[1];
    RawReceivePortImpl.prototype = $desc;
    RawReceivePortImpl.$__fields__ = ["__isolate_helper$_id", "_handler", "_isClosed"];
    RawReceivePortImpl.prototype.get$__isolate_helper$_id = function() {
      return this.__isolate_helper$_id;
    };
    RawReceivePortImpl.prototype.get$_isClosed = function() {
      return this._isClosed;
    };
    function TimerImpl(_once, _inEventLoop, _handle) {
      this._once = _once;
      this._inEventLoop = _inEventLoop;
      this._handle = _handle;
      this.$deferredAction();
    }
    TimerImpl.builtin$cls = "TimerImpl";
    if (!("name" in TimerImpl))
      TimerImpl.name = "TimerImpl";
    $desc = $collectedClasses$.TimerImpl[1];
    TimerImpl.prototype = $desc;
    TimerImpl.$__fields__ = ["_once", "_inEventLoop", "_handle"];
    function TimerImpl_internalCallback(_captured_this_0, _captured_callback_1) {
      this._captured_this_0 = _captured_this_0;
      this._captured_callback_1 = _captured_callback_1;
      this.$deferredAction();
    }
    TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
    if (!("name" in TimerImpl_internalCallback))
      TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
    $desc = $collectedClasses$.TimerImpl_internalCallback[1];
    TimerImpl_internalCallback.prototype = $desc;
    TimerImpl_internalCallback.$__fields__ = ["_captured_this_0", "_captured_callback_1"];
    function TimerImpl_internalCallback0(_captured_this_2, _captured_callback_3) {
      this._captured_this_2 = _captured_this_2;
      this._captured_callback_3 = _captured_callback_3;
      this.$deferredAction();
    }
    TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
    if (!("name" in TimerImpl_internalCallback0))
      TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
    $desc = $collectedClasses$.TimerImpl_internalCallback0[1];
    TimerImpl_internalCallback0.prototype = $desc;
    TimerImpl_internalCallback0.$__fields__ = ["_captured_this_2", "_captured_callback_3"];
    function TimerImpl$periodic_closure(_captured_this_0, _captured_callback_1) {
      this._captured_this_0 = _captured_this_0;
      this._captured_callback_1 = _captured_callback_1;
      this.$deferredAction();
    }
    TimerImpl$periodic_closure.builtin$cls = "TimerImpl$periodic_closure";
    if (!("name" in TimerImpl$periodic_closure))
      TimerImpl$periodic_closure.name = "TimerImpl$periodic_closure";
    $desc = $collectedClasses$.TimerImpl$periodic_closure[1];
    TimerImpl$periodic_closure.prototype = $desc;
    TimerImpl$periodic_closure.$__fields__ = ["_captured_this_0", "_captured_callback_1"];
    function CapabilityImpl(__isolate_helper$_id) {
      this.__isolate_helper$_id = __isolate_helper$_id;
      this.$deferredAction();
    }
    CapabilityImpl.builtin$cls = "CapabilityImpl";
    if (!("name" in CapabilityImpl))
      CapabilityImpl.name = "CapabilityImpl";
    $desc = $collectedClasses$.CapabilityImpl[1];
    CapabilityImpl.prototype = $desc;
    CapabilityImpl.$__fields__ = ["__isolate_helper$_id"];
    CapabilityImpl.prototype.get$__isolate_helper$_id = function() {
      return this.__isolate_helper$_id;
    };
    function _Serializer(_serializeSendPorts, serializedObjectIds) {
      this._serializeSendPorts = _serializeSendPorts;
      this.serializedObjectIds = serializedObjectIds;
      this.$deferredAction();
    }
    _Serializer.builtin$cls = "_Serializer";
    if (!("name" in _Serializer))
      _Serializer.name = "_Serializer";
    $desc = $collectedClasses$._Serializer[1];
    _Serializer.prototype = $desc;
    _Serializer.$__fields__ = ["_serializeSendPorts", "serializedObjectIds"];
    function _Deserializer(_adjustSendPorts, deserializedObjects) {
      this._adjustSendPorts = _adjustSendPorts;
      this.deserializedObjects = deserializedObjects;
      this.$deferredAction();
    }
    _Deserializer.builtin$cls = "_Deserializer";
    if (!("name" in _Deserializer))
      _Deserializer.name = "_Deserializer";
    $desc = $collectedClasses$._Deserializer[1];
    _Deserializer.prototype = $desc;
    _Deserializer.$__fields__ = ["_adjustSendPorts", "deserializedObjects"];
    function ConstantMapView(_map) {
      this._map = _map;
      this.$deferredAction();
    }
    ConstantMapView.builtin$cls = "ConstantMapView";
    if (!("name" in ConstantMapView))
      ConstantMapView.name = "ConstantMapView";
    $desc = $collectedClasses$.ConstantMapView[1];
    ConstantMapView.prototype = $desc;
    ConstantMapView.$__fields__ = ["_map"];
    function ConstantMap() {
      this.$deferredAction();
    }
    ConstantMap.builtin$cls = "ConstantMap";
    if (!("name" in ConstantMap))
      ConstantMap.name = "ConstantMap";
    $desc = $collectedClasses$.ConstantMap[1];
    ConstantMap.prototype = $desc;
    ConstantMap.$__fields__ = [];
    function ConstantStringMap(length, __js_helper$_jsObject, _keys) {
      this.length = length;
      this.__js_helper$_jsObject = __js_helper$_jsObject;
      this._keys = _keys;
      this.$deferredAction();
    }
    ConstantStringMap.builtin$cls = "ConstantStringMap";
    if (!("name" in ConstantStringMap))
      ConstantStringMap.name = "ConstantStringMap";
    $desc = $collectedClasses$.ConstantStringMap[1];
    ConstantStringMap.prototype = $desc;
    ConstantStringMap.$__fields__ = ["length", "__js_helper$_jsObject", "_keys"];
    ConstantStringMap.prototype.get$length = function(receiver) {
      return this.length;
    };
    function _ConstantMapKeyIterable(__js_helper$_map) {
      this.__js_helper$_map = __js_helper$_map;
      this.$deferredAction();
    }
    _ConstantMapKeyIterable.builtin$cls = "_ConstantMapKeyIterable";
    if (!("name" in _ConstantMapKeyIterable))
      _ConstantMapKeyIterable.name = "_ConstantMapKeyIterable";
    $desc = $collectedClasses$._ConstantMapKeyIterable[1];
    _ConstantMapKeyIterable.prototype = $desc;
    _ConstantMapKeyIterable.$__fields__ = ["__js_helper$_map"];
    function JSInvocationMirror(__js_helper$_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _namedIndices) {
      this.__js_helper$_memberName = __js_helper$_memberName;
      this._internalName = _internalName;
      this._kind = _kind;
      this._arguments = _arguments;
      this._namedArgumentNames = _namedArgumentNames;
      this._namedIndices = _namedIndices;
      this.$deferredAction();
    }
    JSInvocationMirror.builtin$cls = "JSInvocationMirror";
    if (!("name" in JSInvocationMirror))
      JSInvocationMirror.name = "JSInvocationMirror";
    $desc = $collectedClasses$.JSInvocationMirror[1];
    JSInvocationMirror.prototype = $desc;
    JSInvocationMirror.$__fields__ = ["__js_helper$_memberName", "_internalName", "_kind", "_arguments", "_namedArgumentNames", "_namedIndices"];
    function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
      this.jsFunction = jsFunction;
      this.data = data;
      this.isAccessor = isAccessor;
      this.requiredParameterCount = requiredParameterCount;
      this.optionalParameterCount = optionalParameterCount;
      this.areOptionalParametersNamed = areOptionalParametersNamed;
      this.functionType = functionType;
      this.cachedSortedIndices = cachedSortedIndices;
      this.$deferredAction();
    }
    ReflectionInfo.builtin$cls = "ReflectionInfo";
    if (!("name" in ReflectionInfo))
      ReflectionInfo.name = "ReflectionInfo";
    $desc = $collectedClasses$.ReflectionInfo[1];
    ReflectionInfo.prototype = $desc;
    ReflectionInfo.$__fields__ = ["jsFunction", "data", "isAccessor", "requiredParameterCount", "optionalParameterCount", "areOptionalParametersNamed", "functionType", "cachedSortedIndices"];
    ReflectionInfo.prototype.get$data = function(receiver) {
      return this.data;
    };
    ReflectionInfo.prototype.get$requiredParameterCount = function() {
      return this.requiredParameterCount;
    };
    function Primitives_initTicker_closure(_captured_performance_0) {
      this._captured_performance_0 = _captured_performance_0;
      this.$deferredAction();
    }
    Primitives_initTicker_closure.builtin$cls = "Primitives_initTicker_closure";
    if (!("name" in Primitives_initTicker_closure))
      Primitives_initTicker_closure.name = "Primitives_initTicker_closure";
    $desc = $collectedClasses$.Primitives_initTicker_closure[1];
    Primitives_initTicker_closure.prototype = $desc;
    Primitives_initTicker_closure.$__fields__ = ["_captured_performance_0"];
    function Primitives_functionNoSuchMethod_closure(__js_helper$_box_0, _captured_arguments_1, _captured_namedArgumentList_2) {
      this.__js_helper$_box_0 = __js_helper$_box_0;
      this._captured_arguments_1 = _captured_arguments_1;
      this._captured_namedArgumentList_2 = _captured_namedArgumentList_2;
      this.$deferredAction();
    }
    Primitives_functionNoSuchMethod_closure.builtin$cls = "Primitives_functionNoSuchMethod_closure";
    if (!("name" in Primitives_functionNoSuchMethod_closure))
      Primitives_functionNoSuchMethod_closure.name = "Primitives_functionNoSuchMethod_closure";
    $desc = $collectedClasses$.Primitives_functionNoSuchMethod_closure[1];
    Primitives_functionNoSuchMethod_closure.prototype = $desc;
    Primitives_functionNoSuchMethod_closure.$__fields__ = ["__js_helper$_box_0", "_captured_arguments_1", "_captured_namedArgumentList_2"];
    function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
      this._pattern = _pattern;
      this._arguments = _arguments;
      this._argumentsExpr = _argumentsExpr;
      this._expr = _expr;
      this._method = _method;
      this._receiver = _receiver;
      this.$deferredAction();
    }
    TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
    if (!("name" in TypeErrorDecoder))
      TypeErrorDecoder.name = "TypeErrorDecoder";
    $desc = $collectedClasses$.TypeErrorDecoder[1];
    TypeErrorDecoder.prototype = $desc;
    TypeErrorDecoder.$__fields__ = ["_pattern", "_arguments", "_argumentsExpr", "_expr", "_method", "_receiver"];
    function NullError(_message, _method) {
      this._message = _message;
      this._method = _method;
      this.$deferredAction();
    }
    NullError.builtin$cls = "NullError";
    if (!("name" in NullError))
      NullError.name = "NullError";
    $desc = $collectedClasses$.NullError[1];
    NullError.prototype = $desc;
    NullError.$__fields__ = ["_message", "_method"];
    function JsNoSuchMethodError(_message, _method, _receiver) {
      this._message = _message;
      this._method = _method;
      this._receiver = _receiver;
      this.$deferredAction();
    }
    JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
    if (!("name" in JsNoSuchMethodError))
      JsNoSuchMethodError.name = "JsNoSuchMethodError";
    $desc = $collectedClasses$.JsNoSuchMethodError[1];
    JsNoSuchMethodError.prototype = $desc;
    JsNoSuchMethodError.$__fields__ = ["_message", "_method", "_receiver"];
    function UnknownJsTypeError(_message) {
      this._message = _message;
      this.$deferredAction();
    }
    UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
    if (!("name" in UnknownJsTypeError))
      UnknownJsTypeError.name = "UnknownJsTypeError";
    $desc = $collectedClasses$.UnknownJsTypeError[1];
    UnknownJsTypeError.prototype = $desc;
    UnknownJsTypeError.$__fields__ = ["_message"];
    function unwrapException_saveStackTrace(_captured_ex_0) {
      this._captured_ex_0 = _captured_ex_0;
      this.$deferredAction();
    }
    unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
    if (!("name" in unwrapException_saveStackTrace))
      unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
    $desc = $collectedClasses$.unwrapException_saveStackTrace[1];
    unwrapException_saveStackTrace.prototype = $desc;
    unwrapException_saveStackTrace.$__fields__ = ["_captured_ex_0"];
    function _StackTrace(_exception, _trace) {
      this._exception = _exception;
      this._trace = _trace;
      this.$deferredAction();
    }
    _StackTrace.builtin$cls = "_StackTrace";
    if (!("name" in _StackTrace))
      _StackTrace.name = "_StackTrace";
    $desc = $collectedClasses$._StackTrace[1];
    _StackTrace.prototype = $desc;
    _StackTrace.$__fields__ = ["_exception", "_trace"];
    function invokeClosure_closure(_captured_closure_0) {
      this._captured_closure_0 = _captured_closure_0;
      this.$deferredAction();
    }
    invokeClosure_closure.builtin$cls = "invokeClosure_closure";
    if (!("name" in invokeClosure_closure))
      invokeClosure_closure.name = "invokeClosure_closure";
    $desc = $collectedClasses$.invokeClosure_closure[1];
    invokeClosure_closure.prototype = $desc;
    invokeClosure_closure.$__fields__ = ["_captured_closure_0"];
    function invokeClosure_closure0(_captured_closure_1, _captured_arg1_2) {
      this._captured_closure_1 = _captured_closure_1;
      this._captured_arg1_2 = _captured_arg1_2;
      this.$deferredAction();
    }
    invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
    if (!("name" in invokeClosure_closure0))
      invokeClosure_closure0.name = "invokeClosure_closure0";
    $desc = $collectedClasses$.invokeClosure_closure0[1];
    invokeClosure_closure0.prototype = $desc;
    invokeClosure_closure0.$__fields__ = ["_captured_closure_1", "_captured_arg1_2"];
    function invokeClosure_closure1(_captured_closure_3, _captured_arg1_4, _captured_arg2_5) {
      this._captured_closure_3 = _captured_closure_3;
      this._captured_arg1_4 = _captured_arg1_4;
      this._captured_arg2_5 = _captured_arg2_5;
      this.$deferredAction();
    }
    invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
    if (!("name" in invokeClosure_closure1))
      invokeClosure_closure1.name = "invokeClosure_closure1";
    $desc = $collectedClasses$.invokeClosure_closure1[1];
    invokeClosure_closure1.prototype = $desc;
    invokeClosure_closure1.$__fields__ = ["_captured_closure_3", "_captured_arg1_4", "_captured_arg2_5"];
    function invokeClosure_closure2(_captured_closure_6, _captured_arg1_7, _captured_arg2_8, _captured_arg3_9) {
      this._captured_closure_6 = _captured_closure_6;
      this._captured_arg1_7 = _captured_arg1_7;
      this._captured_arg2_8 = _captured_arg2_8;
      this._captured_arg3_9 = _captured_arg3_9;
      this.$deferredAction();
    }
    invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
    if (!("name" in invokeClosure_closure2))
      invokeClosure_closure2.name = "invokeClosure_closure2";
    $desc = $collectedClasses$.invokeClosure_closure2[1];
    invokeClosure_closure2.prototype = $desc;
    invokeClosure_closure2.$__fields__ = ["_captured_closure_6", "_captured_arg1_7", "_captured_arg2_8", "_captured_arg3_9"];
    function invokeClosure_closure3(_captured_closure_10, _captured_arg1_11, _captured_arg2_12, _captured_arg3_13, _captured_arg4_14) {
      this._captured_closure_10 = _captured_closure_10;
      this._captured_arg1_11 = _captured_arg1_11;
      this._captured_arg2_12 = _captured_arg2_12;
      this._captured_arg3_13 = _captured_arg3_13;
      this._captured_arg4_14 = _captured_arg4_14;
      this.$deferredAction();
    }
    invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
    if (!("name" in invokeClosure_closure3))
      invokeClosure_closure3.name = "invokeClosure_closure3";
    $desc = $collectedClasses$.invokeClosure_closure3[1];
    invokeClosure_closure3.prototype = $desc;
    invokeClosure_closure3.$__fields__ = ["_captured_closure_10", "_captured_arg1_11", "_captured_arg2_12", "_captured_arg3_13", "_captured_arg4_14"];
    function Closure() {
      this.$deferredAction();
    }
    Closure.builtin$cls = "Closure";
    if (!("name" in Closure))
      Closure.name = "Closure";
    $desc = $collectedClasses$.Closure[1];
    Closure.prototype = $desc;
    Closure.$__fields__ = [];
    function TearOffClosure() {
      this.$deferredAction();
    }
    TearOffClosure.builtin$cls = "TearOffClosure";
    if (!("name" in TearOffClosure))
      TearOffClosure.name = "TearOffClosure";
    $desc = $collectedClasses$.TearOffClosure[1];
    TearOffClosure.prototype = $desc;
    TearOffClosure.$__fields__ = [];
    function StaticClosure() {
      this.$deferredAction();
    }
    StaticClosure.builtin$cls = "StaticClosure";
    if (!("name" in StaticClosure))
      StaticClosure.name = "StaticClosure";
    $desc = $collectedClasses$.StaticClosure[1];
    StaticClosure.prototype = $desc;
    StaticClosure.$__fields__ = [];
    function BoundClosure(_self, _target, _receiver, _name) {
      this._self = _self;
      this._target = _target;
      this._receiver = _receiver;
      this._name = _name;
      this.$deferredAction();
    }
    BoundClosure.builtin$cls = "BoundClosure";
    if (!("name" in BoundClosure))
      BoundClosure.name = "BoundClosure";
    $desc = $collectedClasses$.BoundClosure[1];
    BoundClosure.prototype = $desc;
    BoundClosure.$__fields__ = ["_self", "_target", "_receiver", "_name"];
    function CastErrorImplementation(message) {
      this.message = message;
      this.$deferredAction();
    }
    CastErrorImplementation.builtin$cls = "CastErrorImplementation";
    if (!("name" in CastErrorImplementation))
      CastErrorImplementation.name = "CastErrorImplementation";
    $desc = $collectedClasses$.CastErrorImplementation[1];
    CastErrorImplementation.prototype = $desc;
    CastErrorImplementation.$__fields__ = ["message"];
    CastErrorImplementation.prototype.get$message = function(receiver) {
      return this.message;
    };
    function RuntimeError(message) {
      this.message = message;
      this.$deferredAction();
    }
    RuntimeError.builtin$cls = "RuntimeError";
    if (!("name" in RuntimeError))
      RuntimeError.name = "RuntimeError";
    $desc = $collectedClasses$.RuntimeError[1];
    RuntimeError.prototype = $desc;
    RuntimeError.$__fields__ = ["message"];
    RuntimeError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function RuntimeType() {
      this.$deferredAction();
    }
    RuntimeType.builtin$cls = "RuntimeType";
    if (!("name" in RuntimeType))
      RuntimeType.name = "RuntimeType";
    $desc = $collectedClasses$.RuntimeType[1];
    RuntimeType.prototype = $desc;
    RuntimeType.$__fields__ = [];
    function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
      this.returnType = returnType;
      this.parameterTypes = parameterTypes;
      this.optionalParameterTypes = optionalParameterTypes;
      this.namedParameters = namedParameters;
      this.$deferredAction();
    }
    RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
    if (!("name" in RuntimeFunctionType))
      RuntimeFunctionType.name = "RuntimeFunctionType";
    $desc = $collectedClasses$.RuntimeFunctionType[1];
    RuntimeFunctionType.prototype = $desc;
    RuntimeFunctionType.$__fields__ = ["returnType", "parameterTypes", "optionalParameterTypes", "namedParameters"];
    RuntimeFunctionType.prototype.get$returnType = function() {
      return this.returnType;
    };
    function DynamicRuntimeType() {
      this.$deferredAction();
    }
    DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
    if (!("name" in DynamicRuntimeType))
      DynamicRuntimeType.name = "DynamicRuntimeType";
    $desc = $collectedClasses$.DynamicRuntimeType[1];
    DynamicRuntimeType.prototype = $desc;
    DynamicRuntimeType.$__fields__ = [];
    function ExceptionAndStackTrace(dartException, stackTrace) {
      this.dartException = dartException;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    ExceptionAndStackTrace.builtin$cls = "ExceptionAndStackTrace";
    if (!("name" in ExceptionAndStackTrace))
      ExceptionAndStackTrace.name = "ExceptionAndStackTrace";
    $desc = $collectedClasses$.ExceptionAndStackTrace[1];
    ExceptionAndStackTrace.prototype = $desc;
    ExceptionAndStackTrace.$__fields__ = ["dartException", "stackTrace"];
    ExceptionAndStackTrace.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function asyncHelper_closure(_captured_bodyFunctionOrErrorCode_0) {
      this._captured_bodyFunctionOrErrorCode_0 = _captured_bodyFunctionOrErrorCode_0;
      this.$deferredAction();
    }
    asyncHelper_closure.builtin$cls = "asyncHelper_closure";
    if (!("name" in asyncHelper_closure))
      asyncHelper_closure.name = "asyncHelper_closure";
    $desc = $collectedClasses$.asyncHelper_closure[1];
    asyncHelper_closure.prototype = $desc;
    asyncHelper_closure.$__fields__ = ["_captured_bodyFunctionOrErrorCode_0"];
    function _wrapJsFunctionForAsync_closure(_captured_errorCode_0, _captured_protected_1) {
      this._captured_errorCode_0 = _captured_errorCode_0;
      this._captured_protected_1 = _captured_protected_1;
      this.$deferredAction();
    }
    _wrapJsFunctionForAsync_closure.builtin$cls = "_wrapJsFunctionForAsync_closure";
    if (!("name" in _wrapJsFunctionForAsync_closure))
      _wrapJsFunctionForAsync_closure.name = "_wrapJsFunctionForAsync_closure";
    $desc = $collectedClasses$._wrapJsFunctionForAsync_closure[1];
    _wrapJsFunctionForAsync_closure.prototype = $desc;
    _wrapJsFunctionForAsync_closure.$__fields__ = ["_captured_errorCode_0", "_captured_protected_1"];
    function TypeImpl(_typeName, _unmangledName) {
      this._typeName = _typeName;
      this._unmangledName = _unmangledName;
      this.$deferredAction();
    }
    TypeImpl.builtin$cls = "TypeImpl";
    if (!("name" in TypeImpl))
      TypeImpl.name = "TypeImpl";
    $desc = $collectedClasses$.TypeImpl[1];
    TypeImpl.prototype = $desc;
    TypeImpl.$__fields__ = ["_typeName", "_unmangledName"];
    function JsLinkedHashMap(__js_helper$_length, _strings, _nums, _rest, _first, _last, _modifications) {
      this.__js_helper$_length = __js_helper$_length;
      this._strings = _strings;
      this._nums = _nums;
      this._rest = _rest;
      this._first = _first;
      this._last = _last;
      this._modifications = _modifications;
      this.$deferredAction();
    }
    JsLinkedHashMap.builtin$cls = "JsLinkedHashMap";
    if (!("name" in JsLinkedHashMap))
      JsLinkedHashMap.name = "JsLinkedHashMap";
    $desc = $collectedClasses$.JsLinkedHashMap[1];
    JsLinkedHashMap.prototype = $desc;
    JsLinkedHashMap.$__fields__ = ["__js_helper$_length", "_strings", "_nums", "_rest", "_first", "_last", "_modifications"];
    function JsLinkedHashMap_values_closure(__js_helper$_captured_this_0) {
      this.__js_helper$_captured_this_0 = __js_helper$_captured_this_0;
      this.$deferredAction();
    }
    JsLinkedHashMap_values_closure.builtin$cls = "JsLinkedHashMap_values_closure";
    if (!("name" in JsLinkedHashMap_values_closure))
      JsLinkedHashMap_values_closure.name = "JsLinkedHashMap_values_closure";
    $desc = $collectedClasses$.JsLinkedHashMap_values_closure[1];
    JsLinkedHashMap_values_closure.prototype = $desc;
    JsLinkedHashMap_values_closure.$__fields__ = ["__js_helper$_captured_this_0"];
    function LinkedHashMapCell(hashMapCellKey, hashMapCellValue, _next, _previous) {
      this.hashMapCellKey = hashMapCellKey;
      this.hashMapCellValue = hashMapCellValue;
      this._next = _next;
      this._previous = _previous;
      this.$deferredAction();
    }
    LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
    if (!("name" in LinkedHashMapCell))
      LinkedHashMapCell.name = "LinkedHashMapCell";
    $desc = $collectedClasses$.LinkedHashMapCell[1];
    LinkedHashMapCell.prototype = $desc;
    LinkedHashMapCell.$__fields__ = ["hashMapCellKey", "hashMapCellValue", "_next", "_previous"];
    LinkedHashMapCell.prototype.get$hashMapCellKey = function() {
      return this.hashMapCellKey;
    };
    LinkedHashMapCell.prototype.get$hashMapCellValue = function() {
      return this.hashMapCellValue;
    };
    LinkedHashMapCell.prototype.set$hashMapCellValue = function(v) {
      return this.hashMapCellValue = v;
    };
    LinkedHashMapCell.prototype.get$_next = function() {
      return this._next;
    };
    LinkedHashMapCell.prototype.get$_previous = function() {
      return this._previous;
    };
    function LinkedHashMapKeyIterable(__js_helper$_map) {
      this.__js_helper$_map = __js_helper$_map;
      this.$deferredAction();
    }
    LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
    if (!("name" in LinkedHashMapKeyIterable))
      LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
    $desc = $collectedClasses$.LinkedHashMapKeyIterable[1];
    LinkedHashMapKeyIterable.prototype = $desc;
    LinkedHashMapKeyIterable.$__fields__ = ["__js_helper$_map"];
    function LinkedHashMapKeyIterator(__js_helper$_map, _modifications, _cell, __js_helper$_current) {
      this.__js_helper$_map = __js_helper$_map;
      this._modifications = _modifications;
      this._cell = _cell;
      this.__js_helper$_current = __js_helper$_current;
      this.$deferredAction();
    }
    LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
    if (!("name" in LinkedHashMapKeyIterator))
      LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
    $desc = $collectedClasses$.LinkedHashMapKeyIterator[1];
    LinkedHashMapKeyIterator.prototype = $desc;
    LinkedHashMapKeyIterator.$__fields__ = ["__js_helper$_map", "_modifications", "_cell", "__js_helper$_current"];
    function initHooks_closure(_captured_getTag_0) {
      this._captured_getTag_0 = _captured_getTag_0;
      this.$deferredAction();
    }
    initHooks_closure.builtin$cls = "initHooks_closure";
    if (!("name" in initHooks_closure))
      initHooks_closure.name = "initHooks_closure";
    $desc = $collectedClasses$.initHooks_closure[1];
    initHooks_closure.prototype = $desc;
    initHooks_closure.$__fields__ = ["_captured_getTag_0"];
    function initHooks_closure0(_captured_getUnknownTag_1) {
      this._captured_getUnknownTag_1 = _captured_getUnknownTag_1;
      this.$deferredAction();
    }
    initHooks_closure0.builtin$cls = "initHooks_closure0";
    if (!("name" in initHooks_closure0))
      initHooks_closure0.name = "initHooks_closure0";
    $desc = $collectedClasses$.initHooks_closure0[1];
    initHooks_closure0.prototype = $desc;
    initHooks_closure0.$__fields__ = ["_captured_getUnknownTag_1"];
    function initHooks_closure1(_captured_prototypeForTag_2) {
      this._captured_prototypeForTag_2 = _captured_prototypeForTag_2;
      this.$deferredAction();
    }
    initHooks_closure1.builtin$cls = "initHooks_closure1";
    if (!("name" in initHooks_closure1))
      initHooks_closure1.name = "initHooks_closure1";
    $desc = $collectedClasses$.initHooks_closure1[1];
    initHooks_closure1.prototype = $desc;
    initHooks_closure1.$__fields__ = ["_captured_prototypeForTag_2"];
    function JSSyntaxRegExp(pattern, _nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
      this.pattern = pattern;
      this._nativeRegExp = _nativeRegExp;
      this._nativeGlobalRegExp = _nativeGlobalRegExp;
      this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
      this.$deferredAction();
    }
    JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
    if (!("name" in JSSyntaxRegExp))
      JSSyntaxRegExp.name = "JSSyntaxRegExp";
    $desc = $collectedClasses$.JSSyntaxRegExp[1];
    JSSyntaxRegExp.prototype = $desc;
    JSSyntaxRegExp.$__fields__ = ["pattern", "_nativeRegExp", "_nativeGlobalRegExp", "_nativeAnchoredRegExp"];
    function _MatchImplementation(pattern, _match) {
      this.pattern = pattern;
      this._match = _match;
      this.$deferredAction();
    }
    _MatchImplementation.builtin$cls = "_MatchImplementation";
    if (!("name" in _MatchImplementation))
      _MatchImplementation.name = "_MatchImplementation";
    $desc = $collectedClasses$._MatchImplementation[1];
    _MatchImplementation.prototype = $desc;
    _MatchImplementation.$__fields__ = ["pattern", "_match"];
    _MatchImplementation.prototype.get$_match = function() {
      return this._match;
    };
    function _AllMatchesIterable(_re, _string, __js_helper$_start) {
      this._re = _re;
      this._string = _string;
      this.__js_helper$_start = __js_helper$_start;
      this.$deferredAction();
    }
    _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
    if (!("name" in _AllMatchesIterable))
      _AllMatchesIterable.name = "_AllMatchesIterable";
    $desc = $collectedClasses$._AllMatchesIterable[1];
    _AllMatchesIterable.prototype = $desc;
    _AllMatchesIterable.$__fields__ = ["_re", "_string", "__js_helper$_start"];
    function _AllMatchesIterator(_regExp, _string, _nextIndex, __js_helper$_current) {
      this._regExp = _regExp;
      this._string = _string;
      this._nextIndex = _nextIndex;
      this.__js_helper$_current = __js_helper$_current;
      this.$deferredAction();
    }
    _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
    if (!("name" in _AllMatchesIterator))
      _AllMatchesIterator.name = "_AllMatchesIterator";
    $desc = $collectedClasses$._AllMatchesIterator[1];
    _AllMatchesIterator.prototype = $desc;
    _AllMatchesIterator.$__fields__ = ["_regExp", "_string", "_nextIndex", "__js_helper$_current"];
    function StringMatch(start, input, pattern) {
      this.start = start;
      this.input = input;
      this.pattern = pattern;
      this.$deferredAction();
    }
    StringMatch.builtin$cls = "StringMatch";
    if (!("name" in StringMatch))
      StringMatch.name = "StringMatch";
    $desc = $collectedClasses$.StringMatch[1];
    StringMatch.prototype = $desc;
    StringMatch.$__fields__ = ["start", "input", "pattern"];
    function ErrorRepository(knownErrors, subs, _errors$_controller, _errorStream, _flushStream) {
      this.knownErrors = knownErrors;
      this.subs = subs;
      this._errors$_controller = _errors$_controller;
      this._errorStream = _errorStream;
      this._flushStream = _flushStream;
      this.$deferredAction();
    }
    ErrorRepository.builtin$cls = "ErrorRepository";
    if (!("name" in ErrorRepository))
      ErrorRepository.name = "ErrorRepository";
    $desc = $collectedClasses$.ErrorRepository[1];
    ErrorRepository.prototype = $desc;
    ErrorRepository.$__fields__ = ["knownErrors", "subs", "_errors$_controller", "_errorStream", "_flushStream"];
    ErrorRepository.prototype.get$knownErrors = function() {
      return this.knownErrors;
    };
    function Server() {
      this.$deferredAction();
    }
    Server.builtin$cls = "Server";
    if (!("name" in Server))
      Server.name = "Server";
    $desc = $collectedClasses$.Server[1];
    Server.prototype = $desc;
    Server.$__fields__ = [];
    function Domain(server, name) {
      this.server = server;
      this.name = name;
      this.$deferredAction();
    }
    Domain.builtin$cls = "Domain";
    if (!("name" in Domain))
      Domain.name = "Domain";
    $desc = $collectedClasses$.Domain[1];
    Domain.prototype = $desc;
    Domain.$__fields__ = ["server", "name"];
    Domain.prototype.get$server = function() {
      return this.server;
    };
    Domain.prototype.get$name = function(receiver) {
      return this.name;
    };
    function ServerDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    ServerDomain.builtin$cls = "ServerDomain";
    if (!("name" in ServerDomain))
      ServerDomain.name = "ServerDomain";
    $desc = $collectedClasses$.ServerDomain[1];
    ServerDomain.prototype = $desc;
    ServerDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function ServerStatus(analysis, pub) {
      this.analysis = analysis;
      this.pub = pub;
      this.$deferredAction();
    }
    ServerStatus.builtin$cls = "ServerStatus";
    if (!("name" in ServerStatus))
      ServerStatus.name = "ServerStatus";
    $desc = $collectedClasses$.ServerStatus[1];
    ServerStatus.prototype = $desc;
    ServerStatus.$__fields__ = ["analysis", "pub"];
    ServerStatus.prototype.get$analysis = function() {
      return this.analysis;
    };
    function VersionResult(version) {
      this.version = version;
      this.$deferredAction();
    }
    VersionResult.builtin$cls = "VersionResult";
    if (!("name" in VersionResult))
      VersionResult.name = "VersionResult";
    $desc = $collectedClasses$.VersionResult[1];
    VersionResult.prototype = $desc;
    VersionResult.$__fields__ = ["version"];
    VersionResult.prototype.get$version = function(receiver) {
      return this.version;
    };
    function AnalysisDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    AnalysisDomain.builtin$cls = "AnalysisDomain";
    if (!("name" in AnalysisDomain))
      AnalysisDomain.name = "AnalysisDomain";
    $desc = $collectedClasses$.AnalysisDomain[1];
    AnalysisDomain.prototype = $desc;
    AnalysisDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function AnalysisErrors(file, errors) {
      this.file = file;
      this.errors = errors;
      this.$deferredAction();
    }
    AnalysisErrors.builtin$cls = "AnalysisErrors";
    if (!("name" in AnalysisErrors))
      AnalysisErrors.name = "AnalysisErrors";
    $desc = $collectedClasses$.AnalysisErrors[1];
    AnalysisErrors.prototype = $desc;
    AnalysisErrors.$__fields__ = ["file", "errors"];
    AnalysisErrors.prototype.get$file = function() {
      return this.file;
    };
    AnalysisErrors.prototype.get$errors = function() {
      return this.errors;
    };
    function AnalysisErrors_parse_closure() {
      this.$deferredAction();
    }
    AnalysisErrors_parse_closure.builtin$cls = "AnalysisErrors_parse_closure";
    if (!("name" in AnalysisErrors_parse_closure))
      AnalysisErrors_parse_closure.name = "AnalysisErrors_parse_closure";
    $desc = $collectedClasses$.AnalysisErrors_parse_closure[1];
    AnalysisErrors_parse_closure.prototype = $desc;
    AnalysisErrors_parse_closure.$__fields__ = [];
    function AnalysisFlushResults(files) {
      this.files = files;
      this.$deferredAction();
    }
    AnalysisFlushResults.builtin$cls = "AnalysisFlushResults";
    if (!("name" in AnalysisFlushResults))
      AnalysisFlushResults.name = "AnalysisFlushResults";
    $desc = $collectedClasses$.AnalysisFlushResults[1];
    AnalysisFlushResults.prototype = $desc;
    AnalysisFlushResults.$__fields__ = ["files"];
    AnalysisFlushResults.prototype.get$files = function(receiver) {
      return this.files;
    };
    function AnalysisNavigation(file, regions, targets, files) {
      this.file = file;
      this.regions = regions;
      this.targets = targets;
      this.files = files;
      this.$deferredAction();
    }
    AnalysisNavigation.builtin$cls = "AnalysisNavigation";
    if (!("name" in AnalysisNavigation))
      AnalysisNavigation.name = "AnalysisNavigation";
    $desc = $collectedClasses$.AnalysisNavigation[1];
    AnalysisNavigation.prototype = $desc;
    AnalysisNavigation.$__fields__ = ["file", "regions", "targets", "files"];
    AnalysisNavigation.prototype.get$file = function() {
      return this.file;
    };
    AnalysisNavigation.prototype.get$regions = function() {
      return this.regions;
    };
    AnalysisNavigation.prototype.get$targets = function() {
      return this.targets;
    };
    AnalysisNavigation.prototype.get$files = function(receiver) {
      return this.files;
    };
    function AnalysisNavigation_parse_closure() {
      this.$deferredAction();
    }
    AnalysisNavigation_parse_closure.builtin$cls = "AnalysisNavigation_parse_closure";
    if (!("name" in AnalysisNavigation_parse_closure))
      AnalysisNavigation_parse_closure.name = "AnalysisNavigation_parse_closure";
    $desc = $collectedClasses$.AnalysisNavigation_parse_closure[1];
    AnalysisNavigation_parse_closure.prototype = $desc;
    AnalysisNavigation_parse_closure.$__fields__ = [];
    function AnalysisNavigation_parse_closure0() {
      this.$deferredAction();
    }
    AnalysisNavigation_parse_closure0.builtin$cls = "AnalysisNavigation_parse_closure0";
    if (!("name" in AnalysisNavigation_parse_closure0))
      AnalysisNavigation_parse_closure0.name = "AnalysisNavigation_parse_closure0";
    $desc = $collectedClasses$.AnalysisNavigation_parse_closure0[1];
    AnalysisNavigation_parse_closure0.prototype = $desc;
    AnalysisNavigation_parse_closure0.$__fields__ = [];
    function HoverResult(hovers) {
      this.hovers = hovers;
      this.$deferredAction();
    }
    HoverResult.builtin$cls = "HoverResult";
    if (!("name" in HoverResult))
      HoverResult.name = "HoverResult";
    $desc = $collectedClasses$.HoverResult[1];
    HoverResult.prototype = $desc;
    HoverResult.$__fields__ = ["hovers"];
    HoverResult.prototype.get$hovers = function() {
      return this.hovers;
    };
    function HoverResult_parse_closure() {
      this.$deferredAction();
    }
    HoverResult_parse_closure.builtin$cls = "HoverResult_parse_closure";
    if (!("name" in HoverResult_parse_closure))
      HoverResult_parse_closure.name = "HoverResult_parse_closure";
    $desc = $collectedClasses$.HoverResult_parse_closure[1];
    HoverResult_parse_closure.prototype = $desc;
    HoverResult_parse_closure.$__fields__ = [];
    function CompletionDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    CompletionDomain.builtin$cls = "CompletionDomain";
    if (!("name" in CompletionDomain))
      CompletionDomain.name = "CompletionDomain";
    $desc = $collectedClasses$.CompletionDomain[1];
    CompletionDomain.prototype = $desc;
    CompletionDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function CompletionResults(id, replacementOffset, replacementLength, results, isLast) {
      this.id = id;
      this.replacementOffset = replacementOffset;
      this.replacementLength = replacementLength;
      this.results = results;
      this.isLast = isLast;
      this.$deferredAction();
    }
    CompletionResults.builtin$cls = "CompletionResults";
    if (!("name" in CompletionResults))
      CompletionResults.name = "CompletionResults";
    $desc = $collectedClasses$.CompletionResults[1];
    CompletionResults.prototype = $desc;
    CompletionResults.$__fields__ = ["id", "replacementOffset", "replacementLength", "results", "isLast"];
    CompletionResults.prototype.get$id = function(receiver) {
      return this.id;
    };
    CompletionResults.prototype.get$replacementOffset = function() {
      return this.replacementOffset;
    };
    CompletionResults.prototype.get$results = function(receiver) {
      return this.results;
    };
    CompletionResults.prototype.get$isLast = function() {
      return this.isLast;
    };
    function CompletionResults_parse_closure() {
      this.$deferredAction();
    }
    CompletionResults_parse_closure.builtin$cls = "CompletionResults_parse_closure";
    if (!("name" in CompletionResults_parse_closure))
      CompletionResults_parse_closure.name = "CompletionResults_parse_closure";
    $desc = $collectedClasses$.CompletionResults_parse_closure[1];
    CompletionResults_parse_closure.prototype = $desc;
    CompletionResults_parse_closure.$__fields__ = [];
    function SuggestionsResult(id) {
      this.id = id;
      this.$deferredAction();
    }
    SuggestionsResult.builtin$cls = "SuggestionsResult";
    if (!("name" in SuggestionsResult))
      SuggestionsResult.name = "SuggestionsResult";
    $desc = $collectedClasses$.SuggestionsResult[1];
    SuggestionsResult.prototype = $desc;
    SuggestionsResult.$__fields__ = ["id"];
    SuggestionsResult.prototype.get$id = function(receiver) {
      return this.id;
    };
    function SearchDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    SearchDomain.builtin$cls = "SearchDomain";
    if (!("name" in SearchDomain))
      SearchDomain.name = "SearchDomain";
    $desc = $collectedClasses$.SearchDomain[1];
    SearchDomain.prototype = $desc;
    SearchDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function SearchResults(id, results, isLast) {
      this.id = id;
      this.results = results;
      this.isLast = isLast;
      this.$deferredAction();
    }
    SearchResults.builtin$cls = "SearchResults";
    if (!("name" in SearchResults))
      SearchResults.name = "SearchResults";
    $desc = $collectedClasses$.SearchResults[1];
    SearchResults.prototype = $desc;
    SearchResults.$__fields__ = ["id", "results", "isLast"];
    SearchResults.prototype.get$id = function(receiver) {
      return this.id;
    };
    SearchResults.prototype.get$results = function(receiver) {
      return this.results;
    };
    SearchResults.prototype.get$isLast = function() {
      return this.isLast;
    };
    function SearchResults_parse_closure() {
      this.$deferredAction();
    }
    SearchResults_parse_closure.builtin$cls = "SearchResults_parse_closure";
    if (!("name" in SearchResults_parse_closure))
      SearchResults_parse_closure.name = "SearchResults_parse_closure";
    $desc = $collectedClasses$.SearchResults_parse_closure[1];
    SearchResults_parse_closure.prototype = $desc;
    SearchResults_parse_closure.$__fields__ = [];
    function FindElementReferencesResult(id, element) {
      this.id = id;
      this.element = element;
      this.$deferredAction();
    }
    FindElementReferencesResult.builtin$cls = "FindElementReferencesResult";
    if (!("name" in FindElementReferencesResult))
      FindElementReferencesResult.name = "FindElementReferencesResult";
    $desc = $collectedClasses$.FindElementReferencesResult[1];
    FindElementReferencesResult.prototype = $desc;
    FindElementReferencesResult.$__fields__ = ["id", "element"];
    FindElementReferencesResult.prototype.get$id = function(receiver) {
      return this.id;
    };
    FindElementReferencesResult.prototype.get$element = function() {
      return this.element;
    };
    function TypeHierarchyResult(hierarchyItems) {
      this.hierarchyItems = hierarchyItems;
      this.$deferredAction();
    }
    TypeHierarchyResult.builtin$cls = "TypeHierarchyResult";
    if (!("name" in TypeHierarchyResult))
      TypeHierarchyResult.name = "TypeHierarchyResult";
    $desc = $collectedClasses$.TypeHierarchyResult[1];
    TypeHierarchyResult.prototype = $desc;
    TypeHierarchyResult.$__fields__ = ["hierarchyItems"];
    TypeHierarchyResult.prototype.get$hierarchyItems = function() {
      return this.hierarchyItems;
    };
    function TypeHierarchyResult_parse_closure() {
      this.$deferredAction();
    }
    TypeHierarchyResult_parse_closure.builtin$cls = "TypeHierarchyResult_parse_closure";
    if (!("name" in TypeHierarchyResult_parse_closure))
      TypeHierarchyResult_parse_closure.name = "TypeHierarchyResult_parse_closure";
    $desc = $collectedClasses$.TypeHierarchyResult_parse_closure[1];
    TypeHierarchyResult_parse_closure.prototype = $desc;
    TypeHierarchyResult_parse_closure.$__fields__ = [];
    function EditDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    EditDomain.builtin$cls = "EditDomain";
    if (!("name" in EditDomain))
      EditDomain.name = "EditDomain";
    $desc = $collectedClasses$.EditDomain[1];
    EditDomain.prototype = $desc;
    EditDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function FormatResult(edits, selectionOffset, selectionLength) {
      this.edits = edits;
      this.selectionOffset = selectionOffset;
      this.selectionLength = selectionLength;
      this.$deferredAction();
    }
    FormatResult.builtin$cls = "FormatResult";
    if (!("name" in FormatResult))
      FormatResult.name = "FormatResult";
    $desc = $collectedClasses$.FormatResult[1];
    FormatResult.prototype = $desc;
    FormatResult.$__fields__ = ["edits", "selectionOffset", "selectionLength"];
    FormatResult.prototype.get$edits = function() {
      return this.edits;
    };
    FormatResult.prototype.get$selectionOffset = function() {
      return this.selectionOffset;
    };
    FormatResult.prototype.get$selectionLength = function() {
      return this.selectionLength;
    };
    function FormatResult_parse_closure() {
      this.$deferredAction();
    }
    FormatResult_parse_closure.builtin$cls = "FormatResult_parse_closure";
    if (!("name" in FormatResult_parse_closure))
      FormatResult_parse_closure.name = "FormatResult_parse_closure";
    $desc = $collectedClasses$.FormatResult_parse_closure[1];
    FormatResult_parse_closure.prototype = $desc;
    FormatResult_parse_closure.$__fields__ = [];
    function AvailableRefactoringsResult(kinds) {
      this.kinds = kinds;
      this.$deferredAction();
    }
    AvailableRefactoringsResult.builtin$cls = "AvailableRefactoringsResult";
    if (!("name" in AvailableRefactoringsResult))
      AvailableRefactoringsResult.name = "AvailableRefactoringsResult";
    $desc = $collectedClasses$.AvailableRefactoringsResult[1];
    AvailableRefactoringsResult.prototype = $desc;
    AvailableRefactoringsResult.$__fields__ = ["kinds"];
    AvailableRefactoringsResult.prototype.get$kinds = function() {
      return this.kinds;
    };
    function FixesResult(fixes) {
      this.fixes = fixes;
      this.$deferredAction();
    }
    FixesResult.builtin$cls = "FixesResult";
    if (!("name" in FixesResult))
      FixesResult.name = "FixesResult";
    $desc = $collectedClasses$.FixesResult[1];
    FixesResult.prototype = $desc;
    FixesResult.$__fields__ = ["fixes"];
    FixesResult.prototype.get$fixes = function() {
      return this.fixes;
    };
    function FixesResult_parse_closure() {
      this.$deferredAction();
    }
    FixesResult_parse_closure.builtin$cls = "FixesResult_parse_closure";
    if (!("name" in FixesResult_parse_closure))
      FixesResult_parse_closure.name = "FixesResult_parse_closure";
    $desc = $collectedClasses$.FixesResult_parse_closure[1];
    FixesResult_parse_closure.prototype = $desc;
    FixesResult_parse_closure.$__fields__ = [];
    function RefactoringResult(initialProblems, optionsProblems, finalProblems, feedback, change, potentialEdits) {
      this.initialProblems = initialProblems;
      this.optionsProblems = optionsProblems;
      this.finalProblems = finalProblems;
      this.feedback = feedback;
      this.change = change;
      this.potentialEdits = potentialEdits;
      this.$deferredAction();
    }
    RefactoringResult.builtin$cls = "RefactoringResult";
    if (!("name" in RefactoringResult))
      RefactoringResult.name = "RefactoringResult";
    $desc = $collectedClasses$.RefactoringResult[1];
    RefactoringResult.prototype = $desc;
    RefactoringResult.$__fields__ = ["initialProblems", "optionsProblems", "finalProblems", "feedback", "change", "potentialEdits"];
    RefactoringResult.prototype.get$initialProblems = function() {
      return this.initialProblems;
    };
    RefactoringResult.prototype.get$change = function() {
      return this.change;
    };
    function RefactoringResult_parse_closure() {
      this.$deferredAction();
    }
    RefactoringResult_parse_closure.builtin$cls = "RefactoringResult_parse_closure";
    if (!("name" in RefactoringResult_parse_closure))
      RefactoringResult_parse_closure.name = "RefactoringResult_parse_closure";
    $desc = $collectedClasses$.RefactoringResult_parse_closure[1];
    RefactoringResult_parse_closure.prototype = $desc;
    RefactoringResult_parse_closure.$__fields__ = [];
    function RefactoringResult_parse_closure0() {
      this.$deferredAction();
    }
    RefactoringResult_parse_closure0.builtin$cls = "RefactoringResult_parse_closure0";
    if (!("name" in RefactoringResult_parse_closure0))
      RefactoringResult_parse_closure0.name = "RefactoringResult_parse_closure0";
    $desc = $collectedClasses$.RefactoringResult_parse_closure0[1];
    RefactoringResult_parse_closure0.prototype = $desc;
    RefactoringResult_parse_closure0.$__fields__ = [];
    function RefactoringResult_parse_closure1() {
      this.$deferredAction();
    }
    RefactoringResult_parse_closure1.builtin$cls = "RefactoringResult_parse_closure1";
    if (!("name" in RefactoringResult_parse_closure1))
      RefactoringResult_parse_closure1.name = "RefactoringResult_parse_closure1";
    $desc = $collectedClasses$.RefactoringResult_parse_closure1[1];
    RefactoringResult_parse_closure1.prototype = $desc;
    RefactoringResult_parse_closure1.$__fields__ = [];
    function ExecutionDomain(server, name, _controllers, _streams) {
      this.server = server;
      this.name = name;
      this._controllers = _controllers;
      this._streams = _streams;
      this.$deferredAction();
    }
    ExecutionDomain.builtin$cls = "ExecutionDomain";
    if (!("name" in ExecutionDomain))
      ExecutionDomain.name = "ExecutionDomain";
    $desc = $collectedClasses$.ExecutionDomain[1];
    ExecutionDomain.prototype = $desc;
    ExecutionDomain.$__fields__ = ["server", "name", "_controllers", "_streams"];
    function AddContentOverlay(type, content) {
      this.type = type;
      this.content = content;
      this.$deferredAction();
    }
    AddContentOverlay.builtin$cls = "AddContentOverlay";
    if (!("name" in AddContentOverlay))
      AddContentOverlay.name = "AddContentOverlay";
    $desc = $collectedClasses$.AddContentOverlay[1];
    AddContentOverlay.prototype = $desc;
    AddContentOverlay.$__fields__ = ["type", "content"];
    AddContentOverlay.prototype.get$type = function(receiver) {
      return this.type;
    };
    function AnalysisError(severity, type, location, message, correction) {
      this.severity = severity;
      this.type = type;
      this.location = location;
      this.message = message;
      this.correction = correction;
      this.$deferredAction();
    }
    AnalysisError.builtin$cls = "AnalysisError";
    if (!("name" in AnalysisError))
      AnalysisError.name = "AnalysisError";
    $desc = $collectedClasses$.AnalysisError[1];
    AnalysisError.prototype = $desc;
    AnalysisError.$__fields__ = ["severity", "type", "location", "message", "correction"];
    AnalysisError.prototype.get$severity = function() {
      return this.severity;
    };
    AnalysisError.prototype.get$type = function(receiver) {
      return this.type;
    };
    AnalysisError.prototype.get$location = function(receiver) {
      return this.location;
    };
    AnalysisError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function AnalysisErrorFixes(error, fixes) {
      this.error = error;
      this.fixes = fixes;
      this.$deferredAction();
    }
    AnalysisErrorFixes.builtin$cls = "AnalysisErrorFixes";
    if (!("name" in AnalysisErrorFixes))
      AnalysisErrorFixes.name = "AnalysisErrorFixes";
    $desc = $collectedClasses$.AnalysisErrorFixes[1];
    AnalysisErrorFixes.prototype = $desc;
    AnalysisErrorFixes.$__fields__ = ["error", "fixes"];
    AnalysisErrorFixes.prototype.get$error = function(receiver) {
      return this.error;
    };
    AnalysisErrorFixes.prototype.get$fixes = function() {
      return this.fixes;
    };
    function AnalysisErrorFixes_parse_closure() {
      this.$deferredAction();
    }
    AnalysisErrorFixes_parse_closure.builtin$cls = "AnalysisErrorFixes_parse_closure";
    if (!("name" in AnalysisErrorFixes_parse_closure))
      AnalysisErrorFixes_parse_closure.name = "AnalysisErrorFixes_parse_closure";
    $desc = $collectedClasses$.AnalysisErrorFixes_parse_closure[1];
    AnalysisErrorFixes_parse_closure.prototype = $desc;
    AnalysisErrorFixes_parse_closure.$__fields__ = [];
    function AnalysisOptions(enableAsync, enableDeferredLoading, enableEnums, enableNullAwareOperators, generateDart2jsHints, generateHints, generateLints) {
      this.enableAsync = enableAsync;
      this.enableDeferredLoading = enableDeferredLoading;
      this.enableEnums = enableEnums;
      this.enableNullAwareOperators = enableNullAwareOperators;
      this.generateDart2jsHints = generateDart2jsHints;
      this.generateHints = generateHints;
      this.generateLints = generateLints;
      this.$deferredAction();
    }
    AnalysisOptions.builtin$cls = "AnalysisOptions";
    if (!("name" in AnalysisOptions))
      AnalysisOptions.name = "AnalysisOptions";
    $desc = $collectedClasses$.AnalysisOptions[1];
    AnalysisOptions.prototype = $desc;
    AnalysisOptions.$__fields__ = ["enableAsync", "enableDeferredLoading", "enableEnums", "enableNullAwareOperators", "generateDart2jsHints", "generateHints", "generateLints"];
    function AnalysisStatus(isAnalyzing, analysisTarget) {
      this.isAnalyzing = isAnalyzing;
      this.analysisTarget = analysisTarget;
      this.$deferredAction();
    }
    AnalysisStatus.builtin$cls = "AnalysisStatus";
    if (!("name" in AnalysisStatus))
      AnalysisStatus.name = "AnalysisStatus";
    $desc = $collectedClasses$.AnalysisStatus[1];
    AnalysisStatus.prototype = $desc;
    AnalysisStatus.$__fields__ = ["isAnalyzing", "analysisTarget"];
    AnalysisStatus.prototype.get$isAnalyzing = function() {
      return this.isAnalyzing;
    };
    function CompletionSuggestion(kind, relevance, completion, selectionOffset, selectionLength, isDeprecated, isPotential, docSummary, docComplete, declaringType, element, returnType, parameterNames, parameterTypes, requiredParameterCount, hasNamedParameters, parameterName, parameterType, importUri) {
      this.kind = kind;
      this.relevance = relevance;
      this.completion = completion;
      this.selectionOffset = selectionOffset;
      this.selectionLength = selectionLength;
      this.isDeprecated = isDeprecated;
      this.isPotential = isPotential;
      this.docSummary = docSummary;
      this.docComplete = docComplete;
      this.declaringType = declaringType;
      this.element = element;
      this.returnType = returnType;
      this.parameterNames = parameterNames;
      this.parameterTypes = parameterTypes;
      this.requiredParameterCount = requiredParameterCount;
      this.hasNamedParameters = hasNamedParameters;
      this.parameterName = parameterName;
      this.parameterType = parameterType;
      this.importUri = importUri;
      this.$deferredAction();
    }
    CompletionSuggestion.builtin$cls = "CompletionSuggestion";
    if (!("name" in CompletionSuggestion))
      CompletionSuggestion.name = "CompletionSuggestion";
    $desc = $collectedClasses$.CompletionSuggestion[1];
    CompletionSuggestion.prototype = $desc;
    CompletionSuggestion.$__fields__ = ["kind", "relevance", "completion", "selectionOffset", "selectionLength", "isDeprecated", "isPotential", "docSummary", "docComplete", "declaringType", "element", "returnType", "parameterNames", "parameterTypes", "requiredParameterCount", "hasNamedParameters", "parameterName", "parameterType", "importUri"];
    CompletionSuggestion.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    CompletionSuggestion.prototype.get$relevance = function() {
      return this.relevance;
    };
    CompletionSuggestion.prototype.get$completion = function() {
      return this.completion;
    };
    CompletionSuggestion.prototype.get$selectionOffset = function() {
      return this.selectionOffset;
    };
    CompletionSuggestion.prototype.get$selectionLength = function() {
      return this.selectionLength;
    };
    CompletionSuggestion.prototype.get$isDeprecated = function() {
      return this.isDeprecated;
    };
    CompletionSuggestion.prototype.get$isPotential = function() {
      return this.isPotential;
    };
    CompletionSuggestion.prototype.get$docSummary = function() {
      return this.docSummary;
    };
    CompletionSuggestion.prototype.get$element = function() {
      return this.element;
    };
    CompletionSuggestion.prototype.get$returnType = function() {
      return this.returnType;
    };
    CompletionSuggestion.prototype.get$parameterNames = function() {
      return this.parameterNames;
    };
    CompletionSuggestion.prototype.get$requiredParameterCount = function() {
      return this.requiredParameterCount;
    };
    CompletionSuggestion.prototype.get$parameterType = function() {
      return this.parameterType;
    };
    CompletionSuggestion.prototype.get$importUri = function() {
      return this.importUri;
    };
    function Element0(kind, name, flags, location, parameters, returnType, typeParameters) {
      this.kind = kind;
      this.name = name;
      this.flags = flags;
      this.location = location;
      this.parameters = parameters;
      this.returnType = returnType;
      this.typeParameters = typeParameters;
      this.$deferredAction();
    }
    Element0.builtin$cls = "Element0";
    if (!("name" in Element0))
      Element0.name = "Element0";
    $desc = $collectedClasses$.Element0[1];
    Element0.prototype = $desc;
    Element0.$__fields__ = ["kind", "name", "flags", "location", "parameters", "returnType", "typeParameters"];
    Element0.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    Element0.prototype.get$name = function(receiver) {
      return this.name;
    };
    Element0.prototype.get$location = function(receiver) {
      return this.location;
    };
    Element0.prototype.get$parameters = function() {
      return this.parameters;
    };
    Element0.prototype.get$returnType = function() {
      return this.returnType;
    };
    function HoverInformation(offset, length, containingLibraryPath, containingLibraryName, containingClassDescription, dartdoc, elementDescription, elementKind, parameter, propagatedType, staticType) {
      this.offset = offset;
      this.length = length;
      this.containingLibraryPath = containingLibraryPath;
      this.containingLibraryName = containingLibraryName;
      this.containingClassDescription = containingClassDescription;
      this.dartdoc = dartdoc;
      this.elementDescription = elementDescription;
      this.elementKind = elementKind;
      this.parameter = parameter;
      this.propagatedType = propagatedType;
      this.staticType = staticType;
      this.$deferredAction();
    }
    HoverInformation.builtin$cls = "HoverInformation";
    if (!("name" in HoverInformation))
      HoverInformation.name = "HoverInformation";
    $desc = $collectedClasses$.HoverInformation[1];
    HoverInformation.prototype = $desc;
    HoverInformation.$__fields__ = ["offset", "length", "containingLibraryPath", "containingLibraryName", "containingClassDescription", "dartdoc", "elementDescription", "elementKind", "parameter", "propagatedType", "staticType"];
    HoverInformation.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    HoverInformation.prototype.get$length = function(receiver) {
      return this.length;
    };
    HoverInformation.prototype.get$containingLibraryPath = function() {
      return this.containingLibraryPath;
    };
    HoverInformation.prototype.get$containingLibraryName = function() {
      return this.containingLibraryName;
    };
    HoverInformation.prototype.get$containingClassDescription = function() {
      return this.containingClassDescription;
    };
    HoverInformation.prototype.get$dartdoc = function() {
      return this.dartdoc;
    };
    HoverInformation.prototype.get$elementDescription = function() {
      return this.elementDescription;
    };
    HoverInformation.prototype.get$elementKind = function() {
      return this.elementKind;
    };
    HoverInformation.prototype.get$propagatedType = function() {
      return this.propagatedType;
    };
    HoverInformation.prototype.get$staticType = function() {
      return this.staticType;
    };
    function LinkedEditGroup(positions, length, suggestions) {
      this.positions = positions;
      this.length = length;
      this.suggestions = suggestions;
      this.$deferredAction();
    }
    LinkedEditGroup.builtin$cls = "LinkedEditGroup";
    if (!("name" in LinkedEditGroup))
      LinkedEditGroup.name = "LinkedEditGroup";
    $desc = $collectedClasses$.LinkedEditGroup[1];
    LinkedEditGroup.prototype = $desc;
    LinkedEditGroup.$__fields__ = ["positions", "length", "suggestions"];
    LinkedEditGroup.prototype.get$positions = function() {
      return this.positions;
    };
    LinkedEditGroup.prototype.get$length = function(receiver) {
      return this.length;
    };
    function LinkedEditGroup_parse_closure() {
      this.$deferredAction();
    }
    LinkedEditGroup_parse_closure.builtin$cls = "LinkedEditGroup_parse_closure";
    if (!("name" in LinkedEditGroup_parse_closure))
      LinkedEditGroup_parse_closure.name = "LinkedEditGroup_parse_closure";
    $desc = $collectedClasses$.LinkedEditGroup_parse_closure[1];
    LinkedEditGroup_parse_closure.prototype = $desc;
    LinkedEditGroup_parse_closure.$__fields__ = [];
    function LinkedEditGroup_parse_closure0() {
      this.$deferredAction();
    }
    LinkedEditGroup_parse_closure0.builtin$cls = "LinkedEditGroup_parse_closure0";
    if (!("name" in LinkedEditGroup_parse_closure0))
      LinkedEditGroup_parse_closure0.name = "LinkedEditGroup_parse_closure0";
    $desc = $collectedClasses$.LinkedEditGroup_parse_closure0[1];
    LinkedEditGroup_parse_closure0.prototype = $desc;
    LinkedEditGroup_parse_closure0.$__fields__ = [];
    function LinkedEditSuggestion(value, kind) {
      this.value = value;
      this.kind = kind;
      this.$deferredAction();
    }
    LinkedEditSuggestion.builtin$cls = "LinkedEditSuggestion";
    if (!("name" in LinkedEditSuggestion))
      LinkedEditSuggestion.name = "LinkedEditSuggestion";
    $desc = $collectedClasses$.LinkedEditSuggestion[1];
    LinkedEditSuggestion.prototype = $desc;
    LinkedEditSuggestion.$__fields__ = ["value", "kind"];
    LinkedEditSuggestion.prototype.get$value = function(receiver) {
      return this.value;
    };
    LinkedEditSuggestion.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    function Location(file, offset, length, startLine, startColumn) {
      this.file = file;
      this.offset = offset;
      this.length = length;
      this.startLine = startLine;
      this.startColumn = startColumn;
      this.$deferredAction();
    }
    Location.builtin$cls = "Location";
    if (!("name" in Location))
      Location.name = "Location";
    $desc = $collectedClasses$.Location[1];
    Location.prototype = $desc;
    Location.$__fields__ = ["file", "offset", "length", "startLine", "startColumn"];
    Location.prototype.get$file = function() {
      return this.file;
    };
    Location.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    Location.prototype.get$length = function(receiver) {
      return this.length;
    };
    Location.prototype.get$startLine = function() {
      return this.startLine;
    };
    Location.prototype.get$startColumn = function() {
      return this.startColumn;
    };
    function NavigationRegion(offset, length, targets) {
      this.offset = offset;
      this.length = length;
      this.targets = targets;
      this.$deferredAction();
    }
    NavigationRegion.builtin$cls = "NavigationRegion";
    if (!("name" in NavigationRegion))
      NavigationRegion.name = "NavigationRegion";
    $desc = $collectedClasses$.NavigationRegion[1];
    NavigationRegion.prototype = $desc;
    NavigationRegion.$__fields__ = ["offset", "length", "targets"];
    NavigationRegion.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    NavigationRegion.prototype.get$length = function(receiver) {
      return this.length;
    };
    NavigationRegion.prototype.get$targets = function() {
      return this.targets;
    };
    function NavigationTarget(kind, fileIndex, offset, length, startLine, startColumn) {
      this.kind = kind;
      this.fileIndex = fileIndex;
      this.offset = offset;
      this.length = length;
      this.startLine = startLine;
      this.startColumn = startColumn;
      this.$deferredAction();
    }
    NavigationTarget.builtin$cls = "NavigationTarget";
    if (!("name" in NavigationTarget))
      NavigationTarget.name = "NavigationTarget";
    $desc = $collectedClasses$.NavigationTarget[1];
    NavigationTarget.prototype = $desc;
    NavigationTarget.$__fields__ = ["kind", "fileIndex", "offset", "length", "startLine", "startColumn"];
    NavigationTarget.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    NavigationTarget.prototype.get$fileIndex = function() {
      return this.fileIndex;
    };
    NavigationTarget.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    NavigationTarget.prototype.get$length = function(receiver) {
      return this.length;
    };
    NavigationTarget.prototype.get$startLine = function() {
      return this.startLine;
    };
    NavigationTarget.prototype.get$startColumn = function() {
      return this.startColumn;
    };
    function Position(file, offset) {
      this.file = file;
      this.offset = offset;
      this.$deferredAction();
    }
    Position.builtin$cls = "Position";
    if (!("name" in Position))
      Position.name = "Position";
    $desc = $collectedClasses$.Position[1];
    Position.prototype = $desc;
    Position.$__fields__ = ["file", "offset"];
    Position.prototype.get$file = function() {
      return this.file;
    };
    Position.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    function PubStatus(isListingPackageDirs) {
      this.isListingPackageDirs = isListingPackageDirs;
      this.$deferredAction();
    }
    PubStatus.builtin$cls = "PubStatus";
    if (!("name" in PubStatus))
      PubStatus.name = "PubStatus";
    $desc = $collectedClasses$.PubStatus[1];
    PubStatus.prototype = $desc;
    PubStatus.$__fields__ = ["isListingPackageDirs"];
    function RefactoringFeedback() {
      this.$deferredAction();
    }
    RefactoringFeedback.builtin$cls = "RefactoringFeedback";
    if (!("name" in RefactoringFeedback))
      RefactoringFeedback.name = "RefactoringFeedback";
    $desc = $collectedClasses$.RefactoringFeedback[1];
    RefactoringFeedback.prototype = $desc;
    RefactoringFeedback.$__fields__ = [];
    function RefactoringOptions() {
      this.$deferredAction();
    }
    RefactoringOptions.builtin$cls = "RefactoringOptions";
    if (!("name" in RefactoringOptions))
      RefactoringOptions.name = "RefactoringOptions";
    $desc = $collectedClasses$.RefactoringOptions[1];
    RefactoringOptions.prototype = $desc;
    RefactoringOptions.$__fields__ = [];
    function RefactoringProblem(severity, message, location) {
      this.severity = severity;
      this.message = message;
      this.location = location;
      this.$deferredAction();
    }
    RefactoringProblem.builtin$cls = "RefactoringProblem";
    if (!("name" in RefactoringProblem))
      RefactoringProblem.name = "RefactoringProblem";
    $desc = $collectedClasses$.RefactoringProblem[1];
    RefactoringProblem.prototype = $desc;
    RefactoringProblem.$__fields__ = ["severity", "message", "location"];
    RefactoringProblem.prototype.get$severity = function() {
      return this.severity;
    };
    RefactoringProblem.prototype.get$message = function(receiver) {
      return this.message;
    };
    RefactoringProblem.prototype.get$location = function(receiver) {
      return this.location;
    };
    function RemoveContentOverlay(type) {
      this.type = type;
      this.$deferredAction();
    }
    RemoveContentOverlay.builtin$cls = "RemoveContentOverlay";
    if (!("name" in RemoveContentOverlay))
      RemoveContentOverlay.name = "RemoveContentOverlay";
    $desc = $collectedClasses$.RemoveContentOverlay[1];
    RemoveContentOverlay.prototype = $desc;
    RemoveContentOverlay.$__fields__ = ["type"];
    RemoveContentOverlay.prototype.get$type = function(receiver) {
      return this.type;
    };
    function RequestError(code, message, stackTrace) {
      this.code = code;
      this.message = message;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    RequestError.builtin$cls = "RequestError";
    if (!("name" in RequestError))
      RequestError.name = "RequestError";
    $desc = $collectedClasses$.RequestError[1];
    RequestError.prototype = $desc;
    RequestError.$__fields__ = ["code", "message", "stackTrace"];
    RequestError.prototype.get$message = function(receiver) {
      return this.message;
    };
    RequestError.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function SearchResult(location, kind, isPotential, path) {
      this.location = location;
      this.kind = kind;
      this.isPotential = isPotential;
      this.path = path;
      this.$deferredAction();
    }
    SearchResult.builtin$cls = "SearchResult";
    if (!("name" in SearchResult))
      SearchResult.name = "SearchResult";
    $desc = $collectedClasses$.SearchResult[1];
    SearchResult.prototype = $desc;
    SearchResult.$__fields__ = ["location", "kind", "isPotential", "path"];
    SearchResult.prototype.get$location = function(receiver) {
      return this.location;
    };
    SearchResult.prototype.get$kind = function(receiver) {
      return this.kind;
    };
    SearchResult.prototype.get$isPotential = function() {
      return this.isPotential;
    };
    SearchResult.prototype.get$path = function(receiver) {
      return this.path;
    };
    function SearchResult_parse_closure() {
      this.$deferredAction();
    }
    SearchResult_parse_closure.builtin$cls = "SearchResult_parse_closure";
    if (!("name" in SearchResult_parse_closure))
      SearchResult_parse_closure.name = "SearchResult_parse_closure";
    $desc = $collectedClasses$.SearchResult_parse_closure[1];
    SearchResult_parse_closure.prototype = $desc;
    SearchResult_parse_closure.$__fields__ = [];
    function SourceChange(message, edits, linkedEditGroups, selection) {
      this.message = message;
      this.edits = edits;
      this.linkedEditGroups = linkedEditGroups;
      this.selection = selection;
      this.$deferredAction();
    }
    SourceChange.builtin$cls = "SourceChange";
    if (!("name" in SourceChange))
      SourceChange.name = "SourceChange";
    $desc = $collectedClasses$.SourceChange[1];
    SourceChange.prototype = $desc;
    SourceChange.$__fields__ = ["message", "edits", "linkedEditGroups", "selection"];
    SourceChange.prototype.get$message = function(receiver) {
      return this.message;
    };
    SourceChange.prototype.get$edits = function() {
      return this.edits;
    };
    SourceChange.prototype.get$linkedEditGroups = function() {
      return this.linkedEditGroups;
    };
    function SourceChange_parse_closure() {
      this.$deferredAction();
    }
    SourceChange_parse_closure.builtin$cls = "SourceChange_parse_closure";
    if (!("name" in SourceChange_parse_closure))
      SourceChange_parse_closure.name = "SourceChange_parse_closure";
    $desc = $collectedClasses$.SourceChange_parse_closure[1];
    SourceChange_parse_closure.prototype = $desc;
    SourceChange_parse_closure.$__fields__ = [];
    function SourceChange_parse_closure0() {
      this.$deferredAction();
    }
    SourceChange_parse_closure0.builtin$cls = "SourceChange_parse_closure0";
    if (!("name" in SourceChange_parse_closure0))
      SourceChange_parse_closure0.name = "SourceChange_parse_closure0";
    $desc = $collectedClasses$.SourceChange_parse_closure0[1];
    SourceChange_parse_closure0.prototype = $desc;
    SourceChange_parse_closure0.$__fields__ = [];
    function SourceEdit(offset, length, replacement, id) {
      this.offset = offset;
      this.length = length;
      this.replacement = replacement;
      this.id = id;
      this.$deferredAction();
    }
    SourceEdit.builtin$cls = "SourceEdit";
    if (!("name" in SourceEdit))
      SourceEdit.name = "SourceEdit";
    $desc = $collectedClasses$.SourceEdit[1];
    SourceEdit.prototype = $desc;
    SourceEdit.$__fields__ = ["offset", "length", "replacement", "id"];
    SourceEdit.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    SourceEdit.prototype.get$length = function(receiver) {
      return this.length;
    };
    SourceEdit.prototype.get$replacement = function() {
      return this.replacement;
    };
    SourceEdit.prototype.get$id = function(receiver) {
      return this.id;
    };
    function SourceFileEdit(file, fileStamp, edits) {
      this.file = file;
      this.fileStamp = fileStamp;
      this.edits = edits;
      this.$deferredAction();
    }
    SourceFileEdit.builtin$cls = "SourceFileEdit";
    if (!("name" in SourceFileEdit))
      SourceFileEdit.name = "SourceFileEdit";
    $desc = $collectedClasses$.SourceFileEdit[1];
    SourceFileEdit.prototype = $desc;
    SourceFileEdit.$__fields__ = ["file", "fileStamp", "edits"];
    SourceFileEdit.prototype.get$file = function() {
      return this.file;
    };
    SourceFileEdit.prototype.get$edits = function() {
      return this.edits;
    };
    function SourceFileEdit_parse_closure() {
      this.$deferredAction();
    }
    SourceFileEdit_parse_closure.builtin$cls = "SourceFileEdit_parse_closure";
    if (!("name" in SourceFileEdit_parse_closure))
      SourceFileEdit_parse_closure.name = "SourceFileEdit_parse_closure";
    $desc = $collectedClasses$.SourceFileEdit_parse_closure[1];
    SourceFileEdit_parse_closure.prototype = $desc;
    SourceFileEdit_parse_closure.$__fields__ = [];
    function TypeHierarchyItem(classElement, interfaces, mixins, subclasses, displayName, memberElement, superclass) {
      this.classElement = classElement;
      this.interfaces = interfaces;
      this.mixins = mixins;
      this.subclasses = subclasses;
      this.displayName = displayName;
      this.memberElement = memberElement;
      this.superclass = superclass;
      this.$deferredAction();
    }
    TypeHierarchyItem.builtin$cls = "TypeHierarchyItem";
    if (!("name" in TypeHierarchyItem))
      TypeHierarchyItem.name = "TypeHierarchyItem";
    $desc = $collectedClasses$.TypeHierarchyItem[1];
    TypeHierarchyItem.prototype = $desc;
    TypeHierarchyItem.$__fields__ = ["classElement", "interfaces", "mixins", "subclasses", "displayName", "memberElement", "superclass"];
    TypeHierarchyItem.prototype.get$classElement = function() {
      return this.classElement;
    };
    TypeHierarchyItem.prototype.get$interfaces = function() {
      return this.interfaces;
    };
    TypeHierarchyItem.prototype.get$mixins = function() {
      return this.mixins;
    };
    TypeHierarchyItem.prototype.get$subclasses = function() {
      return this.subclasses;
    };
    TypeHierarchyItem.prototype.get$displayName = function() {
      return this.displayName;
    };
    TypeHierarchyItem.prototype.get$superclass = function() {
      return this.superclass;
    };
    function AtomPackage() {
      this.$deferredAction();
    }
    AtomPackage.builtin$cls = "AtomPackage";
    if (!("name" in AtomPackage))
      AtomPackage.name = "AtomPackage";
    $desc = $collectedClasses$.AtomPackage[1];
    AtomPackage.prototype = $desc;
    AtomPackage.$__fields__ = [];
    function registerPackage_closure(_captured_exports_0) {
      this._captured_exports_0 = _captured_exports_0;
      this.$deferredAction();
    }
    registerPackage_closure.builtin$cls = "registerPackage_closure";
    if (!("name" in registerPackage_closure))
      registerPackage_closure.name = "registerPackage_closure";
    $desc = $collectedClasses$.registerPackage_closure[1];
    registerPackage_closure.prototype = $desc;
    registerPackage_closure.$__fields__ = ["_captured_exports_0"];
    function registerPackage__closure(_captured_f_1) {
      this._captured_f_1 = _captured_f_1;
      this.$deferredAction();
    }
    registerPackage__closure.builtin$cls = "registerPackage__closure";
    if (!("name" in registerPackage__closure))
      registerPackage__closure.name = "registerPackage__closure";
    $desc = $collectedClasses$.registerPackage__closure[1];
    registerPackage__closure.prototype = $desc;
    registerPackage__closure.$__fields__ = ["_captured_f_1"];
    function Atom(_commands, _config, _notifications, _packages, _project, _views, _workspace, obj) {
      this._commands = _commands;
      this._config = _config;
      this._notifications = _notifications;
      this._packages = _packages;
      this._project = _project;
      this._views = _views;
      this._workspace = _workspace;
      this.obj = obj;
      this.$deferredAction();
    }
    Atom.builtin$cls = "Atom";
    if (!("name" in Atom))
      Atom.name = "Atom";
    $desc = $collectedClasses$.Atom[1];
    Atom.prototype = $desc;
    Atom.$__fields__ = ["_commands", "_config", "_notifications", "_packages", "_project", "_views", "_workspace", "obj"];
    function ViewRegistry(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    ViewRegistry.builtin$cls = "ViewRegistry";
    if (!("name" in ViewRegistry))
      ViewRegistry.name = "ViewRegistry";
    $desc = $collectedClasses$.ViewRegistry[1];
    ViewRegistry.prototype = $desc;
    ViewRegistry.$__fields__ = ["obj"];
    function Workspace(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Workspace.builtin$cls = "Workspace";
    if (!("name" in Workspace))
      Workspace.name = "Workspace";
    $desc = $collectedClasses$.Workspace[1];
    Workspace.prototype = $desc;
    Workspace.$__fields__ = ["obj"];
    function Workspace_getTextEditors_closure() {
      this.$deferredAction();
    }
    Workspace_getTextEditors_closure.builtin$cls = "Workspace_getTextEditors_closure";
    if (!("name" in Workspace_getTextEditors_closure))
      Workspace_getTextEditors_closure.name = "Workspace_getTextEditors_closure";
    $desc = $collectedClasses$.Workspace_getTextEditors_closure[1];
    Workspace_getTextEditors_closure.prototype = $desc;
    Workspace_getTextEditors_closure.$__fields__ = [];
    function Workspace_observeTextEditors_closure(_atom$_captured_callback_0) {
      this._atom$_captured_callback_0 = _atom$_captured_callback_0;
      this.$deferredAction();
    }
    Workspace_observeTextEditors_closure.builtin$cls = "Workspace_observeTextEditors_closure";
    if (!("name" in Workspace_observeTextEditors_closure))
      Workspace_observeTextEditors_closure.name = "Workspace_observeTextEditors_closure";
    $desc = $collectedClasses$.Workspace_observeTextEditors_closure[1];
    Workspace_observeTextEditors_closure.prototype = $desc;
    Workspace_observeTextEditors_closure.$__fields__ = ["_atom$_captured_callback_0"];
    function Workspace_observeActivePaneItem_closure(_atom$_captured_callback_0) {
      this._atom$_captured_callback_0 = _atom$_captured_callback_0;
      this.$deferredAction();
    }
    Workspace_observeActivePaneItem_closure.builtin$cls = "Workspace_observeActivePaneItem_closure";
    if (!("name" in Workspace_observeActivePaneItem_closure))
      Workspace_observeActivePaneItem_closure.name = "Workspace_observeActivePaneItem_closure";
    $desc = $collectedClasses$.Workspace_observeActivePaneItem_closure[1];
    Workspace_observeActivePaneItem_closure.prototype = $desc;
    Workspace_observeActivePaneItem_closure.$__fields__ = ["_atom$_captured_callback_0"];
    function Workspace_open_closure(_captured_url_0) {
      this._captured_url_0 = _captured_url_0;
      this.$deferredAction();
    }
    Workspace_open_closure.builtin$cls = "Workspace_open_closure";
    if (!("name" in Workspace_open_closure))
      Workspace_open_closure.name = "Workspace_open_closure";
    $desc = $collectedClasses$.Workspace_open_closure[1];
    Workspace_open_closure.prototype = $desc;
    Workspace_open_closure.$__fields__ = ["_captured_url_0"];
    function Panel(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Panel.builtin$cls = "Panel";
    if (!("name" in Panel))
      Panel.name = "Panel";
    $desc = $collectedClasses$.Panel[1];
    Panel.prototype = $desc;
    Panel.$__fields__ = ["obj"];
    function Panel_onDidDestroy_closure() {
      this.$deferredAction();
    }
    Panel_onDidDestroy_closure.builtin$cls = "Panel_onDidDestroy_closure";
    if (!("name" in Panel_onDidDestroy_closure))
      Panel_onDidDestroy_closure.name = "Panel_onDidDestroy_closure";
    $desc = $collectedClasses$.Panel_onDidDestroy_closure[1];
    Panel_onDidDestroy_closure.prototype = $desc;
    Panel_onDidDestroy_closure.$__fields__ = [];
    function CommandRegistry(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    CommandRegistry.builtin$cls = "CommandRegistry";
    if (!("name" in CommandRegistry))
      CommandRegistry.name = "CommandRegistry";
    $desc = $collectedClasses$.CommandRegistry[1];
    CommandRegistry.prototype = $desc;
    CommandRegistry.$__fields__ = ["obj"];
    function CommandRegistry_add_closure(_atom$_captured_callback_0) {
      this._atom$_captured_callback_0 = _atom$_captured_callback_0;
      this.$deferredAction();
    }
    CommandRegistry_add_closure.builtin$cls = "CommandRegistry_add_closure";
    if (!("name" in CommandRegistry_add_closure))
      CommandRegistry_add_closure.name = "CommandRegistry_add_closure";
    $desc = $collectedClasses$.CommandRegistry_add_closure[1];
    CommandRegistry_add_closure.prototype = $desc;
    CommandRegistry_add_closure.$__fields__ = ["_atom$_captured_callback_0"];
    function Config(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Config.builtin$cls = "Config";
    if (!("name" in Config))
      Config.name = "Config";
    $desc = $collectedClasses$.Config[1];
    Config.prototype = $desc;
    Config.$__fields__ = ["obj"];
    function NotificationManager(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    NotificationManager.builtin$cls = "NotificationManager";
    if (!("name" in NotificationManager))
      NotificationManager.name = "NotificationManager";
    $desc = $collectedClasses$.NotificationManager[1];
    NotificationManager.prototype = $desc;
    NotificationManager.$__fields__ = ["obj"];
    function PackageManager(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    PackageManager.builtin$cls = "PackageManager";
    if (!("name" in PackageManager))
      PackageManager.name = "PackageManager";
    $desc = $collectedClasses$.PackageManager[1];
    PackageManager.prototype = $desc;
    PackageManager.$__fields__ = ["obj"];
    function Project(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Project.builtin$cls = "Project";
    if (!("name" in Project))
      Project.name = "Project";
    $desc = $collectedClasses$.Project[1];
    Project.prototype = $desc;
    Project.$__fields__ = ["obj"];
    function Project_getDirectories_closure() {
      this.$deferredAction();
    }
    Project_getDirectories_closure.builtin$cls = "Project_getDirectories_closure";
    if (!("name" in Project_getDirectories_closure))
      Project_getDirectories_closure.name = "Project_getDirectories_closure";
    $desc = $collectedClasses$.Project_getDirectories_closure[1];
    Project_getDirectories_closure.prototype = $desc;
    Project_getDirectories_closure.$__fields__ = [];
    function Entry() {
      this.$deferredAction();
    }
    Entry.builtin$cls = "Entry";
    if (!("name" in Entry))
      Entry.name = "Entry";
    $desc = $collectedClasses$.Entry[1];
    Entry.prototype = $desc;
    Entry.$__fields__ = [];
    function File(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    File.builtin$cls = "File";
    if (!("name" in File))
      File.name = "File";
    $desc = $collectedClasses$.File[1];
    File.prototype = $desc;
    File.$__fields__ = ["obj"];
    function Directory(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Directory.builtin$cls = "Directory";
    if (!("name" in Directory))
      Directory.name = "Directory";
    $desc = $collectedClasses$.Directory[1];
    Directory.prototype = $desc;
    Directory.$__fields__ = ["obj"];
    function Directory_getEntriesSync_closure() {
      this.$deferredAction();
    }
    Directory_getEntriesSync_closure.builtin$cls = "Directory_getEntriesSync_closure";
    if (!("name" in Directory_getEntriesSync_closure))
      Directory_getEntriesSync_closure.name = "Directory_getEntriesSync_closure";
    $desc = $collectedClasses$.Directory_getEntriesSync_closure[1];
    Directory_getEntriesSync_closure.prototype = $desc;
    Directory_getEntriesSync_closure.$__fields__ = [];
    function TextEditorView(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    TextEditorView.builtin$cls = "TextEditorView";
    if (!("name" in TextEditorView))
      TextEditorView.name = "TextEditorView";
    $desc = $collectedClasses$.TextEditorView[1];
    TextEditorView.prototype = $desc;
    TextEditorView.$__fields__ = ["obj"];
    function TextEditor(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    TextEditor.builtin$cls = "TextEditor";
    if (!("name" in TextEditor))
      TextEditor.name = "TextEditor";
    $desc = $collectedClasses$.TextEditor[1];
    TextEditor.prototype = $desc;
    TextEditor.$__fields__ = ["obj"];
    function TextEditor_setSelectedBufferRanges_closure() {
      this.$deferredAction();
    }
    TextEditor_setSelectedBufferRanges_closure.builtin$cls = "TextEditor_setSelectedBufferRanges_closure";
    if (!("name" in TextEditor_setSelectedBufferRanges_closure))
      TextEditor_setSelectedBufferRanges_closure.name = "TextEditor_setSelectedBufferRanges_closure";
    $desc = $collectedClasses$.TextEditor_setSelectedBufferRanges_closure[1];
    TextEditor_setSelectedBufferRanges_closure.prototype = $desc;
    TextEditor_setSelectedBufferRanges_closure.$__fields__ = [];
    function TextBuffer(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    TextBuffer.builtin$cls = "TextBuffer";
    if (!("name" in TextBuffer))
      TextBuffer.name = "TextBuffer";
    $desc = $collectedClasses$.TextBuffer[1];
    TextBuffer.prototype = $desc;
    TextBuffer.$__fields__ = ["obj"];
    function Range(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Range.builtin$cls = "Range";
    if (!("name" in Range))
      Range.name = "Range";
    $desc = $collectedClasses$.Range[1];
    Range.prototype = $desc;
    Range.$__fields__ = ["obj"];
    function Point(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Point.builtin$cls = "Point";
    if (!("name" in Point))
      Point.name = "Point";
    $desc = $collectedClasses$.Point[1];
    Point.prototype = $desc;
    Point.$__fields__ = ["obj"];
    function AtomEvent(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    AtomEvent.builtin$cls = "AtomEvent";
    if (!("name" in AtomEvent))
      AtomEvent.name = "AtomEvent";
    $desc = $collectedClasses$.AtomEvent[1];
    AtomEvent.prototype = $desc;
    AtomEvent.$__fields__ = ["obj"];
    function Shell() {
      this.$deferredAction();
    }
    Shell.builtin$cls = "Shell";
    if (!("name" in Shell))
      Shell.name = "Shell";
    $desc = $collectedClasses$.Shell[1];
    Shell.prototype = $desc;
    Shell.$__fields__ = [];
    function BufferedProcess(_stdin, obj) {
      this._stdin = _stdin;
      this.obj = obj;
      this.$deferredAction();
    }
    BufferedProcess.builtin$cls = "BufferedProcess";
    if (!("name" in BufferedProcess))
      BufferedProcess.name = "BufferedProcess";
    $desc = $collectedClasses$.BufferedProcess[1];
    BufferedProcess.prototype = $desc;
    BufferedProcess.$__fields__ = ["_stdin", "obj"];
    function Stats(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Stats.builtin$cls = "Stats";
    if (!("name" in Stats))
      Stats.name = "Stats";
    $desc = $collectedClasses$.Stats[1];
    Stats.prototype = $desc;
    Stats.$__fields__ = ["obj"];
    function AnalysisServer(subs, disposables, _serverActiveController, _serverBusyController, _onSendController, _onReceiveController, _onNavigatonController, _server, _job, knownRoots, isActiveProperty) {
      this.subs = subs;
      this.disposables = disposables;
      this._serverActiveController = _serverActiveController;
      this._serverBusyController = _serverBusyController;
      this._onSendController = _onSendController;
      this._onReceiveController = _onReceiveController;
      this._onNavigatonController = _onNavigatonController;
      this._server = _server;
      this._job = _job;
      this.knownRoots = knownRoots;
      this.isActiveProperty = isActiveProperty;
      this.$deferredAction();
    }
    AnalysisServer.builtin$cls = "AnalysisServer";
    if (!("name" in AnalysisServer))
      AnalysisServer.name = "AnalysisServer";
    $desc = $collectedClasses$.AnalysisServer[1];
    AnalysisServer.prototype = $desc;
    AnalysisServer.$__fields__ = ["subs", "disposables", "_serverActiveController", "_serverBusyController", "_onSendController", "_onReceiveController", "_onNavigatonController", "_server", "_job", "knownRoots", "isActiveProperty"];
    AnalysisServer.prototype.get$_server = function() {
      return this._server;
    };
    AnalysisServer.prototype.get$isActiveProperty = function() {
      return this.isActiveProperty;
    };
    function AnalysisServer__setup_closure(_analysis_server$_captured_this_0) {
      this._analysis_server$_captured_this_0 = _analysis_server$_captured_this_0;
      this.$deferredAction();
    }
    AnalysisServer__setup_closure.builtin$cls = "AnalysisServer__setup_closure";
    if (!("name" in AnalysisServer__setup_closure))
      AnalysisServer__setup_closure.name = "AnalysisServer__setup_closure";
    $desc = $collectedClasses$.AnalysisServer__setup_closure[1];
    AnalysisServer__setup_closure.prototype = $desc;
    AnalysisServer__setup_closure.$__fields__ = ["_analysis_server$_captured_this_0"];
    function AnalysisServer__setup_closure0() {
      this.$deferredAction();
    }
    AnalysisServer__setup_closure0.builtin$cls = "AnalysisServer__setup_closure0";
    if (!("name" in AnalysisServer__setup_closure0))
      AnalysisServer__setup_closure0.name = "AnalysisServer__setup_closure0";
    $desc = $collectedClasses$.AnalysisServer__setup_closure0[1];
    AnalysisServer__setup_closure0.prototype = $desc;
    AnalysisServer__setup_closure0.$__fields__ = [];
    function AnalysisServer__setup_closure1() {
      this.$deferredAction();
    }
    AnalysisServer__setup_closure1.builtin$cls = "AnalysisServer__setup_closure1";
    if (!("name" in AnalysisServer__setup_closure1))
      AnalysisServer__setup_closure1.name = "AnalysisServer__setup_closure1";
    $desc = $collectedClasses$.AnalysisServer__setup_closure1[1];
    AnalysisServer__setup_closure1.prototype = $desc;
    AnalysisServer__setup_closure1.$__fields__ = [];
    function AnalysisServer__syncRoots_closure() {
      this.$deferredAction();
    }
    AnalysisServer__syncRoots_closure.builtin$cls = "AnalysisServer__syncRoots_closure";
    if (!("name" in AnalysisServer__syncRoots_closure))
      AnalysisServer__syncRoots_closure.name = "AnalysisServer__syncRoots_closure";
    $desc = $collectedClasses$.AnalysisServer__syncRoots_closure[1];
    AnalysisServer__syncRoots_closure.prototype = $desc;
    AnalysisServer__syncRoots_closure.$__fields__ = [];
    function AnalysisServer__reconcileRoots_closure() {
      this.$deferredAction();
    }
    AnalysisServer__reconcileRoots_closure.builtin$cls = "AnalysisServer__reconcileRoots_closure";
    if (!("name" in AnalysisServer__reconcileRoots_closure))
      AnalysisServer__reconcileRoots_closure.name = "AnalysisServer__reconcileRoots_closure";
    $desc = $collectedClasses$.AnalysisServer__reconcileRoots_closure[1];
    AnalysisServer__reconcileRoots_closure.prototype = $desc;
    AnalysisServer__reconcileRoots_closure.$__fields__ = [];
    function AnalysisServer__focusedEditorChanged_closure() {
      this.$deferredAction();
    }
    AnalysisServer__focusedEditorChanged_closure.builtin$cls = "AnalysisServer__focusedEditorChanged_closure";
    if (!("name" in AnalysisServer__focusedEditorChanged_closure))
      AnalysisServer__focusedEditorChanged_closure.name = "AnalysisServer__focusedEditorChanged_closure";
    $desc = $collectedClasses$.AnalysisServer__focusedEditorChanged_closure[1];
    AnalysisServer__focusedEditorChanged_closure.prototype = $desc;
    AnalysisServer__focusedEditorChanged_closure.$__fields__ = [];
    function AnalysisServer_filterSearchResults_closure(_analysis_server$_box_0) {
      this._analysis_server$_box_0 = _analysis_server$_box_0;
      this.$deferredAction();
    }
    AnalysisServer_filterSearchResults_closure.builtin$cls = "AnalysisServer_filterSearchResults_closure";
    if (!("name" in AnalysisServer_filterSearchResults_closure))
      AnalysisServer_filterSearchResults_closure.name = "AnalysisServer_filterSearchResults_closure";
    $desc = $collectedClasses$.AnalysisServer_filterSearchResults_closure[1];
    AnalysisServer_filterSearchResults_closure.prototype = $desc;
    AnalysisServer_filterSearchResults_closure.$__fields__ = ["_analysis_server$_box_0"];
    function AnalysisServer_filterSearchResults_closure0(_analysis_server$_box_0, _captured_id_1, _captured_controller_2) {
      this._analysis_server$_box_0 = _analysis_server$_box_0;
      this._captured_id_1 = _captured_id_1;
      this._captured_controller_2 = _captured_controller_2;
      this.$deferredAction();
    }
    AnalysisServer_filterSearchResults_closure0.builtin$cls = "AnalysisServer_filterSearchResults_closure0";
    if (!("name" in AnalysisServer_filterSearchResults_closure0))
      AnalysisServer_filterSearchResults_closure0.name = "AnalysisServer_filterSearchResults_closure0";
    $desc = $collectedClasses$.AnalysisServer_filterSearchResults_closure0[1];
    AnalysisServer_filterSearchResults_closure0.prototype = $desc;
    AnalysisServer_filterSearchResults_closure0.$__fields__ = ["_analysis_server$_box_0", "_captured_id_1", "_captured_controller_2"];
    function AnalysisServer__initNewServer_closure(_analysis_server$_captured_this_0) {
      this._analysis_server$_captured_this_0 = _analysis_server$_captured_this_0;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure.builtin$cls = "AnalysisServer__initNewServer_closure";
    if (!("name" in AnalysisServer__initNewServer_closure))
      AnalysisServer__initNewServer_closure.name = "AnalysisServer__initNewServer_closure";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure[1];
    AnalysisServer__initNewServer_closure.prototype = $desc;
    AnalysisServer__initNewServer_closure.$__fields__ = ["_analysis_server$_captured_this_0"];
    function AnalysisServer__initNewServer_closure0(_analysis_server$_captured_this_1, _captured_server_2) {
      this._analysis_server$_captured_this_1 = _analysis_server$_captured_this_1;
      this._captured_server_2 = _captured_server_2;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure0.builtin$cls = "AnalysisServer__initNewServer_closure0";
    if (!("name" in AnalysisServer__initNewServer_closure0))
      AnalysisServer__initNewServer_closure0.name = "AnalysisServer__initNewServer_closure0";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure0[1];
    AnalysisServer__initNewServer_closure0.prototype = $desc;
    AnalysisServer__initNewServer_closure0.$__fields__ = ["_analysis_server$_captured_this_1", "_captured_server_2"];
    function AnalysisServer__initNewServer_closure1(_analysis_server$_captured_this_3) {
      this._analysis_server$_captured_this_3 = _analysis_server$_captured_this_3;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure1.builtin$cls = "AnalysisServer__initNewServer_closure1";
    if (!("name" in AnalysisServer__initNewServer_closure1))
      AnalysisServer__initNewServer_closure1.name = "AnalysisServer__initNewServer_closure1";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure1[1];
    AnalysisServer__initNewServer_closure1.prototype = $desc;
    AnalysisServer__initNewServer_closure1.$__fields__ = ["_analysis_server$_captured_this_3"];
    function AnalysisServer__initNewServer_closure2(_analysis_server$_captured_this_4) {
      this._analysis_server$_captured_this_4 = _analysis_server$_captured_this_4;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure2.builtin$cls = "AnalysisServer__initNewServer_closure2";
    if (!("name" in AnalysisServer__initNewServer_closure2))
      AnalysisServer__initNewServer_closure2.name = "AnalysisServer__initNewServer_closure2";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure2[1];
    AnalysisServer__initNewServer_closure2.prototype = $desc;
    AnalysisServer__initNewServer_closure2.$__fields__ = ["_analysis_server$_captured_this_4"];
    function AnalysisServer__initNewServer_closure3(_analysis_server$_captured_this_5) {
      this._analysis_server$_captured_this_5 = _analysis_server$_captured_this_5;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure3.builtin$cls = "AnalysisServer__initNewServer_closure3";
    if (!("name" in AnalysisServer__initNewServer_closure3))
      AnalysisServer__initNewServer_closure3.name = "AnalysisServer__initNewServer_closure3";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure3[1];
    AnalysisServer__initNewServer_closure3.prototype = $desc;
    AnalysisServer__initNewServer_closure3.$__fields__ = ["_analysis_server$_captured_this_5"];
    function AnalysisServer__initNewServer_closure4(_analysis_server$_captured_this_6) {
      this._analysis_server$_captured_this_6 = _analysis_server$_captured_this_6;
      this.$deferredAction();
    }
    AnalysisServer__initNewServer_closure4.builtin$cls = "AnalysisServer__initNewServer_closure4";
    if (!("name" in AnalysisServer__initNewServer_closure4))
      AnalysisServer__initNewServer_closure4.name = "AnalysisServer__initNewServer_closure4";
    $desc = $collectedClasses$.AnalysisServer__initNewServer_closure4[1];
    AnalysisServer__initNewServer_closure4.prototype = $desc;
    AnalysisServer__initNewServer_closure4.$__fields__ = ["_analysis_server$_captured_this_6"];
    function QuickFixHelper_handleQuickFix_closure(_analysis_server$_captured_editor_0, _captured_path_1) {
      this._analysis_server$_captured_editor_0 = _analysis_server$_captured_editor_0;
      this._captured_path_1 = _captured_path_1;
      this.$deferredAction();
    }
    QuickFixHelper_handleQuickFix_closure.builtin$cls = "QuickFixHelper_handleQuickFix_closure";
    if (!("name" in QuickFixHelper_handleQuickFix_closure))
      QuickFixHelper_handleQuickFix_closure.name = "QuickFixHelper_handleQuickFix_closure";
    $desc = $collectedClasses$.QuickFixHelper_handleQuickFix_closure[1];
    QuickFixHelper_handleQuickFix_closure.prototype = $desc;
    QuickFixHelper_handleQuickFix_closure.$__fields__ = ["_analysis_server$_captured_editor_0", "_captured_path_1"];
    function QuickFixHelper_handleQuickFix__closure() {
      this.$deferredAction();
    }
    QuickFixHelper_handleQuickFix__closure.builtin$cls = "QuickFixHelper_handleQuickFix__closure";
    if (!("name" in QuickFixHelper_handleQuickFix__closure))
      QuickFixHelper_handleQuickFix__closure.name = "QuickFixHelper_handleQuickFix__closure";
    $desc = $collectedClasses$.QuickFixHelper_handleQuickFix__closure[1];
    QuickFixHelper_handleQuickFix__closure.prototype = $desc;
    QuickFixHelper_handleQuickFix__closure.$__fields__ = [];
    function QuickFixHelper_handleQuickFix__closure0(_analysis_server$_captured_path_2) {
      this._analysis_server$_captured_path_2 = _analysis_server$_captured_path_2;
      this.$deferredAction();
    }
    QuickFixHelper_handleQuickFix__closure0.builtin$cls = "QuickFixHelper_handleQuickFix__closure0";
    if (!("name" in QuickFixHelper_handleQuickFix__closure0))
      QuickFixHelper_handleQuickFix__closure0.name = "QuickFixHelper_handleQuickFix__closure0";
    $desc = $collectedClasses$.QuickFixHelper_handleQuickFix__closure0[1];
    QuickFixHelper_handleQuickFix__closure0.prototype = $desc;
    QuickFixHelper_handleQuickFix__closure0.$__fields__ = ["_analysis_server$_captured_path_2"];
    function QuickFixHelper_handleQuickFix___closure(_captured_path_3) {
      this._captured_path_3 = _captured_path_3;
      this.$deferredAction();
    }
    QuickFixHelper_handleQuickFix___closure.builtin$cls = "QuickFixHelper_handleQuickFix___closure";
    if (!("name" in QuickFixHelper_handleQuickFix___closure))
      QuickFixHelper_handleQuickFix___closure.name = "QuickFixHelper_handleQuickFix___closure";
    $desc = $collectedClasses$.QuickFixHelper_handleQuickFix___closure[1];
    QuickFixHelper_handleQuickFix___closure.prototype = $desc;
    QuickFixHelper_handleQuickFix___closure.$__fields__ = ["_captured_path_3"];
    function QuickFixHelper_handleQuickFix_closure0() {
      this.$deferredAction();
    }
    QuickFixHelper_handleQuickFix_closure0.builtin$cls = "QuickFixHelper_handleQuickFix_closure0";
    if (!("name" in QuickFixHelper_handleQuickFix_closure0))
      QuickFixHelper_handleQuickFix_closure0.name = "QuickFixHelper_handleQuickFix_closure0";
    $desc = $collectedClasses$.QuickFixHelper_handleQuickFix_closure0[1];
    QuickFixHelper_handleQuickFix_closure0.prototype = $desc;
    QuickFixHelper_handleQuickFix_closure0.$__fields__ = [];
    function QuickFixHelper__applyChange_closure() {
      this.$deferredAction();
    }
    QuickFixHelper__applyChange_closure.builtin$cls = "QuickFixHelper__applyChange_closure";
    if (!("name" in QuickFixHelper__applyChange_closure))
      QuickFixHelper__applyChange_closure.name = "QuickFixHelper__applyChange_closure";
    $desc = $collectedClasses$.QuickFixHelper__applyChange_closure[1];
    QuickFixHelper__applyChange_closure.prototype = $desc;
    QuickFixHelper__applyChange_closure.$__fields__ = [];
    function _AnalyzingJob(completer, _infoAction, name, schedulingRule) {
      this.completer = completer;
      this._infoAction = _infoAction;
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    _AnalyzingJob.builtin$cls = "_AnalyzingJob";
    if (!("name" in _AnalyzingJob))
      _AnalyzingJob.name = "_AnalyzingJob";
    $desc = $collectedClasses$._AnalyzingJob[1];
    _AnalyzingJob.prototype = $desc;
    _AnalyzingJob.$__fields__ = ["completer", "_infoAction", "name", "schedulingRule"];
    function _AnalyzingJob_closure() {
      this.$deferredAction();
    }
    _AnalyzingJob_closure.builtin$cls = "_AnalyzingJob_closure";
    if (!("name" in _AnalyzingJob_closure))
      _AnalyzingJob_closure.name = "_AnalyzingJob_closure";
    $desc = $collectedClasses$._AnalyzingJob_closure[1];
    _AnalyzingJob_closure.prototype = $desc;
    _AnalyzingJob_closure.$__fields__ = [];
    function _AnalyzingJob_start_closure(_analysis_server$_captured_this_0) {
      this._analysis_server$_captured_this_0 = _analysis_server$_captured_this_0;
      this.$deferredAction();
    }
    _AnalyzingJob_start_closure.builtin$cls = "_AnalyzingJob_start_closure";
    if (!("name" in _AnalyzingJob_start_closure))
      _AnalyzingJob_start_closure.name = "_AnalyzingJob_start_closure";
    $desc = $collectedClasses$._AnalyzingJob_start_closure[1];
    _AnalyzingJob_start_closure.prototype = $desc;
    _AnalyzingJob_start_closure.$__fields__ = ["_analysis_server$_captured_this_0"];
    function _AnalysisServerWrapper(process, _processCompleter, analyzing, _analyzingController, _disposedController, _streamSub, _writeMessage, _id, _completers, _jsonEncoder, _domains, _onSend, _onReceive, _analysis_server_gen$_server, _analysis, _completion, _search, _edit, _execution) {
      this.process = process;
      this._processCompleter = _processCompleter;
      this.analyzing = analyzing;
      this._analyzingController = _analyzingController;
      this._disposedController = _disposedController;
      this._streamSub = _streamSub;
      this._writeMessage = _writeMessage;
      this._id = _id;
      this._completers = _completers;
      this._jsonEncoder = _jsonEncoder;
      this._domains = _domains;
      this._onSend = _onSend;
      this._onReceive = _onReceive;
      this._analysis_server_gen$_server = _analysis_server_gen$_server;
      this._analysis = _analysis;
      this._completion = _completion;
      this._search = _search;
      this._edit = _edit;
      this._execution = _execution;
      this.$deferredAction();
    }
    _AnalysisServerWrapper.builtin$cls = "_AnalysisServerWrapper";
    if (!("name" in _AnalysisServerWrapper))
      _AnalysisServerWrapper.name = "_AnalysisServerWrapper";
    $desc = $collectedClasses$._AnalysisServerWrapper[1];
    _AnalysisServerWrapper.prototype = $desc;
    _AnalysisServerWrapper.$__fields__ = ["process", "_processCompleter", "analyzing", "_analyzingController", "_disposedController", "_streamSub", "_writeMessage", "_id", "_completers", "_jsonEncoder", "_domains", "_onSend", "_onReceive", "_analysis_server_gen$_server", "_analysis", "_completion", "_search", "_edit", "_execution"];
    function _AnalysisServerWrapper_closure(_analysis_server$_captured_this_0) {
      this._analysis_server$_captured_this_0 = _analysis_server$_captured_this_0;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_closure.builtin$cls = "_AnalysisServerWrapper_closure";
    if (!("name" in _AnalysisServerWrapper_closure))
      _AnalysisServerWrapper_closure.name = "_AnalysisServerWrapper_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_closure[1];
    _AnalysisServerWrapper_closure.prototype = $desc;
    _AnalysisServerWrapper_closure.$__fields__ = ["_analysis_server$_captured_this_0"];
    function _AnalysisServerWrapper_setup_closure() {
      this.$deferredAction();
    }
    _AnalysisServerWrapper_setup_closure.builtin$cls = "_AnalysisServerWrapper_setup_closure";
    if (!("name" in _AnalysisServerWrapper_setup_closure))
      _AnalysisServerWrapper_setup_closure.name = "_AnalysisServerWrapper_setup_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_setup_closure[1];
    _AnalysisServerWrapper_setup_closure.prototype = $desc;
    _AnalysisServerWrapper_setup_closure.$__fields__ = [];
    function _AnalysisServerWrapper_setup_closure0(_analysis_server$_captured_this_0) {
      this._analysis_server$_captured_this_0 = _analysis_server$_captured_this_0;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_setup_closure0.builtin$cls = "_AnalysisServerWrapper_setup_closure0";
    if (!("name" in _AnalysisServerWrapper_setup_closure0))
      _AnalysisServerWrapper_setup_closure0.name = "_AnalysisServerWrapper_setup_closure0";
    $desc = $collectedClasses$._AnalysisServerWrapper_setup_closure0[1];
    _AnalysisServerWrapper_setup_closure0.prototype = $desc;
    _AnalysisServerWrapper_setup_closure0.$__fields__ = ["_analysis_server$_captured_this_0"];
    function _AnalysisServerWrapper_restart_closure(_analysis_server$_captured_this_0, _captured_sdk_1) {
      this._analysis_server$_captured_this_0 = _analysis_server$_captured_this_0;
      this._captured_sdk_1 = _captured_sdk_1;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_restart_closure.builtin$cls = "_AnalysisServerWrapper_restart_closure";
    if (!("name" in _AnalysisServerWrapper_restart_closure))
      _AnalysisServerWrapper_restart_closure.name = "_AnalysisServerWrapper_restart_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_restart_closure[1];
    _AnalysisServerWrapper_restart_closure.prototype = $desc;
    _AnalysisServerWrapper_restart_closure.$__fields__ = ["_analysis_server$_captured_this_0", "_captured_sdk_1"];
    function _AnalysisServerWrapper_restart__closure(_analysis_server$_captured_this_2) {
      this._analysis_server$_captured_this_2 = _analysis_server$_captured_this_2;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_restart__closure.builtin$cls = "_AnalysisServerWrapper_restart__closure";
    if (!("name" in _AnalysisServerWrapper_restart__closure))
      _AnalysisServerWrapper_restart__closure.name = "_AnalysisServerWrapper_restart__closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_restart__closure[1];
    _AnalysisServerWrapper_restart__closure.prototype = $desc;
    _AnalysisServerWrapper_restart__closure.$__fields__ = ["_analysis_server$_captured_this_2"];
    function _AnalysisServerWrapper_restart_closure0(_captured_startServer_3) {
      this._captured_startServer_3 = _captured_startServer_3;
      this.$deferredAction();
    }
    _AnalysisServerWrapper_restart_closure0.builtin$cls = "_AnalysisServerWrapper_restart_closure0";
    if (!("name" in _AnalysisServerWrapper_restart_closure0))
      _AnalysisServerWrapper_restart_closure0.name = "_AnalysisServerWrapper_restart_closure0";
    $desc = $collectedClasses$._AnalysisServerWrapper_restart_closure0[1];
    _AnalysisServerWrapper_restart_closure0.prototype = $desc;
    _AnalysisServerWrapper_restart_closure0.$__fields__ = ["_captured_startServer_3"];
    function _AnalysisServerWrapper_kill_closure() {
      this.$deferredAction();
    }
    _AnalysisServerWrapper_kill_closure.builtin$cls = "_AnalysisServerWrapper_kill_closure";
    if (!("name" in _AnalysisServerWrapper_kill_closure))
      _AnalysisServerWrapper_kill_closure.name = "_AnalysisServerWrapper_kill_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper_kill_closure[1];
    _AnalysisServerWrapper_kill_closure.prototype = $desc;
    _AnalysisServerWrapper_kill_closure.$__fields__ = [];
    function _AnalysisServerWrapper__startProcess_closure() {
      this.$deferredAction();
    }
    _AnalysisServerWrapper__startProcess_closure.builtin$cls = "_AnalysisServerWrapper__startProcess_closure";
    if (!("name" in _AnalysisServerWrapper__startProcess_closure))
      _AnalysisServerWrapper__startProcess_closure.name = "_AnalysisServerWrapper__startProcess_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper__startProcess_closure[1];
    _AnalysisServerWrapper__startProcess_closure.prototype = $desc;
    _AnalysisServerWrapper__startProcess_closure.$__fields__ = [];
    function _AnalysisServerWrapper__startProcess_closure0(_captured_sc_0) {
      this._captured_sc_0 = _captured_sc_0;
      this.$deferredAction();
    }
    _AnalysisServerWrapper__startProcess_closure0.builtin$cls = "_AnalysisServerWrapper__startProcess_closure0";
    if (!("name" in _AnalysisServerWrapper__startProcess_closure0))
      _AnalysisServerWrapper__startProcess_closure0.name = "_AnalysisServerWrapper__startProcess_closure0";
    $desc = $collectedClasses$._AnalysisServerWrapper__startProcess_closure0[1];
    _AnalysisServerWrapper__startProcess_closure0.prototype = $desc;
    _AnalysisServerWrapper__startProcess_closure0.$__fields__ = ["_captured_sc_0"];
    function _AnalysisServerWrapper__startProcess_closure1(_analysis_server$_captured_completer_1) {
      this._analysis_server$_captured_completer_1 = _analysis_server$_captured_completer_1;
      this.$deferredAction();
    }
    _AnalysisServerWrapper__startProcess_closure1.builtin$cls = "_AnalysisServerWrapper__startProcess_closure1";
    if (!("name" in _AnalysisServerWrapper__startProcess_closure1))
      _AnalysisServerWrapper__startProcess_closure1.name = "_AnalysisServerWrapper__startProcess_closure1";
    $desc = $collectedClasses$._AnalysisServerWrapper__startProcess_closure1[1];
    _AnalysisServerWrapper__startProcess_closure1.prototype = $desc;
    _AnalysisServerWrapper__startProcess_closure1.$__fields__ = ["_analysis_server$_captured_completer_1"];
    function _AnalysisServerWrapper__messageWriter_closure(_captured_process_0) {
      this._captured_process_0 = _captured_process_0;
      this.$deferredAction();
    }
    _AnalysisServerWrapper__messageWriter_closure.builtin$cls = "_AnalysisServerWrapper__messageWriter_closure";
    if (!("name" in _AnalysisServerWrapper__messageWriter_closure))
      _AnalysisServerWrapper__messageWriter_closure.name = "_AnalysisServerWrapper__messageWriter_closure";
    $desc = $collectedClasses$._AnalysisServerWrapper__messageWriter_closure[1];
    _AnalysisServerWrapper__messageWriter_closure.prototype = $desc;
    _AnalysisServerWrapper__messageWriter_closure.$__fields__ = ["_captured_process_0"];
    function RenameRefactoringOptions(newName) {
      this.newName = newName;
      this.$deferredAction();
    }
    RenameRefactoringOptions.builtin$cls = "RenameRefactoringOptions";
    if (!("name" in RenameRefactoringOptions))
      RenameRefactoringOptions.name = "RenameRefactoringOptions";
    $desc = $collectedClasses$.RenameRefactoringOptions[1];
    RenameRefactoringOptions.prototype = $desc;
    RenameRefactoringOptions.$__fields__ = ["newName"];
    function AnalysisServerDialog(_analysis_server_dialog$_disposables, _dialog, _messageElement, _statusElement, _startButton, _reanalyzeButton, _stopButton) {
      this._analysis_server_dialog$_disposables = _analysis_server_dialog$_disposables;
      this._dialog = _dialog;
      this._messageElement = _messageElement;
      this._statusElement = _statusElement;
      this._startButton = _startButton;
      this._reanalyzeButton = _reanalyzeButton;
      this._stopButton = _stopButton;
      this.$deferredAction();
    }
    AnalysisServerDialog.builtin$cls = "AnalysisServerDialog";
    if (!("name" in AnalysisServerDialog))
      AnalysisServerDialog.name = "AnalysisServerDialog";
    $desc = $collectedClasses$.AnalysisServerDialog[1];
    AnalysisServerDialog.prototype = $desc;
    AnalysisServerDialog.$__fields__ = ["_analysis_server_dialog$_disposables", "_dialog", "_messageElement", "_statusElement", "_startButton", "_reanalyzeButton", "_stopButton"];
    function AnalysisServerDialog_closure(_analysis_server_dialog$_captured_this_0) {
      this._analysis_server_dialog$_captured_this_0 = _analysis_server_dialog$_captured_this_0;
      this.$deferredAction();
    }
    AnalysisServerDialog_closure.builtin$cls = "AnalysisServerDialog_closure";
    if (!("name" in AnalysisServerDialog_closure))
      AnalysisServerDialog_closure.name = "AnalysisServerDialog_closure";
    $desc = $collectedClasses$.AnalysisServerDialog_closure[1];
    AnalysisServerDialog_closure.prototype = $desc;
    AnalysisServerDialog_closure.$__fields__ = ["_analysis_server_dialog$_captured_this_0"];
    function AnalysisServerDialog_closure0(_analysis_server_dialog$_captured_this_1) {
      this._analysis_server_dialog$_captured_this_1 = _analysis_server_dialog$_captured_this_1;
      this.$deferredAction();
    }
    AnalysisServerDialog_closure0.builtin$cls = "AnalysisServerDialog_closure0";
    if (!("name" in AnalysisServerDialog_closure0))
      AnalysisServerDialog_closure0.name = "AnalysisServerDialog_closure0";
    $desc = $collectedClasses$.AnalysisServerDialog_closure0[1];
    AnalysisServerDialog_closure0.prototype = $desc;
    AnalysisServerDialog_closure0.$__fields__ = ["_analysis_server_dialog$_captured_this_1"];
    function AnalysisServerDialog_closure1(_analysis_server_dialog$_captured_this_2) {
      this._analysis_server_dialog$_captured_this_2 = _analysis_server_dialog$_captured_this_2;
      this.$deferredAction();
    }
    AnalysisServerDialog_closure1.builtin$cls = "AnalysisServerDialog_closure1";
    if (!("name" in AnalysisServerDialog_closure1))
      AnalysisServerDialog_closure1.name = "AnalysisServerDialog_closure1";
    $desc = $collectedClasses$.AnalysisServerDialog_closure1[1];
    AnalysisServerDialog_closure1.prototype = $desc;
    AnalysisServerDialog_closure1.$__fields__ = ["_analysis_server_dialog$_captured_this_2"];
    function AnalysisServerDialog__updateStatus_closure(_analysis_server_dialog$_captured_this_0) {
      this._analysis_server_dialog$_captured_this_0 = _analysis_server_dialog$_captured_this_0;
      this.$deferredAction();
    }
    AnalysisServerDialog__updateStatus_closure.builtin$cls = "AnalysisServerDialog__updateStatus_closure";
    if (!("name" in AnalysisServerDialog__updateStatus_closure))
      AnalysisServerDialog__updateStatus_closure.name = "AnalysisServerDialog__updateStatus_closure";
    $desc = $collectedClasses$.AnalysisServerDialog__updateStatus_closure[1];
    AnalysisServerDialog__updateStatus_closure.prototype = $desc;
    AnalysisServerDialog__updateStatus_closure.$__fields__ = ["_analysis_server_dialog$_captured_this_0"];
    function promptUser_closure(_captured_editorElement_0) {
      this._captured_editorElement_0 = _captured_editorElement_0;
      this.$deferredAction();
    }
    promptUser_closure.builtin$cls = "promptUser_closure";
    if (!("name" in promptUser_closure))
      promptUser_closure.name = "promptUser_closure";
    $desc = $collectedClasses$.promptUser_closure[1];
    promptUser_closure.prototype = $desc;
    promptUser_closure.$__fields__ = ["_captured_editorElement_0"];
    function promptUser_closure0(_atom_utils$_captured_completer_1, _atom_utils$_captured_editor_2) {
      this._atom_utils$_captured_completer_1 = _atom_utils$_captured_completer_1;
      this._atom_utils$_captured_editor_2 = _atom_utils$_captured_editor_2;
      this.$deferredAction();
    }
    promptUser_closure0.builtin$cls = "promptUser_closure0";
    if (!("name" in promptUser_closure0))
      promptUser_closure0.name = "promptUser_closure0";
    $desc = $collectedClasses$.promptUser_closure0[1];
    promptUser_closure0.prototype = $desc;
    promptUser_closure0.$__fields__ = ["_atom_utils$_captured_completer_1", "_atom_utils$_captured_editor_2"];
    function promptUser_closure1(_captured_completer_3) {
      this._captured_completer_3 = _captured_completer_3;
      this.$deferredAction();
    }
    promptUser_closure1.builtin$cls = "promptUser_closure1";
    if (!("name" in promptUser_closure1))
      promptUser_closure1.name = "promptUser_closure1";
    $desc = $collectedClasses$.promptUser_closure1[1];
    promptUser_closure1.prototype = $desc;
    promptUser_closure1.$__fields__ = ["_captured_completer_3"];
    function promptUser_closure2(_captured_disposables_4, _captured_panel_5) {
      this._captured_disposables_4 = _captured_disposables_4;
      this._captured_panel_5 = _captured_panel_5;
      this.$deferredAction();
    }
    promptUser_closure2.builtin$cls = "promptUser_closure2";
    if (!("name" in promptUser_closure2))
      promptUser_closure2.name = "promptUser_closure2";
    $desc = $collectedClasses$.promptUser_closure2[1];
    promptUser_closure2.prototype = $desc;
    promptUser_closure2.$__fields__ = ["_captured_disposables_4", "_captured_panel_5"];
    function PermissiveNodeValidator() {
      this.$deferredAction();
    }
    PermissiveNodeValidator.builtin$cls = "PermissiveNodeValidator";
    if (!("name" in PermissiveNodeValidator))
      PermissiveNodeValidator.name = "PermissiveNodeValidator";
    $desc = $collectedClasses$.PermissiveNodeValidator[1];
    PermissiveNodeValidator.prototype = $desc;
    PermissiveNodeValidator.$__fields__ = [];
    function TrustedHtmlTreeSanitizer() {
      this.$deferredAction();
    }
    TrustedHtmlTreeSanitizer.builtin$cls = "TrustedHtmlTreeSanitizer";
    if (!("name" in TrustedHtmlTreeSanitizer))
      TrustedHtmlTreeSanitizer.name = "TrustedHtmlTreeSanitizer";
    $desc = $collectedClasses$.TrustedHtmlTreeSanitizer[1];
    TrustedHtmlTreeSanitizer.prototype = $desc;
    TrustedHtmlTreeSanitizer.$__fields__ = [];
    function loadPackageJson_closure() {
      this.$deferredAction();
    }
    loadPackageJson_closure.builtin$cls = "loadPackageJson_closure";
    if (!("name" in loadPackageJson_closure))
      loadPackageJson_closure.name = "loadPackageJson_closure";
    $desc = $collectedClasses$.loadPackageJson_closure[1];
    loadPackageJson_closure.prototype = $desc;
    loadPackageJson_closure.$__fields__ = [];
    function getPackageVersion_closure() {
      this.$deferredAction();
    }
    getPackageVersion_closure.builtin$cls = "getPackageVersion_closure";
    if (!("name" in getPackageVersion_closure))
      getPackageVersion_closure.name = "getPackageVersion_closure";
    $desc = $collectedClasses$.getPackageVersion_closure[1];
    getPackageVersion_closure.prototype = $desc;
    getPackageVersion_closure.$__fields__ = [];
    function AutocompleteProvider() {
      this.$deferredAction();
    }
    AutocompleteProvider.builtin$cls = "AutocompleteProvider";
    if (!("name" in AutocompleteProvider))
      AutocompleteProvider.name = "AutocompleteProvider";
    $desc = $collectedClasses$.AutocompleteProvider[1];
    AutocompleteProvider.prototype = $desc;
    AutocompleteProvider.$__fields__ = [];
    function AutocompleteProvider__getSuggestions_closure(_captured_timer_0) {
      this._captured_timer_0 = _captured_timer_0;
      this.$deferredAction();
    }
    AutocompleteProvider__getSuggestions_closure.builtin$cls = "AutocompleteProvider__getSuggestions_closure";
    if (!("name" in AutocompleteProvider__getSuggestions_closure))
      AutocompleteProvider__getSuggestions_closure.name = "AutocompleteProvider__getSuggestions_closure";
    $desc = $collectedClasses$.AutocompleteProvider__getSuggestions_closure[1];
    AutocompleteProvider__getSuggestions_closure.prototype = $desc;
    AutocompleteProvider__getSuggestions_closure.$__fields__ = ["_captured_timer_0"];
    function AutocompleteProvider__getSuggestions__closure() {
      this.$deferredAction();
    }
    AutocompleteProvider__getSuggestions__closure.builtin$cls = "AutocompleteProvider__getSuggestions__closure";
    if (!("name" in AutocompleteProvider__getSuggestions__closure))
      AutocompleteProvider__getSuggestions__closure.name = "AutocompleteProvider__getSuggestions__closure";
    $desc = $collectedClasses$.AutocompleteProvider__getSuggestions__closure[1];
    AutocompleteProvider__getSuggestions__closure.prototype = $desc;
    AutocompleteProvider__getSuggestions__closure.$__fields__ = [];
    function AutocompleteOptions(editor, bufferPosition, scopeDescriptor, prefix) {
      this.editor = editor;
      this.bufferPosition = bufferPosition;
      this.scopeDescriptor = scopeDescriptor;
      this.prefix = prefix;
      this.$deferredAction();
    }
    AutocompleteOptions.builtin$cls = "AutocompleteOptions";
    if (!("name" in AutocompleteOptions))
      AutocompleteOptions.name = "AutocompleteOptions";
    $desc = $collectedClasses$.AutocompleteOptions[1];
    AutocompleteOptions.prototype = $desc;
    AutocompleteOptions.$__fields__ = ["editor", "bufferPosition", "scopeDescriptor", "prefix"];
    function Suggestion(text, snippet, displayText, replacementPrefix, type, leftLabel, leftLabelHTML, rightLabel, rightLabelHTML, className, iconHTML, description, descriptionMoreURL, requiredImport) {
      this.text = text;
      this.snippet = snippet;
      this.displayText = displayText;
      this.replacementPrefix = replacementPrefix;
      this.type = type;
      this.leftLabel = leftLabel;
      this.leftLabelHTML = leftLabelHTML;
      this.rightLabel = rightLabel;
      this.rightLabelHTML = rightLabelHTML;
      this.className = className;
      this.iconHTML = iconHTML;
      this.description = description;
      this.descriptionMoreURL = descriptionMoreURL;
      this.requiredImport = requiredImport;
      this.$deferredAction();
    }
    Suggestion.builtin$cls = "Suggestion";
    if (!("name" in Suggestion))
      Suggestion.name = "Suggestion";
    $desc = $collectedClasses$.Suggestion[1];
    Suggestion.prototype = $desc;
    Suggestion.$__fields__ = ["text", "snippet", "displayText", "replacementPrefix", "type", "leftLabel", "leftLabelHTML", "rightLabel", "rightLabelHTML", "className", "iconHTML", "description", "descriptionMoreURL", "requiredImport"];
    Suggestion.prototype.get$text = function(receiver) {
      return this.text;
    };
    Suggestion.prototype.get$type = function(receiver) {
      return this.type;
    };
    function _checkChangelog_closure(_captured_currentVersion_0, _captured_lastVersion_1) {
      this._captured_currentVersion_0 = _captured_currentVersion_0;
      this._captured_lastVersion_1 = _captured_lastVersion_1;
      this.$deferredAction();
    }
    _checkChangelog_closure.builtin$cls = "_checkChangelog_closure";
    if (!("name" in _checkChangelog_closure))
      _checkChangelog_closure.name = "_checkChangelog_closure";
    $desc = $collectedClasses$._checkChangelog_closure[1];
    _checkChangelog_closure.prototype = $desc;
    _checkChangelog_closure.$__fields__ = ["_captured_currentVersion_0", "_captured_lastVersion_1"];
    function _extractVersion_closure() {
      this.$deferredAction();
    }
    _extractVersion_closure.builtin$cls = "_extractVersion_closure";
    if (!("name" in _extractVersion_closure))
      _extractVersion_closure.name = "_extractVersion_closure";
    $desc = $collectedClasses$._extractVersion_closure[1];
    _extractVersion_closure.prototype = $desc;
    _extractVersion_closure.$__fields__ = [];
    function _extractVersion_closure0(_captured_inclusive_0, _captured_lastVersion_1) {
      this._captured_inclusive_0 = _captured_inclusive_0;
      this._captured_lastVersion_1 = _captured_lastVersion_1;
      this.$deferredAction();
    }
    _extractVersion_closure0.builtin$cls = "_extractVersion_closure0";
    if (!("name" in _extractVersion_closure0))
      _extractVersion_closure0.name = "_extractVersion_closure0";
    $desc = $collectedClasses$._extractVersion_closure0[1];
    _extractVersion_closure0.prototype = $desc;
    _extractVersion_closure0.$__fields__ = ["_captured_inclusive_0", "_captured_lastVersion_1"];
    function NavigationHelper(_declaration_nav$_commands, _lastNavInfo, _navCompleters, _eventListener) {
      this._declaration_nav$_commands = _declaration_nav$_commands;
      this._lastNavInfo = _lastNavInfo;
      this._navCompleters = _navCompleters;
      this._eventListener = _eventListener;
      this.$deferredAction();
    }
    NavigationHelper.builtin$cls = "NavigationHelper";
    if (!("name" in NavigationHelper))
      NavigationHelper.name = "NavigationHelper";
    $desc = $collectedClasses$.NavigationHelper[1];
    NavigationHelper.prototype = $desc;
    NavigationHelper.$__fields__ = ["_declaration_nav$_commands", "_lastNavInfo", "_navCompleters", "_eventListener"];
    function NavigationHelper__activate_closure(_declaration_nav$_captured_this_0, _declaration_nav$_captured_editor_1) {
      this._declaration_nav$_captured_this_0 = _declaration_nav$_captured_this_0;
      this._declaration_nav$_captured_editor_1 = _declaration_nav$_captured_editor_1;
      this.$deferredAction();
    }
    NavigationHelper__activate_closure.builtin$cls = "NavigationHelper__activate_closure";
    if (!("name" in NavigationHelper__activate_closure))
      NavigationHelper__activate_closure.name = "NavigationHelper__activate_closure";
    $desc = $collectedClasses$.NavigationHelper__activate_closure[1];
    NavigationHelper__activate_closure.prototype = $desc;
    NavigationHelper__activate_closure.$__fields__ = ["_declaration_nav$_captured_this_0", "_declaration_nav$_captured_editor_1"];
    function NavigationHelper__activate__closure(_declaration_nav$_captured_this_2, _declaration_nav$_captured_editor_3) {
      this._declaration_nav$_captured_this_2 = _declaration_nav$_captured_this_2;
      this._declaration_nav$_captured_editor_3 = _declaration_nav$_captured_editor_3;
      this.$deferredAction();
    }
    NavigationHelper__activate__closure.builtin$cls = "NavigationHelper__activate__closure";
    if (!("name" in NavigationHelper__activate__closure))
      NavigationHelper__activate__closure.name = "NavigationHelper__activate__closure";
    $desc = $collectedClasses$.NavigationHelper__activate__closure[1];
    NavigationHelper__activate__closure.prototype = $desc;
    NavigationHelper__activate__closure.$__fields__ = ["_declaration_nav$_captured_this_2", "_declaration_nav$_captured_editor_3"];
    function NavigationHelper__handleNavigateEditor_closure(_declaration_nav$_captured_this_0, _declaration_nav$_captured_editor_1, _captured_offset_2) {
      this._declaration_nav$_captured_this_0 = _declaration_nav$_captured_this_0;
      this._declaration_nav$_captured_editor_1 = _declaration_nav$_captured_editor_1;
      this._captured_offset_2 = _captured_offset_2;
      this.$deferredAction();
    }
    NavigationHelper__handleNavigateEditor_closure.builtin$cls = "NavigationHelper__handleNavigateEditor_closure";
    if (!("name" in NavigationHelper__handleNavigateEditor_closure))
      NavigationHelper__handleNavigateEditor_closure.name = "NavigationHelper__handleNavigateEditor_closure";
    $desc = $collectedClasses$.NavigationHelper__handleNavigateEditor_closure[1];
    NavigationHelper__handleNavigateEditor_closure.prototype = $desc;
    NavigationHelper__handleNavigateEditor_closure.$__fields__ = ["_declaration_nav$_captured_this_0", "_declaration_nav$_captured_editor_1", "_captured_offset_2"];
    function NavigationHelper__handleNavigateEditor_closure0(_declaration_nav$_captured_this_3) {
      this._declaration_nav$_captured_this_3 = _declaration_nav$_captured_this_3;
      this.$deferredAction();
    }
    NavigationHelper__handleNavigateEditor_closure0.builtin$cls = "NavigationHelper__handleNavigateEditor_closure0";
    if (!("name" in NavigationHelper__handleNavigateEditor_closure0))
      NavigationHelper__handleNavigateEditor_closure0.name = "NavigationHelper__handleNavigateEditor_closure0";
    $desc = $collectedClasses$.NavigationHelper__handleNavigateEditor_closure0[1];
    NavigationHelper__handleNavigateEditor_closure0.prototype = $desc;
    NavigationHelper__handleNavigateEditor_closure0.$__fields__ = ["_declaration_nav$_captured_this_3"];
    function NavigationHelper__getNavigationInfoFor_closure(_declaration_nav$_captured_completer_0) {
      this._declaration_nav$_captured_completer_0 = _declaration_nav$_captured_completer_0;
      this.$deferredAction();
    }
    NavigationHelper__getNavigationInfoFor_closure.builtin$cls = "NavigationHelper__getNavigationInfoFor_closure";
    if (!("name" in NavigationHelper__getNavigationInfoFor_closure))
      NavigationHelper__getNavigationInfoFor_closure.name = "NavigationHelper__getNavigationInfoFor_closure";
    $desc = $collectedClasses$.NavigationHelper__getNavigationInfoFor_closure[1];
    NavigationHelper__getNavigationInfoFor_closure.prototype = $desc;
    NavigationHelper__getNavigationInfoFor_closure.$__fields__ = ["_declaration_nav$_captured_completer_0"];
    function NavigationHelper__getNavigationInfoFor_closure0(_declaration_nav$_captured_this_1, _declaration_nav$_captured_path_2) {
      this._declaration_nav$_captured_this_1 = _declaration_nav$_captured_this_1;
      this._declaration_nav$_captured_path_2 = _declaration_nav$_captured_path_2;
      this.$deferredAction();
    }
    NavigationHelper__getNavigationInfoFor_closure0.builtin$cls = "NavigationHelper__getNavigationInfoFor_closure0";
    if (!("name" in NavigationHelper__getNavigationInfoFor_closure0))
      NavigationHelper__getNavigationInfoFor_closure0.name = "NavigationHelper__getNavigationInfoFor_closure0";
    $desc = $collectedClasses$.NavigationHelper__getNavigationInfoFor_closure0[1];
    NavigationHelper__getNavigationInfoFor_closure0.prototype = $desc;
    NavigationHelper__getNavigationInfoFor_closure0.$__fields__ = ["_declaration_nav$_captured_this_1", "_declaration_nav$_captured_path_2"];
    function NavigationHelper__processNavInfo_closure(_declaration_nav$_captured_target_0, _captured_file_1) {
      this._declaration_nav$_captured_target_0 = _declaration_nav$_captured_target_0;
      this._captured_file_1 = _captured_file_1;
      this.$deferredAction();
    }
    NavigationHelper__processNavInfo_closure.builtin$cls = "NavigationHelper__processNavInfo_closure";
    if (!("name" in NavigationHelper__processNavInfo_closure))
      NavigationHelper__processNavInfo_closure.name = "NavigationHelper__processNavInfo_closure";
    $desc = $collectedClasses$.NavigationHelper__processNavInfo_closure[1];
    NavigationHelper__processNavInfo_closure.prototype = $desc;
    NavigationHelper__processNavInfo_closure.$__fields__ = ["_declaration_nav$_captured_target_0", "_captured_file_1"];
    function _handleEnterKey_closure(_editing$_captured_editor_1) {
      this._editing$_captured_editor_1 = _editing$_captured_editor_1;
      this.$deferredAction();
    }
    _handleEnterKey_closure.builtin$cls = "_handleEnterKey_closure";
    if (!("name" in _handleEnterKey_closure))
      _handleEnterKey_closure.name = "_handleEnterKey_closure";
    $desc = $collectedClasses$._handleEnterKey_closure[1];
    _handleEnterKey_closure.prototype = $desc;
    _handleEnterKey_closure.$__fields__ = ["_editing$_captured_editor_1"];
    function _handleEnterKey_closure0(_editing$_box_0, _captured_editor_2) {
      this._editing$_box_0 = _editing$_box_0;
      this._captured_editor_2 = _captured_editor_2;
      this.$deferredAction();
    }
    _handleEnterKey_closure0.builtin$cls = "_handleEnterKey_closure0";
    if (!("name" in _handleEnterKey_closure0))
      _handleEnterKey_closure0.name = "_handleEnterKey_closure0";
    $desc = $collectedClasses$._handleEnterKey_closure0[1];
    _handleEnterKey_closure0.prototype = $desc;
    _handleEnterKey_closure0.$__fields__ = ["_editing$_box_0", "_captured_editor_2"];
    function _handleEnterKey_closure1(_editing$_captured_editor_3) {
      this._editing$_captured_editor_3 = _editing$_captured_editor_3;
      this.$deferredAction();
    }
    _handleEnterKey_closure1.builtin$cls = "_handleEnterKey_closure1";
    if (!("name" in _handleEnterKey_closure1))
      _handleEnterKey_closure1.name = "_handleEnterKey_closure1";
    $desc = $collectedClasses$._handleEnterKey_closure1[1];
    _handleEnterKey_closure1.prototype = $desc;
    _handleEnterKey_closure1.$__fields__ = ["_editing$_captured_editor_3"];
    function _handleEnterKey_closure2(_captured_editor_4) {
      this._captured_editor_4 = _captured_editor_4;
      this.$deferredAction();
    }
    _handleEnterKey_closure2.builtin$cls = "_handleEnterKey_closure2";
    if (!("name" in _handleEnterKey_closure2))
      _handleEnterKey_closure2.name = "_handleEnterKey_closure2";
    $desc = $collectedClasses$._handleEnterKey_closure2[1];
    _handleEnterKey_closure2.prototype = $desc;
    _handleEnterKey_closure2.$__fields__ = ["_captured_editor_4"];
    function _handleEnterKey_closure3(_captured_editor_5) {
      this._captured_editor_5 = _captured_editor_5;
      this.$deferredAction();
    }
    _handleEnterKey_closure3.builtin$cls = "_handleEnterKey_closure3";
    if (!("name" in _handleEnterKey_closure3))
      _handleEnterKey_closure3.name = "_handleEnterKey_closure3";
    $desc = $collectedClasses$._handleEnterKey_closure3[1];
    _handleEnterKey_closure3.prototype = $desc;
    _handleEnterKey_closure3.$__fields__ = ["_captured_editor_5"];
    function _handleEnterKey_closure4(_captured_editor_6) {
      this._captured_editor_6 = _captured_editor_6;
      this.$deferredAction();
    }
    _handleEnterKey_closure4.builtin$cls = "_handleEnterKey_closure4";
    if (!("name" in _handleEnterKey_closure4))
      _handleEnterKey_closure4.name = "_handleEnterKey_closure4";
    $desc = $collectedClasses$._handleEnterKey_closure4[1];
    _handleEnterKey_closure4.prototype = $desc;
    _handleEnterKey_closure4.$__fields__ = ["_captured_editor_6"];
    function _handleEnterKey_closure5(_editing$_box_0, _captured_editor_7) {
      this._editing$_box_0 = _editing$_box_0;
      this._captured_editor_7 = _captured_editor_7;
      this.$deferredAction();
    }
    _handleEnterKey_closure5.builtin$cls = "_handleEnterKey_closure5";
    if (!("name" in _handleEnterKey_closure5))
      _handleEnterKey_closure5.name = "_handleEnterKey_closure5";
    $desc = $collectedClasses$._handleEnterKey_closure5[1];
    _handleEnterKey_closure5.prototype = $desc;
    _handleEnterKey_closure5.$__fields__ = ["_editing$_box_0", "_captured_editor_7"];
    function applyEdits_closure(_captured_edits_0, _editors$_captured_buffer_1) {
      this._captured_edits_0 = _captured_edits_0;
      this._editors$_captured_buffer_1 = _editors$_captured_buffer_1;
      this.$deferredAction();
    }
    applyEdits_closure.builtin$cls = "applyEdits_closure";
    if (!("name" in applyEdits_closure))
      applyEdits_closure.name = "applyEdits_closure";
    $desc = $collectedClasses$.applyEdits_closure[1];
    applyEdits_closure.prototype = $desc;
    applyEdits_closure.$__fields__ = ["_captured_edits_0", "_editors$_captured_buffer_1"];
    function applyEdits__closure(_captured_buffer_2) {
      this._captured_buffer_2 = _captured_buffer_2;
      this.$deferredAction();
    }
    applyEdits__closure.builtin$cls = "applyEdits__closure";
    if (!("name" in applyEdits__closure))
      applyEdits__closure.name = "applyEdits__closure";
    $desc = $collectedClasses$.applyEdits__closure[1];
    applyEdits__closure.prototype = $desc;
    applyEdits__closure.$__fields__ = ["_captured_buffer_2"];
    function selectEditGroups_closure(_editors$_box_0, _editors$_captured_buffer_1) {
      this._editors$_box_0 = _editors$_box_0;
      this._editors$_captured_buffer_1 = _editors$_captured_buffer_1;
      this.$deferredAction();
    }
    selectEditGroups_closure.builtin$cls = "selectEditGroups_closure";
    if (!("name" in selectEditGroups_closure))
      selectEditGroups_closure.name = "selectEditGroups_closure";
    $desc = $collectedClasses$.selectEditGroups_closure[1];
    selectEditGroups_closure.prototype = $desc;
    selectEditGroups_closure.$__fields__ = ["_editors$_box_0", "_editors$_captured_buffer_1"];
    function _sortEdits_closure() {
      this.$deferredAction();
    }
    _sortEdits_closure.builtin$cls = "_sortEdits_closure";
    if (!("name" in _sortEdits_closure))
      _sortEdits_closure.name = "_sortEdits_closure";
    $desc = $collectedClasses$._sortEdits_closure[1];
    _sortEdits_closure.prototype = $desc;
    _sortEdits_closure.$__fields__ = [];
    function EditorManager(dartEditors, dartProjectEditors) {
      this.dartEditors = dartEditors;
      this.dartProjectEditors = dartProjectEditors;
      this.$deferredAction();
    }
    EditorManager.builtin$cls = "EditorManager";
    if (!("name" in EditorManager))
      EditorManager.name = "EditorManager";
    $desc = $collectedClasses$.EditorManager[1];
    EditorManager.prototype = $desc;
    EditorManager.$__fields__ = ["dartEditors", "dartProjectEditors"];
    EditorManager.prototype.get$dartProjectEditors = function() {
      return this.dartProjectEditors;
    };
    function EditorManager_jumpToLocation_closure(_captured_length_0) {
      this._captured_length_0 = _captured_length_0;
      this.$deferredAction();
    }
    EditorManager_jumpToLocation_closure.builtin$cls = "EditorManager_jumpToLocation_closure";
    if (!("name" in EditorManager_jumpToLocation_closure))
      EditorManager_jumpToLocation_closure.name = "EditorManager_jumpToLocation_closure";
    $desc = $collectedClasses$.EditorManager_jumpToLocation_closure[1];
    EditorManager_jumpToLocation_closure.prototype = $desc;
    EditorManager_jumpToLocation_closure.$__fields__ = ["_captured_length_0"];
    function Editors(_editors$_matches, _editorObserve, _itemObserve, _editors$_subs, _editorOpenedController, _activeEditorController, _editorClosedController, _activeEditor, _openEditors) {
      this._editors$_matches = _editors$_matches;
      this._editorObserve = _editorObserve;
      this._itemObserve = _itemObserve;
      this._editors$_subs = _editors$_subs;
      this._editorOpenedController = _editorOpenedController;
      this._activeEditorController = _activeEditorController;
      this._editorClosedController = _editorClosedController;
      this._activeEditor = _activeEditor;
      this._openEditors = _openEditors;
      this.$deferredAction();
    }
    Editors.builtin$cls = "Editors";
    if (!("name" in Editors))
      Editors.name = "Editors";
    $desc = $collectedClasses$.Editors[1];
    Editors.prototype = $desc;
    Editors.$__fields__ = ["_editors$_matches", "_editorObserve", "_itemObserve", "_editors$_subs", "_editorOpenedController", "_activeEditorController", "_editorClosedController", "_activeEditor", "_openEditors"];
    function Editors__observeTextEditors_closure(_editors$_box_0, _editors$_captured_this_1, _editors$_captured_editor_2) {
      this._editors$_box_0 = _editors$_box_0;
      this._editors$_captured_this_1 = _editors$_captured_this_1;
      this._editors$_captured_editor_2 = _editors$_captured_editor_2;
      this.$deferredAction();
    }
    Editors__observeTextEditors_closure.builtin$cls = "Editors__observeTextEditors_closure";
    if (!("name" in Editors__observeTextEditors_closure))
      Editors__observeTextEditors_closure.name = "Editors__observeTextEditors_closure";
    $desc = $collectedClasses$.Editors__observeTextEditors_closure[1];
    Editors__observeTextEditors_closure.prototype = $desc;
    Editors__observeTextEditors_closure.$__fields__ = ["_editors$_box_0", "_editors$_captured_this_1", "_editors$_captured_editor_2"];
    function CoreElement(element) {
      this.element = element;
      this.$deferredAction();
    }
    CoreElement.builtin$cls = "CoreElement";
    if (!("name" in CoreElement))
      CoreElement.name = "CoreElement";
    $desc = $collectedClasses$.CoreElement[1];
    CoreElement.prototype = $desc;
    CoreElement.$__fields__ = ["element"];
    CoreElement.prototype.get$element = function() {
      return this.element;
    };
    function CoreElement_add_closure(_elements$_captured_this_0) {
      this._elements$_captured_this_0 = _elements$_captured_this_0;
      this.$deferredAction();
    }
    CoreElement_add_closure.builtin$cls = "CoreElement_add_closure";
    if (!("name" in CoreElement_add_closure))
      CoreElement_add_closure.name = "CoreElement_add_closure";
    $desc = $collectedClasses$.CoreElement_add_closure[1];
    CoreElement_add_closure.prototype = $desc;
    CoreElement_add_closure.$__fields__ = ["_elements$_captured_this_0"];
    function CoreElement_click_closure(_captured_handle_0) {
      this._captured_handle_0 = _captured_handle_0;
      this.$deferredAction();
    }
    CoreElement_click_closure.builtin$cls = "CoreElement_click_closure";
    if (!("name" in CoreElement_click_closure))
      CoreElement_click_closure.name = "CoreElement_click_closure";
    $desc = $collectedClasses$.CoreElement_click_closure[1];
    CoreElement_click_closure.prototype = $desc;
    CoreElement_click_closure.$__fields__ = ["_captured_handle_0"];
    function ProgressElement(_progress, element) {
      this._progress = _progress;
      this.element = element;
      this.$deferredAction();
    }
    ProgressElement.builtin$cls = "ProgressElement";
    if (!("name" in ProgressElement))
      ProgressElement.name = "ProgressElement";
    $desc = $collectedClasses$.ProgressElement[1];
    ProgressElement.prototype = $desc;
    ProgressElement.$__fields__ = ["_progress", "element"];
    function ViewResizer(_elements$_controller, _elements$_offset, _moveSub, _upSub, element) {
      this._elements$_controller = _elements$_controller;
      this._elements$_offset = _elements$_offset;
      this._moveSub = _moveSub;
      this._upSub = _upSub;
      this.element = element;
      this.$deferredAction();
    }
    ViewResizer.builtin$cls = "ViewResizer";
    if (!("name" in ViewResizer))
      ViewResizer.name = "ViewResizer";
    $desc = $collectedClasses$.ViewResizer[1];
    ViewResizer.prototype = $desc;
    ViewResizer.$__fields__ = ["_elements$_controller", "_elements$_offset", "_moveSub", "_upSub", "element"];
    function ViewResizer__init_closure0(_elements$_captured_this_0) {
      this._elements$_captured_this_0 = _elements$_captured_this_0;
      this.$deferredAction();
    }
    ViewResizer__init_closure0.builtin$cls = "ViewResizer__init_closure0";
    if (!("name" in ViewResizer__init_closure0))
      ViewResizer__init_closure0.name = "ViewResizer__init_closure0";
    $desc = $collectedClasses$.ViewResizer__init_closure0[1];
    ViewResizer__init_closure0.prototype = $desc;
    ViewResizer__init_closure0.$__fields__ = ["_elements$_captured_this_0"];
    function ViewResizer__init_closure(_elements$_captured_this_1, _captured_cancel_2) {
      this._elements$_captured_this_1 = _elements$_captured_this_1;
      this._captured_cancel_2 = _captured_cancel_2;
      this.$deferredAction();
    }
    ViewResizer__init_closure.builtin$cls = "ViewResizer__init_closure";
    if (!("name" in ViewResizer__init_closure))
      ViewResizer__init_closure.name = "ViewResizer__init_closure";
    $desc = $collectedClasses$.ViewResizer__init_closure[1];
    ViewResizer__init_closure.prototype = $desc;
    ViewResizer__init_closure.$__fields__ = ["_elements$_captured_this_1", "_captured_cancel_2"];
    function ViewResizer__init__closure(_elements$_captured_this_3, _captured_cancel_4) {
      this._elements$_captured_this_3 = _elements$_captured_this_3;
      this._captured_cancel_4 = _captured_cancel_4;
      this.$deferredAction();
    }
    ViewResizer__init__closure.builtin$cls = "ViewResizer__init__closure";
    if (!("name" in ViewResizer__init__closure))
      ViewResizer__init__closure.name = "ViewResizer__init__closure";
    $desc = $collectedClasses$.ViewResizer__init__closure[1];
    ViewResizer__init__closure.prototype = $desc;
    ViewResizer__init__closure.$__fields__ = ["_elements$_captured_this_3", "_captured_cancel_4"];
    function ViewResizer__init__closure0(_captured_cancel_5) {
      this._captured_cancel_5 = _captured_cancel_5;
      this.$deferredAction();
    }
    ViewResizer__init__closure0.builtin$cls = "ViewResizer__init__closure0";
    if (!("name" in ViewResizer__init__closure0))
      ViewResizer__init__closure0.name = "ViewResizer__init__closure0";
    $desc = $collectedClasses$.ViewResizer__init__closure0[1];
    ViewResizer__init__closure0.prototype = $desc;
    ViewResizer__init__closure0.$__fields__ = ["_captured_cancel_5"];
    function CloseButton(element) {
      this.element = element;
      this.$deferredAction();
    }
    CloseButton.builtin$cls = "CloseButton";
    if (!("name" in CloseButton))
      CloseButton.name = "CloseButton";
    $desc = $collectedClasses$.CloseButton[1];
    CloseButton.prototype = $desc;
    CloseButton.$__fields__ = ["element"];
    function TitledModelDialog(_panel, _cancelCommand, title, content) {
      this._panel = _panel;
      this._cancelCommand = _cancelCommand;
      this.title = title;
      this.content = content;
      this.$deferredAction();
    }
    TitledModelDialog.builtin$cls = "TitledModelDialog";
    if (!("name" in TitledModelDialog))
      TitledModelDialog.name = "TitledModelDialog";
    $desc = $collectedClasses$.TitledModelDialog[1];
    TitledModelDialog.prototype = $desc;
    TitledModelDialog.$__fields__ = ["_panel", "_cancelCommand", "title", "content"];
    function TitledModelDialog_closure(_elements$_captured_this_0) {
      this._elements$_captured_this_0 = _elements$_captured_this_0;
      this.$deferredAction();
    }
    TitledModelDialog_closure.builtin$cls = "TitledModelDialog_closure";
    if (!("name" in TitledModelDialog_closure))
      TitledModelDialog_closure.name = "TitledModelDialog_closure";
    $desc = $collectedClasses$.TitledModelDialog_closure[1];
    TitledModelDialog_closure.prototype = $desc;
    TitledModelDialog_closure.$__fields__ = ["_elements$_captured_this_0"];
    function TitledModelDialog_closure0(_elements$_captured_this_1) {
      this._elements$_captured_this_1 = _elements$_captured_this_1;
      this.$deferredAction();
    }
    TitledModelDialog_closure0.builtin$cls = "TitledModelDialog_closure0";
    if (!("name" in TitledModelDialog_closure0))
      TitledModelDialog_closure0.name = "TitledModelDialog_closure0";
    $desc = $collectedClasses$.TitledModelDialog_closure0[1];
    TitledModelDialog_closure0.prototype = $desc;
    TitledModelDialog_closure0.$__fields__ = ["_elements$_captured_this_1"];
    function AtomView() {
      this.$deferredAction();
    }
    AtomView.builtin$cls = "AtomView";
    if (!("name" in AtomView))
      AtomView.name = "AtomView";
    $desc = $collectedClasses$.AtomView[1];
    AtomView.prototype = $desc;
    AtomView.$__fields__ = [];
    function AtomView_closure(_elements$_captured_this_0) {
      this._elements$_captured_this_0 = _elements$_captured_this_0;
      this.$deferredAction();
    }
    AtomView_closure.builtin$cls = "AtomView_closure";
    if (!("name" in AtomView_closure))
      AtomView_closure.name = "AtomView_closure";
    $desc = $collectedClasses$.AtomView_closure[1];
    AtomView_closure.prototype = $desc;
    AtomView_closure.$__fields__ = ["_elements$_captured_this_0"];
    function AtomView_closure0(_captured_prefName_1) {
      this._captured_prefName_1 = _captured_prefName_1;
      this.$deferredAction();
    }
    AtomView_closure0.builtin$cls = "AtomView_closure0";
    if (!("name" in AtomView_closure0))
      AtomView_closure0.name = "AtomView_closure0";
    $desc = $collectedClasses$.AtomView_closure0[1];
    AtomView_closure0.prototype = $desc;
    AtomView_closure0.$__fields__ = ["_captured_prefName_1"];
    function ListTreeBuilder(_selectedController, _doubleClickController, render, _selectedNode, _nodeToElementMap, element) {
      this._selectedController = _selectedController;
      this._doubleClickController = _doubleClickController;
      this.render = render;
      this._selectedNode = _selectedNode;
      this._nodeToElementMap = _nodeToElementMap;
      this.element = element;
      this.$deferredAction();
    }
    ListTreeBuilder.builtin$cls = "ListTreeBuilder";
    if (!("name" in ListTreeBuilder))
      ListTreeBuilder.name = "ListTreeBuilder";
    $desc = $collectedClasses$.ListTreeBuilder[1];
    ListTreeBuilder.prototype = $desc;
    ListTreeBuilder.$__fields__ = ["_selectedController", "_doubleClickController", "render", "_selectedNode", "_nodeToElementMap", "element"];
    function ListTreeBuilder__addNode_closure(_elements$_captured_this_0, _captured_node_1) {
      this._elements$_captured_this_0 = _elements$_captured_this_0;
      this._captured_node_1 = _captured_node_1;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure.builtin$cls = "ListTreeBuilder__addNode_closure";
    if (!("name" in ListTreeBuilder__addNode_closure))
      ListTreeBuilder__addNode_closure.name = "ListTreeBuilder__addNode_closure";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure[1];
    ListTreeBuilder__addNode_closure.prototype = $desc;
    ListTreeBuilder__addNode_closure.$__fields__ = ["_elements$_captured_this_0", "_captured_node_1"];
    function ListTreeBuilder__addNode_closure0(_elements$_captured_this_2, _captured_node_3) {
      this._elements$_captured_this_2 = _elements$_captured_this_2;
      this._captured_node_3 = _captured_node_3;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure0.builtin$cls = "ListTreeBuilder__addNode_closure0";
    if (!("name" in ListTreeBuilder__addNode_closure0))
      ListTreeBuilder__addNode_closure0.name = "ListTreeBuilder__addNode_closure0";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure0[1];
    ListTreeBuilder__addNode_closure0.prototype = $desc;
    ListTreeBuilder__addNode_closure0.$__fields__ = ["_elements$_captured_this_2", "_captured_node_3"];
    function ListTreeBuilder__addNode_closure1(_elements$_captured_this_4, _captured_node_5) {
      this._elements$_captured_this_4 = _elements$_captured_this_4;
      this._captured_node_5 = _captured_node_5;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure1.builtin$cls = "ListTreeBuilder__addNode_closure1";
    if (!("name" in ListTreeBuilder__addNode_closure1))
      ListTreeBuilder__addNode_closure1.name = "ListTreeBuilder__addNode_closure1";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure1[1];
    ListTreeBuilder__addNode_closure1.prototype = $desc;
    ListTreeBuilder__addNode_closure1.$__fields__ = ["_elements$_captured_this_4", "_captured_node_5"];
    function ListTreeBuilder__addNode_closure2(_elements$_captured_this_6, _captured_node_7) {
      this._elements$_captured_this_6 = _elements$_captured_this_6;
      this._captured_node_7 = _captured_node_7;
      this.$deferredAction();
    }
    ListTreeBuilder__addNode_closure2.builtin$cls = "ListTreeBuilder__addNode_closure2";
    if (!("name" in ListTreeBuilder__addNode_closure2))
      ListTreeBuilder__addNode_closure2.name = "ListTreeBuilder__addNode_closure2";
    $desc = $collectedClasses$.ListTreeBuilder__addNode_closure2[1];
    ListTreeBuilder__addNode_closure2.prototype = $desc;
    ListTreeBuilder__addNode_closure2.$__fields__ = ["_elements$_captured_this_6", "_captured_node_7"];
    function Node0(data, canHaveChildren, children) {
      this.data = data;
      this.canHaveChildren = canHaveChildren;
      this.children = children;
      this.$deferredAction();
    }
    Node0.builtin$cls = "Node0";
    if (!("name" in Node0))
      Node0.name = "Node0";
    $desc = $collectedClasses$.Node0[1];
    Node0.prototype = $desc;
    Node0.$__fields__ = ["data", "canHaveChildren", "children"];
    Node0.prototype.get$data = function(receiver) {
      return this.data;
    };
    Node0.prototype.get$canHaveChildren = function() {
      return this.canHaveChildren;
    };
    Node0.prototype.get$children = function(receiver) {
      return this.children;
    };
    function FormattingHelper(_formatting$_commands) {
      this._formatting$_commands = _formatting$_commands;
      this.$deferredAction();
    }
    FormattingHelper.builtin$cls = "FormattingHelper";
    if (!("name" in FormattingHelper))
      FormattingHelper.name = "FormattingHelper";
    $desc = $collectedClasses$.FormattingHelper[1];
    FormattingHelper.prototype = $desc;
    FormattingHelper.$__fields__ = ["_formatting$_commands"];
    function FormattingHelper_closure() {
      this.$deferredAction();
    }
    FormattingHelper_closure.builtin$cls = "FormattingHelper_closure";
    if (!("name" in FormattingHelper_closure))
      FormattingHelper_closure.name = "FormattingHelper_closure";
    $desc = $collectedClasses$.FormattingHelper_closure[1];
    FormattingHelper_closure.prototype = $desc;
    FormattingHelper_closure.$__fields__ = [];
    function FormattingHelper_closure0() {
      this.$deferredAction();
    }
    FormattingHelper_closure0.builtin$cls = "FormattingHelper_closure0";
    if (!("name" in FormattingHelper_closure0))
      FormattingHelper_closure0.name = "FormattingHelper_closure0";
    $desc = $collectedClasses$.FormattingHelper_closure0[1];
    FormattingHelper_closure0.prototype = $desc;
    FormattingHelper_closure0.$__fields__ = [];
    function FormattingHelper_formatFile_closure() {
      this.$deferredAction();
    }
    FormattingHelper_formatFile_closure.builtin$cls = "FormattingHelper_formatFile_closure";
    if (!("name" in FormattingHelper_formatFile_closure))
      FormattingHelper_formatFile_closure.name = "FormattingHelper_formatFile_closure";
    $desc = $collectedClasses$.FormattingHelper_formatFile_closure[1];
    FormattingHelper_formatFile_closure.prototype = $desc;
    FormattingHelper_formatFile_closure.$__fields__ = [];
    function FormattingHelper_formatEditor_closure(_captured_editor_0, _captured_buffer_1) {
      this._captured_editor_0 = _captured_editor_0;
      this._captured_buffer_1 = _captured_buffer_1;
      this.$deferredAction();
    }
    FormattingHelper_formatEditor_closure.builtin$cls = "FormattingHelper_formatEditor_closure";
    if (!("name" in FormattingHelper_formatEditor_closure))
      FormattingHelper_formatEditor_closure.name = "FormattingHelper_formatEditor_closure";
    $desc = $collectedClasses$.FormattingHelper_formatEditor_closure[1];
    FormattingHelper_formatEditor_closure.prototype = $desc;
    FormattingHelper_formatEditor_closure.$__fields__ = ["_captured_editor_0", "_captured_buffer_1"];
    function FormattingHelper_formatEditor_closure0() {
      this.$deferredAction();
    }
    FormattingHelper_formatEditor_closure0.builtin$cls = "FormattingHelper_formatEditor_closure0";
    if (!("name" in FormattingHelper_formatEditor_closure0))
      FormattingHelper_formatEditor_closure0.name = "FormattingHelper_formatEditor_closure0";
    $desc = $collectedClasses$.FormattingHelper_formatEditor_closure0[1];
    FormattingHelper_formatEditor_closure0.prototype = $desc;
    FormattingHelper_formatEditor_closure0.$__fields__ = [];
    function Job(name, schedulingRule) {
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    Job.builtin$cls = "Job";
    if (!("name" in Job))
      Job.name = "Job";
    $desc = $collectedClasses$.Job[1];
    Job.prototype = $desc;
    Job.$__fields__ = ["name", "schedulingRule"];
    Job.prototype.get$name = function(receiver) {
      return this.name;
    };
    Job.prototype.get$schedulingRule = function() {
      return this.schedulingRule;
    };
    function JobManager(_jobs$_controller, _jobs, _toasts, _lastNotifiedJob) {
      this._jobs$_controller = _jobs$_controller;
      this._jobs = _jobs;
      this._toasts = _toasts;
      this._lastNotifiedJob = _lastNotifiedJob;
      this.$deferredAction();
    }
    JobManager.builtin$cls = "JobManager";
    if (!("name" in JobManager))
      JobManager.name = "JobManager";
    $desc = $collectedClasses$.JobManager[1];
    JobManager.prototype = $desc;
    JobManager.$__fields__ = ["_jobs$_controller", "_jobs", "_toasts", "_lastNotifiedJob"];
    function JobManager_activeJob_closure() {
      this.$deferredAction();
    }
    JobManager_activeJob_closure.builtin$cls = "JobManager_activeJob_closure";
    if (!("name" in JobManager_activeJob_closure))
      JobManager_activeJob_closure.name = "JobManager_activeJob_closure";
    $desc = $collectedClasses$.JobManager_activeJob_closure[1];
    JobManager_activeJob_closure.prototype = $desc;
    JobManager_activeJob_closure.$__fields__ = [];
    function JobManager_activeJob_closure0() {
      this.$deferredAction();
    }
    JobManager_activeJob_closure0.builtin$cls = "JobManager_activeJob_closure0";
    if (!("name" in JobManager_activeJob_closure0))
      JobManager_activeJob_closure0.name = "JobManager_activeJob_closure0";
    $desc = $collectedClasses$.JobManager_activeJob_closure0[1];
    JobManager_activeJob_closure0.prototype = $desc;
    JobManager_activeJob_closure0.$__fields__ = [];
    function JobManager__exec_closure(_jobs$_captured_this_0, _captured_jobInstance_1, _captured_job_2) {
      this._jobs$_captured_this_0 = _jobs$_captured_this_0;
      this._captured_jobInstance_1 = _captured_jobInstance_1;
      this._captured_job_2 = _captured_job_2;
      this.$deferredAction();
    }
    JobManager__exec_closure.builtin$cls = "JobManager__exec_closure";
    if (!("name" in JobManager__exec_closure))
      JobManager__exec_closure.name = "JobManager__exec_closure";
    $desc = $collectedClasses$.JobManager__exec_closure[1];
    JobManager__exec_closure.prototype = $desc;
    JobManager__exec_closure.$__fields__ = ["_jobs$_captured_this_0", "_captured_jobInstance_1", "_captured_job_2"];
    function JobManager__exec_closure0(_jobs$_captured_this_3, _captured_jobInstance_4) {
      this._jobs$_captured_this_3 = _jobs$_captured_this_3;
      this._captured_jobInstance_4 = _captured_jobInstance_4;
      this.$deferredAction();
    }
    JobManager__exec_closure0.builtin$cls = "JobManager__exec_closure0";
    if (!("name" in JobManager__exec_closure0))
      JobManager__exec_closure0.name = "JobManager__exec_closure0";
    $desc = $collectedClasses$.JobManager__exec_closure0[1];
    JobManager__exec_closure0.prototype = $desc;
    JobManager__exec_closure0.$__fields__ = ["_jobs$_captured_this_3", "_captured_jobInstance_4"];
    function JobManager__exec_closure1(_jobs$_captured_this_5, _captured_jobInstance_6, _captured_job_7) {
      this._jobs$_captured_this_5 = _jobs$_captured_this_5;
      this._captured_jobInstance_6 = _captured_jobInstance_6;
      this._captured_job_7 = _captured_job_7;
      this.$deferredAction();
    }
    JobManager__exec_closure1.builtin$cls = "JobManager__exec_closure1";
    if (!("name" in JobManager__exec_closure1))
      JobManager__exec_closure1.name = "JobManager__exec_closure1";
    $desc = $collectedClasses$.JobManager__exec_closure1[1];
    JobManager__exec_closure1.prototype = $desc;
    JobManager__exec_closure1.$__fields__ = ["_jobs$_captured_this_5", "_captured_jobInstance_6", "_captured_job_7"];
    function JobInstance(jobs, job, _completer, _running) {
      this.jobs = jobs;
      this.job = job;
      this._completer = _completer;
      this._running = _running;
      this.$deferredAction();
    }
    JobInstance.builtin$cls = "JobInstance";
    if (!("name" in JobInstance))
      JobInstance.name = "JobInstance";
    $desc = $collectedClasses$.JobInstance[1];
    JobInstance.prototype = $desc;
    JobInstance.$__fields__ = ["jobs", "job", "_completer", "_running"];
    JobInstance.prototype.get$job = function() {
      return this.job;
    };
    JobInstance.prototype.get$_completer = function() {
      return this._completer;
    };
    JobInstance.prototype.set$_running = function(v) {
      return this._running = v;
    };
    function promiseToFuture_closure(_captured_completer_0) {
      this._captured_completer_0 = _captured_completer_0;
      this.$deferredAction();
    }
    promiseToFuture_closure.builtin$cls = "promiseToFuture_closure";
    if (!("name" in promiseToFuture_closure))
      promiseToFuture_closure.name = "promiseToFuture_closure";
    $desc = $collectedClasses$.promiseToFuture_closure[1];
    promiseToFuture_closure.prototype = $desc;
    promiseToFuture_closure.$__fields__ = ["_captured_completer_0"];
    function promiseToFuture_closure0(_js0$_captured_completer_1) {
      this._js0$_captured_completer_1 = _js0$_captured_completer_1;
      this.$deferredAction();
    }
    promiseToFuture_closure0.builtin$cls = "promiseToFuture_closure0";
    if (!("name" in promiseToFuture_closure0))
      promiseToFuture_closure0.name = "promiseToFuture_closure0";
    $desc = $collectedClasses$.promiseToFuture_closure0[1];
    promiseToFuture_closure0.prototype = $desc;
    promiseToFuture_closure0.$__fields__ = ["_js0$_captured_completer_1"];
    function ProxyHolder(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    ProxyHolder.builtin$cls = "ProxyHolder";
    if (!("name" in ProxyHolder))
      ProxyHolder.name = "ProxyHolder";
    $desc = $collectedClasses$.ProxyHolder[1];
    ProxyHolder.prototype = $desc;
    ProxyHolder.$__fields__ = ["obj"];
    ProxyHolder.prototype.get$obj = function() {
      return this.obj;
    };
    function ProxyHolder_eventStream_closure(_js0$_box_0) {
      this._js0$_box_0 = _js0$_box_0;
      this.$deferredAction();
    }
    ProxyHolder_eventStream_closure.builtin$cls = "ProxyHolder_eventStream_closure";
    if (!("name" in ProxyHolder_eventStream_closure))
      ProxyHolder_eventStream_closure.name = "ProxyHolder_eventStream_closure";
    $desc = $collectedClasses$.ProxyHolder_eventStream_closure[1];
    ProxyHolder_eventStream_closure.prototype = $desc;
    ProxyHolder_eventStream_closure.$__fields__ = ["_js0$_box_0"];
    function ProxyHolder_eventStream_closure0(_captured_controller_1) {
      this._captured_controller_1 = _captured_controller_1;
      this.$deferredAction();
    }
    ProxyHolder_eventStream_closure0.builtin$cls = "ProxyHolder_eventStream_closure0";
    if (!("name" in ProxyHolder_eventStream_closure0))
      ProxyHolder_eventStream_closure0.name = "ProxyHolder_eventStream_closure0";
    $desc = $collectedClasses$.ProxyHolder_eventStream_closure0[1];
    ProxyHolder_eventStream_closure0.prototype = $desc;
    ProxyHolder_eventStream_closure0.$__fields__ = ["_captured_controller_1"];
    function ProxyHolder_eventStream2Args_closure(_js0$_box_0) {
      this._js0$_box_0 = _js0$_box_0;
      this.$deferredAction();
    }
    ProxyHolder_eventStream2Args_closure.builtin$cls = "ProxyHolder_eventStream2Args_closure";
    if (!("name" in ProxyHolder_eventStream2Args_closure))
      ProxyHolder_eventStream2Args_closure.name = "ProxyHolder_eventStream2Args_closure";
    $desc = $collectedClasses$.ProxyHolder_eventStream2Args_closure[1];
    ProxyHolder_eventStream2Args_closure.prototype = $desc;
    ProxyHolder_eventStream2Args_closure.$__fields__ = ["_js0$_box_0"];
    function ProxyHolder_eventStream2Args_closure0(_captured_controller_1) {
      this._captured_controller_1 = _captured_controller_1;
      this.$deferredAction();
    }
    ProxyHolder_eventStream2Args_closure0.builtin$cls = "ProxyHolder_eventStream2Args_closure0";
    if (!("name" in ProxyHolder_eventStream2Args_closure0))
      ProxyHolder_eventStream2Args_closure0.name = "ProxyHolder_eventStream2Args_closure0";
    $desc = $collectedClasses$.ProxyHolder_eventStream2Args_closure0[1];
    ProxyHolder_eventStream2Args_closure0.prototype = $desc;
    ProxyHolder_eventStream2Args_closure0.$__fields__ = ["_captured_controller_1"];
    function Promise(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Promise.builtin$cls = "Promise";
    if (!("name" in Promise))
      Promise.name = "Promise";
    $desc = $collectedClasses$.Promise[1];
    Promise.prototype = $desc;
    Promise.$__fields__ = ["obj"];
    function Promise__jsObjectFromFuture_closure(_js0$_captured_future_0) {
      this._js0$_captured_future_0 = _js0$_captured_future_0;
      this.$deferredAction();
    }
    Promise__jsObjectFromFuture_closure.builtin$cls = "Promise__jsObjectFromFuture_closure";
    if (!("name" in Promise__jsObjectFromFuture_closure))
      Promise__jsObjectFromFuture_closure.name = "Promise__jsObjectFromFuture_closure";
    $desc = $collectedClasses$.Promise__jsObjectFromFuture_closure[1];
    Promise__jsObjectFromFuture_closure.prototype = $desc;
    Promise__jsObjectFromFuture_closure.$__fields__ = ["_js0$_captured_future_0"];
    function Promise__jsObjectFromFuture__closure(_captured_resolve_1) {
      this._captured_resolve_1 = _captured_resolve_1;
      this.$deferredAction();
    }
    Promise__jsObjectFromFuture__closure.builtin$cls = "Promise__jsObjectFromFuture__closure";
    if (!("name" in Promise__jsObjectFromFuture__closure))
      Promise__jsObjectFromFuture__closure.name = "Promise__jsObjectFromFuture__closure";
    $desc = $collectedClasses$.Promise__jsObjectFromFuture__closure[1];
    Promise__jsObjectFromFuture__closure.prototype = $desc;
    Promise__jsObjectFromFuture__closure.$__fields__ = ["_captured_resolve_1"];
    function Promise__jsObjectFromFuture__closure0(_captured_reject_2) {
      this._captured_reject_2 = _captured_reject_2;
      this.$deferredAction();
    }
    Promise__jsObjectFromFuture__closure0.builtin$cls = "Promise__jsObjectFromFuture__closure0";
    if (!("name" in Promise__jsObjectFromFuture__closure0))
      Promise__jsObjectFromFuture__closure0.name = "Promise__jsObjectFromFuture__closure0";
    $desc = $collectedClasses$.Promise__jsObjectFromFuture__closure0[1];
    Promise__jsObjectFromFuture__closure0.prototype = $desc;
    Promise__jsObjectFromFuture__closure0.$__fields__ = ["_captured_reject_2"];
    function JsDisposable(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    JsDisposable.builtin$cls = "JsDisposable";
    if (!("name" in JsDisposable))
      JsDisposable.name = "JsDisposable";
    $desc = $collectedClasses$.JsDisposable[1];
    JsDisposable.prototype = $desc;
    JsDisposable.$__fields__ = ["obj"];
    function EventListener(obj, eventName, _callback) {
      this.obj = obj;
      this.eventName = eventName;
      this._callback = _callback;
      this.$deferredAction();
    }
    EventListener.builtin$cls = "EventListener";
    if (!("name" in EventListener))
      EventListener.name = "EventListener";
    $desc = $collectedClasses$.EventListener[1];
    EventListener.prototype = $desc;
    EventListener.$__fields__ = ["obj", "eventName", "_callback"];
    EventListener.prototype.get$obj = function() {
      return this.obj;
    };
    function EventListener_closure(_captured_fn_0) {
      this._captured_fn_0 = _captured_fn_0;
      this.$deferredAction();
    }
    EventListener_closure.builtin$cls = "EventListener_closure";
    if (!("name" in EventListener_closure))
      EventListener_closure.name = "EventListener_closure";
    $desc = $collectedClasses$.EventListener_closure[1];
    EventListener_closure.prototype = $desc;
    EventListener_closure.$__fields__ = ["_captured_fn_0"];
    function LinterProvider() {
      this.$deferredAction();
    }
    LinterProvider.builtin$cls = "LinterProvider";
    if (!("name" in LinterProvider))
      LinterProvider.name = "LinterProvider";
    $desc = $collectedClasses$.LinterProvider[1];
    LinterProvider.prototype = $desc;
    LinterProvider.$__fields__ = [];
    function LinterConsumer() {
      this.$deferredAction();
    }
    LinterConsumer.builtin$cls = "LinterConsumer";
    if (!("name" in LinterConsumer))
      LinterConsumer.name = "LinterConsumer";
    $desc = $collectedClasses$.LinterConsumer[1];
    LinterConsumer.prototype = $desc;
    LinterConsumer.$__fields__ = [];
    function LinterService(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    LinterService.builtin$cls = "LinterService";
    if (!("name" in LinterService))
      LinterService.name = "LinterService";
    $desc = $collectedClasses$.LinterService[1];
    LinterService.prototype = $desc;
    LinterService.$__fields__ = ["obj"];
    function LinterService_setMessages_closure() {
      this.$deferredAction();
    }
    LinterService_setMessages_closure.builtin$cls = "LinterService_setMessages_closure";
    if (!("name" in LinterService_setMessages_closure))
      LinterService_setMessages_closure.name = "LinterService_setMessages_closure";
    $desc = $collectedClasses$.LinterService_setMessages_closure[1];
    LinterService_setMessages_closure.prototype = $desc;
    LinterService_setMessages_closure.$__fields__ = [];
    function LintMessage(type, text, html, filePath, range) {
      this.type = type;
      this.text = text;
      this.html = html;
      this.filePath = filePath;
      this.range = range;
      this.$deferredAction();
    }
    LintMessage.builtin$cls = "LintMessage";
    if (!("name" in LintMessage))
      LintMessage.name = "LintMessage";
    $desc = $collectedClasses$.LintMessage[1];
    LintMessage.prototype = $desc;
    LintMessage.$__fields__ = ["type", "text", "html", "filePath", "range"];
    LintMessage.prototype.get$type = function(receiver) {
      return this.type;
    };
    LintMessage.prototype.get$text = function(receiver) {
      return this.text;
    };
    function Rn(start, end) {
      this.start = start;
      this.end = end;
      this.$deferredAction();
    }
    Rn.builtin$cls = "Rn";
    if (!("name" in Rn))
      Rn.name = "Rn";
    $desc = $collectedClasses$.Rn[1];
    Rn.prototype = $desc;
    Rn.$__fields__ = ["start", "end"];
    function Pt(row, column) {
      this.row = row;
      this.column = column;
      this.$deferredAction();
    }
    Pt.builtin$cls = "Pt";
    if (!("name" in Pt))
      Pt.name = "Pt";
    $desc = $collectedClasses$.Pt[1];
    Pt.prototype = $desc;
    Pt.$__fields__ = ["row", "column"];
    function AtomDartPackage(disposables, subscriptions, _registeredMethods) {
      this.disposables = disposables;
      this.subscriptions = subscriptions;
      this._registeredMethods = _registeredMethods;
      this.$deferredAction();
    }
    AtomDartPackage.builtin$cls = "AtomDartPackage";
    if (!("name" in AtomDartPackage))
      AtomDartPackage.name = "AtomDartPackage";
    $desc = $collectedClasses$.AtomDartPackage[1];
    AtomDartPackage.prototype = $desc;
    AtomDartPackage.$__fields__ = ["disposables", "subscriptions", "_registeredMethods"];
    function AtomDartPackage_closure(_plugin$_captured_this_0) {
      this._plugin$_captured_this_0 = _plugin$_captured_this_0;
      this.$deferredAction();
    }
    AtomDartPackage_closure.builtin$cls = "AtomDartPackage_closure";
    if (!("name" in AtomDartPackage_closure))
      AtomDartPackage_closure.name = "AtomDartPackage_closure";
    $desc = $collectedClasses$.AtomDartPackage_closure[1];
    AtomDartPackage_closure.prototype = $desc;
    AtomDartPackage_closure.$__fields__ = ["_plugin$_captured_this_0"];
    function AtomDartPackage_closure0(_plugin$_captured_this_1) {
      this._plugin$_captured_this_1 = _plugin$_captured_this_1;
      this.$deferredAction();
    }
    AtomDartPackage_closure0.builtin$cls = "AtomDartPackage_closure0";
    if (!("name" in AtomDartPackage_closure0))
      AtomDartPackage_closure0.name = "AtomDartPackage_closure0";
    $desc = $collectedClasses$.AtomDartPackage_closure0[1];
    AtomDartPackage_closure0.prototype = $desc;
    AtomDartPackage_closure0.$__fields__ = ["_plugin$_captured_this_1"];
    function AtomDartPackage_closure1() {
      this.$deferredAction();
    }
    AtomDartPackage_closure1.builtin$cls = "AtomDartPackage_closure1";
    if (!("name" in AtomDartPackage_closure1))
      AtomDartPackage_closure1.name = "AtomDartPackage_closure1";
    $desc = $collectedClasses$.AtomDartPackage_closure1[1];
    AtomDartPackage_closure1.prototype = $desc;
    AtomDartPackage_closure1.$__fields__ = [];
    function AtomDartPackage__closure() {
      this.$deferredAction();
    }
    AtomDartPackage__closure.builtin$cls = "AtomDartPackage__closure";
    if (!("name" in AtomDartPackage__closure))
      AtomDartPackage__closure.name = "AtomDartPackage__closure";
    $desc = $collectedClasses$.AtomDartPackage__closure[1];
    AtomDartPackage__closure.prototype = $desc;
    AtomDartPackage__closure.$__fields__ = [];
    function AtomDartPackage__closure0(_captured_errorController_2, _captured_flushController_3) {
      this._captured_errorController_2 = _captured_errorController_2;
      this._captured_flushController_3 = _captured_flushController_3;
      this.$deferredAction();
    }
    AtomDartPackage__closure0.builtin$cls = "AtomDartPackage__closure0";
    if (!("name" in AtomDartPackage__closure0))
      AtomDartPackage__closure0.name = "AtomDartPackage__closure0";
    $desc = $collectedClasses$.AtomDartPackage__closure0[1];
    AtomDartPackage__closure0.prototype = $desc;
    AtomDartPackage__closure0.$__fields__ = ["_captured_errorController_2", "_captured_flushController_3"];
    function AtomDartPackage_closure2(_captured_provider_4) {
      this._captured_provider_4 = _captured_provider_4;
      this.$deferredAction();
    }
    AtomDartPackage_closure2.builtin$cls = "AtomDartPackage_closure2";
    if (!("name" in AtomDartPackage_closure2))
      AtomDartPackage_closure2.name = "AtomDartPackage_closure2";
    $desc = $collectedClasses$.AtomDartPackage_closure2[1];
    AtomDartPackage_closure2.prototype = $desc;
    AtomDartPackage_closure2.$__fields__ = ["_captured_provider_4"];
    function AtomDartPackage_packageActivated_closure() {
      this.$deferredAction();
    }
    AtomDartPackage_packageActivated_closure.builtin$cls = "AtomDartPackage_packageActivated_closure";
    if (!("name" in AtomDartPackage_packageActivated_closure))
      AtomDartPackage_packageActivated_closure.name = "AtomDartPackage_packageActivated_closure";
    $desc = $collectedClasses$.AtomDartPackage_packageActivated_closure[1];
    AtomDartPackage_packageActivated_closure.prototype = $desc;
    AtomDartPackage_packageActivated_closure.$__fields__ = [];
    function AtomDartPackage_packageActivated_closure0() {
      this.$deferredAction();
    }
    AtomDartPackage_packageActivated_closure0.builtin$cls = "AtomDartPackage_packageActivated_closure0";
    if (!("name" in AtomDartPackage_packageActivated_closure0))
      AtomDartPackage_packageActivated_closure0.name = "AtomDartPackage_packageActivated_closure0";
    $desc = $collectedClasses$.AtomDartPackage_packageActivated_closure0[1];
    AtomDartPackage_packageActivated_closure0.prototype = $desc;
    AtomDartPackage_packageActivated_closure0.$__fields__ = [];
    function AtomDartPackage_packageActivated_closure1() {
      this.$deferredAction();
    }
    AtomDartPackage_packageActivated_closure1.builtin$cls = "AtomDartPackage_packageActivated_closure1";
    if (!("name" in AtomDartPackage_packageActivated_closure1))
      AtomDartPackage_packageActivated_closure1.name = "AtomDartPackage_packageActivated_closure1";
    $desc = $collectedClasses$.AtomDartPackage_packageActivated_closure1[1];
    AtomDartPackage_packageActivated_closure1.prototype = $desc;
    AtomDartPackage_packageActivated_closure1.$__fields__ = [];
    function AtomDartPackage_packageActivated_closure2() {
      this.$deferredAction();
    }
    AtomDartPackage_packageActivated_closure2.builtin$cls = "AtomDartPackage_packageActivated_closure2";
    if (!("name" in AtomDartPackage_packageActivated_closure2))
      AtomDartPackage_packageActivated_closure2.name = "AtomDartPackage_packageActivated_closure2";
    $desc = $collectedClasses$.AtomDartPackage_packageActivated_closure2[1];
    AtomDartPackage_packageActivated_closure2.prototype = $desc;
    AtomDartPackage_packageActivated_closure2.$__fields__ = [];
    function AtomDartPackage_packageActivated__closure() {
      this.$deferredAction();
    }
    AtomDartPackage_packageActivated__closure.builtin$cls = "AtomDartPackage_packageActivated__closure";
    if (!("name" in AtomDartPackage_packageActivated__closure))
      AtomDartPackage_packageActivated__closure.name = "AtomDartPackage_packageActivated__closure";
    $desc = $collectedClasses$.AtomDartPackage_packageActivated__closure[1];
    AtomDartPackage_packageActivated__closure.prototype = $desc;
    AtomDartPackage_packageActivated__closure.$__fields__ = [];
    function AtomDartPackage_packageActivated__closure0() {
      this.$deferredAction();
    }
    AtomDartPackage_packageActivated__closure0.builtin$cls = "AtomDartPackage_packageActivated__closure0";
    if (!("name" in AtomDartPackage_packageActivated__closure0))
      AtomDartPackage_packageActivated__closure0.name = "AtomDartPackage_packageActivated__closure0";
    $desc = $collectedClasses$.AtomDartPackage_packageActivated__closure0[1];
    AtomDartPackage_packageActivated__closure0.prototype = $desc;
    AtomDartPackage_packageActivated__closure0.$__fields__ = [];
    function AtomDartPackage_packageActivated_closure3() {
      this.$deferredAction();
    }
    AtomDartPackage_packageActivated_closure3.builtin$cls = "AtomDartPackage_packageActivated_closure3";
    if (!("name" in AtomDartPackage_packageActivated_closure3))
      AtomDartPackage_packageActivated_closure3.name = "AtomDartPackage_packageActivated_closure3";
    $desc = $collectedClasses$.AtomDartPackage_packageActivated_closure3[1];
    AtomDartPackage_packageActivated_closure3.prototype = $desc;
    AtomDartPackage_packageActivated_closure3.$__fields__ = [];
    function AtomDartPackage__setupLogging_closure() {
      this.$deferredAction();
    }
    AtomDartPackage__setupLogging_closure.builtin$cls = "AtomDartPackage__setupLogging_closure";
    if (!("name" in AtomDartPackage__setupLogging_closure))
      AtomDartPackage__setupLogging_closure.name = "AtomDartPackage__setupLogging_closure";
    $desc = $collectedClasses$.AtomDartPackage__setupLogging_closure[1];
    AtomDartPackage__setupLogging_closure.prototype = $desc;
    AtomDartPackage__setupLogging_closure.$__fields__ = [];
    function exec_closure() {
      this.$deferredAction();
    }
    exec_closure.builtin$cls = "exec_closure";
    if (!("name" in exec_closure))
      exec_closure.name = "exec_closure";
    $desc = $collectedClasses$.exec_closure[1];
    exec_closure.prototype = $desc;
    exec_closure.$__fields__ = [];
    function ProcessRunner(command, args, cwd, env, _process$_process, _exitCompleter, _exit, _stdoutController, _stderrController) {
      this.command = command;
      this.args = args;
      this.cwd = cwd;
      this.env = env;
      this._process$_process = _process$_process;
      this._exitCompleter = _exitCompleter;
      this._exit = _exit;
      this._stdoutController = _stdoutController;
      this._stderrController = _stderrController;
      this.$deferredAction();
    }
    ProcessRunner.builtin$cls = "ProcessRunner";
    if (!("name" in ProcessRunner))
      ProcessRunner.name = "ProcessRunner";
    $desc = $collectedClasses$.ProcessRunner[1];
    ProcessRunner.prototype = $desc;
    ProcessRunner.$__fields__ = ["command", "args", "cwd", "env", "_process$_process", "_exitCompleter", "_exit", "_stdoutController", "_stderrController"];
    function ProcessRunner_execSimple_closure(_captured_stdout_0) {
      this._captured_stdout_0 = _captured_stdout_0;
      this.$deferredAction();
    }
    ProcessRunner_execSimple_closure.builtin$cls = "ProcessRunner_execSimple_closure";
    if (!("name" in ProcessRunner_execSimple_closure))
      ProcessRunner_execSimple_closure.name = "ProcessRunner_execSimple_closure";
    $desc = $collectedClasses$.ProcessRunner_execSimple_closure[1];
    ProcessRunner_execSimple_closure.prototype = $desc;
    ProcessRunner_execSimple_closure.$__fields__ = ["_captured_stdout_0"];
    function ProcessRunner_execSimple_closure0(_captured_stderr_1) {
      this._captured_stderr_1 = _captured_stderr_1;
      this.$deferredAction();
    }
    ProcessRunner_execSimple_closure0.builtin$cls = "ProcessRunner_execSimple_closure0";
    if (!("name" in ProcessRunner_execSimple_closure0))
      ProcessRunner_execSimple_closure0.name = "ProcessRunner_execSimple_closure0";
    $desc = $collectedClasses$.ProcessRunner_execSimple_closure0[1];
    ProcessRunner_execSimple_closure0.prototype = $desc;
    ProcessRunner_execSimple_closure0.$__fields__ = ["_captured_stderr_1"];
    function ProcessRunner_execSimple_closure1(_captured_stdout_2, _captured_stderr_3) {
      this._captured_stdout_2 = _captured_stdout_2;
      this._captured_stderr_3 = _captured_stderr_3;
      this.$deferredAction();
    }
    ProcessRunner_execSimple_closure1.builtin$cls = "ProcessRunner_execSimple_closure1";
    if (!("name" in ProcessRunner_execSimple_closure1))
      ProcessRunner_execSimple_closure1.name = "ProcessRunner_execSimple_closure1";
    $desc = $collectedClasses$.ProcessRunner_execSimple_closure1[1];
    ProcessRunner_execSimple_closure1.prototype = $desc;
    ProcessRunner_execSimple_closure1.$__fields__ = ["_captured_stdout_2", "_captured_stderr_3"];
    function ProcessRunner_execStreaming_closure1(_process$_captured_this_0) {
      this._process$_captured_this_0 = _process$_captured_this_0;
      this.$deferredAction();
    }
    ProcessRunner_execStreaming_closure1.builtin$cls = "ProcessRunner_execStreaming_closure1";
    if (!("name" in ProcessRunner_execStreaming_closure1))
      ProcessRunner_execStreaming_closure1.name = "ProcessRunner_execStreaming_closure1";
    $desc = $collectedClasses$.ProcessRunner_execStreaming_closure1[1];
    ProcessRunner_execStreaming_closure1.prototype = $desc;
    ProcessRunner_execStreaming_closure1.$__fields__ = ["_process$_captured_this_0"];
    function ProcessRunner_execStreaming_closure0(_process$_captured_this_1) {
      this._process$_captured_this_1 = _process$_captured_this_1;
      this.$deferredAction();
    }
    ProcessRunner_execStreaming_closure0.builtin$cls = "ProcessRunner_execStreaming_closure0";
    if (!("name" in ProcessRunner_execStreaming_closure0))
      ProcessRunner_execStreaming_closure0.name = "ProcessRunner_execStreaming_closure0";
    $desc = $collectedClasses$.ProcessRunner_execStreaming_closure0[1];
    ProcessRunner_execStreaming_closure0.prototype = $desc;
    ProcessRunner_execStreaming_closure0.$__fields__ = ["_process$_captured_this_1"];
    function ProcessRunner_execStreaming_closure(_process$_captured_this_2) {
      this._process$_captured_this_2 = _process$_captured_this_2;
      this.$deferredAction();
    }
    ProcessRunner_execStreaming_closure.builtin$cls = "ProcessRunner_execStreaming_closure";
    if (!("name" in ProcessRunner_execStreaming_closure))
      ProcessRunner_execStreaming_closure.name = "ProcessRunner_execStreaming_closure";
    $desc = $collectedClasses$.ProcessRunner_execStreaming_closure[1];
    ProcessRunner_execStreaming_closure.prototype = $desc;
    ProcessRunner_execStreaming_closure.$__fields__ = ["_process$_captured_this_2"];
    function ProcessRunner_kill_closure(_process$_captured_this_0) {
      this._process$_captured_this_0 = _process$_captured_this_0;
      this.$deferredAction();
    }
    ProcessRunner_kill_closure.builtin$cls = "ProcessRunner_kill_closure";
    if (!("name" in ProcessRunner_kill_closure))
      ProcessRunner_kill_closure.name = "ProcessRunner_kill_closure";
    $desc = $collectedClasses$.ProcessRunner_kill_closure[1];
    ProcessRunner_kill_closure.prototype = $desc;
    ProcessRunner_kill_closure.$__fields__ = ["_process$_captured_this_0"];
    function ProcessResult(exit, stdout, stderr) {
      this.exit = exit;
      this.stdout = stdout;
      this.stderr = stderr;
      this.$deferredAction();
    }
    ProcessResult.builtin$cls = "ProcessResult";
    if (!("name" in ProcessResult))
      ProcessResult.name = "ProcessResult";
    $desc = $collectedClasses$.ProcessResult[1];
    ProcessResult.prototype = $desc;
    ProcessResult.$__fields__ = ["exit", "stdout", "stderr"];
    ProcessResult.prototype.get$exit = function() {
      return this.exit;
    };
    ProcessResult.prototype.get$stdout = function() {
      return this.stdout;
    };
    ProcessResult.prototype.get$stderr = function() {
      return this.stderr;
    };
    function ProjectManager(_projects$_controller, _projects$_sub, _directoryListeners, projects) {
      this._projects$_controller = _projects$_controller;
      this._projects$_sub = _projects$_sub;
      this._directoryListeners = _directoryListeners;
      this.projects = projects;
      this.$deferredAction();
    }
    ProjectManager.builtin$cls = "ProjectManager";
    if (!("name" in ProjectManager))
      ProjectManager.name = "ProjectManager";
    $desc = $collectedClasses$.ProjectManager[1];
    ProjectManager.prototype = $desc;
    ProjectManager.$__fields__ = ["_projects$_controller", "_projects$_sub", "_directoryListeners", "projects"];
    ProjectManager.prototype.get$projects = function() {
      return this.projects;
    };
    function ProjectManager_closure(_projects$_captured_this_0) {
      this._projects$_captured_this_0 = _projects$_captured_this_0;
      this.$deferredAction();
    }
    ProjectManager_closure.builtin$cls = "ProjectManager_closure";
    if (!("name" in ProjectManager_closure))
      ProjectManager_closure.name = "ProjectManager_closure";
    $desc = $collectedClasses$.ProjectManager_closure[1];
    ProjectManager_closure.prototype = $desc;
    ProjectManager_closure.$__fields__ = ["_projects$_captured_this_0"];
    function ProjectManager_dispose_closure() {
      this.$deferredAction();
    }
    ProjectManager_dispose_closure.builtin$cls = "ProjectManager_dispose_closure";
    if (!("name" in ProjectManager_dispose_closure))
      ProjectManager_dispose_closure.name = "ProjectManager_dispose_closure";
    $desc = $collectedClasses$.ProjectManager_dispose_closure[1];
    ProjectManager_dispose_closure.prototype = $desc;
    ProjectManager_dispose_closure.$__fields__ = [];
    function ProjectManager__fullScanForProjects_closure() {
      this.$deferredAction();
    }
    ProjectManager__fullScanForProjects_closure.builtin$cls = "ProjectManager__fullScanForProjects_closure";
    if (!("name" in ProjectManager__fullScanForProjects_closure))
      ProjectManager__fullScanForProjects_closure.name = "ProjectManager__fullScanForProjects_closure";
    $desc = $collectedClasses$.ProjectManager__fullScanForProjects_closure[1];
    ProjectManager__fullScanForProjects_closure.prototype = $desc;
    ProjectManager__fullScanForProjects_closure.$__fields__ = [];
    function ProjectManager__fullScanForProjects_closure0(_captured_dir_0) {
      this._captured_dir_0 = _captured_dir_0;
      this.$deferredAction();
    }
    ProjectManager__fullScanForProjects_closure0.builtin$cls = "ProjectManager__fullScanForProjects_closure0";
    if (!("name" in ProjectManager__fullScanForProjects_closure0))
      ProjectManager__fullScanForProjects_closure0.name = "ProjectManager__fullScanForProjects_closure0";
    $desc = $collectedClasses$.ProjectManager__fullScanForProjects_closure0[1];
    ProjectManager__fullScanForProjects_closure0.prototype = $desc;
    ProjectManager__fullScanForProjects_closure0.$__fields__ = ["_captured_dir_0"];
    function ProjectManager__fullScanForProjects_closure1() {
      this.$deferredAction();
    }
    ProjectManager__fullScanForProjects_closure1.builtin$cls = "ProjectManager__fullScanForProjects_closure1";
    if (!("name" in ProjectManager__fullScanForProjects_closure1))
      ProjectManager__fullScanForProjects_closure1.name = "ProjectManager__fullScanForProjects_closure1";
    $desc = $collectedClasses$.ProjectManager__fullScanForProjects_closure1[1];
    ProjectManager__fullScanForProjects_closure1.prototype = $desc;
    ProjectManager__fullScanForProjects_closure1.$__fields__ = [];
    function ProjectManager__fullScanForProjects_closure2() {
      this.$deferredAction();
    }
    ProjectManager__fullScanForProjects_closure2.builtin$cls = "ProjectManager__fullScanForProjects_closure2";
    if (!("name" in ProjectManager__fullScanForProjects_closure2))
      ProjectManager__fullScanForProjects_closure2.name = "ProjectManager__fullScanForProjects_closure2";
    $desc = $collectedClasses$.ProjectManager__fullScanForProjects_closure2[1];
    ProjectManager__fullScanForProjects_closure2.prototype = $desc;
    ProjectManager__fullScanForProjects_closure2.$__fields__ = [];
    function ProjectManager__updateChangeListeners_closure(_projects$_captured_this_0, _captured_dir_1) {
      this._projects$_captured_this_0 = _projects$_captured_this_0;
      this._captured_dir_1 = _captured_dir_1;
      this.$deferredAction();
    }
    ProjectManager__updateChangeListeners_closure.builtin$cls = "ProjectManager__updateChangeListeners_closure";
    if (!("name" in ProjectManager__updateChangeListeners_closure))
      ProjectManager__updateChangeListeners_closure.name = "ProjectManager__updateChangeListeners_closure";
    $desc = $collectedClasses$.ProjectManager__updateChangeListeners_closure[1];
    ProjectManager__updateChangeListeners_closure.prototype = $desc;
    ProjectManager__updateChangeListeners_closure.$__fields__ = ["_projects$_captured_this_0", "_captured_dir_1"];
    function ProjectManager__handleDirectoryChanged_closure(_captured_dir_0) {
      this._captured_dir_0 = _captured_dir_0;
      this.$deferredAction();
    }
    ProjectManager__handleDirectoryChanged_closure.builtin$cls = "ProjectManager__handleDirectoryChanged_closure";
    if (!("name" in ProjectManager__handleDirectoryChanged_closure))
      ProjectManager__handleDirectoryChanged_closure.name = "ProjectManager__handleDirectoryChanged_closure";
    $desc = $collectedClasses$.ProjectManager__handleDirectoryChanged_closure[1];
    ProjectManager__handleDirectoryChanged_closure.prototype = $desc;
    ProjectManager__handleDirectoryChanged_closure.$__fields__ = ["_captured_dir_0"];
    function DartProject(directory) {
      this.directory = directory;
      this.$deferredAction();
    }
    DartProject.builtin$cls = "DartProject";
    if (!("name" in DartProject))
      DartProject.name = "DartProject";
    $desc = $collectedClasses$.DartProject[1];
    DartProject.prototype = $desc;
    DartProject.$__fields__ = ["directory"];
    DartProject.prototype.get$directory = function(receiver) {
      return this.directory;
    };
    function ProjectScanJob(name, schedulingRule) {
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    ProjectScanJob.builtin$cls = "ProjectScanJob";
    if (!("name" in ProjectScanJob))
      ProjectScanJob.name = "ProjectScanJob";
    $desc = $collectedClasses$.ProjectScanJob[1];
    ProjectScanJob.prototype = $desc;
    ProjectScanJob.$__fields__ = ["name", "schedulingRule"];
    function PubManager(disposables) {
      this.disposables = disposables;
      this.$deferredAction();
    }
    PubManager.builtin$cls = "PubManager";
    if (!("name" in PubManager))
      PubManager.name = "PubManager";
    $desc = $collectedClasses$.PubManager[1];
    PubManager.prototype = $desc;
    PubManager.$__fields__ = ["disposables"];
    function PubManager_closure() {
      this.$deferredAction();
    }
    PubManager_closure.builtin$cls = "PubManager_closure";
    if (!("name" in PubManager_closure))
      PubManager_closure.name = "PubManager_closure";
    $desc = $collectedClasses$.PubManager_closure[1];
    PubManager_closure.prototype = $desc;
    PubManager_closure.$__fields__ = [];
    function PubManager_closure0() {
      this.$deferredAction();
    }
    PubManager_closure0.builtin$cls = "PubManager_closure0";
    if (!("name" in PubManager_closure0))
      PubManager_closure0.name = "PubManager_closure0";
    $desc = $collectedClasses$.PubManager_closure0[1];
    PubManager_closure0.prototype = $desc;
    PubManager_closure0.$__fields__ = [];
    function PubManager_closure1() {
      this.$deferredAction();
    }
    PubManager_closure1.builtin$cls = "PubManager_closure1";
    if (!("name" in PubManager_closure1))
      PubManager_closure1.name = "PubManager_closure1";
    $desc = $collectedClasses$.PubManager_closure1[1];
    PubManager_closure1.prototype = $desc;
    PubManager_closure1.$__fields__ = [];
    function PubManager_closure2() {
      this.$deferredAction();
    }
    PubManager_closure2.builtin$cls = "PubManager_closure2";
    if (!("name" in PubManager_closure2))
      PubManager_closure2.name = "PubManager_closure2";
    $desc = $collectedClasses$.PubManager_closure2[1];
    PubManager_closure2.prototype = $desc;
    PubManager_closure2.$__fields__ = [];
    function PubManager_closure3(_pub$_captured_this_0) {
      this._pub$_captured_this_0 = _pub$_captured_this_0;
      this.$deferredAction();
    }
    PubManager_closure3.builtin$cls = "PubManager_closure3";
    if (!("name" in PubManager_closure3))
      PubManager_closure3.name = "PubManager_closure3";
    $desc = $collectedClasses$.PubManager_closure3[1];
    PubManager_closure3.prototype = $desc;
    PubManager_closure3.$__fields__ = ["_pub$_captured_this_0"];
    function PubManager_closure4(_pub$_captured_this_1) {
      this._pub$_captured_this_1 = _pub$_captured_this_1;
      this.$deferredAction();
    }
    PubManager_closure4.builtin$cls = "PubManager_closure4";
    if (!("name" in PubManager_closure4))
      PubManager_closure4.name = "PubManager_closure4";
    $desc = $collectedClasses$.PubManager_closure4[1];
    PubManager_closure4.prototype = $desc;
    PubManager_closure4.$__fields__ = ["_pub$_captured_this_1"];
    function PubManager_closure5(_pub$_captured_this_2) {
      this._pub$_captured_this_2 = _pub$_captured_this_2;
      this.$deferredAction();
    }
    PubManager_closure5.builtin$cls = "PubManager_closure5";
    if (!("name" in PubManager_closure5))
      PubManager_closure5.name = "PubManager_closure5";
    $desc = $collectedClasses$.PubManager_closure5[1];
    PubManager_closure5.prototype = $desc;
    PubManager_closure5.$__fields__ = ["_pub$_captured_this_2"];
    function PubManager__addSdkCmd_closure(_pub$_captured_callback_0) {
      this._pub$_captured_callback_0 = _pub$_captured_callback_0;
      this.$deferredAction();
    }
    PubManager__addSdkCmd_closure.builtin$cls = "PubManager__addSdkCmd_closure";
    if (!("name" in PubManager__addSdkCmd_closure))
      PubManager__addSdkCmd_closure.name = "PubManager__addSdkCmd_closure";
    $desc = $collectedClasses$.PubManager__addSdkCmd_closure[1];
    PubManager__addSdkCmd_closure.prototype = $desc;
    PubManager__addSdkCmd_closure.$__fields__ = ["_pub$_captured_callback_0"];
    function PubManager__handleRun_closure(_pub$_captured_dir_0) {
      this._pub$_captured_dir_0 = _pub$_captured_dir_0;
      this.$deferredAction();
    }
    PubManager__handleRun_closure.builtin$cls = "PubManager__handleRun_closure";
    if (!("name" in PubManager__handleRun_closure))
      PubManager__handleRun_closure.name = "PubManager__handleRun_closure";
    $desc = $collectedClasses$.PubManager__handleRun_closure[1];
    PubManager__handleRun_closure.prototype = $desc;
    PubManager__handleRun_closure.$__fields__ = ["_pub$_captured_dir_0"];
    function PubManager__handleGlobalRun_closure(_pub$_captured_dir_0) {
      this._pub$_captured_dir_0 = _pub$_captured_dir_0;
      this.$deferredAction();
    }
    PubManager__handleGlobalRun_closure.builtin$cls = "PubManager__handleGlobalRun_closure";
    if (!("name" in PubManager__handleGlobalRun_closure))
      PubManager__handleGlobalRun_closure.name = "PubManager__handleGlobalRun_closure";
    $desc = $collectedClasses$.PubManager__handleGlobalRun_closure[1];
    PubManager__handleGlobalRun_closure.prototype = $desc;
    PubManager__handleGlobalRun_closure.$__fields__ = ["_pub$_captured_dir_0"];
    function PubManager__handleGlobalActivate_closure() {
      this.$deferredAction();
    }
    PubManager__handleGlobalActivate_closure.builtin$cls = "PubManager__handleGlobalActivate_closure";
    if (!("name" in PubManager__handleGlobalActivate_closure))
      PubManager__handleGlobalActivate_closure.name = "PubManager__handleGlobalActivate_closure";
    $desc = $collectedClasses$.PubManager__handleGlobalActivate_closure[1];
    PubManager__handleGlobalActivate_closure.prototype = $desc;
    PubManager__handleGlobalActivate_closure.$__fields__ = [];
    function PubJob(path, pubCommand, _pubspecDir, name, schedulingRule) {
      this.path = path;
      this.pubCommand = pubCommand;
      this._pubspecDir = _pubspecDir;
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    PubJob.builtin$cls = "PubJob";
    if (!("name" in PubJob))
      PubJob.name = "PubJob";
    $desc = $collectedClasses$.PubJob[1];
    PubJob.prototype = $desc;
    PubJob.$__fields__ = ["path", "pubCommand", "_pubspecDir", "name", "schedulingRule"];
    PubJob.prototype.get$path = function(receiver) {
      return this.path;
    };
    function PubJob_run_closure() {
      this.$deferredAction();
    }
    PubJob_run_closure.builtin$cls = "PubJob_run_closure";
    if (!("name" in PubJob_run_closure))
      PubJob_run_closure.name = "PubJob_run_closure";
    $desc = $collectedClasses$.PubJob_run_closure[1];
    PubJob_run_closure.prototype = $desc;
    PubJob_run_closure.$__fields__ = [];
    function PubRunJob(path, args, isGlobal, _pubspecDir, name, schedulingRule) {
      this.path = path;
      this.args = args;
      this.isGlobal = isGlobal;
      this._pubspecDir = _pubspecDir;
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    PubRunJob.builtin$cls = "PubRunJob";
    if (!("name" in PubRunJob))
      PubRunJob.name = "PubRunJob";
    $desc = $collectedClasses$.PubRunJob[1];
    PubRunJob.prototype = $desc;
    PubRunJob.$__fields__ = ["path", "args", "isGlobal", "_pubspecDir", "name", "schedulingRule"];
    PubRunJob.prototype.get$path = function(receiver) {
      return this.path;
    };
    function PubRunJob_run_closure() {
      this.$deferredAction();
    }
    PubRunJob_run_closure.builtin$cls = "PubRunJob_run_closure";
    if (!("name" in PubRunJob_run_closure))
      PubRunJob_run_closure.name = "PubRunJob_run_closure";
    $desc = $collectedClasses$.PubRunJob_run_closure[1];
    PubRunJob_run_closure.prototype = $desc;
    PubRunJob_run_closure.$__fields__ = [];
    function PubGlobalActivate(packageName, name, schedulingRule) {
      this.packageName = packageName;
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    PubGlobalActivate.builtin$cls = "PubGlobalActivate";
    if (!("name" in PubGlobalActivate))
      PubGlobalActivate.name = "PubGlobalActivate";
    $desc = $collectedClasses$.PubGlobalActivate[1];
    PubGlobalActivate.prototype = $desc;
    PubGlobalActivate.$__fields__ = ["packageName", "name", "schedulingRule"];
    function PubGlobalActivate_run_closure() {
      this.$deferredAction();
    }
    PubGlobalActivate_run_closure.builtin$cls = "PubGlobalActivate_run_closure";
    if (!("name" in PubGlobalActivate_run_closure))
      PubGlobalActivate_run_closure.name = "PubGlobalActivate_run_closure";
    $desc = $collectedClasses$.PubGlobalActivate_run_closure[1];
    PubGlobalActivate_run_closure.prototype = $desc;
    PubGlobalActivate_run_closure.$__fields__ = [];
    function RebuildJob(name, schedulingRule) {
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    RebuildJob.builtin$cls = "RebuildJob";
    if (!("name" in RebuildJob))
      RebuildJob.name = "RebuildJob";
    $desc = $collectedClasses$.RebuildJob[1];
    RebuildJob.prototype = $desc;
    RebuildJob.$__fields__ = ["name", "schedulingRule"];
    function RebuildJob_run_closure(_captured_projName_0) {
      this._captured_projName_0 = _captured_projName_0;
      this.$deferredAction();
    }
    RebuildJob_run_closure.builtin$cls = "RebuildJob_run_closure";
    if (!("name" in RebuildJob_run_closure))
      RebuildJob_run_closure.name = "RebuildJob_run_closure";
    $desc = $collectedClasses$.RebuildJob_run_closure[1];
    RebuildJob_run_closure.prototype = $desc;
    RebuildJob_run_closure.$__fields__ = ["_captured_projName_0"];
    function RebuildJob_run_closure0() {
      this.$deferredAction();
    }
    RebuildJob_run_closure0.builtin$cls = "RebuildJob_run_closure0";
    if (!("name" in RebuildJob_run_closure0))
      RebuildJob_run_closure0.name = "RebuildJob_run_closure0";
    $desc = $collectedClasses$.RebuildJob_run_closure0[1];
    RebuildJob_run_closure0.prototype = $desc;
    RebuildJob_run_closure0.$__fields__ = [];
    function RebuildJob_run_closure1() {
      this.$deferredAction();
    }
    RebuildJob_run_closure1.builtin$cls = "RebuildJob_run_closure1";
    if (!("name" in RebuildJob_run_closure1))
      RebuildJob_run_closure1.name = "RebuildJob_run_closure1";
    $desc = $collectedClasses$.RebuildJob_run_closure1[1];
    RebuildJob_run_closure1.prototype = $desc;
    RebuildJob_run_closure1.$__fields__ = [];
    function RebuildJob_run_closure2(_captured_proj_1) {
      this._captured_proj_1 = _captured_proj_1;
      this.$deferredAction();
    }
    RebuildJob_run_closure2.builtin$cls = "RebuildJob_run_closure2";
    if (!("name" in RebuildJob_run_closure2))
      RebuildJob_run_closure2.name = "RebuildJob_run_closure2";
    $desc = $collectedClasses$.RebuildJob_run_closure2[1];
    RebuildJob_run_closure2.prototype = $desc;
    RebuildJob_run_closure2.$__fields__ = ["_captured_proj_1"];
    function RebuildJob_run__closure(_captured_file_2) {
      this._captured_file_2 = _captured_file_2;
      this.$deferredAction();
    }
    RebuildJob_run__closure.builtin$cls = "RebuildJob_run__closure";
    if (!("name" in RebuildJob_run__closure))
      RebuildJob_run__closure.name = "RebuildJob_run__closure";
    $desc = $collectedClasses$.RebuildJob_run__closure[1];
    RebuildJob_run__closure.prototype = $desc;
    RebuildJob_run__closure.$__fields__ = ["_captured_file_2"];
    function RebuildJob_run__closure0() {
      this.$deferredAction();
    }
    RebuildJob_run__closure0.builtin$cls = "RebuildJob_run__closure0";
    if (!("name" in RebuildJob_run__closure0))
      RebuildJob_run__closure0.name = "RebuildJob_run__closure0";
    $desc = $collectedClasses$.RebuildJob_run__closure0[1];
    RebuildJob_run__closure0.prototype = $desc;
    RebuildJob_run__closure0.$__fields__ = [];
    function RefactoringHelper(_refactor$_commands) {
      this._refactor$_commands = _refactor$_commands;
      this.$deferredAction();
    }
    RefactoringHelper.builtin$cls = "RefactoringHelper";
    if (!("name" in RefactoringHelper))
      RefactoringHelper.name = "RefactoringHelper";
    $desc = $collectedClasses$.RefactoringHelper[1];
    RefactoringHelper.prototype = $desc;
    RefactoringHelper.$__fields__ = ["_refactor$_commands"];
    function RefactoringHelper_closure(_refactor$_captured_this_0) {
      this._refactor$_captured_this_0 = _refactor$_captured_this_0;
      this.$deferredAction();
    }
    RefactoringHelper_closure.builtin$cls = "RefactoringHelper_closure";
    if (!("name" in RefactoringHelper_closure))
      RefactoringHelper_closure.name = "RefactoringHelper_closure";
    $desc = $collectedClasses$.RefactoringHelper_closure[1];
    RefactoringHelper_closure.prototype = $desc;
    RefactoringHelper_closure.$__fields__ = ["_refactor$_captured_this_0"];
    function RefactoringHelper__handleRenameRefactor_closure(_captured_oldName_1) {
      this._captured_oldName_1 = _captured_oldName_1;
      this.$deferredAction();
    }
    RefactoringHelper__handleRenameRefactor_closure.builtin$cls = "RefactoringHelper__handleRenameRefactor_closure";
    if (!("name" in RefactoringHelper__handleRenameRefactor_closure))
      RefactoringHelper__handleRenameRefactor_closure.name = "RefactoringHelper__handleRenameRefactor_closure";
    $desc = $collectedClasses$.RefactoringHelper__handleRenameRefactor_closure[1];
    RefactoringHelper__handleRenameRefactor_closure.prototype = $desc;
    RefactoringHelper__handleRenameRefactor_closure.$__fields__ = ["_captured_oldName_1"];
    function RefactoringHelper__handleRenameRefactor_closure0(_refactor$_box_0, _captured_path_2, _captured_offset_3, _captured_end_4) {
      this._refactor$_box_0 = _refactor$_box_0;
      this._captured_path_2 = _captured_path_2;
      this._captured_offset_3 = _captured_offset_3;
      this._captured_end_4 = _captured_end_4;
      this.$deferredAction();
    }
    RefactoringHelper__handleRenameRefactor_closure0.builtin$cls = "RefactoringHelper__handleRenameRefactor_closure0";
    if (!("name" in RefactoringHelper__handleRenameRefactor_closure0))
      RefactoringHelper__handleRenameRefactor_closure0.name = "RefactoringHelper__handleRenameRefactor_closure0";
    $desc = $collectedClasses$.RefactoringHelper__handleRenameRefactor_closure0[1];
    RefactoringHelper__handleRenameRefactor_closure0.prototype = $desc;
    RefactoringHelper__handleRenameRefactor_closure0.$__fields__ = ["_refactor$_box_0", "_captured_path_2", "_captured_offset_3", "_captured_end_4"];
    function RefactoringHelper__handleRenameRefactor_closure1(_refactor$_box_0, _refactor$_captured_this_5, _captured_oldName_6) {
      this._refactor$_box_0 = _refactor$_box_0;
      this._refactor$_captured_this_5 = _refactor$_captured_this_5;
      this._captured_oldName_6 = _captured_oldName_6;
      this.$deferredAction();
    }
    RefactoringHelper__handleRenameRefactor_closure1.builtin$cls = "RefactoringHelper__handleRenameRefactor_closure1";
    if (!("name" in RefactoringHelper__handleRenameRefactor_closure1))
      RefactoringHelper__handleRenameRefactor_closure1.name = "RefactoringHelper__handleRenameRefactor_closure1";
    $desc = $collectedClasses$.RefactoringHelper__handleRenameRefactor_closure1[1];
    RefactoringHelper__handleRenameRefactor_closure1.prototype = $desc;
    RefactoringHelper__handleRenameRefactor_closure1.$__fields__ = ["_refactor$_box_0", "_refactor$_captured_this_5", "_captured_oldName_6"];
    function RefactoringHelper__handleRenameRefactor__closure() {
      this.$deferredAction();
    }
    RefactoringHelper__handleRenameRefactor__closure.builtin$cls = "RefactoringHelper__handleRenameRefactor__closure";
    if (!("name" in RefactoringHelper__handleRenameRefactor__closure))
      RefactoringHelper__handleRenameRefactor__closure.name = "RefactoringHelper__handleRenameRefactor__closure";
    $desc = $collectedClasses$.RefactoringHelper__handleRenameRefactor__closure[1];
    RefactoringHelper__handleRenameRefactor__closure.prototype = $desc;
    RefactoringHelper__handleRenameRefactor__closure.$__fields__ = [];
    function RefactoringHelper__apply_closure() {
      this.$deferredAction();
    }
    RefactoringHelper__apply_closure.builtin$cls = "RefactoringHelper__apply_closure";
    if (!("name" in RefactoringHelper__apply_closure))
      RefactoringHelper__apply_closure.name = "RefactoringHelper__apply_closure";
    $desc = $collectedClasses$.RefactoringHelper__apply_closure[1];
    RefactoringHelper__apply_closure.prototype = $desc;
    RefactoringHelper__apply_closure.$__fields__ = [];
    function RefactoringHelper__apply__closure0(_captured_edit_0) {
      this._captured_edit_0 = _captured_edit_0;
      this.$deferredAction();
    }
    RefactoringHelper__apply__closure0.builtin$cls = "RefactoringHelper__apply__closure0";
    if (!("name" in RefactoringHelper__apply__closure0))
      RefactoringHelper__apply__closure0.name = "RefactoringHelper__apply__closure0";
    $desc = $collectedClasses$.RefactoringHelper__apply__closure0[1];
    RefactoringHelper__apply__closure0.prototype = $desc;
    RefactoringHelper__apply__closure0.$__fields__ = ["_captured_edit_0"];
    function RefactoringHelper__apply_closure0(_captured_sourceFileEdits_1, _captured_oldName_2, _captured_newName_3) {
      this._captured_sourceFileEdits_1 = _captured_sourceFileEdits_1;
      this._captured_oldName_2 = _captured_oldName_2;
      this._captured_newName_3 = _captured_newName_3;
      this.$deferredAction();
    }
    RefactoringHelper__apply_closure0.builtin$cls = "RefactoringHelper__apply_closure0";
    if (!("name" in RefactoringHelper__apply_closure0))
      RefactoringHelper__apply_closure0.name = "RefactoringHelper__apply_closure0";
    $desc = $collectedClasses$.RefactoringHelper__apply_closure0[1];
    RefactoringHelper__apply_closure0.prototype = $desc;
    RefactoringHelper__apply_closure0.$__fields__ = ["_captured_sourceFileEdits_1", "_captured_oldName_2", "_captured_newName_3"];
    function RefactoringHelper__apply__closure() {
      this.$deferredAction();
    }
    RefactoringHelper__apply__closure.builtin$cls = "RefactoringHelper__apply__closure";
    if (!("name" in RefactoringHelper__apply__closure))
      RefactoringHelper__apply__closure.name = "RefactoringHelper__apply__closure";
    $desc = $collectedClasses$.RefactoringHelper__apply__closure[1];
    RefactoringHelper__apply__closure.prototype = $desc;
    RefactoringHelper__apply__closure.$__fields__ = [];
    function RefactoringHelper__apply_closure1() {
      this.$deferredAction();
    }
    RefactoringHelper__apply_closure1.builtin$cls = "RefactoringHelper__apply_closure1";
    if (!("name" in RefactoringHelper__apply_closure1))
      RefactoringHelper__apply_closure1.name = "RefactoringHelper__apply_closure1";
    $desc = $collectedClasses$.RefactoringHelper__apply_closure1[1];
    RefactoringHelper__apply_closure1.prototype = $desc;
    RefactoringHelper__apply_closure1.$__fields__ = [];
    function FindReferencesHelper(_command, _references$_view) {
      this._command = _command;
      this._references$_view = _references$_view;
      this.$deferredAction();
    }
    FindReferencesHelper.builtin$cls = "FindReferencesHelper";
    if (!("name" in FindReferencesHelper))
      FindReferencesHelper.name = "FindReferencesHelper";
    $desc = $collectedClasses$.FindReferencesHelper[1];
    FindReferencesHelper.prototype = $desc;
    FindReferencesHelper.$__fields__ = ["_command", "_references$_view"];
    function FindReferencesHelper__handleReferencesEditor_closure(_references$_captured_this_0) {
      this._references$_captured_this_0 = _references$_captured_this_0;
      this.$deferredAction();
    }
    FindReferencesHelper__handleReferencesEditor_closure.builtin$cls = "FindReferencesHelper__handleReferencesEditor_closure";
    if (!("name" in FindReferencesHelper__handleReferencesEditor_closure))
      FindReferencesHelper__handleReferencesEditor_closure.name = "FindReferencesHelper__handleReferencesEditor_closure";
    $desc = $collectedClasses$.FindReferencesHelper__handleReferencesEditor_closure[1];
    FindReferencesHelper__handleReferencesEditor_closure.prototype = $desc;
    FindReferencesHelper__handleReferencesEditor_closure.$__fields__ = ["_references$_captured_this_0"];
    function FindReferencesHelper__handleReferencesEditor_closure0(_references$_captured_this_1) {
      this._references$_captured_this_1 = _references$_captured_this_1;
      this.$deferredAction();
    }
    FindReferencesHelper__handleReferencesEditor_closure0.builtin$cls = "FindReferencesHelper__handleReferencesEditor_closure0";
    if (!("name" in FindReferencesHelper__handleReferencesEditor_closure0))
      FindReferencesHelper__handleReferencesEditor_closure0.name = "FindReferencesHelper__handleReferencesEditor_closure0";
    $desc = $collectedClasses$.FindReferencesHelper__handleReferencesEditor_closure0[1];
    FindReferencesHelper__handleReferencesEditor_closure0.prototype = $desc;
    FindReferencesHelper__handleReferencesEditor_closure0.$__fields__ = ["_references$_captured_this_1"];
    function FindReferencesView(status, treeBuilder, sub, matchParser, _panel, title, content) {
      this.status = status;
      this.treeBuilder = treeBuilder;
      this.sub = sub;
      this.matchParser = matchParser;
      this._panel = _panel;
      this.title = title;
      this.content = content;
      this.$deferredAction();
    }
    FindReferencesView.builtin$cls = "FindReferencesView";
    if (!("name" in FindReferencesView))
      FindReferencesView.name = "FindReferencesView";
    $desc = $collectedClasses$.FindReferencesView[1];
    FindReferencesView.prototype = $desc;
    FindReferencesView.$__fields__ = ["status", "treeBuilder", "sub", "matchParser", "_panel", "title", "content"];
    function FindReferencesView__showView_closure(_references$_captured_this_0) {
      this._references$_captured_this_0 = _references$_captured_this_0;
      this.$deferredAction();
    }
    FindReferencesView__showView_closure.builtin$cls = "FindReferencesView__showView_closure";
    if (!("name" in FindReferencesView__showView_closure))
      FindReferencesView__showView_closure.name = "FindReferencesView__showView_closure";
    $desc = $collectedClasses$.FindReferencesView__showView_closure[1];
    FindReferencesView__showView_closure.prototype = $desc;
    FindReferencesView__showView_closure.$__fields__ = ["_references$_captured_this_0"];
    function FindReferencesView__showView__closure(_references$_captured_node_1) {
      this._references$_captured_node_1 = _references$_captured_node_1;
      this.$deferredAction();
    }
    FindReferencesView__showView__closure.builtin$cls = "FindReferencesView__showView__closure";
    if (!("name" in FindReferencesView__showView__closure))
      FindReferencesView__showView__closure.name = "FindReferencesView__showView__closure";
    $desc = $collectedClasses$.FindReferencesView__showView__closure[1];
    FindReferencesView__showView__closure.prototype = $desc;
    FindReferencesView__showView__closure.$__fields__ = ["_references$_captured_node_1"];
    function _MatchParser(file, lines) {
      this.file = file;
      this.lines = lines;
      this.$deferredAction();
    }
    _MatchParser.builtin$cls = "_MatchParser";
    if (!("name" in _MatchParser))
      _MatchParser.name = "_MatchParser";
    $desc = $collectedClasses$._MatchParser[1];
    _MatchParser.prototype = $desc;
    _MatchParser.$__fields__ = ["file", "lines"];
    _MatchParser.prototype.get$file = function() {
      return this.file;
    };
    function SdkManager(_sdk$_controller, _sdk, _prefObserve, _alreadyWarned) {
      this._sdk$_controller = _sdk$_controller;
      this._sdk = _sdk;
      this._prefObserve = _prefObserve;
      this._alreadyWarned = _alreadyWarned;
      this.$deferredAction();
    }
    SdkManager.builtin$cls = "SdkManager";
    if (!("name" in SdkManager))
      SdkManager.name = "SdkManager";
    $desc = $collectedClasses$.SdkManager[1];
    SdkManager.prototype = $desc;
    SdkManager.$__fields__ = ["_sdk$_controller", "_sdk", "_prefObserve", "_alreadyWarned"];
    function SdkManager_closure(_sdk$_captured_this_0) {
      this._sdk$_captured_this_0 = _sdk$_captured_this_0;
      this.$deferredAction();
    }
    SdkManager_closure.builtin$cls = "SdkManager_closure";
    if (!("name" in SdkManager_closure))
      SdkManager_closure.name = "SdkManager_closure";
    $desc = $collectedClasses$.SdkManager_closure[1];
    SdkManager_closure.prototype = $desc;
    SdkManager_closure.$__fields__ = ["_sdk$_captured_this_0"];
    function SdkManager_tryToAutoConfigure_closure(_captured_complainOnFailure_0) {
      this._captured_complainOnFailure_0 = _captured_complainOnFailure_0;
      this.$deferredAction();
    }
    SdkManager_tryToAutoConfigure_closure.builtin$cls = "SdkManager_tryToAutoConfigure_closure";
    if (!("name" in SdkManager_tryToAutoConfigure_closure))
      SdkManager_tryToAutoConfigure_closure.name = "SdkManager_tryToAutoConfigure_closure";
    $desc = $collectedClasses$.SdkManager_tryToAutoConfigure_closure[1];
    SdkManager_tryToAutoConfigure_closure.prototype = $desc;
    SdkManager_tryToAutoConfigure_closure.$__fields__ = ["_captured_complainOnFailure_0"];
    function SdkManager__verifyMinVersion_closure(_sdk$_captured_this_0, _captured_verbose_1) {
      this._sdk$_captured_this_0 = _sdk$_captured_this_0;
      this._captured_verbose_1 = _captured_verbose_1;
      this.$deferredAction();
    }
    SdkManager__verifyMinVersion_closure.builtin$cls = "SdkManager__verifyMinVersion_closure";
    if (!("name" in SdkManager__verifyMinVersion_closure))
      SdkManager__verifyMinVersion_closure.name = "SdkManager__verifyMinVersion_closure";
    $desc = $collectedClasses$.SdkManager__verifyMinVersion_closure[1];
    SdkManager__verifyMinVersion_closure.prototype = $desc;
    SdkManager__verifyMinVersion_closure.$__fields__ = ["_sdk$_captured_this_0", "_captured_verbose_1"];
    function Sdk(directory) {
      this.directory = directory;
      this.$deferredAction();
    }
    Sdk.builtin$cls = "Sdk";
    if (!("name" in Sdk))
      Sdk.name = "Sdk";
    $desc = $collectedClasses$.Sdk[1];
    Sdk.prototype = $desc;
    Sdk.$__fields__ = ["directory"];
    Sdk.prototype.get$directory = function(receiver) {
      return this.directory;
    };
    function Sdk_getVersion_closure() {
      this.$deferredAction();
    }
    Sdk_getVersion_closure.builtin$cls = "Sdk_getVersion_closure";
    if (!("name" in Sdk_getVersion_closure))
      Sdk_getVersion_closure.name = "Sdk_getVersion_closure";
    $desc = $collectedClasses$.Sdk_getVersion_closure[1];
    Sdk_getVersion_closure.prototype = $desc;
    Sdk_getVersion_closure.$__fields__ = [];
    function SdkDiscovery() {
      this.$deferredAction();
    }
    SdkDiscovery.builtin$cls = "SdkDiscovery";
    if (!("name" in SdkDiscovery))
      SdkDiscovery.name = "SdkDiscovery";
    $desc = $collectedClasses$.SdkDiscovery[1];
    SdkDiscovery.prototype = $desc;
    SdkDiscovery.$__fields__ = [];
    function SdkDiscovery_discoverSdk_closure(_sdk$_captured_this_0) {
      this._sdk$_captured_this_0 = _sdk$_captured_this_0;
      this.$deferredAction();
    }
    SdkDiscovery_discoverSdk_closure.builtin$cls = "SdkDiscovery_discoverSdk_closure";
    if (!("name" in SdkDiscovery_discoverSdk_closure))
      SdkDiscovery_discoverSdk_closure.name = "SdkDiscovery_discoverSdk_closure";
    $desc = $collectedClasses$.SdkDiscovery_discoverSdk_closure[1];
    SdkDiscovery_discoverSdk_closure.prototype = $desc;
    SdkDiscovery_discoverSdk_closure.$__fields__ = ["_sdk$_captured_this_0"];
    function SdkDiscovery_discoverSdk_closure0() {
      this.$deferredAction();
    }
    SdkDiscovery_discoverSdk_closure0.builtin$cls = "SdkDiscovery_discoverSdk_closure0";
    if (!("name" in SdkDiscovery_discoverSdk_closure0))
      SdkDiscovery_discoverSdk_closure0.name = "SdkDiscovery_discoverSdk_closure0";
    $desc = $collectedClasses$.SdkDiscovery_discoverSdk_closure0[1];
    SdkDiscovery_discoverSdk_closure0.prototype = $desc;
    SdkDiscovery_discoverSdk_closure0.$__fields__ = [];
    function SdkDiscovery_discoverSdk_closure1(_sdk$_captured_this_1) {
      this._sdk$_captured_this_1 = _sdk$_captured_this_1;
      this.$deferredAction();
    }
    SdkDiscovery_discoverSdk_closure1.builtin$cls = "SdkDiscovery_discoverSdk_closure1";
    if (!("name" in SdkDiscovery_discoverSdk_closure1))
      SdkDiscovery_discoverSdk_closure1.name = "SdkDiscovery_discoverSdk_closure1";
    $desc = $collectedClasses$.SdkDiscovery_discoverSdk_closure1[1];
    SdkDiscovery_discoverSdk_closure1.prototype = $desc;
    SdkDiscovery_discoverSdk_closure1.$__fields__ = ["_sdk$_captured_this_1"];
    function SdkDiscovery_discoverSdk_closure2() {
      this.$deferredAction();
    }
    SdkDiscovery_discoverSdk_closure2.builtin$cls = "SdkDiscovery_discoverSdk_closure2";
    if (!("name" in SdkDiscovery_discoverSdk_closure2))
      SdkDiscovery_discoverSdk_closure2.name = "SdkDiscovery_discoverSdk_closure2";
    $desc = $collectedClasses$.SdkDiscovery_discoverSdk_closure2[1];
    SdkDiscovery_discoverSdk_closure2.prototype = $desc;
    SdkDiscovery_discoverSdk_closure2.$__fields__ = [];
    function SdkDiscovery_discoverSdk_closure3(_sdk$_captured_this_2) {
      this._sdk$_captured_this_2 = _sdk$_captured_this_2;
      this.$deferredAction();
    }
    SdkDiscovery_discoverSdk_closure3.builtin$cls = "SdkDiscovery_discoverSdk_closure3";
    if (!("name" in SdkDiscovery_discoverSdk_closure3))
      SdkDiscovery_discoverSdk_closure3.name = "SdkDiscovery_discoverSdk_closure3";
    $desc = $collectedClasses$.SdkDiscovery_discoverSdk_closure3[1];
    SdkDiscovery_discoverSdk_closure3.prototype = $desc;
    SdkDiscovery_discoverSdk_closure3.$__fields__ = ["_sdk$_captured_this_2"];
    function SdkDiscovery_discoverSdk_closure4() {
      this.$deferredAction();
    }
    SdkDiscovery_discoverSdk_closure4.builtin$cls = "SdkDiscovery_discoverSdk_closure4";
    if (!("name" in SdkDiscovery_discoverSdk_closure4))
      SdkDiscovery_discoverSdk_closure4.name = "SdkDiscovery_discoverSdk_closure4";
    $desc = $collectedClasses$.SdkDiscovery_discoverSdk_closure4[1];
    SdkDiscovery_discoverSdk_closure4.prototype = $desc;
    SdkDiscovery_discoverSdk_closure4.$__fields__ = [];
    function SdkLocationJob(sdkManager, name, schedulingRule) {
      this.sdkManager = sdkManager;
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    SdkLocationJob.builtin$cls = "SdkLocationJob";
    if (!("name" in SdkLocationJob))
      SdkLocationJob.name = "SdkLocationJob";
    $desc = $collectedClasses$.SdkLocationJob[1];
    SdkLocationJob.prototype = $desc;
    SdkLocationJob.$__fields__ = ["sdkManager", "name", "schedulingRule"];
    function smokeTest_closure() {
      this.$deferredAction();
    }
    smokeTest_closure.builtin$cls = "smokeTest_closure";
    if (!("name" in smokeTest_closure))
      smokeTest_closure.name = "smokeTest_closure";
    $desc = $collectedClasses$.smokeTest_closure[1];
    smokeTest_closure.prototype = $desc;
    smokeTest_closure.$__fields__ = [];
    function smokeTest_closure0() {
      this.$deferredAction();
    }
    smokeTest_closure0.builtin$cls = "smokeTest_closure0";
    if (!("name" in smokeTest_closure0))
      smokeTest_closure0.name = "smokeTest_closure0";
    $desc = $collectedClasses$.smokeTest_closure0[1];
    smokeTest_closure0.prototype = $desc;
    smokeTest_closure0.$__fields__ = [];
    function smokeTest_closure1(_captured_childFile_1) {
      this._captured_childFile_1 = _captured_childFile_1;
      this.$deferredAction();
    }
    smokeTest_closure1.builtin$cls = "smokeTest_closure1";
    if (!("name" in smokeTest_closure1))
      smokeTest_closure1.name = "smokeTest_closure1";
    $desc = $collectedClasses$.smokeTest_closure1[1];
    smokeTest_closure1.prototype = $desc;
    smokeTest_closure1.$__fields__ = ["_captured_childFile_1"];
    function smokeTest_closure2() {
      this.$deferredAction();
    }
    smokeTest_closure2.builtin$cls = "smokeTest_closure2";
    if (!("name" in smokeTest_closure2))
      smokeTest_closure2.name = "smokeTest_closure2";
    $desc = $collectedClasses$.smokeTest_closure2[1];
    smokeTest_closure2.prototype = $desc;
    smokeTest_closure2.$__fields__ = [];
    function smokeTest_closure3() {
      this.$deferredAction();
    }
    smokeTest_closure3.builtin$cls = "smokeTest_closure3";
    if (!("name" in smokeTest_closure3))
      smokeTest_closure3.name = "smokeTest_closure3";
    $desc = $collectedClasses$.smokeTest_closure3[1];
    smokeTest_closure3.prototype = $desc;
    smokeTest_closure3.$__fields__ = [];
    function smokeTest_closure4() {
      this.$deferredAction();
    }
    smokeTest_closure4.builtin$cls = "smokeTest_closure4";
    if (!("name" in smokeTest_closure4))
      smokeTest_closure4.name = "smokeTest_closure4";
    $desc = $collectedClasses$.smokeTest_closure4[1];
    smokeTest_closure4.prototype = $desc;
    smokeTest_closure4.$__fields__ = [];
    function smokeTest_closure5(_captured_panel_2) {
      this._captured_panel_2 = _captured_panel_2;
      this.$deferredAction();
    }
    smokeTest_closure5.builtin$cls = "smokeTest_closure5";
    if (!("name" in smokeTest_closure5))
      smokeTest_closure5.name = "smokeTest_closure5";
    $desc = $collectedClasses$.smokeTest_closure5[1];
    smokeTest_closure5.prototype = $desc;
    smokeTest_closure5.$__fields__ = ["_captured_panel_2"];
    function smokeTest_closure8() {
      this.$deferredAction();
    }
    smokeTest_closure8.builtin$cls = "smokeTest_closure8";
    if (!("name" in smokeTest_closure8))
      smokeTest_closure8.name = "smokeTest_closure8";
    $desc = $collectedClasses$.smokeTest_closure8[1];
    smokeTest_closure8.prototype = $desc;
    smokeTest_closure8.$__fields__ = [];
    function smokeTest_closure7() {
      this.$deferredAction();
    }
    smokeTest_closure7.builtin$cls = "smokeTest_closure7";
    if (!("name" in smokeTest_closure7))
      smokeTest_closure7.name = "smokeTest_closure7";
    $desc = $collectedClasses$.smokeTest_closure7[1];
    smokeTest_closure7.prototype = $desc;
    smokeTest_closure7.$__fields__ = [];
    function smokeTest_closure6() {
      this.$deferredAction();
    }
    smokeTest_closure6.builtin$cls = "smokeTest_closure6";
    if (!("name" in smokeTest_closure6))
      smokeTest_closure6.name = "smokeTest_closure6";
    $desc = $collectedClasses$.smokeTest_closure6[1];
    smokeTest_closure6.prototype = $desc;
    smokeTest_closure6.$__fields__ = [];
    function smokeTest_closure9() {
      this.$deferredAction();
    }
    smokeTest_closure9.builtin$cls = "smokeTest_closure9";
    if (!("name" in smokeTest_closure9))
      smokeTest_closure9.name = "smokeTest_closure9";
    $desc = $collectedClasses$.smokeTest_closure9[1];
    smokeTest_closure9.prototype = $desc;
    smokeTest_closure9.$__fields__ = [];
    function smokeTest_closure10() {
      this.$deferredAction();
    }
    smokeTest_closure10.builtin$cls = "smokeTest_closure10";
    if (!("name" in smokeTest_closure10))
      smokeTest_closure10.name = "smokeTest_closure10";
    $desc = $collectedClasses$.smokeTest_closure10[1];
    smokeTest_closure10.prototype = $desc;
    smokeTest_closure10.$__fields__ = [];
    function smokeTest_closure11() {
      this.$deferredAction();
    }
    smokeTest_closure11.builtin$cls = "smokeTest_closure11";
    if (!("name" in smokeTest_closure11))
      smokeTest_closure11.name = "smokeTest_closure11";
    $desc = $collectedClasses$.smokeTest_closure11[1];
    smokeTest_closure11.prototype = $desc;
    smokeTest_closure11.$__fields__ = [];
    function smokeTest_closure12() {
      this.$deferredAction();
    }
    smokeTest_closure12.builtin$cls = "smokeTest_closure12";
    if (!("name" in smokeTest_closure12))
      smokeTest_closure12.name = "smokeTest_closure12";
    $desc = $collectedClasses$.smokeTest_closure12[1];
    smokeTest_closure12.prototype = $desc;
    smokeTest_closure12.$__fields__ = [];
    function smokeTest_closure13(_smoketest$_box_0) {
      this._smoketest$_box_0 = _smoketest$_box_0;
      this.$deferredAction();
    }
    smokeTest_closure13.builtin$cls = "smokeTest_closure13";
    if (!("name" in smokeTest_closure13))
      smokeTest_closure13.name = "smokeTest_closure13";
    $desc = $collectedClasses$.smokeTest_closure13[1];
    smokeTest_closure13.prototype = $desc;
    smokeTest_closure13.$__fields__ = ["_smoketest$_box_0"];
    function _TestJob(seconds, _smoketest$_infoAction, name, schedulingRule) {
      this.seconds = seconds;
      this._smoketest$_infoAction = _smoketest$_infoAction;
      this.name = name;
      this.schedulingRule = schedulingRule;
      this.$deferredAction();
    }
    _TestJob.builtin$cls = "_TestJob";
    if (!("name" in _TestJob))
      _TestJob.name = "_TestJob";
    $desc = $collectedClasses$._TestJob[1];
    _TestJob.prototype = $desc;
    _TestJob.$__fields__ = ["seconds", "_smoketest$_infoAction", "name", "schedulingRule"];
    function State(_state$_map) {
      this._state$_map = _state$_map;
      this.$deferredAction();
    }
    State.builtin$cls = "State";
    if (!("name" in State))
      State.name = "State";
    $desc = $collectedClasses$.State[1];
    State.prototype = $desc;
    State.$__fields__ = ["_state$_map"];
    function StatusDisplay(_status$_disposables, _status$_subscription, dialog, _statusbarTile, _timer) {
      this._status$_disposables = _status$_disposables;
      this._status$_subscription = _status$_subscription;
      this.dialog = dialog;
      this._statusbarTile = _statusbarTile;
      this._timer = _timer;
      this.$deferredAction();
    }
    StatusDisplay.builtin$cls = "StatusDisplay";
    if (!("name" in StatusDisplay))
      StatusDisplay.name = "StatusDisplay";
    $desc = $collectedClasses$.StatusDisplay[1];
    StatusDisplay.prototype = $desc;
    StatusDisplay.$__fields__ = ["_status$_disposables", "_status$_subscription", "dialog", "_statusbarTile", "_timer"];
    function StatusDisplay_closure(_status$_box_0, _status$_captured_this_1, _captured_statusElement_2) {
      this._status$_box_0 = _status$_box_0;
      this._status$_captured_this_1 = _status$_captured_this_1;
      this._captured_statusElement_2 = _captured_statusElement_2;
      this.$deferredAction();
    }
    StatusDisplay_closure.builtin$cls = "StatusDisplay_closure";
    if (!("name" in StatusDisplay_closure))
      StatusDisplay_closure.name = "StatusDisplay_closure";
    $desc = $collectedClasses$.StatusDisplay_closure[1];
    StatusDisplay_closure.prototype = $desc;
    StatusDisplay_closure.$__fields__ = ["_status$_box_0", "_status$_captured_this_1", "_captured_statusElement_2"];
    function StatusDisplay__closure(_status$_box_0, _captured_statusElement_3) {
      this._status$_box_0 = _status$_box_0;
      this._captured_statusElement_3 = _captured_statusElement_3;
      this.$deferredAction();
    }
    StatusDisplay__closure.builtin$cls = "StatusDisplay__closure";
    if (!("name" in StatusDisplay__closure))
      StatusDisplay__closure.name = "StatusDisplay__closure";
    $desc = $collectedClasses$.StatusDisplay__closure[1];
    StatusDisplay__closure.prototype = $desc;
    StatusDisplay__closure.$__fields__ = ["_status$_box_0", "_captured_statusElement_3"];
    function StatusDisplay_closure0(_status$_captured_this_4) {
      this._status$_captured_this_4 = _status$_captured_this_4;
      this.$deferredAction();
    }
    StatusDisplay_closure0.builtin$cls = "StatusDisplay_closure0";
    if (!("name" in StatusDisplay_closure0))
      StatusDisplay_closure0.name = "StatusDisplay_closure0";
    $desc = $collectedClasses$.StatusDisplay_closure0[1];
    StatusDisplay_closure0.prototype = $desc;
    StatusDisplay_closure0.$__fields__ = ["_status$_captured_this_4"];
    function JobsDialog(dialog, _listGroup) {
      this.dialog = dialog;
      this._listGroup = _listGroup;
      this.$deferredAction();
    }
    JobsDialog.builtin$cls = "JobsDialog";
    if (!("name" in JobsDialog))
      JobsDialog.name = "JobsDialog";
    $desc = $collectedClasses$.JobsDialog[1];
    JobsDialog.prototype = $desc;
    JobsDialog.$__fields__ = ["dialog", "_listGroup"];
    function StatusBar(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    StatusBar.builtin$cls = "StatusBar";
    if (!("name" in StatusBar))
      StatusBar.name = "StatusBar";
    $desc = $collectedClasses$.StatusBar[1];
    StatusBar.prototype = $desc;
    StatusBar.$__fields__ = ["obj"];
    function Tile(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Tile.builtin$cls = "Tile";
    if (!("name" in Tile))
      Tile.name = "Tile";
    $desc = $collectedClasses$.Tile[1];
    Tile.prototype = $desc;
    Tile.$__fields__ = ["obj"];
    function ToolbarContribution(_tile) {
      this._tile = _tile;
      this.$deferredAction();
    }
    ToolbarContribution.builtin$cls = "ToolbarContribution";
    if (!("name" in ToolbarContribution))
      ToolbarContribution.name = "ToolbarContribution";
    $desc = $collectedClasses$.ToolbarContribution[1];
    ToolbarContribution.prototype = $desc;
    ToolbarContribution.$__fields__ = ["_tile"];
    function Toolbar(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    Toolbar.builtin$cls = "Toolbar";
    if (!("name" in Toolbar))
      Toolbar.name = "Toolbar";
    $desc = $collectedClasses$.Toolbar[1];
    Toolbar.prototype = $desc;
    Toolbar.$__fields__ = ["obj"];
    function ToolbarTile(obj) {
      this.obj = obj;
      this.$deferredAction();
    }
    ToolbarTile.builtin$cls = "ToolbarTile";
    if (!("name" in ToolbarTile))
      ToolbarTile.name = "ToolbarTile";
    $desc = $collectedClasses$.ToolbarTile[1];
    ToolbarTile.prototype = $desc;
    ToolbarTile.$__fields__ = ["obj"];
    function TypeHierarchyHelper(_type_hierarchy$_command, _view) {
      this._type_hierarchy$_command = _type_hierarchy$_command;
      this._view = _view;
      this.$deferredAction();
    }
    TypeHierarchyHelper.builtin$cls = "TypeHierarchyHelper";
    if (!("name" in TypeHierarchyHelper))
      TypeHierarchyHelper.name = "TypeHierarchyHelper";
    $desc = $collectedClasses$.TypeHierarchyHelper[1];
    TypeHierarchyHelper.prototype = $desc;
    TypeHierarchyHelper.$__fields__ = ["_type_hierarchy$_command", "_view"];
    function TypeHierarchyHelper__handleHierarchyEditor_closure(_type_hierarchy$_captured_this_0) {
      this._type_hierarchy$_captured_this_0 = _type_hierarchy$_captured_this_0;
      this.$deferredAction();
    }
    TypeHierarchyHelper__handleHierarchyEditor_closure.builtin$cls = "TypeHierarchyHelper__handleHierarchyEditor_closure";
    if (!("name" in TypeHierarchyHelper__handleHierarchyEditor_closure))
      TypeHierarchyHelper__handleHierarchyEditor_closure.name = "TypeHierarchyHelper__handleHierarchyEditor_closure";
    $desc = $collectedClasses$.TypeHierarchyHelper__handleHierarchyEditor_closure[1];
    TypeHierarchyHelper__handleHierarchyEditor_closure.prototype = $desc;
    TypeHierarchyHelper__handleHierarchyEditor_closure.$__fields__ = ["_type_hierarchy$_captured_this_0"];
    function TypeHierarchyHelper__handleHierarchyEditor_closure0(_type_hierarchy$_captured_this_1) {
      this._type_hierarchy$_captured_this_1 = _type_hierarchy$_captured_this_1;
      this.$deferredAction();
    }
    TypeHierarchyHelper__handleHierarchyEditor_closure0.builtin$cls = "TypeHierarchyHelper__handleHierarchyEditor_closure0";
    if (!("name" in TypeHierarchyHelper__handleHierarchyEditor_closure0))
      TypeHierarchyHelper__handleHierarchyEditor_closure0.name = "TypeHierarchyHelper__handleHierarchyEditor_closure0";
    $desc = $collectedClasses$.TypeHierarchyHelper__handleHierarchyEditor_closure0[1];
    TypeHierarchyHelper__handleHierarchyEditor_closure0.prototype = $desc;
    TypeHierarchyHelper__handleHierarchyEditor_closure0.$__fields__ = ["_type_hierarchy$_captured_this_1"];
    function TypeHierarchyView(treeBuilder, _items, _panel, title, content) {
      this.treeBuilder = treeBuilder;
      this._items = _items;
      this._panel = _panel;
      this.title = title;
      this.content = content;
      this.$deferredAction();
    }
    TypeHierarchyView.builtin$cls = "TypeHierarchyView";
    if (!("name" in TypeHierarchyView))
      TypeHierarchyView.name = "TypeHierarchyView";
    $desc = $collectedClasses$.TypeHierarchyView[1];
    TypeHierarchyView.prototype = $desc;
    TypeHierarchyView.$__fields__ = ["treeBuilder", "_items", "_panel", "title", "content"];
    function TypeHierarchyView__render_closure(_type_hierarchy$_captured_this_0) {
      this._type_hierarchy$_captured_this_0 = _type_hierarchy$_captured_this_0;
      this.$deferredAction();
    }
    TypeHierarchyView__render_closure.builtin$cls = "TypeHierarchyView__render_closure";
    if (!("name" in TypeHierarchyView__render_closure))
      TypeHierarchyView__render_closure.name = "TypeHierarchyView__render_closure";
    $desc = $collectedClasses$.TypeHierarchyView__render_closure[1];
    TypeHierarchyView__render_closure.prototype = $desc;
    TypeHierarchyView__render_closure.$__fields__ = ["_type_hierarchy$_captured_this_0"];
    function TypeHierarchyView__render_closure0(_type_hierarchy$_captured_this_1) {
      this._type_hierarchy$_captured_this_1 = _type_hierarchy$_captured_this_1;
      this.$deferredAction();
    }
    TypeHierarchyView__render_closure0.builtin$cls = "TypeHierarchyView__render_closure0";
    if (!("name" in TypeHierarchyView__render_closure0))
      TypeHierarchyView__render_closure0.name = "TypeHierarchyView__render_closure0";
    $desc = $collectedClasses$.TypeHierarchyView__render_closure0[1];
    TypeHierarchyView__render_closure0.prototype = $desc;
    TypeHierarchyView__render_closure0.$__fields__ = ["_type_hierarchy$_captured_this_1"];
    function Disposable() {
      this.$deferredAction();
    }
    Disposable.builtin$cls = "Disposable";
    if (!("name" in Disposable))
      Disposable.name = "Disposable";
    $desc = $collectedClasses$.Disposable[1];
    Disposable.prototype = $desc;
    Disposable.$__fields__ = [];
    function Disposables(Disposables__disposables) {
      this.Disposables__disposables = Disposables__disposables;
      this.$deferredAction();
    }
    Disposables.builtin$cls = "Disposables";
    if (!("name" in Disposables))
      Disposables.name = "Disposables";
    $desc = $collectedClasses$.Disposables[1];
    Disposables.prototype = $desc;
    Disposables.$__fields__ = ["Disposables__disposables"];
    function StreamSubscriptions(_subscriptions) {
      this._subscriptions = _subscriptions;
      this.$deferredAction();
    }
    StreamSubscriptions.builtin$cls = "StreamSubscriptions";
    if (!("name" in StreamSubscriptions))
      StreamSubscriptions.name = "StreamSubscriptions";
    $desc = $collectedClasses$.StreamSubscriptions[1];
    StreamSubscriptions.prototype = $desc;
    StreamSubscriptions.$__fields__ = ["_subscriptions"];
    function DartAutocompleteProvider(selector, disableForSelector, inclusionPriority, excludeLowerPriority, filterSuggestions) {
      this.selector = selector;
      this.disableForSelector = disableForSelector;
      this.inclusionPriority = inclusionPriority;
      this.excludeLowerPriority = excludeLowerPriority;
      this.filterSuggestions = filterSuggestions;
      this.$deferredAction();
    }
    DartAutocompleteProvider.builtin$cls = "DartAutocompleteProvider";
    if (!("name" in DartAutocompleteProvider))
      DartAutocompleteProvider.name = "DartAutocompleteProvider";
    $desc = $collectedClasses$.DartAutocompleteProvider[1];
    DartAutocompleteProvider.prototype = $desc;
    DartAutocompleteProvider.$__fields__ = ["selector", "disableForSelector", "inclusionPriority", "excludeLowerPriority", "filterSuggestions"];
    function DartAutocompleteProvider_getSuggestions_closure(_autocomplete$_captured_this_0, _captured_server_1, _captured_text_2, _autocomplete$_captured_offset_3, _captured_prefix_4) {
      this._autocomplete$_captured_this_0 = _autocomplete$_captured_this_0;
      this._captured_server_1 = _captured_server_1;
      this._captured_text_2 = _captured_text_2;
      this._autocomplete$_captured_offset_3 = _autocomplete$_captured_offset_3;
      this._captured_prefix_4 = _captured_prefix_4;
      this.$deferredAction();
    }
    DartAutocompleteProvider_getSuggestions_closure.builtin$cls = "DartAutocompleteProvider_getSuggestions_closure";
    if (!("name" in DartAutocompleteProvider_getSuggestions_closure))
      DartAutocompleteProvider_getSuggestions_closure.name = "DartAutocompleteProvider_getSuggestions_closure";
    $desc = $collectedClasses$.DartAutocompleteProvider_getSuggestions_closure[1];
    DartAutocompleteProvider_getSuggestions_closure.prototype = $desc;
    DartAutocompleteProvider_getSuggestions_closure.$__fields__ = ["_autocomplete$_captured_this_0", "_captured_server_1", "_captured_text_2", "_autocomplete$_captured_offset_3", "_captured_prefix_4"];
    function DartAutocompleteProvider_getSuggestions__closure(_autocomplete$_captured_result_5) {
      this._autocomplete$_captured_result_5 = _autocomplete$_captured_result_5;
      this.$deferredAction();
    }
    DartAutocompleteProvider_getSuggestions__closure.builtin$cls = "DartAutocompleteProvider_getSuggestions__closure";
    if (!("name" in DartAutocompleteProvider_getSuggestions__closure))
      DartAutocompleteProvider_getSuggestions__closure.name = "DartAutocompleteProvider_getSuggestions__closure";
    $desc = $collectedClasses$.DartAutocompleteProvider_getSuggestions__closure[1];
    DartAutocompleteProvider_getSuggestions__closure.prototype = $desc;
    DartAutocompleteProvider_getSuggestions__closure.$__fields__ = ["_autocomplete$_captured_result_5"];
    function DartAutocompleteProvider_getSuggestions__closure0() {
      this.$deferredAction();
    }
    DartAutocompleteProvider_getSuggestions__closure0.builtin$cls = "DartAutocompleteProvider_getSuggestions__closure0";
    if (!("name" in DartAutocompleteProvider_getSuggestions__closure0))
      DartAutocompleteProvider_getSuggestions__closure0.name = "DartAutocompleteProvider_getSuggestions__closure0";
    $desc = $collectedClasses$.DartAutocompleteProvider_getSuggestions__closure0[1];
    DartAutocompleteProvider_getSuggestions__closure0.prototype = $desc;
    DartAutocompleteProvider_getSuggestions__closure0.$__fields__ = [];
    function DartAutocompleteProvider_getSuggestions__closure1(_autocomplete$_captured_this_6, _captured_text_7, _captured_offset_8, _captured_prefix_9) {
      this._autocomplete$_captured_this_6 = _autocomplete$_captured_this_6;
      this._captured_text_7 = _captured_text_7;
      this._captured_offset_8 = _captured_offset_8;
      this._captured_prefix_9 = _captured_prefix_9;
      this.$deferredAction();
    }
    DartAutocompleteProvider_getSuggestions__closure1.builtin$cls = "DartAutocompleteProvider_getSuggestions__closure1";
    if (!("name" in DartAutocompleteProvider_getSuggestions__closure1))
      DartAutocompleteProvider_getSuggestions__closure1.name = "DartAutocompleteProvider_getSuggestions__closure1";
    $desc = $collectedClasses$.DartAutocompleteProvider_getSuggestions__closure1[1];
    DartAutocompleteProvider_getSuggestions__closure1.prototype = $desc;
    DartAutocompleteProvider_getSuggestions__closure1.$__fields__ = ["_autocomplete$_captured_this_6", "_captured_text_7", "_captured_offset_8", "_captured_prefix_9"];
    function DartAutocompleteProvider__handleCompletionResults_closure() {
      this.$deferredAction();
    }
    DartAutocompleteProvider__handleCompletionResults_closure.builtin$cls = "DartAutocompleteProvider__handleCompletionResults_closure";
    if (!("name" in DartAutocompleteProvider__handleCompletionResults_closure))
      DartAutocompleteProvider__handleCompletionResults_closure.name = "DartAutocompleteProvider__handleCompletionResults_closure";
    $desc = $collectedClasses$.DartAutocompleteProvider__handleCompletionResults_closure[1];
    DartAutocompleteProvider__handleCompletionResults_closure.prototype = $desc;
    DartAutocompleteProvider__handleCompletionResults_closure.$__fields__ = [];
    function DartAutocompleteProvider__handleCompletionResults_closure0(_autocomplete$_captured_this_1, _captured_fileText_2, _autocomplete$_captured_offset_3, _captured_prefix_4, _captured_replacementOffset_5) {
      this._autocomplete$_captured_this_1 = _autocomplete$_captured_this_1;
      this._captured_fileText_2 = _captured_fileText_2;
      this._autocomplete$_captured_offset_3 = _autocomplete$_captured_offset_3;
      this._captured_prefix_4 = _captured_prefix_4;
      this._captured_replacementOffset_5 = _captured_replacementOffset_5;
      this.$deferredAction();
    }
    DartAutocompleteProvider__handleCompletionResults_closure0.builtin$cls = "DartAutocompleteProvider__handleCompletionResults_closure0";
    if (!("name" in DartAutocompleteProvider__handleCompletionResults_closure0))
      DartAutocompleteProvider__handleCompletionResults_closure0.name = "DartAutocompleteProvider__handleCompletionResults_closure0";
    $desc = $collectedClasses$.DartAutocompleteProvider__handleCompletionResults_closure0[1];
    DartAutocompleteProvider__handleCompletionResults_closure0.prototype = $desc;
    DartAutocompleteProvider__handleCompletionResults_closure0.$__fields__ = ["_autocomplete$_captured_this_1", "_captured_fileText_2", "_autocomplete$_captured_offset_3", "_captured_prefix_4", "_captured_replacementOffset_5"];
    function DartAutocompleteProvider__handleCompletionResults__closure(_autocomplete$_box_0) {
      this._autocomplete$_box_0 = _autocomplete$_box_0;
      this.$deferredAction();
    }
    DartAutocompleteProvider__handleCompletionResults__closure.builtin$cls = "DartAutocompleteProvider__handleCompletionResults__closure";
    if (!("name" in DartAutocompleteProvider__handleCompletionResults__closure))
      DartAutocompleteProvider__handleCompletionResults__closure.name = "DartAutocompleteProvider__handleCompletionResults__closure";
    $desc = $collectedClasses$.DartAutocompleteProvider__handleCompletionResults__closure[1];
    DartAutocompleteProvider__handleCompletionResults__closure.prototype = $desc;
    DartAutocompleteProvider__handleCompletionResults__closure.$__fields__ = ["_autocomplete$_box_0"];
    function BufferObserverManager(observers) {
      this.observers = observers;
      this.$deferredAction();
    }
    BufferObserverManager.builtin$cls = "BufferObserverManager";
    if (!("name" in BufferObserverManager))
      BufferObserverManager.name = "BufferObserverManager";
    $desc = $collectedClasses$.BufferObserverManager[1];
    BufferObserverManager.prototype = $desc;
    BufferObserverManager.$__fields__ = ["observers"];
    function BufferObserverManager_dispose_closure() {
      this.$deferredAction();
    }
    BufferObserverManager_dispose_closure.builtin$cls = "BufferObserverManager_dispose_closure";
    if (!("name" in BufferObserverManager_dispose_closure))
      BufferObserverManager_dispose_closure.name = "BufferObserverManager_dispose_closure";
    $desc = $collectedClasses$.BufferObserverManager_dispose_closure[1];
    BufferObserverManager_dispose_closure.prototype = $desc;
    BufferObserverManager_dispose_closure.$__fields__ = [];
    function BufferObserver() {
      this.$deferredAction();
    }
    BufferObserver.builtin$cls = "BufferObserver";
    if (!("name" in BufferObserver))
      BufferObserver.name = "BufferObserver";
    $desc = $collectedClasses$.BufferObserver[1];
    BufferObserver.prototype = $desc;
    BufferObserver.$__fields__ = [];
    function BufferFormatter(_subs, isFormatting, editor, manager, Disposables__disposables) {
      this._subs = _subs;
      this.isFormatting = isFormatting;
      this.editor = editor;
      this.manager = manager;
      this.Disposables__disposables = Disposables__disposables;
      this.$deferredAction();
    }
    BufferFormatter.builtin$cls = "BufferFormatter";
    if (!("name" in BufferFormatter))
      BufferFormatter.name = "BufferFormatter";
    $desc = $collectedClasses$.BufferFormatter[1];
    BufferFormatter.prototype = $desc;
    BufferFormatter.$__fields__ = ["_subs", "isFormatting", "editor", "manager", "Disposables__disposables"];
    function BufferFormatter_closure(_observer$_captured_this_0, _captured_editor_1) {
      this._observer$_captured_this_0 = _observer$_captured_this_0;
      this._captured_editor_1 = _captured_editor_1;
      this.$deferredAction();
    }
    BufferFormatter_closure.builtin$cls = "BufferFormatter_closure";
    if (!("name" in BufferFormatter_closure))
      BufferFormatter_closure.name = "BufferFormatter_closure";
    $desc = $collectedClasses$.BufferFormatter_closure[1];
    BufferFormatter_closure.prototype = $desc;
    BufferFormatter_closure.$__fields__ = ["_observer$_captured_this_0", "_captured_editor_1"];
    function BufferFormatter__closure(_observer$_captured_this_2, _captured_editor_3) {
      this._observer$_captured_this_2 = _observer$_captured_this_2;
      this._captured_editor_3 = _captured_editor_3;
      this.$deferredAction();
    }
    BufferFormatter__closure.builtin$cls = "BufferFormatter__closure";
    if (!("name" in BufferFormatter__closure))
      BufferFormatter__closure.name = "BufferFormatter__closure";
    $desc = $collectedClasses$.BufferFormatter__closure[1];
    BufferFormatter__closure.prototype = $desc;
    BufferFormatter__closure.$__fields__ = ["_observer$_captured_this_2", "_captured_editor_3"];
    function BufferFormatter___closure(_captured_this_4) {
      this._captured_this_4 = _captured_this_4;
      this.$deferredAction();
    }
    BufferFormatter___closure.builtin$cls = "BufferFormatter___closure";
    if (!("name" in BufferFormatter___closure))
      BufferFormatter___closure.name = "BufferFormatter___closure";
    $desc = $collectedClasses$.BufferFormatter___closure[1];
    BufferFormatter___closure.prototype = $desc;
    BufferFormatter___closure.$__fields__ = ["_captured_this_4"];
    function BufferFormatter_closure0(_captured_this_5) {
      this._captured_this_5 = _captured_this_5;
      this.$deferredAction();
    }
    BufferFormatter_closure0.builtin$cls = "BufferFormatter_closure0";
    if (!("name" in BufferFormatter_closure0))
      BufferFormatter_closure0.name = "BufferFormatter_closure0";
    $desc = $collectedClasses$.BufferFormatter_closure0[1];
    BufferFormatter_closure0.prototype = $desc;
    BufferFormatter_closure0.$__fields__ = ["_captured_this_5"];
    function BufferUpdater(_subs, lastSent, editor, manager, Disposables__disposables) {
      this._subs = _subs;
      this.lastSent = lastSent;
      this.editor = editor;
      this.manager = manager;
      this.Disposables__disposables = Disposables__disposables;
      this.$deferredAction();
    }
    BufferUpdater.builtin$cls = "BufferUpdater";
    if (!("name" in BufferUpdater))
      BufferUpdater.name = "BufferUpdater";
    $desc = $collectedClasses$.BufferUpdater[1];
    BufferUpdater.prototype = $desc;
    BufferUpdater.$__fields__ = ["_subs", "lastSent", "editor", "manager", "Disposables__disposables"];
    function Dependencies(_instances) {
      this._instances = _instances;
      this.$deferredAction();
    }
    Dependencies.builtin$cls = "Dependencies";
    if (!("name" in Dependencies))
      Dependencies.name = "Dependencies";
    $desc = $collectedClasses$.Dependencies[1];
    Dependencies.prototype = $desc;
    Dependencies.$__fields__ = ["_instances"];
    function ListIterable() {
      this.$deferredAction();
    }
    ListIterable.builtin$cls = "ListIterable";
    if (!("name" in ListIterable))
      ListIterable.name = "ListIterable";
    $desc = $collectedClasses$.ListIterable[1];
    ListIterable.prototype = $desc;
    ListIterable.$__fields__ = [];
    function SubListIterable(_iterable, __internal$_start, _endOrLength) {
      this._iterable = _iterable;
      this.__internal$_start = __internal$_start;
      this._endOrLength = _endOrLength;
      this.$deferredAction();
    }
    SubListIterable.builtin$cls = "SubListIterable";
    if (!("name" in SubListIterable))
      SubListIterable.name = "SubListIterable";
    $desc = $collectedClasses$.SubListIterable[1];
    SubListIterable.prototype = $desc;
    SubListIterable.$__fields__ = ["_iterable", "__internal$_start", "_endOrLength"];
    function ListIterator(_iterable, __internal$_length, _index, __internal$_current) {
      this._iterable = _iterable;
      this.__internal$_length = __internal$_length;
      this._index = _index;
      this.__internal$_current = __internal$_current;
      this.$deferredAction();
    }
    ListIterator.builtin$cls = "ListIterator";
    if (!("name" in ListIterator))
      ListIterator.name = "ListIterator";
    $desc = $collectedClasses$.ListIterator[1];
    ListIterator.prototype = $desc;
    ListIterator.$__fields__ = ["_iterable", "__internal$_length", "_index", "__internal$_current"];
    function MappedIterable(_iterable, _f) {
      this._iterable = _iterable;
      this._f = _f;
      this.$deferredAction();
    }
    MappedIterable.builtin$cls = "MappedIterable";
    if (!("name" in MappedIterable))
      MappedIterable.name = "MappedIterable";
    $desc = $collectedClasses$.MappedIterable[1];
    MappedIterable.prototype = $desc;
    MappedIterable.$__fields__ = ["_iterable", "_f"];
    function EfficientLengthMappedIterable(_iterable, _f) {
      this._iterable = _iterable;
      this._f = _f;
      this.$deferredAction();
    }
    EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
    if (!("name" in EfficientLengthMappedIterable))
      EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
    $desc = $collectedClasses$.EfficientLengthMappedIterable[1];
    EfficientLengthMappedIterable.prototype = $desc;
    EfficientLengthMappedIterable.$__fields__ = ["_iterable", "_f"];
    function MappedIterator(__internal$_current, _iterator, _f) {
      this.__internal$_current = __internal$_current;
      this._iterator = _iterator;
      this._f = _f;
      this.$deferredAction();
    }
    MappedIterator.builtin$cls = "MappedIterator";
    if (!("name" in MappedIterator))
      MappedIterator.name = "MappedIterator";
    $desc = $collectedClasses$.MappedIterator[1];
    MappedIterator.prototype = $desc;
    MappedIterator.$__fields__ = ["__internal$_current", "_iterator", "_f"];
    function MappedListIterable(_source, _f) {
      this._source = _source;
      this._f = _f;
      this.$deferredAction();
    }
    MappedListIterable.builtin$cls = "MappedListIterable";
    if (!("name" in MappedListIterable))
      MappedListIterable.name = "MappedListIterable";
    $desc = $collectedClasses$.MappedListIterable[1];
    MappedListIterable.prototype = $desc;
    MappedListIterable.$__fields__ = ["_source", "_f"];
    function WhereIterable(_iterable, _f) {
      this._iterable = _iterable;
      this._f = _f;
      this.$deferredAction();
    }
    WhereIterable.builtin$cls = "WhereIterable";
    if (!("name" in WhereIterable))
      WhereIterable.name = "WhereIterable";
    $desc = $collectedClasses$.WhereIterable[1];
    WhereIterable.prototype = $desc;
    WhereIterable.$__fields__ = ["_iterable", "_f"];
    function WhereIterator(_iterator, _f) {
      this._iterator = _iterator;
      this._f = _f;
      this.$deferredAction();
    }
    WhereIterator.builtin$cls = "WhereIterator";
    if (!("name" in WhereIterator))
      WhereIterator.name = "WhereIterator";
    $desc = $collectedClasses$.WhereIterator[1];
    WhereIterator.prototype = $desc;
    WhereIterator.$__fields__ = ["_iterator", "_f"];
    function ExpandIterable(_iterable, _f) {
      this._iterable = _iterable;
      this._f = _f;
      this.$deferredAction();
    }
    ExpandIterable.builtin$cls = "ExpandIterable";
    if (!("name" in ExpandIterable))
      ExpandIterable.name = "ExpandIterable";
    $desc = $collectedClasses$.ExpandIterable[1];
    ExpandIterable.prototype = $desc;
    ExpandIterable.$__fields__ = ["_iterable", "_f"];
    function ExpandIterator(_iterator, _f, _currentExpansion, __internal$_current) {
      this._iterator = _iterator;
      this._f = _f;
      this._currentExpansion = _currentExpansion;
      this.__internal$_current = __internal$_current;
      this.$deferredAction();
    }
    ExpandIterator.builtin$cls = "ExpandIterator";
    if (!("name" in ExpandIterator))
      ExpandIterator.name = "ExpandIterator";
    $desc = $collectedClasses$.ExpandIterator[1];
    ExpandIterator.prototype = $desc;
    ExpandIterator.$__fields__ = ["_iterator", "_f", "_currentExpansion", "__internal$_current"];
    function TakeIterable(_iterable, _takeCount) {
      this._iterable = _iterable;
      this._takeCount = _takeCount;
      this.$deferredAction();
    }
    TakeIterable.builtin$cls = "TakeIterable";
    if (!("name" in TakeIterable))
      TakeIterable.name = "TakeIterable";
    $desc = $collectedClasses$.TakeIterable[1];
    TakeIterable.prototype = $desc;
    TakeIterable.$__fields__ = ["_iterable", "_takeCount"];
    function EfficientLengthTakeIterable(_iterable, _takeCount) {
      this._iterable = _iterable;
      this._takeCount = _takeCount;
      this.$deferredAction();
    }
    EfficientLengthTakeIterable.builtin$cls = "EfficientLengthTakeIterable";
    if (!("name" in EfficientLengthTakeIterable))
      EfficientLengthTakeIterable.name = "EfficientLengthTakeIterable";
    $desc = $collectedClasses$.EfficientLengthTakeIterable[1];
    EfficientLengthTakeIterable.prototype = $desc;
    EfficientLengthTakeIterable.$__fields__ = ["_iterable", "_takeCount"];
    function TakeIterator(_iterator, _remaining) {
      this._iterator = _iterator;
      this._remaining = _remaining;
      this.$deferredAction();
    }
    TakeIterator.builtin$cls = "TakeIterator";
    if (!("name" in TakeIterator))
      TakeIterator.name = "TakeIterator";
    $desc = $collectedClasses$.TakeIterator[1];
    TakeIterator.prototype = $desc;
    TakeIterator.$__fields__ = ["_iterator", "_remaining"];
    function TakeWhileIterable(_iterable, _f) {
      this._iterable = _iterable;
      this._f = _f;
      this.$deferredAction();
    }
    TakeWhileIterable.builtin$cls = "TakeWhileIterable";
    if (!("name" in TakeWhileIterable))
      TakeWhileIterable.name = "TakeWhileIterable";
    $desc = $collectedClasses$.TakeWhileIterable[1];
    TakeWhileIterable.prototype = $desc;
    TakeWhileIterable.$__fields__ = ["_iterable", "_f"];
    function TakeWhileIterator(_iterator, _f, _isFinished) {
      this._iterator = _iterator;
      this._f = _f;
      this._isFinished = _isFinished;
      this.$deferredAction();
    }
    TakeWhileIterator.builtin$cls = "TakeWhileIterator";
    if (!("name" in TakeWhileIterator))
      TakeWhileIterator.name = "TakeWhileIterator";
    $desc = $collectedClasses$.TakeWhileIterator[1];
    TakeWhileIterator.prototype = $desc;
    TakeWhileIterator.$__fields__ = ["_iterator", "_f", "_isFinished"];
    function SkipIterable(_iterable, _skipCount) {
      this._iterable = _iterable;
      this._skipCount = _skipCount;
      this.$deferredAction();
    }
    SkipIterable.builtin$cls = "SkipIterable";
    if (!("name" in SkipIterable))
      SkipIterable.name = "SkipIterable";
    $desc = $collectedClasses$.SkipIterable[1];
    SkipIterable.prototype = $desc;
    SkipIterable.$__fields__ = ["_iterable", "_skipCount"];
    function EfficientLengthSkipIterable(_iterable, _skipCount) {
      this._iterable = _iterable;
      this._skipCount = _skipCount;
      this.$deferredAction();
    }
    EfficientLengthSkipIterable.builtin$cls = "EfficientLengthSkipIterable";
    if (!("name" in EfficientLengthSkipIterable))
      EfficientLengthSkipIterable.name = "EfficientLengthSkipIterable";
    $desc = $collectedClasses$.EfficientLengthSkipIterable[1];
    EfficientLengthSkipIterable.prototype = $desc;
    EfficientLengthSkipIterable.$__fields__ = ["_iterable", "_skipCount"];
    function SkipIterator(_iterator, _skipCount) {
      this._iterator = _iterator;
      this._skipCount = _skipCount;
      this.$deferredAction();
    }
    SkipIterator.builtin$cls = "SkipIterator";
    if (!("name" in SkipIterator))
      SkipIterator.name = "SkipIterator";
    $desc = $collectedClasses$.SkipIterator[1];
    SkipIterator.prototype = $desc;
    SkipIterator.$__fields__ = ["_iterator", "_skipCount"];
    function SkipWhileIterable(_iterable, _f) {
      this._iterable = _iterable;
      this._f = _f;
      this.$deferredAction();
    }
    SkipWhileIterable.builtin$cls = "SkipWhileIterable";
    if (!("name" in SkipWhileIterable))
      SkipWhileIterable.name = "SkipWhileIterable";
    $desc = $collectedClasses$.SkipWhileIterable[1];
    SkipWhileIterable.prototype = $desc;
    SkipWhileIterable.$__fields__ = ["_iterable", "_f"];
    function SkipWhileIterator(_iterator, _f, _hasSkipped) {
      this._iterator = _iterator;
      this._f = _f;
      this._hasSkipped = _hasSkipped;
      this.$deferredAction();
    }
    SkipWhileIterator.builtin$cls = "SkipWhileIterator";
    if (!("name" in SkipWhileIterator))
      SkipWhileIterator.name = "SkipWhileIterator";
    $desc = $collectedClasses$.SkipWhileIterator[1];
    SkipWhileIterator.prototype = $desc;
    SkipWhileIterator.$__fields__ = ["_iterator", "_f", "_hasSkipped"];
    function EmptyIterator() {
      this.$deferredAction();
    }
    EmptyIterator.builtin$cls = "EmptyIterator";
    if (!("name" in EmptyIterator))
      EmptyIterator.name = "EmptyIterator";
    $desc = $collectedClasses$.EmptyIterator[1];
    EmptyIterator.prototype = $desc;
    EmptyIterator.$__fields__ = [];
    function FixedLengthListMixin() {
      this.$deferredAction();
    }
    FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
    if (!("name" in FixedLengthListMixin))
      FixedLengthListMixin.name = "FixedLengthListMixin";
    $desc = $collectedClasses$.FixedLengthListMixin[1];
    FixedLengthListMixin.prototype = $desc;
    FixedLengthListMixin.$__fields__ = [];
    function Symbol0(__internal$_name) {
      this.__internal$_name = __internal$_name;
      this.$deferredAction();
    }
    Symbol0.builtin$cls = "Symbol0";
    if (!("name" in Symbol0))
      Symbol0.name = "Symbol0";
    $desc = $collectedClasses$.Symbol0[1];
    Symbol0.prototype = $desc;
    Symbol0.$__fields__ = ["__internal$_name"];
    Symbol0.prototype.get$__internal$_name = function() {
      return this.__internal$_name;
    };
    function _AsyncRun__initializeScheduleImmediate_internalCallback(_async$_box_0) {
      this._async$_box_0 = _async$_box_0;
      this.$deferredAction();
    }
    _AsyncRun__initializeScheduleImmediate_internalCallback.builtin$cls = "_AsyncRun__initializeScheduleImmediate_internalCallback";
    if (!("name" in _AsyncRun__initializeScheduleImmediate_internalCallback))
      _AsyncRun__initializeScheduleImmediate_internalCallback.name = "_AsyncRun__initializeScheduleImmediate_internalCallback";
    $desc = $collectedClasses$._AsyncRun__initializeScheduleImmediate_internalCallback[1];
    _AsyncRun__initializeScheduleImmediate_internalCallback.prototype = $desc;
    _AsyncRun__initializeScheduleImmediate_internalCallback.$__fields__ = ["_async$_box_0"];
    function _AsyncRun__initializeScheduleImmediate_closure(_async$_box_0, _captured_div_1, _captured_span_2) {
      this._async$_box_0 = _async$_box_0;
      this._captured_div_1 = _captured_div_1;
      this._captured_span_2 = _captured_span_2;
      this.$deferredAction();
    }
    _AsyncRun__initializeScheduleImmediate_closure.builtin$cls = "_AsyncRun__initializeScheduleImmediate_closure";
    if (!("name" in _AsyncRun__initializeScheduleImmediate_closure))
      _AsyncRun__initializeScheduleImmediate_closure.name = "_AsyncRun__initializeScheduleImmediate_closure";
    $desc = $collectedClasses$._AsyncRun__initializeScheduleImmediate_closure[1];
    _AsyncRun__initializeScheduleImmediate_closure.prototype = $desc;
    _AsyncRun__initializeScheduleImmediate_closure.$__fields__ = ["_async$_box_0", "_captured_div_1", "_captured_span_2"];
    function _AsyncRun__scheduleImmediateJsOverride_internalCallback(_captured_callback_0) {
      this._captured_callback_0 = _captured_callback_0;
      this.$deferredAction();
    }
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
    if (!("name" in _AsyncRun__scheduleImmediateJsOverride_internalCallback))
      _AsyncRun__scheduleImmediateJsOverride_internalCallback.name = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
    $desc = $collectedClasses$._AsyncRun__scheduleImmediateJsOverride_internalCallback[1];
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = $desc;
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.$__fields__ = ["_captured_callback_0"];
    function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(_captured_callback_0) {
      this._captured_callback_0 = _captured_callback_0;
      this.$deferredAction();
    }
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateWithSetImmediate_internalCallback";
    if (!("name" in _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback))
      _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.name = "_AsyncRun__scheduleImmediateWithSetImmediate_internalCallback";
    $desc = $collectedClasses$._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback[1];
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = $desc;
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.$__fields__ = ["_captured_callback_0"];
    function _UncaughtAsyncError(error, stackTrace) {
      this.error = error;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    _UncaughtAsyncError.builtin$cls = "_UncaughtAsyncError";
    if (!("name" in _UncaughtAsyncError))
      _UncaughtAsyncError.name = "_UncaughtAsyncError";
    $desc = $collectedClasses$._UncaughtAsyncError[1];
    _UncaughtAsyncError.prototype = $desc;
    _UncaughtAsyncError.$__fields__ = ["error", "stackTrace"];
    function _BroadcastStream(_async$_controller) {
      this._async$_controller = _async$_controller;
      this.$deferredAction();
    }
    _BroadcastStream.builtin$cls = "_BroadcastStream";
    if (!("name" in _BroadcastStream))
      _BroadcastStream.name = "_BroadcastStream";
    $desc = $collectedClasses$._BroadcastStream[1];
    _BroadcastStream.prototype = $desc;
    _BroadcastStream.$__fields__ = ["_async$_controller"];
    function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
      this._eventState = _eventState;
      this._async$_next = _async$_next;
      this._async$_previous = _async$_previous;
      this._async$_controller = _async$_controller;
      this._async$_onData = _async$_onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$deferredAction();
    }
    _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
    if (!("name" in _BroadcastSubscription))
      _BroadcastSubscription.name = "_BroadcastSubscription";
    $desc = $collectedClasses$._BroadcastSubscription[1];
    _BroadcastSubscription.prototype = $desc;
    _BroadcastSubscription.$__fields__ = ["_eventState", "_async$_next", "_async$_previous", "_async$_controller", "_async$_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    _BroadcastSubscription.prototype.get$_eventState = function() {
      return this._eventState;
    };
    _BroadcastSubscription.prototype.set$_eventState = function(v) {
      return this._eventState = v;
    };
    _BroadcastSubscription.prototype.get$_async$_next = function() {
      return this._async$_next;
    };
    _BroadcastSubscription.prototype.set$_async$_next = function(v) {
      return this._async$_next = v;
    };
    _BroadcastSubscription.prototype.get$_async$_previous = function() {
      return this._async$_previous;
    };
    _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
      return this._async$_previous = v;
    };
    function _BroadcastStreamController(_async$_next, _async$_previous) {
      this._async$_next = _async$_next;
      this._async$_previous = _async$_previous;
      this.$deferredAction();
    }
    _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
    if (!("name" in _BroadcastStreamController))
      _BroadcastStreamController.name = "_BroadcastStreamController";
    $desc = $collectedClasses$._BroadcastStreamController[1];
    _BroadcastStreamController.prototype = $desc;
    _BroadcastStreamController.$__fields__ = ["_async$_next", "_async$_previous"];
    _BroadcastStreamController.prototype.get$_async$_next = function() {
      return this._async$_next;
    };
    _BroadcastStreamController.prototype.set$_async$_next = function(v) {
      return this._async$_next = v;
    };
    _BroadcastStreamController.prototype.get$_async$_previous = function() {
      return this._async$_previous;
    };
    _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
      return this._async$_previous = v;
    };
    function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
      this._onListen = _onListen;
      this._onCancel = _onCancel;
      this._state = _state;
      this._async$_next = _async$_next;
      this._async$_previous = _async$_previous;
      this._addStreamState = _addStreamState;
      this._doneFuture = _doneFuture;
      this.$deferredAction();
    }
    _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
    if (!("name" in _SyncBroadcastStreamController))
      _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
    $desc = $collectedClasses$._SyncBroadcastStreamController[1];
    _SyncBroadcastStreamController.prototype = $desc;
    _SyncBroadcastStreamController.$__fields__ = ["_onListen", "_onCancel", "_state", "_async$_next", "_async$_previous", "_addStreamState", "_doneFuture"];
    function _SyncBroadcastStreamController__sendData_closure(_async$_captured_this_0, _captured_data_1) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._captured_data_1 = _captured_data_1;
      this.$deferredAction();
    }
    _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
    if (!("name" in _SyncBroadcastStreamController__sendData_closure))
      _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
    $desc = $collectedClasses$._SyncBroadcastStreamController__sendData_closure[1];
    _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
    _SyncBroadcastStreamController__sendData_closure.$__fields__ = ["_async$_captured_this_0", "_captured_data_1"];
    function _SyncBroadcastStreamController__sendError_closure(_async$_captured_this_0, _captured_error_1, _captured_stackTrace_2) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._captured_error_1 = _captured_error_1;
      this._captured_stackTrace_2 = _captured_stackTrace_2;
      this.$deferredAction();
    }
    _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
    if (!("name" in _SyncBroadcastStreamController__sendError_closure))
      _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
    $desc = $collectedClasses$._SyncBroadcastStreamController__sendError_closure[1];
    _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
    _SyncBroadcastStreamController__sendError_closure.$__fields__ = ["_async$_captured_this_0", "_captured_error_1", "_captured_stackTrace_2"];
    function _SyncBroadcastStreamController__sendDone_closure(_async$_captured_this_0) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this.$deferredAction();
    }
    _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
    if (!("name" in _SyncBroadcastStreamController__sendDone_closure))
      _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
    $desc = $collectedClasses$._SyncBroadcastStreamController__sendDone_closure[1];
    _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
    _SyncBroadcastStreamController__sendDone_closure.$__fields__ = ["_async$_captured_this_0"];
    function _AsyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
      this._onListen = _onListen;
      this._onCancel = _onCancel;
      this._state = _state;
      this._async$_next = _async$_next;
      this._async$_previous = _async$_previous;
      this._addStreamState = _addStreamState;
      this._doneFuture = _doneFuture;
      this.$deferredAction();
    }
    _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
    if (!("name" in _AsyncBroadcastStreamController))
      _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
    $desc = $collectedClasses$._AsyncBroadcastStreamController[1];
    _AsyncBroadcastStreamController.prototype = $desc;
    _AsyncBroadcastStreamController.$__fields__ = ["_onListen", "_onCancel", "_state", "_async$_next", "_async$_previous", "_addStreamState", "_doneFuture"];
    function _AsBroadcastStreamController(_pending, _onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
      this._pending = _pending;
      this._onListen = _onListen;
      this._onCancel = _onCancel;
      this._state = _state;
      this._async$_next = _async$_next;
      this._async$_previous = _async$_previous;
      this._addStreamState = _addStreamState;
      this._doneFuture = _doneFuture;
      this.$deferredAction();
    }
    _AsBroadcastStreamController.builtin$cls = "_AsBroadcastStreamController";
    if (!("name" in _AsBroadcastStreamController))
      _AsBroadcastStreamController.name = "_AsBroadcastStreamController";
    $desc = $collectedClasses$._AsBroadcastStreamController[1];
    _AsBroadcastStreamController.prototype = $desc;
    _AsBroadcastStreamController.$__fields__ = ["_pending", "_onListen", "_onCancel", "_state", "_async$_next", "_async$_previous", "_addStreamState", "_doneFuture"];
    function Future() {
      this.$deferredAction();
    }
    Future.builtin$cls = "Future";
    if (!("name" in Future))
      Future.name = "Future";
    $desc = $collectedClasses$.Future[1];
    Future.prototype = $desc;
    Future.$__fields__ = [];
    function Future_Future_closure(_captured_computation_0, _async$_captured_result_1) {
      this._captured_computation_0 = _captured_computation_0;
      this._async$_captured_result_1 = _async$_captured_result_1;
      this.$deferredAction();
    }
    Future_Future_closure.builtin$cls = "Future_Future_closure";
    if (!("name" in Future_Future_closure))
      Future_Future_closure.name = "Future_Future_closure";
    $desc = $collectedClasses$.Future_Future_closure[1];
    Future_Future_closure.prototype = $desc;
    Future_Future_closure.$__fields__ = ["_captured_computation_0", "_async$_captured_result_1"];
    function Future_Future$microtask_closure(_captured_computation_0, _async$_captured_result_1) {
      this._captured_computation_0 = _captured_computation_0;
      this._async$_captured_result_1 = _async$_captured_result_1;
      this.$deferredAction();
    }
    Future_Future$microtask_closure.builtin$cls = "Future_Future$microtask_closure";
    if (!("name" in Future_Future$microtask_closure))
      Future_Future$microtask_closure.name = "Future_Future$microtask_closure";
    $desc = $collectedClasses$.Future_Future$microtask_closure[1];
    Future_Future$microtask_closure.prototype = $desc;
    Future_Future$microtask_closure.$__fields__ = ["_captured_computation_0", "_async$_captured_result_1"];
    function Future_Future$delayed_closure(_captured_computation_0, _async$_captured_result_1) {
      this._captured_computation_0 = _captured_computation_0;
      this._async$_captured_result_1 = _async$_captured_result_1;
      this.$deferredAction();
    }
    Future_Future$delayed_closure.builtin$cls = "Future_Future$delayed_closure";
    if (!("name" in Future_Future$delayed_closure))
      Future_Future$delayed_closure.name = "Future_Future$delayed_closure";
    $desc = $collectedClasses$.Future_Future$delayed_closure[1];
    Future_Future$delayed_closure.prototype = $desc;
    Future_Future$delayed_closure.$__fields__ = ["_captured_computation_0", "_async$_captured_result_1"];
    function Future_wait_handleError(_async$_box_0, _captured_eagerError_1, _captured_cleanUp_2, _captured_result_3) {
      this._async$_box_0 = _async$_box_0;
      this._captured_eagerError_1 = _captured_eagerError_1;
      this._captured_cleanUp_2 = _captured_cleanUp_2;
      this._captured_result_3 = _captured_result_3;
      this.$deferredAction();
    }
    Future_wait_handleError.builtin$cls = "Future_wait_handleError";
    if (!("name" in Future_wait_handleError))
      Future_wait_handleError.name = "Future_wait_handleError";
    $desc = $collectedClasses$.Future_wait_handleError[1];
    Future_wait_handleError.prototype = $desc;
    Future_wait_handleError.$__fields__ = ["_async$_box_0", "_captured_eagerError_1", "_captured_cleanUp_2", "_captured_result_3"];
    function Future_wait_closure(_async$_box_0, _captured_eagerError_6, _captured_cleanUp_7, _captured_result_8, _captured_pos_9) {
      this._async$_box_0 = _async$_box_0;
      this._captured_eagerError_6 = _captured_eagerError_6;
      this._captured_cleanUp_7 = _captured_cleanUp_7;
      this._captured_result_8 = _captured_result_8;
      this._captured_pos_9 = _captured_pos_9;
      this.$deferredAction();
    }
    Future_wait_closure.builtin$cls = "Future_wait_closure";
    if (!("name" in Future_wait_closure))
      Future_wait_closure.name = "Future_wait_closure";
    $desc = $collectedClasses$.Future_wait_closure[1];
    Future_wait_closure.prototype = $desc;
    Future_wait_closure.$__fields__ = ["_async$_box_0", "_captured_eagerError_6", "_captured_cleanUp_7", "_captured_result_8", "_captured_pos_9"];
    function Future_forEach_closure(_captured_f_0, _captured_iterator_1) {
      this._captured_f_0 = _captured_f_0;
      this._captured_iterator_1 = _captured_iterator_1;
      this.$deferredAction();
    }
    Future_forEach_closure.builtin$cls = "Future_forEach_closure";
    if (!("name" in Future_forEach_closure))
      Future_forEach_closure.name = "Future_forEach_closure";
    $desc = $collectedClasses$.Future_forEach_closure[1];
    Future_forEach_closure.prototype = $desc;
    Future_forEach_closure.$__fields__ = ["_captured_f_0", "_captured_iterator_1"];
    function Future_forEach__closure(_captured_f_2, _captured_iterator_3) {
      this._captured_f_2 = _captured_f_2;
      this._captured_iterator_3 = _captured_iterator_3;
      this.$deferredAction();
    }
    Future_forEach__closure.builtin$cls = "Future_forEach__closure";
    if (!("name" in Future_forEach__closure))
      Future_forEach__closure.name = "Future_forEach__closure";
    $desc = $collectedClasses$.Future_forEach__closure[1];
    Future_forEach__closure.prototype = $desc;
    Future_forEach__closure.$__fields__ = ["_captured_f_2", "_captured_iterator_3"];
    function Future_forEach__closure0() {
      this.$deferredAction();
    }
    Future_forEach__closure0.builtin$cls = "Future_forEach__closure0";
    if (!("name" in Future_forEach__closure0))
      Future_forEach__closure0.name = "Future_forEach__closure0";
    $desc = $collectedClasses$.Future_forEach__closure0[1];
    Future_forEach__closure0.prototype = $desc;
    Future_forEach__closure0.$__fields__ = [];
    function Future_doWhile_closure(_async$_box_0, _async$_captured_f_1, _captured_doneSignal_2) {
      this._async$_box_0 = _async$_box_0;
      this._async$_captured_f_1 = _async$_captured_f_1;
      this._captured_doneSignal_2 = _captured_doneSignal_2;
      this.$deferredAction();
    }
    Future_doWhile_closure.builtin$cls = "Future_doWhile_closure";
    if (!("name" in Future_doWhile_closure))
      Future_doWhile_closure.name = "Future_doWhile_closure";
    $desc = $collectedClasses$.Future_doWhile_closure[1];
    Future_doWhile_closure.prototype = $desc;
    Future_doWhile_closure.$__fields__ = ["_async$_box_0", "_async$_captured_f_1", "_captured_doneSignal_2"];
    function _Completer(future) {
      this.future = future;
      this.$deferredAction();
    }
    _Completer.builtin$cls = "_Completer";
    if (!("name" in _Completer))
      _Completer.name = "_Completer";
    $desc = $collectedClasses$._Completer[1];
    _Completer.prototype = $desc;
    _Completer.$__fields__ = ["future"];
    _Completer.prototype.get$future = function() {
      return this.future;
    };
    function _AsyncCompleter(future) {
      this.future = future;
      this.$deferredAction();
    }
    _AsyncCompleter.builtin$cls = "_AsyncCompleter";
    if (!("name" in _AsyncCompleter))
      _AsyncCompleter.name = "_AsyncCompleter";
    $desc = $collectedClasses$._AsyncCompleter[1];
    _AsyncCompleter.prototype = $desc;
    _AsyncCompleter.$__fields__ = ["future"];
    function _FutureListener(_nextListener, result, state, callback, errorCallback) {
      this._nextListener = _nextListener;
      this.result = result;
      this.state = state;
      this.callback = callback;
      this.errorCallback = errorCallback;
      this.$deferredAction();
    }
    _FutureListener.builtin$cls = "_FutureListener";
    if (!("name" in _FutureListener))
      _FutureListener.name = "_FutureListener";
    $desc = $collectedClasses$._FutureListener[1];
    _FutureListener.prototype = $desc;
    _FutureListener.$__fields__ = ["_nextListener", "result", "state", "callback", "errorCallback"];
    _FutureListener.prototype.get$_nextListener = function() {
      return this._nextListener;
    };
    _FutureListener.prototype.set$_nextListener = function(v) {
      return this._nextListener = v;
    };
    _FutureListener.prototype.get$result = function(receiver) {
      return this.result;
    };
    function _Future(_state, _zone, _resultOrListeners) {
      this._state = _state;
      this._zone = _zone;
      this._resultOrListeners = _resultOrListeners;
      this.$deferredAction();
    }
    _Future.builtin$cls = "_Future";
    if (!("name" in _Future))
      _Future.name = "_Future";
    $desc = $collectedClasses$._Future[1];
    _Future.prototype = $desc;
    _Future.$__fields__ = ["_state", "_zone", "_resultOrListeners"];
    _Future.prototype.get$_zone = function() {
      return this._zone;
    };
    function _Future__addListener_closure(_async$_captured_this_0, _captured_listener_1) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._captured_listener_1 = _captured_listener_1;
      this.$deferredAction();
    }
    _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
    if (!("name" in _Future__addListener_closure))
      _Future__addListener_closure.name = "_Future__addListener_closure";
    $desc = $collectedClasses$._Future__addListener_closure[1];
    _Future__addListener_closure.prototype = $desc;
    _Future__addListener_closure.$__fields__ = ["_async$_captured_this_0", "_captured_listener_1"];
    function _Future__chainForeignFuture_closure(_captured_target_0) {
      this._captured_target_0 = _captured_target_0;
      this.$deferredAction();
    }
    _Future__chainForeignFuture_closure.builtin$cls = "_Future__chainForeignFuture_closure";
    if (!("name" in _Future__chainForeignFuture_closure))
      _Future__chainForeignFuture_closure.name = "_Future__chainForeignFuture_closure";
    $desc = $collectedClasses$._Future__chainForeignFuture_closure[1];
    _Future__chainForeignFuture_closure.prototype = $desc;
    _Future__chainForeignFuture_closure.$__fields__ = ["_captured_target_0"];
    function _Future__chainForeignFuture_closure0(_captured_target_1) {
      this._captured_target_1 = _captured_target_1;
      this.$deferredAction();
    }
    _Future__chainForeignFuture_closure0.builtin$cls = "_Future__chainForeignFuture_closure0";
    if (!("name" in _Future__chainForeignFuture_closure0))
      _Future__chainForeignFuture_closure0.name = "_Future__chainForeignFuture_closure0";
    $desc = $collectedClasses$._Future__chainForeignFuture_closure0[1];
    _Future__chainForeignFuture_closure0.prototype = $desc;
    _Future__chainForeignFuture_closure0.$__fields__ = ["_captured_target_1"];
    function _Future__chainForeignFuture_closure1(_captured_target_2, _captured_e_3, _captured_s_4) {
      this._captured_target_2 = _captured_target_2;
      this._captured_e_3 = _captured_e_3;
      this._captured_s_4 = _captured_s_4;
      this.$deferredAction();
    }
    _Future__chainForeignFuture_closure1.builtin$cls = "_Future__chainForeignFuture_closure1";
    if (!("name" in _Future__chainForeignFuture_closure1))
      _Future__chainForeignFuture_closure1.name = "_Future__chainForeignFuture_closure1";
    $desc = $collectedClasses$._Future__chainForeignFuture_closure1[1];
    _Future__chainForeignFuture_closure1.prototype = $desc;
    _Future__chainForeignFuture_closure1.$__fields__ = ["_captured_target_2", "_captured_e_3", "_captured_s_4"];
    function _Future__asyncComplete_closure(_async$_captured_this_0, _captured_coreFuture_1) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._captured_coreFuture_1 = _captured_coreFuture_1;
      this.$deferredAction();
    }
    _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
    if (!("name" in _Future__asyncComplete_closure))
      _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
    $desc = $collectedClasses$._Future__asyncComplete_closure[1];
    _Future__asyncComplete_closure.prototype = $desc;
    _Future__asyncComplete_closure.$__fields__ = ["_async$_captured_this_0", "_captured_coreFuture_1"];
    function _Future__asyncComplete_closure0(_async$_captured_this_2, _captured_value_3) {
      this._async$_captured_this_2 = _async$_captured_this_2;
      this._captured_value_3 = _captured_value_3;
      this.$deferredAction();
    }
    _Future__asyncComplete_closure0.builtin$cls = "_Future__asyncComplete_closure0";
    if (!("name" in _Future__asyncComplete_closure0))
      _Future__asyncComplete_closure0.name = "_Future__asyncComplete_closure0";
    $desc = $collectedClasses$._Future__asyncComplete_closure0[1];
    _Future__asyncComplete_closure0.prototype = $desc;
    _Future__asyncComplete_closure0.$__fields__ = ["_async$_captured_this_2", "_captured_value_3"];
    function _Future__asyncCompleteError_closure(_async$_captured_this_0, _captured_error_1, _captured_stackTrace_2) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._captured_error_1 = _captured_error_1;
      this._captured_stackTrace_2 = _captured_stackTrace_2;
      this.$deferredAction();
    }
    _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
    if (!("name" in _Future__asyncCompleteError_closure))
      _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
    $desc = $collectedClasses$._Future__asyncCompleteError_closure[1];
    _Future__asyncCompleteError_closure.prototype = $desc;
    _Future__asyncCompleteError_closure.$__fields__ = ["_async$_captured_this_0", "_captured_error_1", "_captured_stackTrace_2"];
    function _Future__propagateToListeners_handleValueCallback(_box_1, _captured_listener_3, _captured_sourceValue_4, _captured_zone_5) {
      this._box_1 = _box_1;
      this._captured_listener_3 = _captured_listener_3;
      this._captured_sourceValue_4 = _captured_sourceValue_4;
      this._captured_zone_5 = _captured_zone_5;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleValueCallback.builtin$cls = "_Future__propagateToListeners_handleValueCallback";
    if (!("name" in _Future__propagateToListeners_handleValueCallback))
      _Future__propagateToListeners_handleValueCallback.name = "_Future__propagateToListeners_handleValueCallback";
    $desc = $collectedClasses$._Future__propagateToListeners_handleValueCallback[1];
    _Future__propagateToListeners_handleValueCallback.prototype = $desc;
    _Future__propagateToListeners_handleValueCallback.$__fields__ = ["_box_1", "_captured_listener_3", "_captured_sourceValue_4", "_captured_zone_5"];
    function _Future__propagateToListeners_handleError(_box_2, _box_1, _captured_listener_6, _captured_zone_7) {
      this._box_2 = _box_2;
      this._box_1 = _box_1;
      this._captured_listener_6 = _captured_listener_6;
      this._captured_zone_7 = _captured_zone_7;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleError.builtin$cls = "_Future__propagateToListeners_handleError";
    if (!("name" in _Future__propagateToListeners_handleError))
      _Future__propagateToListeners_handleError.name = "_Future__propagateToListeners_handleError";
    $desc = $collectedClasses$._Future__propagateToListeners_handleError[1];
    _Future__propagateToListeners_handleError.prototype = $desc;
    _Future__propagateToListeners_handleError.$__fields__ = ["_box_2", "_box_1", "_captured_listener_6", "_captured_zone_7"];
    function _Future__propagateToListeners_handleWhenCompleteCallback(_box_2, _box_1, _captured_hasError_8, _captured_listener_9, _captured_zone_10) {
      this._box_2 = _box_2;
      this._box_1 = _box_1;
      this._captured_hasError_8 = _captured_hasError_8;
      this._captured_listener_9 = _captured_listener_9;
      this._captured_zone_10 = _captured_zone_10;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleWhenCompleteCallback.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback";
    if (!("name" in _Future__propagateToListeners_handleWhenCompleteCallback))
      _Future__propagateToListeners_handleWhenCompleteCallback.name = "_Future__propagateToListeners_handleWhenCompleteCallback";
    $desc = $collectedClasses$._Future__propagateToListeners_handleWhenCompleteCallback[1];
    _Future__propagateToListeners_handleWhenCompleteCallback.prototype = $desc;
    _Future__propagateToListeners_handleWhenCompleteCallback.$__fields__ = ["_box_2", "_box_1", "_captured_hasError_8", "_captured_listener_9", "_captured_zone_10"];
    function _Future__propagateToListeners_handleWhenCompleteCallback_closure(_box_2, _captured_result_11) {
      this._box_2 = _box_2;
      this._captured_result_11 = _captured_result_11;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
    if (!("name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure))
      _Future__propagateToListeners_handleWhenCompleteCallback_closure.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
    $desc = $collectedClasses$._Future__propagateToListeners_handleWhenCompleteCallback_closure[1];
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = $desc;
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.$__fields__ = ["_box_2", "_captured_result_11"];
    function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(_async$_box_0, _captured_result_12) {
      this._async$_box_0 = _async$_box_0;
      this._captured_result_12 = _captured_result_12;
      this.$deferredAction();
    }
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
    if (!("name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure0))
      _Future__propagateToListeners_handleWhenCompleteCallback_closure0.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
    $desc = $collectedClasses$._Future__propagateToListeners_handleWhenCompleteCallback_closure0[1];
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = $desc;
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.$__fields__ = ["_async$_box_0", "_captured_result_12"];
    function _AsyncCallbackEntry(callback, zone, next) {
      this.callback = callback;
      this.zone = zone;
      this.next = next;
      this.$deferredAction();
    }
    _AsyncCallbackEntry.builtin$cls = "_AsyncCallbackEntry";
    if (!("name" in _AsyncCallbackEntry))
      _AsyncCallbackEntry.name = "_AsyncCallbackEntry";
    $desc = $collectedClasses$._AsyncCallbackEntry[1];
    _AsyncCallbackEntry.prototype = $desc;
    _AsyncCallbackEntry.$__fields__ = ["callback", "zone", "next"];
    _AsyncCallbackEntry.prototype.get$zone = function() {
      return this.zone;
    };
    _AsyncCallbackEntry.prototype.get$next = function() {
      return this.next;
    };
    _AsyncCallbackEntry.prototype.set$next = function(v) {
      return this.next = v;
    };
    function Stream() {
      this.$deferredAction();
    }
    Stream.builtin$cls = "Stream";
    if (!("name" in Stream))
      Stream.name = "Stream";
    $desc = $collectedClasses$.Stream[1];
    Stream.prototype = $desc;
    Stream.$__fields__ = [];
    function Stream_Stream$fromIterable_closure(_captured_T_0, _captured_data_1) {
      this._captured_T_0 = _captured_T_0;
      this._captured_data_1 = _captured_data_1;
      this.$deferredAction();
    }
    Stream_Stream$fromIterable_closure.builtin$cls = "Stream_Stream$fromIterable_closure";
    if (!("name" in Stream_Stream$fromIterable_closure))
      Stream_Stream$fromIterable_closure.name = "Stream_Stream$fromIterable_closure";
    $desc = $collectedClasses$.Stream_Stream$fromIterable_closure[1];
    Stream_Stream$fromIterable_closure.prototype = $desc;
    Stream_Stream$fromIterable_closure.$__fields__ = ["_captured_T_0", "_captured_data_1"];
    function Stream_Stream$periodic_sendEvent(_async$_box_0, _captured_watch_1) {
      this._async$_box_0 = _async$_box_0;
      this._captured_watch_1 = _captured_watch_1;
      this.$deferredAction();
    }
    Stream_Stream$periodic_sendEvent.builtin$cls = "Stream_Stream$periodic_sendEvent";
    if (!("name" in Stream_Stream$periodic_sendEvent))
      Stream_Stream$periodic_sendEvent.name = "Stream_Stream$periodic_sendEvent";
    $desc = $collectedClasses$.Stream_Stream$periodic_sendEvent[1];
    Stream_Stream$periodic_sendEvent.prototype = $desc;
    Stream_Stream$periodic_sendEvent.$__fields__ = ["_async$_box_0", "_captured_watch_1"];
    function Stream_Stream$periodic_startPeriodicTimer(_async$_box_0, _captured_period_2, _captured_sendEvent_3) {
      this._async$_box_0 = _async$_box_0;
      this._captured_period_2 = _captured_period_2;
      this._captured_sendEvent_3 = _captured_sendEvent_3;
      this.$deferredAction();
    }
    Stream_Stream$periodic_startPeriodicTimer.builtin$cls = "Stream_Stream$periodic_startPeriodicTimer";
    if (!("name" in Stream_Stream$periodic_startPeriodicTimer))
      Stream_Stream$periodic_startPeriodicTimer.name = "Stream_Stream$periodic_startPeriodicTimer";
    $desc = $collectedClasses$.Stream_Stream$periodic_startPeriodicTimer[1];
    Stream_Stream$periodic_startPeriodicTimer.prototype = $desc;
    Stream_Stream$periodic_startPeriodicTimer.$__fields__ = ["_async$_box_0", "_captured_period_2", "_captured_sendEvent_3"];
    function Stream_Stream$periodic_startPeriodicTimer_closure(_captured_sendEvent_4) {
      this._captured_sendEvent_4 = _captured_sendEvent_4;
      this.$deferredAction();
    }
    Stream_Stream$periodic_startPeriodicTimer_closure.builtin$cls = "Stream_Stream$periodic_startPeriodicTimer_closure";
    if (!("name" in Stream_Stream$periodic_startPeriodicTimer_closure))
      Stream_Stream$periodic_startPeriodicTimer_closure.name = "Stream_Stream$periodic_startPeriodicTimer_closure";
    $desc = $collectedClasses$.Stream_Stream$periodic_startPeriodicTimer_closure[1];
    Stream_Stream$periodic_startPeriodicTimer_closure.prototype = $desc;
    Stream_Stream$periodic_startPeriodicTimer_closure.$__fields__ = ["_captured_sendEvent_4"];
    function Stream_Stream$periodic_closure0(_captured_watch_5, _captured_startPeriodicTimer_6) {
      this._captured_watch_5 = _captured_watch_5;
      this._captured_startPeriodicTimer_6 = _captured_startPeriodicTimer_6;
      this.$deferredAction();
    }
    Stream_Stream$periodic_closure0.builtin$cls = "Stream_Stream$periodic_closure0";
    if (!("name" in Stream_Stream$periodic_closure0))
      Stream_Stream$periodic_closure0.name = "Stream_Stream$periodic_closure0";
    $desc = $collectedClasses$.Stream_Stream$periodic_closure0[1];
    Stream_Stream$periodic_closure0.prototype = $desc;
    Stream_Stream$periodic_closure0.$__fields__ = ["_captured_watch_5", "_captured_startPeriodicTimer_6"];
    function Stream_Stream$periodic_closure1(_async$_box_0, _captured_watch_7) {
      this._async$_box_0 = _async$_box_0;
      this._captured_watch_7 = _captured_watch_7;
      this.$deferredAction();
    }
    Stream_Stream$periodic_closure1.builtin$cls = "Stream_Stream$periodic_closure1";
    if (!("name" in Stream_Stream$periodic_closure1))
      Stream_Stream$periodic_closure1.name = "Stream_Stream$periodic_closure1";
    $desc = $collectedClasses$.Stream_Stream$periodic_closure1[1];
    Stream_Stream$periodic_closure1.prototype = $desc;
    Stream_Stream$periodic_closure1.$__fields__ = ["_async$_box_0", "_captured_watch_7"];
    function Stream_Stream$periodic_closure2(_async$_box_0, _captured_period_8, _captured_watch_9, _captured_sendEvent_10, _captured_startPeriodicTimer_11) {
      this._async$_box_0 = _async$_box_0;
      this._captured_period_8 = _captured_period_8;
      this._captured_watch_9 = _captured_watch_9;
      this._captured_sendEvent_10 = _captured_sendEvent_10;
      this._captured_startPeriodicTimer_11 = _captured_startPeriodicTimer_11;
      this.$deferredAction();
    }
    Stream_Stream$periodic_closure2.builtin$cls = "Stream_Stream$periodic_closure2";
    if (!("name" in Stream_Stream$periodic_closure2))
      Stream_Stream$periodic_closure2.name = "Stream_Stream$periodic_closure2";
    $desc = $collectedClasses$.Stream_Stream$periodic_closure2[1];
    Stream_Stream$periodic_closure2.prototype = $desc;
    Stream_Stream$periodic_closure2.$__fields__ = ["_async$_box_0", "_captured_period_8", "_captured_watch_9", "_captured_sendEvent_10", "_captured_startPeriodicTimer_11"];
    function Stream_Stream$periodic__closure(_async$_box_0, _captured_sendEvent_12, _captured_startPeriodicTimer_13) {
      this._async$_box_0 = _async$_box_0;
      this._captured_sendEvent_12 = _captured_sendEvent_12;
      this._captured_startPeriodicTimer_13 = _captured_startPeriodicTimer_13;
      this.$deferredAction();
    }
    Stream_Stream$periodic__closure.builtin$cls = "Stream_Stream$periodic__closure";
    if (!("name" in Stream_Stream$periodic__closure))
      Stream_Stream$periodic__closure.name = "Stream_Stream$periodic__closure";
    $desc = $collectedClasses$.Stream_Stream$periodic__closure[1];
    Stream_Stream$periodic__closure.prototype = $desc;
    Stream_Stream$periodic__closure.$__fields__ = ["_async$_box_0", "_captured_sendEvent_12", "_captured_startPeriodicTimer_13"];
    function Stream_Stream$periodic_closure(_async$_box_0) {
      this._async$_box_0 = _async$_box_0;
      this.$deferredAction();
    }
    Stream_Stream$periodic_closure.builtin$cls = "Stream_Stream$periodic_closure";
    if (!("name" in Stream_Stream$periodic_closure))
      Stream_Stream$periodic_closure.name = "Stream_Stream$periodic_closure";
    $desc = $collectedClasses$.Stream_Stream$periodic_closure[1];
    Stream_Stream$periodic_closure.prototype = $desc;
    Stream_Stream$periodic_closure.$__fields__ = ["_async$_box_0"];
    function Stream_join_closure(_async$_box_0, _async$_captured_this_1, _captured_separator_2, _captured_result_3, _captured_buffer_4) {
      this._async$_box_0 = _async$_box_0;
      this._async$_captured_this_1 = _async$_captured_this_1;
      this._captured_separator_2 = _captured_separator_2;
      this._captured_result_3 = _captured_result_3;
      this._captured_buffer_4 = _captured_buffer_4;
      this.$deferredAction();
    }
    Stream_join_closure.builtin$cls = "Stream_join_closure";
    if (!("name" in Stream_join_closure))
      Stream_join_closure.name = "Stream_join_closure";
    $desc = $collectedClasses$.Stream_join_closure[1];
    Stream_join_closure.prototype = $desc;
    Stream_join_closure.$__fields__ = ["_async$_box_0", "_async$_captured_this_1", "_captured_separator_2", "_captured_result_3", "_captured_buffer_4"];
    function Stream_join_closure1(_captured_result_5) {
      this._captured_result_5 = _captured_result_5;
      this.$deferredAction();
    }
    Stream_join_closure1.builtin$cls = "Stream_join_closure1";
    if (!("name" in Stream_join_closure1))
      Stream_join_closure1.name = "Stream_join_closure1";
    $desc = $collectedClasses$.Stream_join_closure1[1];
    Stream_join_closure1.prototype = $desc;
    Stream_join_closure1.$__fields__ = ["_captured_result_5"];
    function Stream_join_closure0(_captured_result_6, _captured_buffer_7) {
      this._captured_result_6 = _captured_result_6;
      this._captured_buffer_7 = _captured_buffer_7;
      this.$deferredAction();
    }
    Stream_join_closure0.builtin$cls = "Stream_join_closure0";
    if (!("name" in Stream_join_closure0))
      Stream_join_closure0.name = "Stream_join_closure0";
    $desc = $collectedClasses$.Stream_join_closure0[1];
    Stream_join_closure0.prototype = $desc;
    Stream_join_closure0.$__fields__ = ["_captured_result_6", "_captured_buffer_7"];
    function Stream_contains_closure(_async$_box_0, _async$_captured_this_1, _captured_needle_2, _captured_future_3) {
      this._async$_box_0 = _async$_box_0;
      this._async$_captured_this_1 = _async$_captured_this_1;
      this._captured_needle_2 = _captured_needle_2;
      this._captured_future_3 = _captured_future_3;
      this.$deferredAction();
    }
    Stream_contains_closure.builtin$cls = "Stream_contains_closure";
    if (!("name" in Stream_contains_closure))
      Stream_contains_closure.name = "Stream_contains_closure";
    $desc = $collectedClasses$.Stream_contains_closure[1];
    Stream_contains_closure.prototype = $desc;
    Stream_contains_closure.$__fields__ = ["_async$_box_0", "_async$_captured_this_1", "_captured_needle_2", "_captured_future_3"];
    function Stream_contains__closure(_captured_needle_4, _captured_element_5) {
      this._captured_needle_4 = _captured_needle_4;
      this._captured_element_5 = _captured_element_5;
      this.$deferredAction();
    }
    Stream_contains__closure.builtin$cls = "Stream_contains__closure";
    if (!("name" in Stream_contains__closure))
      Stream_contains__closure.name = "Stream_contains__closure";
    $desc = $collectedClasses$.Stream_contains__closure[1];
    Stream_contains__closure.prototype = $desc;
    Stream_contains__closure.$__fields__ = ["_captured_needle_4", "_captured_element_5"];
    function Stream_contains__closure0(_async$_box_0, _captured_future_6) {
      this._async$_box_0 = _async$_box_0;
      this._captured_future_6 = _captured_future_6;
      this.$deferredAction();
    }
    Stream_contains__closure0.builtin$cls = "Stream_contains__closure0";
    if (!("name" in Stream_contains__closure0))
      Stream_contains__closure0.name = "Stream_contains__closure0";
    $desc = $collectedClasses$.Stream_contains__closure0[1];
    Stream_contains__closure0.prototype = $desc;
    Stream_contains__closure0.$__fields__ = ["_async$_box_0", "_captured_future_6"];
    function Stream_contains_closure0(_captured_future_7) {
      this._captured_future_7 = _captured_future_7;
      this.$deferredAction();
    }
    Stream_contains_closure0.builtin$cls = "Stream_contains_closure0";
    if (!("name" in Stream_contains_closure0))
      Stream_contains_closure0.name = "Stream_contains_closure0";
    $desc = $collectedClasses$.Stream_contains_closure0[1];
    Stream_contains_closure0.prototype = $desc;
    Stream_contains_closure0.$__fields__ = ["_captured_future_7"];
    function Stream_forEach_closure(_async$_box_0, _async$_captured_this_1, _captured_action_2, _captured_future_3) {
      this._async$_box_0 = _async$_box_0;
      this._async$_captured_this_1 = _async$_captured_this_1;
      this._captured_action_2 = _captured_action_2;
      this._captured_future_3 = _captured_future_3;
      this.$deferredAction();
    }
    Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
    if (!("name" in Stream_forEach_closure))
      Stream_forEach_closure.name = "Stream_forEach_closure";
    $desc = $collectedClasses$.Stream_forEach_closure[1];
    Stream_forEach_closure.prototype = $desc;
    Stream_forEach_closure.$__fields__ = ["_async$_box_0", "_async$_captured_this_1", "_captured_action_2", "_captured_future_3"];
    function Stream_forEach__closure(_captured_action_4, _captured_element_5) {
      this._captured_action_4 = _captured_action_4;
      this._captured_element_5 = _captured_element_5;
      this.$deferredAction();
    }
    Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
    if (!("name" in Stream_forEach__closure))
      Stream_forEach__closure.name = "Stream_forEach__closure";
    $desc = $collectedClasses$.Stream_forEach__closure[1];
    Stream_forEach__closure.prototype = $desc;
    Stream_forEach__closure.$__fields__ = ["_captured_action_4", "_captured_element_5"];
    function Stream_forEach__closure0() {
      this.$deferredAction();
    }
    Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
    if (!("name" in Stream_forEach__closure0))
      Stream_forEach__closure0.name = "Stream_forEach__closure0";
    $desc = $collectedClasses$.Stream_forEach__closure0[1];
    Stream_forEach__closure0.prototype = $desc;
    Stream_forEach__closure0.$__fields__ = [];
    function Stream_forEach_closure0(_captured_future_6) {
      this._captured_future_6 = _captured_future_6;
      this.$deferredAction();
    }
    Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
    if (!("name" in Stream_forEach_closure0))
      Stream_forEach_closure0.name = "Stream_forEach_closure0";
    $desc = $collectedClasses$.Stream_forEach_closure0[1];
    Stream_forEach_closure0.prototype = $desc;
    Stream_forEach_closure0.$__fields__ = ["_captured_future_6"];
    function Stream_length_closure(_async$_box_0) {
      this._async$_box_0 = _async$_box_0;
      this.$deferredAction();
    }
    Stream_length_closure.builtin$cls = "Stream_length_closure";
    if (!("name" in Stream_length_closure))
      Stream_length_closure.name = "Stream_length_closure";
    $desc = $collectedClasses$.Stream_length_closure[1];
    Stream_length_closure.prototype = $desc;
    Stream_length_closure.$__fields__ = ["_async$_box_0"];
    function Stream_length_closure0(_async$_box_0, _captured_future_1) {
      this._async$_box_0 = _async$_box_0;
      this._captured_future_1 = _captured_future_1;
      this.$deferredAction();
    }
    Stream_length_closure0.builtin$cls = "Stream_length_closure0";
    if (!("name" in Stream_length_closure0))
      Stream_length_closure0.name = "Stream_length_closure0";
    $desc = $collectedClasses$.Stream_length_closure0[1];
    Stream_length_closure0.prototype = $desc;
    Stream_length_closure0.$__fields__ = ["_async$_box_0", "_captured_future_1"];
    function Stream_isEmpty_closure(_async$_box_0, _captured_future_1) {
      this._async$_box_0 = _async$_box_0;
      this._captured_future_1 = _captured_future_1;
      this.$deferredAction();
    }
    Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
    if (!("name" in Stream_isEmpty_closure))
      Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
    $desc = $collectedClasses$.Stream_isEmpty_closure[1];
    Stream_isEmpty_closure.prototype = $desc;
    Stream_isEmpty_closure.$__fields__ = ["_async$_box_0", "_captured_future_1"];
    function Stream_isEmpty_closure0(_captured_future_2) {
      this._captured_future_2 = _captured_future_2;
      this.$deferredAction();
    }
    Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
    if (!("name" in Stream_isEmpty_closure0))
      Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
    $desc = $collectedClasses$.Stream_isEmpty_closure0[1];
    Stream_isEmpty_closure0.prototype = $desc;
    Stream_isEmpty_closure0.$__fields__ = ["_captured_future_2"];
    function Stream_toList_closure(_async$_captured_this_0, _async$_captured_result_1) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._async$_captured_result_1 = _async$_captured_result_1;
      this.$deferredAction();
    }
    Stream_toList_closure.builtin$cls = "Stream_toList_closure";
    if (!("name" in Stream_toList_closure))
      Stream_toList_closure.name = "Stream_toList_closure";
    $desc = $collectedClasses$.Stream_toList_closure[1];
    Stream_toList_closure.prototype = $desc;
    Stream_toList_closure.$__fields__ = ["_async$_captured_this_0", "_async$_captured_result_1"];
    function Stream_toList_closure0(_captured_result_2, _captured_future_3) {
      this._captured_result_2 = _captured_result_2;
      this._captured_future_3 = _captured_future_3;
      this.$deferredAction();
    }
    Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
    if (!("name" in Stream_toList_closure0))
      Stream_toList_closure0.name = "Stream_toList_closure0";
    $desc = $collectedClasses$.Stream_toList_closure0[1];
    Stream_toList_closure0.prototype = $desc;
    Stream_toList_closure0.$__fields__ = ["_captured_result_2", "_captured_future_3"];
    function Stream_first_closure(_async$_box_0, _async$_captured_this_1, _captured_future_2) {
      this._async$_box_0 = _async$_box_0;
      this._async$_captured_this_1 = _async$_captured_this_1;
      this._captured_future_2 = _captured_future_2;
      this.$deferredAction();
    }
    Stream_first_closure.builtin$cls = "Stream_first_closure";
    if (!("name" in Stream_first_closure))
      Stream_first_closure.name = "Stream_first_closure";
    $desc = $collectedClasses$.Stream_first_closure[1];
    Stream_first_closure.prototype = $desc;
    Stream_first_closure.$__fields__ = ["_async$_box_0", "_async$_captured_this_1", "_captured_future_2"];
    function Stream_first_closure0(_captured_future_3) {
      this._captured_future_3 = _captured_future_3;
      this.$deferredAction();
    }
    Stream_first_closure0.builtin$cls = "Stream_first_closure0";
    if (!("name" in Stream_first_closure0))
      Stream_first_closure0.name = "Stream_first_closure0";
    $desc = $collectedClasses$.Stream_first_closure0[1];
    Stream_first_closure0.prototype = $desc;
    Stream_first_closure0.$__fields__ = ["_captured_future_3"];
    function Stream_last_closure(_async$_box_0, _async$_captured_this_1) {
      this._async$_box_0 = _async$_box_0;
      this._async$_captured_this_1 = _async$_captured_this_1;
      this.$deferredAction();
    }
    Stream_last_closure.builtin$cls = "Stream_last_closure";
    if (!("name" in Stream_last_closure))
      Stream_last_closure.name = "Stream_last_closure";
    $desc = $collectedClasses$.Stream_last_closure[1];
    Stream_last_closure.prototype = $desc;
    Stream_last_closure.$__fields__ = ["_async$_box_0", "_async$_captured_this_1"];
    function Stream_last_closure0(_async$_box_0, _captured_future_2) {
      this._async$_box_0 = _async$_box_0;
      this._captured_future_2 = _captured_future_2;
      this.$deferredAction();
    }
    Stream_last_closure0.builtin$cls = "Stream_last_closure0";
    if (!("name" in Stream_last_closure0))
      Stream_last_closure0.name = "Stream_last_closure0";
    $desc = $collectedClasses$.Stream_last_closure0[1];
    Stream_last_closure0.prototype = $desc;
    Stream_last_closure0.$__fields__ = ["_async$_box_0", "_captured_future_2"];
    function StreamSubscription() {
      this.$deferredAction();
    }
    StreamSubscription.builtin$cls = "StreamSubscription";
    if (!("name" in StreamSubscription))
      StreamSubscription.name = "StreamSubscription";
    $desc = $collectedClasses$.StreamSubscription[1];
    StreamSubscription.prototype = $desc;
    StreamSubscription.$__fields__ = [];
    function EventSink() {
      this.$deferredAction();
    }
    EventSink.builtin$cls = "EventSink";
    if (!("name" in EventSink))
      EventSink.name = "EventSink";
    $desc = $collectedClasses$.EventSink[1];
    EventSink.prototype = $desc;
    EventSink.$__fields__ = [];
    function _StreamController() {
      this.$deferredAction();
    }
    _StreamController.builtin$cls = "_StreamController";
    if (!("name" in _StreamController))
      _StreamController.name = "_StreamController";
    $desc = $collectedClasses$._StreamController[1];
    _StreamController.prototype = $desc;
    _StreamController.$__fields__ = [];
    function _StreamController__subscribe_closure(_async$_captured_this_0) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this.$deferredAction();
    }
    _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
    if (!("name" in _StreamController__subscribe_closure))
      _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
    $desc = $collectedClasses$._StreamController__subscribe_closure[1];
    _StreamController__subscribe_closure.prototype = $desc;
    _StreamController__subscribe_closure.$__fields__ = ["_async$_captured_this_0"];
    function _StreamController__recordCancel_complete(_async$_captured_this_0) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this.$deferredAction();
    }
    _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
    if (!("name" in _StreamController__recordCancel_complete))
      _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
    $desc = $collectedClasses$._StreamController__recordCancel_complete[1];
    _StreamController__recordCancel_complete.prototype = $desc;
    _StreamController__recordCancel_complete.$__fields__ = ["_async$_captured_this_0"];
    function _SyncStreamControllerDispatch() {
      this.$deferredAction();
    }
    _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
    if (!("name" in _SyncStreamControllerDispatch))
      _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
    $desc = $collectedClasses$._SyncStreamControllerDispatch[1];
    _SyncStreamControllerDispatch.prototype = $desc;
    _SyncStreamControllerDispatch.$__fields__ = [];
    function _AsyncStreamControllerDispatch() {
      this.$deferredAction();
    }
    _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
    if (!("name" in _AsyncStreamControllerDispatch))
      _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
    $desc = $collectedClasses$._AsyncStreamControllerDispatch[1];
    _AsyncStreamControllerDispatch.prototype = $desc;
    _AsyncStreamControllerDispatch.$__fields__ = [];
    function _AsyncStreamController(_varData, _state, _doneFuture, _onListen, _onPause, _onResume, _onCancel) {
      this._varData = _varData;
      this._state = _state;
      this._doneFuture = _doneFuture;
      this._onListen = _onListen;
      this._onPause = _onPause;
      this._onResume = _onResume;
      this._onCancel = _onCancel;
      this.$deferredAction();
    }
    _AsyncStreamController.builtin$cls = "_AsyncStreamController";
    if (!("name" in _AsyncStreamController))
      _AsyncStreamController.name = "_AsyncStreamController";
    $desc = $collectedClasses$._AsyncStreamController[1];
    _AsyncStreamController.prototype = $desc;
    _AsyncStreamController.$__fields__ = ["_varData", "_state", "_doneFuture", "_onListen", "_onPause", "_onResume", "_onCancel"];
    function _SyncStreamController(_varData, _state, _doneFuture, _onListen, _onPause, _onResume, _onCancel) {
      this._varData = _varData;
      this._state = _state;
      this._doneFuture = _doneFuture;
      this._onListen = _onListen;
      this._onPause = _onPause;
      this._onResume = _onResume;
      this._onCancel = _onCancel;
      this.$deferredAction();
    }
    _SyncStreamController.builtin$cls = "_SyncStreamController";
    if (!("name" in _SyncStreamController))
      _SyncStreamController.name = "_SyncStreamController";
    $desc = $collectedClasses$._SyncStreamController[1];
    _SyncStreamController.prototype = $desc;
    _SyncStreamController.$__fields__ = ["_varData", "_state", "_doneFuture", "_onListen", "_onPause", "_onResume", "_onCancel"];
    function _ControllerStream(_async$_controller) {
      this._async$_controller = _async$_controller;
      this.$deferredAction();
    }
    _ControllerStream.builtin$cls = "_ControllerStream";
    if (!("name" in _ControllerStream))
      _ControllerStream.name = "_ControllerStream";
    $desc = $collectedClasses$._ControllerStream[1];
    _ControllerStream.prototype = $desc;
    _ControllerStream.$__fields__ = ["_async$_controller"];
    function _ControllerSubscription(_async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
      this._async$_controller = _async$_controller;
      this._async$_onData = _async$_onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$deferredAction();
    }
    _ControllerSubscription.builtin$cls = "_ControllerSubscription";
    if (!("name" in _ControllerSubscription))
      _ControllerSubscription.name = "_ControllerSubscription";
    $desc = $collectedClasses$._ControllerSubscription[1];
    _ControllerSubscription.prototype = $desc;
    _ControllerSubscription.$__fields__ = ["_async$_controller", "_async$_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    _ControllerSubscription.prototype.get$_async$_controller = function() {
      return this._async$_controller;
    };
    function _AddStreamState() {
      this.$deferredAction();
    }
    _AddStreamState.builtin$cls = "_AddStreamState";
    if (!("name" in _AddStreamState))
      _AddStreamState.name = "_AddStreamState";
    $desc = $collectedClasses$._AddStreamState[1];
    _AddStreamState.prototype = $desc;
    _AddStreamState.$__fields__ = [];
    function _AddStreamState_makeErrorHandler_closure(_async$_captured_controller_0) {
      this._async$_captured_controller_0 = _async$_captured_controller_0;
      this.$deferredAction();
    }
    _AddStreamState_makeErrorHandler_closure.builtin$cls = "_AddStreamState_makeErrorHandler_closure";
    if (!("name" in _AddStreamState_makeErrorHandler_closure))
      _AddStreamState_makeErrorHandler_closure.name = "_AddStreamState_makeErrorHandler_closure";
    $desc = $collectedClasses$._AddStreamState_makeErrorHandler_closure[1];
    _AddStreamState_makeErrorHandler_closure.prototype = $desc;
    _AddStreamState_makeErrorHandler_closure.$__fields__ = ["_async$_captured_controller_0"];
    function _AddStreamState_cancel_closure(_async$_captured_this_0) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this.$deferredAction();
    }
    _AddStreamState_cancel_closure.builtin$cls = "_AddStreamState_cancel_closure";
    if (!("name" in _AddStreamState_cancel_closure))
      _AddStreamState_cancel_closure.name = "_AddStreamState_cancel_closure";
    $desc = $collectedClasses$._AddStreamState_cancel_closure[1];
    _AddStreamState_cancel_closure.prototype = $desc;
    _AddStreamState_cancel_closure.$__fields__ = ["_async$_captured_this_0"];
    function _StreamControllerAddStreamState(varData, addStreamFuture, addSubscription) {
      this.varData = varData;
      this.addStreamFuture = addStreamFuture;
      this.addSubscription = addSubscription;
      this.$deferredAction();
    }
    _StreamControllerAddStreamState.builtin$cls = "_StreamControllerAddStreamState";
    if (!("name" in _StreamControllerAddStreamState))
      _StreamControllerAddStreamState.name = "_StreamControllerAddStreamState";
    $desc = $collectedClasses$._StreamControllerAddStreamState[1];
    _StreamControllerAddStreamState.prototype = $desc;
    _StreamControllerAddStreamState.$__fields__ = ["varData", "addStreamFuture", "addSubscription"];
    _StreamControllerAddStreamState.prototype.get$varData = function() {
      return this.varData;
    };
    _StreamControllerAddStreamState.prototype.set$varData = function(v) {
      return this.varData = v;
    };
    function _EventSink() {
      this.$deferredAction();
    }
    _EventSink.builtin$cls = "_EventSink";
    if (!("name" in _EventSink))
      _EventSink.name = "_EventSink";
    $desc = $collectedClasses$._EventSink[1];
    _EventSink.prototype = $desc;
    _EventSink.$__fields__ = [];
    function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
      this._async$_onData = _async$_onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$deferredAction();
    }
    _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
    if (!("name" in _BufferingStreamSubscription))
      _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
    $desc = $collectedClasses$._BufferingStreamSubscription[1];
    _BufferingStreamSubscription.prototype = $desc;
    _BufferingStreamSubscription.$__fields__ = ["_async$_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    _BufferingStreamSubscription.prototype.get$_onError = function() {
      return this._onError;
    };
    _BufferingStreamSubscription.prototype.get$_zone = function() {
      return this._zone;
    };
    function _BufferingStreamSubscription__sendError_sendError(_async$_captured_this_0, _captured_error_1, _captured_stackTrace_2) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._captured_error_1 = _captured_error_1;
      this._captured_stackTrace_2 = _captured_stackTrace_2;
      this.$deferredAction();
    }
    _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
    if (!("name" in _BufferingStreamSubscription__sendError_sendError))
      _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
    $desc = $collectedClasses$._BufferingStreamSubscription__sendError_sendError[1];
    _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
    _BufferingStreamSubscription__sendError_sendError.$__fields__ = ["_async$_captured_this_0", "_captured_error_1", "_captured_stackTrace_2"];
    function _BufferingStreamSubscription__sendDone_sendDone(_async$_captured_this_0) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this.$deferredAction();
    }
    _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
    if (!("name" in _BufferingStreamSubscription__sendDone_sendDone))
      _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
    $desc = $collectedClasses$._BufferingStreamSubscription__sendDone_sendDone[1];
    _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
    _BufferingStreamSubscription__sendDone_sendDone.$__fields__ = ["_async$_captured_this_0"];
    function _StreamImpl() {
      this.$deferredAction();
    }
    _StreamImpl.builtin$cls = "_StreamImpl";
    if (!("name" in _StreamImpl))
      _StreamImpl.name = "_StreamImpl";
    $desc = $collectedClasses$._StreamImpl[1];
    _StreamImpl.prototype = $desc;
    _StreamImpl.$__fields__ = [];
    function _GeneratedStreamImpl(_pending, _isUsed) {
      this._pending = _pending;
      this._isUsed = _isUsed;
      this.$deferredAction();
    }
    _GeneratedStreamImpl.builtin$cls = "_GeneratedStreamImpl";
    if (!("name" in _GeneratedStreamImpl))
      _GeneratedStreamImpl.name = "_GeneratedStreamImpl";
    $desc = $collectedClasses$._GeneratedStreamImpl[1];
    _GeneratedStreamImpl.prototype = $desc;
    _GeneratedStreamImpl.$__fields__ = ["_pending", "_isUsed"];
    function _IterablePendingEvents(_async$_iterator, _state) {
      this._async$_iterator = _async$_iterator;
      this._state = _state;
      this.$deferredAction();
    }
    _IterablePendingEvents.builtin$cls = "_IterablePendingEvents";
    if (!("name" in _IterablePendingEvents))
      _IterablePendingEvents.name = "_IterablePendingEvents";
    $desc = $collectedClasses$._IterablePendingEvents[1];
    _IterablePendingEvents.prototype = $desc;
    _IterablePendingEvents.$__fields__ = ["_async$_iterator", "_state"];
    function _DelayedEvent(next) {
      this.next = next;
      this.$deferredAction();
    }
    _DelayedEvent.builtin$cls = "_DelayedEvent";
    if (!("name" in _DelayedEvent))
      _DelayedEvent.name = "_DelayedEvent";
    $desc = $collectedClasses$._DelayedEvent[1];
    _DelayedEvent.prototype = $desc;
    _DelayedEvent.$__fields__ = ["next"];
    _DelayedEvent.prototype.get$next = function() {
      return this.next;
    };
    _DelayedEvent.prototype.set$next = function(v) {
      return this.next = v;
    };
    function _DelayedData(value, next) {
      this.value = value;
      this.next = next;
      this.$deferredAction();
    }
    _DelayedData.builtin$cls = "_DelayedData";
    if (!("name" in _DelayedData))
      _DelayedData.name = "_DelayedData";
    $desc = $collectedClasses$._DelayedData[1];
    _DelayedData.prototype = $desc;
    _DelayedData.$__fields__ = ["value", "next"];
    _DelayedData.prototype.get$value = function(receiver) {
      return this.value;
    };
    function _DelayedError(error, stackTrace, next) {
      this.error = error;
      this.stackTrace = stackTrace;
      this.next = next;
      this.$deferredAction();
    }
    _DelayedError.builtin$cls = "_DelayedError";
    if (!("name" in _DelayedError))
      _DelayedError.name = "_DelayedError";
    $desc = $collectedClasses$._DelayedError[1];
    _DelayedError.prototype = $desc;
    _DelayedError.$__fields__ = ["error", "stackTrace", "next"];
    _DelayedError.prototype.get$error = function(receiver) {
      return this.error;
    };
    _DelayedError.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function _DelayedDone() {
      this.$deferredAction();
    }
    _DelayedDone.builtin$cls = "_DelayedDone";
    if (!("name" in _DelayedDone))
      _DelayedDone.name = "_DelayedDone";
    $desc = $collectedClasses$._DelayedDone[1];
    _DelayedDone.prototype = $desc;
    _DelayedDone.$__fields__ = [];
    function _PendingEvents() {
      this.$deferredAction();
    }
    _PendingEvents.builtin$cls = "_PendingEvents";
    if (!("name" in _PendingEvents))
      _PendingEvents.name = "_PendingEvents";
    $desc = $collectedClasses$._PendingEvents[1];
    _PendingEvents.prototype = $desc;
    _PendingEvents.$__fields__ = [];
    function _PendingEvents_schedule_closure(_async$_captured_this_0, _captured_dispatch_1) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._captured_dispatch_1 = _captured_dispatch_1;
      this.$deferredAction();
    }
    _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
    if (!("name" in _PendingEvents_schedule_closure))
      _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
    $desc = $collectedClasses$._PendingEvents_schedule_closure[1];
    _PendingEvents_schedule_closure.prototype = $desc;
    _PendingEvents_schedule_closure.$__fields__ = ["_async$_captured_this_0", "_captured_dispatch_1"];
    function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
      this.firstPendingEvent = firstPendingEvent;
      this.lastPendingEvent = lastPendingEvent;
      this._state = _state;
      this.$deferredAction();
    }
    _StreamImplEvents.builtin$cls = "_StreamImplEvents";
    if (!("name" in _StreamImplEvents))
      _StreamImplEvents.name = "_StreamImplEvents";
    $desc = $collectedClasses$._StreamImplEvents[1];
    _StreamImplEvents.prototype = $desc;
    _StreamImplEvents.$__fields__ = ["firstPendingEvent", "lastPendingEvent", "_state"];
    function _DoneStreamSubscription(_zone, _state, _onDone) {
      this._zone = _zone;
      this._state = _state;
      this._onDone = _onDone;
      this.$deferredAction();
    }
    _DoneStreamSubscription.builtin$cls = "_DoneStreamSubscription";
    if (!("name" in _DoneStreamSubscription))
      _DoneStreamSubscription.name = "_DoneStreamSubscription";
    $desc = $collectedClasses$._DoneStreamSubscription[1];
    _DoneStreamSubscription.prototype = $desc;
    _DoneStreamSubscription.$__fields__ = ["_zone", "_state", "_onDone"];
    _DoneStreamSubscription.prototype.get$_zone = function() {
      return this._zone;
    };
    function _AsBroadcastStream(_async$_source, _onListenHandler, _onCancelHandler, _zone, _async$_controller, _subscription) {
      this._async$_source = _async$_source;
      this._onListenHandler = _onListenHandler;
      this._onCancelHandler = _onCancelHandler;
      this._zone = _zone;
      this._async$_controller = _async$_controller;
      this._subscription = _subscription;
      this.$deferredAction();
    }
    _AsBroadcastStream.builtin$cls = "_AsBroadcastStream";
    if (!("name" in _AsBroadcastStream))
      _AsBroadcastStream.name = "_AsBroadcastStream";
    $desc = $collectedClasses$._AsBroadcastStream[1];
    _AsBroadcastStream.prototype = $desc;
    _AsBroadcastStream.$__fields__ = ["_async$_source", "_onListenHandler", "_onCancelHandler", "_zone", "_async$_controller", "_subscription"];
    _AsBroadcastStream.prototype.get$_zone = function() {
      return this._zone;
    };
    function _BroadcastSubscriptionWrapper(_stream) {
      this._stream = _stream;
      this.$deferredAction();
    }
    _BroadcastSubscriptionWrapper.builtin$cls = "_BroadcastSubscriptionWrapper";
    if (!("name" in _BroadcastSubscriptionWrapper))
      _BroadcastSubscriptionWrapper.name = "_BroadcastSubscriptionWrapper";
    $desc = $collectedClasses$._BroadcastSubscriptionWrapper[1];
    _BroadcastSubscriptionWrapper.prototype = $desc;
    _BroadcastSubscriptionWrapper.$__fields__ = ["_stream"];
    function _StreamIteratorImpl(_subscription, _async$_current, _futureOrPrefetch, _state) {
      this._subscription = _subscription;
      this._async$_current = _async$_current;
      this._futureOrPrefetch = _futureOrPrefetch;
      this._state = _state;
      this.$deferredAction();
    }
    _StreamIteratorImpl.builtin$cls = "_StreamIteratorImpl";
    if (!("name" in _StreamIteratorImpl))
      _StreamIteratorImpl.name = "_StreamIteratorImpl";
    $desc = $collectedClasses$._StreamIteratorImpl[1];
    _StreamIteratorImpl.prototype = $desc;
    _StreamIteratorImpl.$__fields__ = ["_subscription", "_async$_current", "_futureOrPrefetch", "_state"];
    function _cancelAndError_closure(_captured_future_0, _captured_error_1, _captured_stackTrace_2) {
      this._captured_future_0 = _captured_future_0;
      this._captured_error_1 = _captured_error_1;
      this._captured_stackTrace_2 = _captured_stackTrace_2;
      this.$deferredAction();
    }
    _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
    if (!("name" in _cancelAndError_closure))
      _cancelAndError_closure.name = "_cancelAndError_closure";
    $desc = $collectedClasses$._cancelAndError_closure[1];
    _cancelAndError_closure.prototype = $desc;
    _cancelAndError_closure.$__fields__ = ["_captured_future_0", "_captured_error_1", "_captured_stackTrace_2"];
    function _cancelAndErrorClosure_closure(_captured_subscription_0, _captured_future_1) {
      this._captured_subscription_0 = _captured_subscription_0;
      this._captured_future_1 = _captured_future_1;
      this.$deferredAction();
    }
    _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
    if (!("name" in _cancelAndErrorClosure_closure))
      _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
    $desc = $collectedClasses$._cancelAndErrorClosure_closure[1];
    _cancelAndErrorClosure_closure.prototype = $desc;
    _cancelAndErrorClosure_closure.$__fields__ = ["_captured_subscription_0", "_captured_future_1"];
    function _cancelAndValue_closure(_captured_future_0, _captured_value_1) {
      this._captured_future_0 = _captured_future_0;
      this._captured_value_1 = _captured_value_1;
      this.$deferredAction();
    }
    _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
    if (!("name" in _cancelAndValue_closure))
      _cancelAndValue_closure.name = "_cancelAndValue_closure";
    $desc = $collectedClasses$._cancelAndValue_closure[1];
    _cancelAndValue_closure.prototype = $desc;
    _cancelAndValue_closure.$__fields__ = ["_captured_future_0", "_captured_value_1"];
    function _ForwardingStream() {
      this.$deferredAction();
    }
    _ForwardingStream.builtin$cls = "_ForwardingStream";
    if (!("name" in _ForwardingStream))
      _ForwardingStream.name = "_ForwardingStream";
    $desc = $collectedClasses$._ForwardingStream[1];
    _ForwardingStream.prototype = $desc;
    _ForwardingStream.$__fields__ = [];
    function _ForwardingStreamSubscription(_stream, _subscription, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
      this._stream = _stream;
      this._subscription = _subscription;
      this._async$_onData = _async$_onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$deferredAction();
    }
    _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
    if (!("name" in _ForwardingStreamSubscription))
      _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
    $desc = $collectedClasses$._ForwardingStreamSubscription[1];
    _ForwardingStreamSubscription.prototype = $desc;
    _ForwardingStreamSubscription.$__fields__ = ["_stream", "_subscription", "_async$_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    function _WhereStream(_test, _async$_source) {
      this._test = _test;
      this._async$_source = _async$_source;
      this.$deferredAction();
    }
    _WhereStream.builtin$cls = "_WhereStream";
    if (!("name" in _WhereStream))
      _WhereStream.name = "_WhereStream";
    $desc = $collectedClasses$._WhereStream[1];
    _WhereStream.prototype = $desc;
    _WhereStream.$__fields__ = ["_test", "_async$_source"];
    function _MapStream(_transform, _async$_source) {
      this._transform = _transform;
      this._async$_source = _async$_source;
      this.$deferredAction();
    }
    _MapStream.builtin$cls = "_MapStream";
    if (!("name" in _MapStream))
      _MapStream.name = "_MapStream";
    $desc = $collectedClasses$._MapStream[1];
    _MapStream.prototype = $desc;
    _MapStream.$__fields__ = ["_transform", "_async$_source"];
    function _TakeStream(_count, _async$_source) {
      this._count = _count;
      this._async$_source = _async$_source;
      this.$deferredAction();
    }
    _TakeStream.builtin$cls = "_TakeStream";
    if (!("name" in _TakeStream))
      _TakeStream.name = "_TakeStream";
    $desc = $collectedClasses$._TakeStream[1];
    _TakeStream.prototype = $desc;
    _TakeStream.$__fields__ = ["_count", "_async$_source"];
    function _StateStreamSubscription(_sharedState, _stream, _subscription, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
      this._sharedState = _sharedState;
      this._stream = _stream;
      this._subscription = _subscription;
      this._async$_onData = _async$_onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$deferredAction();
    }
    _StateStreamSubscription.builtin$cls = "_StateStreamSubscription";
    if (!("name" in _StateStreamSubscription))
      _StateStreamSubscription.name = "_StateStreamSubscription";
    $desc = $collectedClasses$._StateStreamSubscription[1];
    _StateStreamSubscription.prototype = $desc;
    _StateStreamSubscription.$__fields__ = ["_sharedState", "_stream", "_subscription", "_async$_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    function _EventSinkWrapper(_async$_sink) {
      this._async$_sink = _async$_sink;
      this.$deferredAction();
    }
    _EventSinkWrapper.builtin$cls = "_EventSinkWrapper";
    if (!("name" in _EventSinkWrapper))
      _EventSinkWrapper.name = "_EventSinkWrapper";
    $desc = $collectedClasses$._EventSinkWrapper[1];
    _EventSinkWrapper.prototype = $desc;
    _EventSinkWrapper.$__fields__ = ["_async$_sink"];
    function _SinkTransformerStreamSubscription(_transformerSink, _subscription, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
      this._transformerSink = _transformerSink;
      this._subscription = _subscription;
      this._async$_onData = _async$_onData;
      this._onError = _onError;
      this._onDone = _onDone;
      this._zone = _zone;
      this._state = _state;
      this._cancelFuture = _cancelFuture;
      this._pending = _pending;
      this.$deferredAction();
    }
    _SinkTransformerStreamSubscription.builtin$cls = "_SinkTransformerStreamSubscription";
    if (!("name" in _SinkTransformerStreamSubscription))
      _SinkTransformerStreamSubscription.name = "_SinkTransformerStreamSubscription";
    $desc = $collectedClasses$._SinkTransformerStreamSubscription[1];
    _SinkTransformerStreamSubscription.prototype = $desc;
    _SinkTransformerStreamSubscription.$__fields__ = ["_transformerSink", "_subscription", "_async$_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
    function _BoundSinkStream(_sinkMapper, _stream) {
      this._sinkMapper = _sinkMapper;
      this._stream = _stream;
      this.$deferredAction();
    }
    _BoundSinkStream.builtin$cls = "_BoundSinkStream";
    if (!("name" in _BoundSinkStream))
      _BoundSinkStream.name = "_BoundSinkStream";
    $desc = $collectedClasses$._BoundSinkStream[1];
    _BoundSinkStream.prototype = $desc;
    _BoundSinkStream.$__fields__ = ["_sinkMapper", "_stream"];
    function Timer() {
      this.$deferredAction();
    }
    Timer.builtin$cls = "Timer";
    if (!("name" in Timer))
      Timer.name = "Timer";
    $desc = $collectedClasses$.Timer[1];
    Timer.prototype = $desc;
    Timer.$__fields__ = [];
    function AsyncError(error, stackTrace) {
      this.error = error;
      this.stackTrace = stackTrace;
      this.$deferredAction();
    }
    AsyncError.builtin$cls = "AsyncError";
    if (!("name" in AsyncError))
      AsyncError.name = "AsyncError";
    $desc = $collectedClasses$.AsyncError[1];
    AsyncError.prototype = $desc;
    AsyncError.$__fields__ = ["error", "stackTrace"];
    AsyncError.prototype.get$error = function(receiver) {
      return this.error;
    };
    AsyncError.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    function _Zone() {
      this.$deferredAction();
    }
    _Zone.builtin$cls = "_Zone";
    if (!("name" in _Zone))
      _Zone.name = "_Zone";
    $desc = $collectedClasses$._Zone[1];
    _Zone.prototype = $desc;
    _Zone.$__fields__ = [];
    function _rootHandleUncaughtError_closure(_captured_error_0, _captured_stackTrace_1) {
      this._captured_error_0 = _captured_error_0;
      this._captured_stackTrace_1 = _captured_stackTrace_1;
      this.$deferredAction();
    }
    _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
    if (!("name" in _rootHandleUncaughtError_closure))
      _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
    $desc = $collectedClasses$._rootHandleUncaughtError_closure[1];
    _rootHandleUncaughtError_closure.prototype = $desc;
    _rootHandleUncaughtError_closure.$__fields__ = ["_captured_error_0", "_captured_stackTrace_1"];
    function _RootZone() {
      this.$deferredAction();
    }
    _RootZone.builtin$cls = "_RootZone";
    if (!("name" in _RootZone))
      _RootZone.name = "_RootZone";
    $desc = $collectedClasses$._RootZone[1];
    _RootZone.prototype = $desc;
    _RootZone.$__fields__ = [];
    function _RootZone_bindCallback_closure(_async$_captured_this_0, _async$_captured_f_1) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._async$_captured_f_1 = _async$_captured_f_1;
      this.$deferredAction();
    }
    _RootZone_bindCallback_closure.builtin$cls = "_RootZone_bindCallback_closure";
    if (!("name" in _RootZone_bindCallback_closure))
      _RootZone_bindCallback_closure.name = "_RootZone_bindCallback_closure";
    $desc = $collectedClasses$._RootZone_bindCallback_closure[1];
    _RootZone_bindCallback_closure.prototype = $desc;
    _RootZone_bindCallback_closure.$__fields__ = ["_async$_captured_this_0", "_async$_captured_f_1"];
    function _RootZone_bindCallback_closure0(_async$_captured_this_2, _captured_f_3) {
      this._async$_captured_this_2 = _async$_captured_this_2;
      this._captured_f_3 = _captured_f_3;
      this.$deferredAction();
    }
    _RootZone_bindCallback_closure0.builtin$cls = "_RootZone_bindCallback_closure0";
    if (!("name" in _RootZone_bindCallback_closure0))
      _RootZone_bindCallback_closure0.name = "_RootZone_bindCallback_closure0";
    $desc = $collectedClasses$._RootZone_bindCallback_closure0[1];
    _RootZone_bindCallback_closure0.prototype = $desc;
    _RootZone_bindCallback_closure0.$__fields__ = ["_async$_captured_this_2", "_captured_f_3"];
    function _RootZone_bindUnaryCallback_closure(_async$_captured_this_0, _async$_captured_f_1) {
      this._async$_captured_this_0 = _async$_captured_this_0;
      this._async$_captured_f_1 = _async$_captured_f_1;
      this.$deferredAction();
    }
    _RootZone_bindUnaryCallback_closure.builtin$cls = "_RootZone_bindUnaryCallback_closure";
    if (!("name" in _RootZone_bindUnaryCallback_closure))
      _RootZone_bindUnaryCallback_closure.name = "_RootZone_bindUnaryCallback_closure";
    $desc = $collectedClasses$._RootZone_bindUnaryCallback_closure[1];
    _RootZone_bindUnaryCallback_closure.prototype = $desc;
    _RootZone_bindUnaryCallback_closure.$__fields__ = ["_async$_captured_this_0", "_async$_captured_f_1"];
    function _RootZone_bindUnaryCallback_closure0(_async$_captured_this_2, _captured_f_3) {
      this._async$_captured_this_2 = _async$_captured_this_2;
      this._captured_f_3 = _captured_f_3;
      this.$deferredAction();
    }
    _RootZone_bindUnaryCallback_closure0.builtin$cls = "_RootZone_bindUnaryCallback_closure0";
    if (!("name" in _RootZone_bindUnaryCallback_closure0))
      _RootZone_bindUnaryCallback_closure0.name = "_RootZone_bindUnaryCallback_closure0";
    $desc = $collectedClasses$._RootZone_bindUnaryCallback_closure0[1];
    _RootZone_bindUnaryCallback_closure0.prototype = $desc;
    _RootZone_bindUnaryCallback_closure0.$__fields__ = ["_async$_captured_this_2", "_captured_f_3"];
    function _HashMap() {
      this.$deferredAction();
    }
    _HashMap.builtin$cls = "_HashMap";
    if (!("name" in _HashMap))
      _HashMap.name = "_HashMap";
    $desc = $collectedClasses$._HashMap[1];
    _HashMap.prototype = $desc;
    _HashMap.$__fields__ = [];
    function _IdentityHashMap(_collection$_length, _collection$_strings, _collection$_nums, _collection$_rest, _collection$_keys) {
      this._collection$_length = _collection$_length;
      this._collection$_strings = _collection$_strings;
      this._collection$_nums = _collection$_nums;
      this._collection$_rest = _collection$_rest;
      this._collection$_keys = _collection$_keys;
      this.$deferredAction();
    }
    _IdentityHashMap.builtin$cls = "_IdentityHashMap";
    if (!("name" in _IdentityHashMap))
      _IdentityHashMap.name = "_IdentityHashMap";
    $desc = $collectedClasses$._IdentityHashMap[1];
    _IdentityHashMap.prototype = $desc;
    _IdentityHashMap.$__fields__ = ["_collection$_length", "_collection$_strings", "_collection$_nums", "_collection$_rest", "_collection$_keys"];
    function HashMapKeyIterable(_map) {
      this._map = _map;
      this.$deferredAction();
    }
    HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
    if (!("name" in HashMapKeyIterable))
      HashMapKeyIterable.name = "HashMapKeyIterable";
    $desc = $collectedClasses$.HashMapKeyIterable[1];
    HashMapKeyIterable.prototype = $desc;
    HashMapKeyIterable.$__fields__ = ["_map"];
    function HashMapKeyIterator(_map, _collection$_keys, _offset, _collection$_current) {
      this._map = _map;
      this._collection$_keys = _collection$_keys;
      this._offset = _offset;
      this._collection$_current = _collection$_current;
      this.$deferredAction();
    }
    HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
    if (!("name" in HashMapKeyIterator))
      HashMapKeyIterator.name = "HashMapKeyIterator";
    $desc = $collectedClasses$.HashMapKeyIterator[1];
    HashMapKeyIterator.prototype = $desc;
    HashMapKeyIterator.$__fields__ = ["_map", "_collection$_keys", "_offset", "_collection$_current"];
    function _LinkedIdentityHashMap(__js_helper$_length, _strings, _nums, _rest, _first, _last, _modifications) {
      this.__js_helper$_length = __js_helper$_length;
      this._strings = _strings;
      this._nums = _nums;
      this._rest = _rest;
      this._first = _first;
      this._last = _last;
      this._modifications = _modifications;
      this.$deferredAction();
    }
    _LinkedIdentityHashMap.builtin$cls = "_LinkedIdentityHashMap";
    if (!("name" in _LinkedIdentityHashMap))
      _LinkedIdentityHashMap.name = "_LinkedIdentityHashMap";
    $desc = $collectedClasses$._LinkedIdentityHashMap[1];
    _LinkedIdentityHashMap.prototype = $desc;
    _LinkedIdentityHashMap.$__fields__ = ["__js_helper$_length", "_strings", "_nums", "_rest", "_first", "_last", "_modifications"];
    function _LinkedHashSet(_collection$_length, _collection$_strings, _collection$_nums, _collection$_rest, _collection$_first, _collection$_last, _collection$_modifications) {
      this._collection$_length = _collection$_length;
      this._collection$_strings = _collection$_strings;
      this._collection$_nums = _collection$_nums;
      this._collection$_rest = _collection$_rest;
      this._collection$_first = _collection$_first;
      this._collection$_last = _collection$_last;
      this._collection$_modifications = _collection$_modifications;
      this.$deferredAction();
    }
    _LinkedHashSet.builtin$cls = "_LinkedHashSet";
    if (!("name" in _LinkedHashSet))
      _LinkedHashSet.name = "_LinkedHashSet";
    $desc = $collectedClasses$._LinkedHashSet[1];
    _LinkedHashSet.prototype = $desc;
    _LinkedHashSet.$__fields__ = ["_collection$_length", "_collection$_strings", "_collection$_nums", "_collection$_rest", "_collection$_first", "_collection$_last", "_collection$_modifications"];
    function LinkedHashSetCell(_element, _collection$_next, _collection$_previous) {
      this._element = _element;
      this._collection$_next = _collection$_next;
      this._collection$_previous = _collection$_previous;
      this.$deferredAction();
    }
    LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
    if (!("name" in LinkedHashSetCell))
      LinkedHashSetCell.name = "LinkedHashSetCell";
    $desc = $collectedClasses$.LinkedHashSetCell[1];
    LinkedHashSetCell.prototype = $desc;
    LinkedHashSetCell.$__fields__ = ["_element", "_collection$_next", "_collection$_previous"];
    LinkedHashSetCell.prototype.get$_element = function() {
      return this._element;
    };
    LinkedHashSetCell.prototype.get$_collection$_next = function() {
      return this._collection$_next;
    };
    LinkedHashSetCell.prototype.get$_collection$_previous = function() {
      return this._collection$_previous;
    };
    LinkedHashSetCell.prototype.set$_collection$_previous = function(v) {
      return this._collection$_previous = v;
    };
    function LinkedHashSetIterator(_set, _collection$_modifications, _collection$_cell, _collection$_current) {
      this._set = _set;
      this._collection$_modifications = _collection$_modifications;
      this._collection$_cell = _collection$_cell;
      this._collection$_current = _collection$_current;
      this.$deferredAction();
    }
    LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
    if (!("name" in LinkedHashSetIterator))
      LinkedHashSetIterator.name = "LinkedHashSetIterator";
    $desc = $collectedClasses$.LinkedHashSetIterator[1];
    LinkedHashSetIterator.prototype = $desc;
    LinkedHashSetIterator.$__fields__ = ["_set", "_collection$_modifications", "_collection$_cell", "_collection$_current"];
    function _HashSetBase() {
      this.$deferredAction();
    }
    _HashSetBase.builtin$cls = "_HashSetBase";
    if (!("name" in _HashSetBase))
      _HashSetBase.name = "_HashSetBase";
    $desc = $collectedClasses$._HashSetBase[1];
    _HashSetBase.prototype = $desc;
    _HashSetBase.$__fields__ = [];
    function IterableBase() {
      this.$deferredAction();
    }
    IterableBase.builtin$cls = "IterableBase";
    if (!("name" in IterableBase))
      IterableBase.name = "IterableBase";
    $desc = $collectedClasses$.IterableBase[1];
    IterableBase.prototype = $desc;
    IterableBase.$__fields__ = [];
    function LinkedHashMap_LinkedHashMap$from_closure(_captured_result_0) {
      this._captured_result_0 = _captured_result_0;
      this.$deferredAction();
    }
    LinkedHashMap_LinkedHashMap$from_closure.builtin$cls = "LinkedHashMap_LinkedHashMap$from_closure";
    if (!("name" in LinkedHashMap_LinkedHashMap$from_closure))
      LinkedHashMap_LinkedHashMap$from_closure.name = "LinkedHashMap_LinkedHashMap$from_closure";
    $desc = $collectedClasses$.LinkedHashMap_LinkedHashMap$from_closure[1];
    LinkedHashMap_LinkedHashMap$from_closure.prototype = $desc;
    LinkedHashMap_LinkedHashMap$from_closure.$__fields__ = ["_captured_result_0"];
    function ListBase() {
      this.$deferredAction();
    }
    ListBase.builtin$cls = "ListBase";
    if (!("name" in ListBase))
      ListBase.name = "ListBase";
    $desc = $collectedClasses$.ListBase[1];
    ListBase.prototype = $desc;
    ListBase.$__fields__ = [];
    function Object_ListMixin() {
      this.$deferredAction();
    }
    Object_ListMixin.builtin$cls = "Object_ListMixin";
    if (!("name" in Object_ListMixin))
      Object_ListMixin.name = "Object_ListMixin";
    $desc = $collectedClasses$.Object_ListMixin[1];
    Object_ListMixin.prototype = $desc;
    Object_ListMixin.$__fields__ = [];
    function ListMixin() {
      this.$deferredAction();
    }
    ListMixin.builtin$cls = "ListMixin";
    if (!("name" in ListMixin))
      ListMixin.name = "ListMixin";
    $desc = $collectedClasses$.ListMixin[1];
    ListMixin.prototype = $desc;
    ListMixin.$__fields__ = [];
    function _UnmodifiableMapMixin() {
      this.$deferredAction();
    }
    _UnmodifiableMapMixin.builtin$cls = "_UnmodifiableMapMixin";
    if (!("name" in _UnmodifiableMapMixin))
      _UnmodifiableMapMixin.name = "_UnmodifiableMapMixin";
    $desc = $collectedClasses$._UnmodifiableMapMixin[1];
    _UnmodifiableMapMixin.prototype = $desc;
    _UnmodifiableMapMixin.$__fields__ = [];
    function MapView() {
      this.$deferredAction();
    }
    MapView.builtin$cls = "MapView";
    if (!("name" in MapView))
      MapView.name = "MapView";
    $desc = $collectedClasses$.MapView[1];
    MapView.prototype = $desc;
    MapView.$__fields__ = [];
    function UnmodifiableMapView(_map) {
      this._map = _map;
      this.$deferredAction();
    }
    UnmodifiableMapView.builtin$cls = "UnmodifiableMapView";
    if (!("name" in UnmodifiableMapView))
      UnmodifiableMapView.name = "UnmodifiableMapView";
    $desc = $collectedClasses$.UnmodifiableMapView[1];
    UnmodifiableMapView.prototype = $desc;
    UnmodifiableMapView.$__fields__ = ["_map"];
    function Maps_mapToString_closure(_collection$_box_0, _captured_result_1) {
      this._collection$_box_0 = _collection$_box_0;
      this._captured_result_1 = _captured_result_1;
      this.$deferredAction();
    }
    Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
    if (!("name" in Maps_mapToString_closure))
      Maps_mapToString_closure.name = "Maps_mapToString_closure";
    $desc = $collectedClasses$.Maps_mapToString_closure[1];
    Maps_mapToString_closure.prototype = $desc;
    Maps_mapToString_closure.$__fields__ = ["_collection$_box_0", "_captured_result_1"];
    function ListQueue(_table, _head, _tail, _modificationCount) {
      this._table = _table;
      this._head = _head;
      this._tail = _tail;
      this._modificationCount = _modificationCount;
      this.$deferredAction();
    }
    ListQueue.builtin$cls = "ListQueue";
    if (!("name" in ListQueue))
      ListQueue.name = "ListQueue";
    $desc = $collectedClasses$.ListQueue[1];
    ListQueue.prototype = $desc;
    ListQueue.$__fields__ = ["_table", "_head", "_tail", "_modificationCount"];
    function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
      this._queue = _queue;
      this._end = _end;
      this._modificationCount = _modificationCount;
      this._collection$_position = _collection$_position;
      this._collection$_current = _collection$_current;
      this.$deferredAction();
    }
    _ListQueueIterator.builtin$cls = "_ListQueueIterator";
    if (!("name" in _ListQueueIterator))
      _ListQueueIterator.name = "_ListQueueIterator";
    $desc = $collectedClasses$._ListQueueIterator[1];
    _ListQueueIterator.prototype = $desc;
    _ListQueueIterator.$__fields__ = ["_queue", "_end", "_modificationCount", "_collection$_position", "_collection$_current"];
    function SetMixin() {
      this.$deferredAction();
    }
    SetMixin.builtin$cls = "SetMixin";
    if (!("name" in SetMixin))
      SetMixin.name = "SetMixin";
    $desc = $collectedClasses$.SetMixin[1];
    SetMixin.prototype = $desc;
    SetMixin.$__fields__ = [];
    function SetBase() {
      this.$deferredAction();
    }
    SetBase.builtin$cls = "SetBase";
    if (!("name" in SetBase))
      SetBase.name = "SetBase";
    $desc = $collectedClasses$.SetBase[1];
    SetBase.prototype = $desc;
    SetBase.$__fields__ = [];
    function _JsonMap(_original, _processed, _data) {
      this._original = _original;
      this._processed = _processed;
      this._data = _data;
      this.$deferredAction();
    }
    _JsonMap.builtin$cls = "_JsonMap";
    if (!("name" in _JsonMap))
      _JsonMap.name = "_JsonMap";
    $desc = $collectedClasses$._JsonMap[1];
    _JsonMap.prototype = $desc;
    _JsonMap.$__fields__ = ["_original", "_processed", "_data"];
    function _JsonMap_values_closure(_convert$_captured_this_0) {
      this._convert$_captured_this_0 = _convert$_captured_this_0;
      this.$deferredAction();
    }
    _JsonMap_values_closure.builtin$cls = "_JsonMap_values_closure";
    if (!("name" in _JsonMap_values_closure))
      _JsonMap_values_closure.name = "_JsonMap_values_closure";
    $desc = $collectedClasses$._JsonMap_values_closure[1];
    _JsonMap_values_closure.prototype = $desc;
    _JsonMap_values_closure.$__fields__ = ["_convert$_captured_this_0"];
    function _JsonMapKeyIterable(_parent) {
      this._parent = _parent;
      this.$deferredAction();
    }
    _JsonMapKeyIterable.builtin$cls = "_JsonMapKeyIterable";
    if (!("name" in _JsonMapKeyIterable))
      _JsonMapKeyIterable.name = "_JsonMapKeyIterable";
    $desc = $collectedClasses$._JsonMapKeyIterable[1];
    _JsonMapKeyIterable.prototype = $desc;
    _JsonMapKeyIterable.$__fields__ = ["_parent"];
    function _JsonDecoderSink(_reviver, _sink, _stringSink) {
      this._reviver = _reviver;
      this._sink = _sink;
      this._stringSink = _stringSink;
      this.$deferredAction();
    }
    _JsonDecoderSink.builtin$cls = "_JsonDecoderSink";
    if (!("name" in _JsonDecoderSink))
      _JsonDecoderSink.name = "_JsonDecoderSink";
    $desc = $collectedClasses$._JsonDecoderSink[1];
    _JsonDecoderSink.prototype = $desc;
    _JsonDecoderSink.$__fields__ = ["_reviver", "_sink", "_stringSink"];
    function ChunkedConversionSink() {
      this.$deferredAction();
    }
    ChunkedConversionSink.builtin$cls = "ChunkedConversionSink";
    if (!("name" in ChunkedConversionSink))
      ChunkedConversionSink.name = "ChunkedConversionSink";
    $desc = $collectedClasses$.ChunkedConversionSink[1];
    ChunkedConversionSink.prototype = $desc;
    ChunkedConversionSink.$__fields__ = [];
    function _ConverterStreamEventSink(_eventSink, _chunkedSink) {
      this._eventSink = _eventSink;
      this._chunkedSink = _chunkedSink;
      this.$deferredAction();
    }
    _ConverterStreamEventSink.builtin$cls = "_ConverterStreamEventSink";
    if (!("name" in _ConverterStreamEventSink))
      _ConverterStreamEventSink.name = "_ConverterStreamEventSink";
    $desc = $collectedClasses$._ConverterStreamEventSink[1];
    _ConverterStreamEventSink.prototype = $desc;
    _ConverterStreamEventSink.$__fields__ = ["_eventSink", "_chunkedSink"];
    function Codec() {
      this.$deferredAction();
    }
    Codec.builtin$cls = "Codec";
    if (!("name" in Codec))
      Codec.name = "Codec";
    $desc = $collectedClasses$.Codec[1];
    Codec.prototype = $desc;
    Codec.$__fields__ = [];
    function Converter() {
      this.$deferredAction();
    }
    Converter.builtin$cls = "Converter";
    if (!("name" in Converter))
      Converter.name = "Converter";
    $desc = $collectedClasses$.Converter[1];
    Converter.prototype = $desc;
    Converter.$__fields__ = [];
    function Converter_bind_closure(_convert$_captured_this_0) {
      this._convert$_captured_this_0 = _convert$_captured_this_0;
      this.$deferredAction();
    }
    Converter_bind_closure.builtin$cls = "Converter_bind_closure";
    if (!("name" in Converter_bind_closure))
      Converter_bind_closure.name = "Converter_bind_closure";
    $desc = $collectedClasses$.Converter_bind_closure[1];
    Converter_bind_closure.prototype = $desc;
    Converter_bind_closure.$__fields__ = ["_convert$_captured_this_0"];
    function JsonUnsupportedObjectError(unsupportedObject, cause) {
      this.unsupportedObject = unsupportedObject;
      this.cause = cause;
      this.$deferredAction();
    }
    JsonUnsupportedObjectError.builtin$cls = "JsonUnsupportedObjectError";
    if (!("name" in JsonUnsupportedObjectError))
      JsonUnsupportedObjectError.name = "JsonUnsupportedObjectError";
    $desc = $collectedClasses$.JsonUnsupportedObjectError[1];
    JsonUnsupportedObjectError.prototype = $desc;
    JsonUnsupportedObjectError.$__fields__ = ["unsupportedObject", "cause"];
    function JsonCyclicError(unsupportedObject, cause) {
      this.unsupportedObject = unsupportedObject;
      this.cause = cause;
      this.$deferredAction();
    }
    JsonCyclicError.builtin$cls = "JsonCyclicError";
    if (!("name" in JsonCyclicError))
      JsonCyclicError.name = "JsonCyclicError";
    $desc = $collectedClasses$.JsonCyclicError[1];
    JsonCyclicError.prototype = $desc;
    JsonCyclicError.$__fields__ = ["unsupportedObject", "cause"];
    function JsonCodec(_reviver, _toEncodable) {
      this._reviver = _reviver;
      this._toEncodable = _toEncodable;
      this.$deferredAction();
    }
    JsonCodec.builtin$cls = "JsonCodec";
    if (!("name" in JsonCodec))
      JsonCodec.name = "JsonCodec";
    $desc = $collectedClasses$.JsonCodec[1];
    JsonCodec.prototype = $desc;
    JsonCodec.$__fields__ = ["_reviver", "_toEncodable"];
    function JsonEncoder(indent, _toEncodable) {
      this.indent = indent;
      this._toEncodable = _toEncodable;
      this.$deferredAction();
    }
    JsonEncoder.builtin$cls = "JsonEncoder";
    if (!("name" in JsonEncoder))
      JsonEncoder.name = "JsonEncoder";
    $desc = $collectedClasses$.JsonEncoder[1];
    JsonEncoder.prototype = $desc;
    JsonEncoder.$__fields__ = ["indent", "_toEncodable"];
    function _JsonEncoderSink(_indent, _toEncodable, _sink, _isDone) {
      this._indent = _indent;
      this._toEncodable = _toEncodable;
      this._sink = _sink;
      this._isDone = _isDone;
      this.$deferredAction();
    }
    _JsonEncoderSink.builtin$cls = "_JsonEncoderSink";
    if (!("name" in _JsonEncoderSink))
      _JsonEncoderSink.name = "_JsonEncoderSink";
    $desc = $collectedClasses$._JsonEncoderSink[1];
    _JsonEncoderSink.prototype = $desc;
    _JsonEncoderSink.$__fields__ = ["_indent", "_toEncodable", "_sink", "_isDone"];
    function JsonDecoder(_reviver) {
      this._reviver = _reviver;
      this.$deferredAction();
    }
    JsonDecoder.builtin$cls = "JsonDecoder";
    if (!("name" in JsonDecoder))
      JsonDecoder.name = "JsonDecoder";
    $desc = $collectedClasses$.JsonDecoder[1];
    JsonDecoder.prototype = $desc;
    JsonDecoder.$__fields__ = ["_reviver"];
    function _JsonStringifier() {
      this.$deferredAction();
    }
    _JsonStringifier.builtin$cls = "_JsonStringifier";
    if (!("name" in _JsonStringifier))
      _JsonStringifier.name = "_JsonStringifier";
    $desc = $collectedClasses$._JsonStringifier[1];
    _JsonStringifier.prototype = $desc;
    _JsonStringifier.$__fields__ = [];
    function _JsonStringifier_writeMap_closure(_convert$_box_0, _captured_keyValueList_1) {
      this._convert$_box_0 = _convert$_box_0;
      this._captured_keyValueList_1 = _captured_keyValueList_1;
      this.$deferredAction();
    }
    _JsonStringifier_writeMap_closure.builtin$cls = "_JsonStringifier_writeMap_closure";
    if (!("name" in _JsonStringifier_writeMap_closure))
      _JsonStringifier_writeMap_closure.name = "_JsonStringifier_writeMap_closure";
    $desc = $collectedClasses$._JsonStringifier_writeMap_closure[1];
    _JsonStringifier_writeMap_closure.prototype = $desc;
    _JsonStringifier_writeMap_closure.$__fields__ = ["_convert$_box_0", "_captured_keyValueList_1"];
    function _JsonStringStringifier(_sink, _seen, _toEncodable) {
      this._sink = _sink;
      this._seen = _seen;
      this._toEncodable = _toEncodable;
      this.$deferredAction();
    }
    _JsonStringStringifier.builtin$cls = "_JsonStringStringifier";
    if (!("name" in _JsonStringStringifier))
      _JsonStringStringifier.name = "_JsonStringStringifier";
    $desc = $collectedClasses$._JsonStringStringifier[1];
    _JsonStringStringifier.prototype = $desc;
    _JsonStringStringifier.$__fields__ = ["_sink", "_seen", "_toEncodable"];
    function _StringConversionSinkAsStringSinkAdapter(_buffer, _chunkedSink) {
      this._buffer = _buffer;
      this._chunkedSink = _chunkedSink;
      this.$deferredAction();
    }
    _StringConversionSinkAsStringSinkAdapter.builtin$cls = "_StringConversionSinkAsStringSinkAdapter";
    if (!("name" in _StringConversionSinkAsStringSinkAdapter))
      _StringConversionSinkAsStringSinkAdapter.name = "_StringConversionSinkAsStringSinkAdapter";
    $desc = $collectedClasses$._StringConversionSinkAsStringSinkAdapter[1];
    _StringConversionSinkAsStringSinkAdapter.prototype = $desc;
    _StringConversionSinkAsStringSinkAdapter.$__fields__ = ["_buffer", "_chunkedSink"];
    function StringConversionSinkBase() {
      this.$deferredAction();
    }
    StringConversionSinkBase.builtin$cls = "StringConversionSinkBase";
    if (!("name" in StringConversionSinkBase))
      StringConversionSinkBase.name = "StringConversionSinkBase";
    $desc = $collectedClasses$.StringConversionSinkBase[1];
    StringConversionSinkBase.prototype = $desc;
    StringConversionSinkBase.$__fields__ = [];
    function StringConversionSinkMixin() {
      this.$deferredAction();
    }
    StringConversionSinkMixin.builtin$cls = "StringConversionSinkMixin";
    if (!("name" in StringConversionSinkMixin))
      StringConversionSinkMixin.name = "StringConversionSinkMixin";
    $desc = $collectedClasses$.StringConversionSinkMixin[1];
    StringConversionSinkMixin.prototype = $desc;
    StringConversionSinkMixin.$__fields__ = [];
    function _StringSinkConversionSink() {
      this.$deferredAction();
    }
    _StringSinkConversionSink.builtin$cls = "_StringSinkConversionSink";
    if (!("name" in _StringSinkConversionSink))
      _StringSinkConversionSink.name = "_StringSinkConversionSink";
    $desc = $collectedClasses$._StringSinkConversionSink[1];
    _StringSinkConversionSink.prototype = $desc;
    _StringSinkConversionSink.$__fields__ = [];
    function _StringAdapterSink(_sink) {
      this._sink = _sink;
      this.$deferredAction();
    }
    _StringAdapterSink.builtin$cls = "_StringAdapterSink";
    if (!("name" in _StringAdapterSink))
      _StringAdapterSink.name = "_StringAdapterSink";
    $desc = $collectedClasses$._StringAdapterSink[1];
    _StringAdapterSink.prototype = $desc;
    _StringAdapterSink.$__fields__ = ["_sink"];
    function NoSuchMethodError_toString_closure(_box_0, _captured_sb_1) {
      this._box_0 = _box_0;
      this._captured_sb_1 = _captured_sb_1;
      this.$deferredAction();
    }
    NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
    if (!("name" in NoSuchMethodError_toString_closure))
      NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
    $desc = $collectedClasses$.NoSuchMethodError_toString_closure[1];
    NoSuchMethodError_toString_closure.prototype = $desc;
    NoSuchMethodError_toString_closure.$__fields__ = ["_box_0", "_captured_sb_1"];
    function bool() {
      this.$deferredAction();
    }
    bool.builtin$cls = "bool";
    if (!("name" in bool))
      bool.name = "bool";
    $desc = $collectedClasses$.bool[1];
    bool.prototype = $desc;
    bool.$__fields__ = [];
    function Comparable() {
      this.$deferredAction();
    }
    Comparable.builtin$cls = "Comparable";
    if (!("name" in Comparable))
      Comparable.name = "Comparable";
    $desc = $collectedClasses$.Comparable[1];
    Comparable.prototype = $desc;
    Comparable.$__fields__ = [];
    function DateTime(millisecondsSinceEpoch, isUtc) {
      this.millisecondsSinceEpoch = millisecondsSinceEpoch;
      this.isUtc = isUtc;
      this.$deferredAction();
    }
    DateTime.builtin$cls = "DateTime";
    if (!("name" in DateTime))
      DateTime.name = "DateTime";
    $desc = $collectedClasses$.DateTime[1];
    DateTime.prototype = $desc;
    DateTime.$__fields__ = ["millisecondsSinceEpoch", "isUtc"];
    DateTime.prototype.get$millisecondsSinceEpoch = function() {
      return this.millisecondsSinceEpoch;
    };
    function $double() {
      this.$deferredAction();
    }
    $double.builtin$cls = "$double";
    if (!("name" in $double))
      $double.name = "$double";
    $desc = $collectedClasses$.$double[1];
    $double.prototype = $desc;
    $double.$__fields__ = [];
    function Duration(_duration) {
      this._duration = _duration;
      this.$deferredAction();
    }
    Duration.builtin$cls = "Duration";
    if (!("name" in Duration))
      Duration.name = "Duration";
    $desc = $collectedClasses$.Duration[1];
    Duration.prototype = $desc;
    Duration.$__fields__ = ["_duration"];
    Duration.prototype.get$_duration = function() {
      return this._duration;
    };
    function Duration_toString_sixDigits() {
      this.$deferredAction();
    }
    Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
    if (!("name" in Duration_toString_sixDigits))
      Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
    $desc = $collectedClasses$.Duration_toString_sixDigits[1];
    Duration_toString_sixDigits.prototype = $desc;
    Duration_toString_sixDigits.$__fields__ = [];
    function Duration_toString_twoDigits() {
      this.$deferredAction();
    }
    Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
    if (!("name" in Duration_toString_twoDigits))
      Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
    $desc = $collectedClasses$.Duration_toString_twoDigits[1];
    Duration_toString_twoDigits.prototype = $desc;
    Duration_toString_twoDigits.$__fields__ = [];
    function Error() {
      this.$deferredAction();
    }
    Error.builtin$cls = "Error";
    if (!("name" in Error))
      Error.name = "Error";
    $desc = $collectedClasses$.Error[1];
    Error.prototype = $desc;
    Error.$__fields__ = [];
    function NullThrownError() {
      this.$deferredAction();
    }
    NullThrownError.builtin$cls = "NullThrownError";
    if (!("name" in NullThrownError))
      NullThrownError.name = "NullThrownError";
    $desc = $collectedClasses$.NullThrownError[1];
    NullThrownError.prototype = $desc;
    NullThrownError.$__fields__ = [];
    function ArgumentError(_hasValue, invalidValue, name, message) {
      this._hasValue = _hasValue;
      this.invalidValue = invalidValue;
      this.name = name;
      this.message = message;
      this.$deferredAction();
    }
    ArgumentError.builtin$cls = "ArgumentError";
    if (!("name" in ArgumentError))
      ArgumentError.name = "ArgumentError";
    $desc = $collectedClasses$.ArgumentError[1];
    ArgumentError.prototype = $desc;
    ArgumentError.$__fields__ = ["_hasValue", "invalidValue", "name", "message"];
    ArgumentError.prototype.get$name = function(receiver) {
      return this.name;
    };
    ArgumentError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function RangeError(start, end, _hasValue, invalidValue, name, message) {
      this.start = start;
      this.end = end;
      this._hasValue = _hasValue;
      this.invalidValue = invalidValue;
      this.name = name;
      this.message = message;
      this.$deferredAction();
    }
    RangeError.builtin$cls = "RangeError";
    if (!("name" in RangeError))
      RangeError.name = "RangeError";
    $desc = $collectedClasses$.RangeError[1];
    RangeError.prototype = $desc;
    RangeError.$__fields__ = ["start", "end", "_hasValue", "invalidValue", "name", "message"];
    function IndexError(indexable, length, _hasValue, invalidValue, name, message) {
      this.indexable = indexable;
      this.length = length;
      this._hasValue = _hasValue;
      this.invalidValue = invalidValue;
      this.name = name;
      this.message = message;
      this.$deferredAction();
    }
    IndexError.builtin$cls = "IndexError";
    if (!("name" in IndexError))
      IndexError.name = "IndexError";
    $desc = $collectedClasses$.IndexError[1];
    IndexError.prototype = $desc;
    IndexError.$__fields__ = ["indexable", "length", "_hasValue", "invalidValue", "name", "message"];
    IndexError.prototype.get$length = function(receiver) {
      return this.length;
    };
    function NoSuchMethodError(_core$_receiver, _memberName, _core$_arguments, _namedArguments, _existingArgumentNames) {
      this._core$_receiver = _core$_receiver;
      this._memberName = _memberName;
      this._core$_arguments = _core$_arguments;
      this._namedArguments = _namedArguments;
      this._existingArgumentNames = _existingArgumentNames;
      this.$deferredAction();
    }
    NoSuchMethodError.builtin$cls = "NoSuchMethodError";
    if (!("name" in NoSuchMethodError))
      NoSuchMethodError.name = "NoSuchMethodError";
    $desc = $collectedClasses$.NoSuchMethodError[1];
    NoSuchMethodError.prototype = $desc;
    NoSuchMethodError.$__fields__ = ["_core$_receiver", "_memberName", "_core$_arguments", "_namedArguments", "_existingArgumentNames"];
    function UnsupportedError(message) {
      this.message = message;
      this.$deferredAction();
    }
    UnsupportedError.builtin$cls = "UnsupportedError";
    if (!("name" in UnsupportedError))
      UnsupportedError.name = "UnsupportedError";
    $desc = $collectedClasses$.UnsupportedError[1];
    UnsupportedError.prototype = $desc;
    UnsupportedError.$__fields__ = ["message"];
    UnsupportedError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function UnimplementedError(message) {
      this.message = message;
      this.$deferredAction();
    }
    UnimplementedError.builtin$cls = "UnimplementedError";
    if (!("name" in UnimplementedError))
      UnimplementedError.name = "UnimplementedError";
    $desc = $collectedClasses$.UnimplementedError[1];
    UnimplementedError.prototype = $desc;
    UnimplementedError.$__fields__ = ["message"];
    UnimplementedError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function StateError(message) {
      this.message = message;
      this.$deferredAction();
    }
    StateError.builtin$cls = "StateError";
    if (!("name" in StateError))
      StateError.name = "StateError";
    $desc = $collectedClasses$.StateError[1];
    StateError.prototype = $desc;
    StateError.$__fields__ = ["message"];
    StateError.prototype.get$message = function(receiver) {
      return this.message;
    };
    function ConcurrentModificationError(modifiedObject) {
      this.modifiedObject = modifiedObject;
      this.$deferredAction();
    }
    ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
    if (!("name" in ConcurrentModificationError))
      ConcurrentModificationError.name = "ConcurrentModificationError";
    $desc = $collectedClasses$.ConcurrentModificationError[1];
    ConcurrentModificationError.prototype = $desc;
    ConcurrentModificationError.$__fields__ = ["modifiedObject"];
    function OutOfMemoryError() {
      this.$deferredAction();
    }
    OutOfMemoryError.builtin$cls = "OutOfMemoryError";
    if (!("name" in OutOfMemoryError))
      OutOfMemoryError.name = "OutOfMemoryError";
    $desc = $collectedClasses$.OutOfMemoryError[1];
    OutOfMemoryError.prototype = $desc;
    OutOfMemoryError.$__fields__ = [];
    function StackOverflowError() {
      this.$deferredAction();
    }
    StackOverflowError.builtin$cls = "StackOverflowError";
    if (!("name" in StackOverflowError))
      StackOverflowError.name = "StackOverflowError";
    $desc = $collectedClasses$.StackOverflowError[1];
    StackOverflowError.prototype = $desc;
    StackOverflowError.$__fields__ = [];
    function CyclicInitializationError(variableName) {
      this.variableName = variableName;
      this.$deferredAction();
    }
    CyclicInitializationError.builtin$cls = "CyclicInitializationError";
    if (!("name" in CyclicInitializationError))
      CyclicInitializationError.name = "CyclicInitializationError";
    $desc = $collectedClasses$.CyclicInitializationError[1];
    CyclicInitializationError.prototype = $desc;
    CyclicInitializationError.$__fields__ = ["variableName"];
    function _Exception(message) {
      this.message = message;
      this.$deferredAction();
    }
    _Exception.builtin$cls = "_Exception";
    if (!("name" in _Exception))
      _Exception.name = "_Exception";
    $desc = $collectedClasses$._Exception[1];
    _Exception.prototype = $desc;
    _Exception.$__fields__ = ["message"];
    _Exception.prototype.get$message = function(receiver) {
      return this.message;
    };
    function FormatException(message, source, offset) {
      this.message = message;
      this.source = source;
      this.offset = offset;
      this.$deferredAction();
    }
    FormatException.builtin$cls = "FormatException";
    if (!("name" in FormatException))
      FormatException.name = "FormatException";
    $desc = $collectedClasses$.FormatException[1];
    FormatException.prototype = $desc;
    FormatException.$__fields__ = ["message", "source", "offset"];
    FormatException.prototype.get$message = function(receiver) {
      return this.message;
    };
    FormatException.prototype.get$source = function(receiver) {
      return this.source;
    };
    FormatException.prototype.get$offset = function(receiver) {
      return this.offset;
    };
    function IntegerDivisionByZeroException() {
      this.$deferredAction();
    }
    IntegerDivisionByZeroException.builtin$cls = "IntegerDivisionByZeroException";
    if (!("name" in IntegerDivisionByZeroException))
      IntegerDivisionByZeroException.name = "IntegerDivisionByZeroException";
    $desc = $collectedClasses$.IntegerDivisionByZeroException[1];
    IntegerDivisionByZeroException.prototype = $desc;
    IntegerDivisionByZeroException.$__fields__ = [];
    function Expando(name) {
      this.name = name;
      this.$deferredAction();
    }
    Expando.builtin$cls = "Expando";
    if (!("name" in Expando))
      Expando.name = "Expando";
    $desc = $collectedClasses$.Expando[1];
    Expando.prototype = $desc;
    Expando.$__fields__ = ["name"];
    Expando.prototype.get$name = function(receiver) {
      return this.name;
    };
    function Function() {
      this.$deferredAction();
    }
    Function.builtin$cls = "Function";
    if (!("name" in Function))
      Function.name = "Function";
    $desc = $collectedClasses$.Function[1];
    Function.prototype = $desc;
    Function.$__fields__ = [];
    function $int() {
      this.$deferredAction();
    }
    $int.builtin$cls = "$int";
    if (!("name" in $int))
      $int.name = "$int";
    $desc = $collectedClasses$.$int[1];
    $int.prototype = $desc;
    $int.$__fields__ = [];
    function Iterable() {
      this.$deferredAction();
    }
    Iterable.builtin$cls = "Iterable";
    if (!("name" in Iterable))
      Iterable.name = "Iterable";
    $desc = $collectedClasses$.Iterable[1];
    Iterable.prototype = $desc;
    Iterable.$__fields__ = [];
    function Iterator() {
      this.$deferredAction();
    }
    Iterator.builtin$cls = "Iterator";
    if (!("name" in Iterator))
      Iterator.name = "Iterator";
    $desc = $collectedClasses$.Iterator[1];
    Iterator.prototype = $desc;
    Iterator.$__fields__ = [];
    function List() {
      this.$deferredAction();
    }
    List.builtin$cls = "List";
    if (!("name" in List))
      List.name = "List";
    $desc = $collectedClasses$.List[1];
    List.prototype = $desc;
    List.$__fields__ = [];
    function Map() {
      this.$deferredAction();
    }
    Map.builtin$cls = "Map";
    if (!("name" in Map))
      Map.name = "Map";
    $desc = $collectedClasses$.Map[1];
    Map.prototype = $desc;
    Map.$__fields__ = [];
    function Null() {
      this.$deferredAction();
    }
    Null.builtin$cls = "Null";
    if (!("name" in Null))
      Null.name = "Null";
    $desc = $collectedClasses$.Null[1];
    Null.prototype = $desc;
    Null.$__fields__ = [];
    function num() {
      this.$deferredAction();
    }
    num.builtin$cls = "num";
    if (!("name" in num))
      num.name = "num";
    $desc = $collectedClasses$.num[1];
    num.prototype = $desc;
    num.$__fields__ = [];
    function Object() {
      this.$deferredAction();
    }
    Object.builtin$cls = "Object";
    if (!("name" in Object))
      Object.name = "Object";
    $desc = $collectedClasses$.Object[1];
    Object.prototype = $desc;
    Object.$__fields__ = [];
    function Match() {
      this.$deferredAction();
    }
    Match.builtin$cls = "Match";
    if (!("name" in Match))
      Match.name = "Match";
    $desc = $collectedClasses$.Match[1];
    Match.prototype = $desc;
    Match.$__fields__ = [];
    function RegExp() {
      this.$deferredAction();
    }
    RegExp.builtin$cls = "RegExp";
    if (!("name" in RegExp))
      RegExp.name = "RegExp";
    $desc = $collectedClasses$.RegExp[1];
    RegExp.prototype = $desc;
    RegExp.$__fields__ = [];
    function StackTrace() {
      this.$deferredAction();
    }
    StackTrace.builtin$cls = "StackTrace";
    if (!("name" in StackTrace))
      StackTrace.name = "StackTrace";
    $desc = $collectedClasses$.StackTrace[1];
    StackTrace.prototype = $desc;
    StackTrace.$__fields__ = [];
    function Stopwatch(_start, _stop) {
      this._start = _start;
      this._stop = _stop;
      this.$deferredAction();
    }
    Stopwatch.builtin$cls = "Stopwatch";
    if (!("name" in Stopwatch))
      Stopwatch.name = "Stopwatch";
    $desc = $collectedClasses$.Stopwatch[1];
    Stopwatch.prototype = $desc;
    Stopwatch.$__fields__ = ["_start", "_stop"];
    function String() {
      this.$deferredAction();
    }
    String.builtin$cls = "String";
    if (!("name" in String))
      String.name = "String";
    $desc = $collectedClasses$.String[1];
    String.prototype = $desc;
    String.$__fields__ = [];
    function StringBuffer(_contents) {
      this._contents = _contents;
      this.$deferredAction();
    }
    StringBuffer.builtin$cls = "StringBuffer";
    if (!("name" in StringBuffer))
      StringBuffer.name = "StringBuffer";
    $desc = $collectedClasses$.StringBuffer[1];
    StringBuffer.prototype = $desc;
    StringBuffer.$__fields__ = ["_contents"];
    StringBuffer.prototype.get$_contents = function() {
      return this._contents;
    };
    StringBuffer.prototype.set$_contents = function(v) {
      return this._contents = v;
    };
    function Symbol() {
      this.$deferredAction();
    }
    Symbol.builtin$cls = "Symbol";
    if (!("name" in Symbol))
      Symbol.name = "Symbol";
    $desc = $collectedClasses$.Symbol[1];
    Symbol.prototype = $desc;
    Symbol.$__fields__ = [];
    function HtmlElement() {
      this.$deferredAction();
    }
    HtmlElement.builtin$cls = "HtmlElement";
    if (!("name" in HtmlElement))
      HtmlElement.name = "HtmlElement";
    $desc = $collectedClasses$.HtmlElement[1];
    HtmlElement.prototype = $desc;
    HtmlElement.$__fields__ = [];
    function AnchorElement() {
      this.$deferredAction();
    }
    AnchorElement.builtin$cls = "AnchorElement";
    if (!("name" in AnchorElement))
      AnchorElement.name = "AnchorElement";
    $desc = $collectedClasses$.AnchorElement[1];
    AnchorElement.prototype = $desc;
    AnchorElement.$__fields__ = [];
    AnchorElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    AnchorElement.prototype.get$hostname = function(receiver) {
      return receiver.hostname;
    };
    AnchorElement.prototype.set$href = function(receiver, v) {
      return receiver.href = v;
    };
    AnchorElement.prototype.get$port = function(receiver) {
      return receiver.port;
    };
    AnchorElement.prototype.get$protocol = function(receiver) {
      return receiver.protocol;
    };
    function ApplicationCacheErrorEvent() {
      this.$deferredAction();
    }
    ApplicationCacheErrorEvent.builtin$cls = "ApplicationCacheErrorEvent";
    if (!("name" in ApplicationCacheErrorEvent))
      ApplicationCacheErrorEvent.name = "ApplicationCacheErrorEvent";
    $desc = $collectedClasses$.ApplicationCacheErrorEvent[1];
    ApplicationCacheErrorEvent.prototype = $desc;
    ApplicationCacheErrorEvent.$__fields__ = [];
    ApplicationCacheErrorEvent.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function AreaElement() {
      this.$deferredAction();
    }
    AreaElement.builtin$cls = "AreaElement";
    if (!("name" in AreaElement))
      AreaElement.name = "AreaElement";
    $desc = $collectedClasses$.AreaElement[1];
    AreaElement.prototype = $desc;
    AreaElement.$__fields__ = [];
    AreaElement.prototype.get$hostname = function(receiver) {
      return receiver.hostname;
    };
    AreaElement.prototype.set$href = function(receiver, v) {
      return receiver.href = v;
    };
    AreaElement.prototype.get$port = function(receiver) {
      return receiver.port;
    };
    AreaElement.prototype.get$protocol = function(receiver) {
      return receiver.protocol;
    };
    function BaseElement() {
      this.$deferredAction();
    }
    BaseElement.builtin$cls = "BaseElement";
    if (!("name" in BaseElement))
      BaseElement.name = "BaseElement";
    $desc = $collectedClasses$.BaseElement[1];
    BaseElement.prototype = $desc;
    BaseElement.$__fields__ = [];
    BaseElement.prototype.set$href = function(receiver, v) {
      return receiver.href = v;
    };
    function Blob() {
      this.$deferredAction();
    }
    Blob.builtin$cls = "Blob";
    if (!("name" in Blob))
      Blob.name = "Blob";
    $desc = $collectedClasses$.Blob[1];
    Blob.prototype = $desc;
    Blob.$__fields__ = [];
    Blob.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function BodyElement() {
      this.$deferredAction();
    }
    BodyElement.builtin$cls = "BodyElement";
    if (!("name" in BodyElement))
      BodyElement.name = "BodyElement";
    $desc = $collectedClasses$.BodyElement[1];
    BodyElement.prototype = $desc;
    BodyElement.$__fields__ = [];
    function ButtonElement() {
      this.$deferredAction();
    }
    ButtonElement.builtin$cls = "ButtonElement";
    if (!("name" in ButtonElement))
      ButtonElement.name = "ButtonElement";
    $desc = $collectedClasses$.ButtonElement[1];
    ButtonElement.prototype = $desc;
    ButtonElement.$__fields__ = [];
    ButtonElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    ButtonElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    ButtonElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function CharacterData() {
      this.$deferredAction();
    }
    CharacterData.builtin$cls = "CharacterData";
    if (!("name" in CharacterData))
      CharacterData.name = "CharacterData";
    $desc = $collectedClasses$.CharacterData[1];
    CharacterData.prototype = $desc;
    CharacterData.$__fields__ = [];
    CharacterData.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    CharacterData.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function CompositionEvent() {
      this.$deferredAction();
    }
    CompositionEvent.builtin$cls = "CompositionEvent";
    if (!("name" in CompositionEvent))
      CompositionEvent.name = "CompositionEvent";
    $desc = $collectedClasses$.CompositionEvent[1];
    CompositionEvent.prototype = $desc;
    CompositionEvent.$__fields__ = [];
    CompositionEvent.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function CssStyleDeclaration() {
      this.$deferredAction();
    }
    CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
    if (!("name" in CssStyleDeclaration))
      CssStyleDeclaration.name = "CssStyleDeclaration";
    $desc = $collectedClasses$.CssStyleDeclaration[1];
    CssStyleDeclaration.prototype = $desc;
    CssStyleDeclaration.$__fields__ = [];
    CssStyleDeclaration.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function Interceptor_CssStyleDeclarationBase() {
      this.$deferredAction();
    }
    Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
    if (!("name" in Interceptor_CssStyleDeclarationBase))
      Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
    $desc = $collectedClasses$.Interceptor_CssStyleDeclarationBase[1];
    Interceptor_CssStyleDeclarationBase.prototype = $desc;
    Interceptor_CssStyleDeclarationBase.$__fields__ = [];
    function CssStyleDeclarationBase() {
      this.$deferredAction();
    }
    CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
    if (!("name" in CssStyleDeclarationBase))
      CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
    $desc = $collectedClasses$.CssStyleDeclarationBase[1];
    CssStyleDeclarationBase.prototype = $desc;
    CssStyleDeclarationBase.$__fields__ = [];
    function DeviceLightEvent() {
      this.$deferredAction();
    }
    DeviceLightEvent.builtin$cls = "DeviceLightEvent";
    if (!("name" in DeviceLightEvent))
      DeviceLightEvent.name = "DeviceLightEvent";
    $desc = $collectedClasses$.DeviceLightEvent[1];
    DeviceLightEvent.prototype = $desc;
    DeviceLightEvent.$__fields__ = [];
    DeviceLightEvent.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function DivElement() {
      this.$deferredAction();
    }
    DivElement.builtin$cls = "DivElement";
    if (!("name" in DivElement))
      DivElement.name = "DivElement";
    $desc = $collectedClasses$.DivElement[1];
    DivElement.prototype = $desc;
    DivElement.$__fields__ = [];
    function Document0() {
      this.$deferredAction();
    }
    Document0.builtin$cls = "Document0";
    if (!("name" in Document0))
      Document0.name = "Document0";
    $desc = $collectedClasses$.Document0[1];
    Document0.prototype = $desc;
    Document0.$__fields__ = [];
    function DocumentFragment() {
      this.$deferredAction();
    }
    DocumentFragment.builtin$cls = "DocumentFragment";
    if (!("name" in DocumentFragment))
      DocumentFragment.name = "DocumentFragment";
    $desc = $collectedClasses$.DocumentFragment[1];
    DocumentFragment.prototype = $desc;
    DocumentFragment.$__fields__ = [];
    function DomError() {
      this.$deferredAction();
    }
    DomError.builtin$cls = "DomError";
    if (!("name" in DomError))
      DomError.name = "DomError";
    $desc = $collectedClasses$.DomError[1];
    DomError.prototype = $desc;
    DomError.$__fields__ = [];
    DomError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    DomError.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function DomException() {
      this.$deferredAction();
    }
    DomException.builtin$cls = "DomException";
    if (!("name" in DomException))
      DomException.name = "DomException";
    $desc = $collectedClasses$.DomException[1];
    DomException.prototype = $desc;
    DomException.$__fields__ = [];
    DomException.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function DomRectReadOnly() {
      this.$deferredAction();
    }
    DomRectReadOnly.builtin$cls = "DomRectReadOnly";
    if (!("name" in DomRectReadOnly))
      DomRectReadOnly.name = "DomRectReadOnly";
    $desc = $collectedClasses$.DomRectReadOnly[1];
    DomRectReadOnly.prototype = $desc;
    DomRectReadOnly.$__fields__ = [];
    DomRectReadOnly.prototype.get$bottom = function(receiver) {
      return receiver.bottom;
    };
    DomRectReadOnly.prototype.get$height = function(receiver) {
      return receiver.height;
    };
    DomRectReadOnly.prototype.get$left = function(receiver) {
      return receiver.left;
    };
    DomRectReadOnly.prototype.get$right = function(receiver) {
      return receiver.right;
    };
    DomRectReadOnly.prototype.get$top = function(receiver) {
      return receiver.top;
    };
    DomRectReadOnly.prototype.get$width = function(receiver) {
      return receiver.width;
    };
    DomRectReadOnly.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    DomRectReadOnly.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function DomSettableTokenList() {
      this.$deferredAction();
    }
    DomSettableTokenList.builtin$cls = "DomSettableTokenList";
    if (!("name" in DomSettableTokenList))
      DomSettableTokenList.name = "DomSettableTokenList";
    $desc = $collectedClasses$.DomSettableTokenList[1];
    DomSettableTokenList.prototype = $desc;
    DomSettableTokenList.$__fields__ = [];
    DomSettableTokenList.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function DomTokenList() {
      this.$deferredAction();
    }
    DomTokenList.builtin$cls = "DomTokenList";
    if (!("name" in DomTokenList))
      DomTokenList.name = "DomTokenList";
    $desc = $collectedClasses$.DomTokenList[1];
    DomTokenList.prototype = $desc;
    DomTokenList.$__fields__ = [];
    DomTokenList.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function _ChildrenElementList(_html$_element, _childElements) {
      this._html$_element = _html$_element;
      this._childElements = _childElements;
      this.$deferredAction();
    }
    _ChildrenElementList.builtin$cls = "_ChildrenElementList";
    if (!("name" in _ChildrenElementList))
      _ChildrenElementList.name = "_ChildrenElementList";
    $desc = $collectedClasses$._ChildrenElementList[1];
    _ChildrenElementList.prototype = $desc;
    _ChildrenElementList.$__fields__ = ["_html$_element", "_childElements"];
    _ChildrenElementList.prototype.get$_html$_element = function() {
      return this._html$_element;
    };
    function Element() {
      this.$deferredAction();
    }
    Element.builtin$cls = "Element";
    if (!("name" in Element))
      Element.name = "Element";
    $desc = $collectedClasses$.Element[1];
    Element.prototype = $desc;
    Element.$__fields__ = [];
    Element.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    Element.prototype.get$style = function(receiver) {
      return receiver.style;
    };
    Element.prototype.get$tagName = function(receiver) {
      return receiver.tagName;
    };
    function Element_Element$html_closure() {
      this.$deferredAction();
    }
    Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
    if (!("name" in Element_Element$html_closure))
      Element_Element$html_closure.name = "Element_Element$html_closure";
    $desc = $collectedClasses$.Element_Element$html_closure[1];
    Element_Element$html_closure.prototype = $desc;
    Element_Element$html_closure.$__fields__ = [];
    function EmbedElement() {
      this.$deferredAction();
    }
    EmbedElement.builtin$cls = "EmbedElement";
    if (!("name" in EmbedElement))
      EmbedElement.name = "EmbedElement";
    $desc = $collectedClasses$.EmbedElement[1];
    EmbedElement.prototype = $desc;
    EmbedElement.$__fields__ = [];
    EmbedElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    EmbedElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function ErrorEvent() {
      this.$deferredAction();
    }
    ErrorEvent.builtin$cls = "ErrorEvent";
    if (!("name" in ErrorEvent))
      ErrorEvent.name = "ErrorEvent";
    $desc = $collectedClasses$.ErrorEvent[1];
    ErrorEvent.prototype = $desc;
    ErrorEvent.$__fields__ = [];
    ErrorEvent.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    ErrorEvent.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function Event() {
      this.$deferredAction();
    }
    Event.builtin$cls = "Event";
    if (!("name" in Event))
      Event.name = "Event";
    $desc = $collectedClasses$.Event[1];
    Event.prototype = $desc;
    Event.$__fields__ = [];
    Event.prototype.get$path = function(receiver) {
      return receiver.path;
    };
    Event.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function EventTarget() {
      this.$deferredAction();
    }
    EventTarget.builtin$cls = "EventTarget";
    if (!("name" in EventTarget))
      EventTarget.name = "EventTarget";
    $desc = $collectedClasses$.EventTarget[1];
    EventTarget.prototype = $desc;
    EventTarget.$__fields__ = [];
    function FieldSetElement() {
      this.$deferredAction();
    }
    FieldSetElement.builtin$cls = "FieldSetElement";
    if (!("name" in FieldSetElement))
      FieldSetElement.name = "FieldSetElement";
    $desc = $collectedClasses$.FieldSetElement[1];
    FieldSetElement.prototype = $desc;
    FieldSetElement.$__fields__ = [];
    FieldSetElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    FieldSetElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function File0() {
      this.$deferredAction();
    }
    File0.builtin$cls = "File0";
    if (!("name" in File0))
      File0.name = "File0";
    $desc = $collectedClasses$.File0[1];
    File0.prototype = $desc;
    File0.$__fields__ = [];
    File0.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function FileList() {
      this.$deferredAction();
    }
    FileList.builtin$cls = "FileList";
    if (!("name" in FileList))
      FileList.name = "FileList";
    $desc = $collectedClasses$.FileList[1];
    FileList.prototype = $desc;
    FileList.$__fields__ = [];
    function Interceptor_ListMixin() {
      this.$deferredAction();
    }
    Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
    if (!("name" in Interceptor_ListMixin))
      Interceptor_ListMixin.name = "Interceptor_ListMixin";
    $desc = $collectedClasses$.Interceptor_ListMixin[1];
    Interceptor_ListMixin.prototype = $desc;
    Interceptor_ListMixin.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin))
      Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin[1];
    Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin.$__fields__ = [];
    function FormElement() {
      this.$deferredAction();
    }
    FormElement.builtin$cls = "FormElement";
    if (!("name" in FormElement))
      FormElement.name = "FormElement";
    $desc = $collectedClasses$.FormElement[1];
    FormElement.prototype = $desc;
    FormElement.$__fields__ = [];
    FormElement.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    FormElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function HtmlCollection() {
      this.$deferredAction();
    }
    HtmlCollection.builtin$cls = "HtmlCollection";
    if (!("name" in HtmlCollection))
      HtmlCollection.name = "HtmlCollection";
    $desc = $collectedClasses$.HtmlCollection[1];
    HtmlCollection.prototype = $desc;
    HtmlCollection.$__fields__ = [];
    function Interceptor_ListMixin0() {
      this.$deferredAction();
    }
    Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
    if (!("name" in Interceptor_ListMixin0))
      Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
    $desc = $collectedClasses$.Interceptor_ListMixin0[1];
    Interceptor_ListMixin0.prototype = $desc;
    Interceptor_ListMixin0.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin0() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin0))
      Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin0[1];
    Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin0.$__fields__ = [];
    function HttpRequest() {
      this.$deferredAction();
    }
    HttpRequest.builtin$cls = "HttpRequest";
    if (!("name" in HttpRequest))
      HttpRequest.name = "HttpRequest";
    $desc = $collectedClasses$.HttpRequest[1];
    HttpRequest.prototype = $desc;
    HttpRequest.$__fields__ = [];
    HttpRequest.prototype.get$responseText = function(receiver) {
      return receiver.responseText;
    };
    function HttpRequest_getString_closure() {
      this.$deferredAction();
    }
    HttpRequest_getString_closure.builtin$cls = "HttpRequest_getString_closure";
    if (!("name" in HttpRequest_getString_closure))
      HttpRequest_getString_closure.name = "HttpRequest_getString_closure";
    $desc = $collectedClasses$.HttpRequest_getString_closure[1];
    HttpRequest_getString_closure.prototype = $desc;
    HttpRequest_getString_closure.$__fields__ = [];
    function HttpRequest_request_closure(_captured_completer_1, _captured_xhr_2) {
      this._captured_completer_1 = _captured_completer_1;
      this._captured_xhr_2 = _captured_xhr_2;
      this.$deferredAction();
    }
    HttpRequest_request_closure.builtin$cls = "HttpRequest_request_closure";
    if (!("name" in HttpRequest_request_closure))
      HttpRequest_request_closure.name = "HttpRequest_request_closure";
    $desc = $collectedClasses$.HttpRequest_request_closure[1];
    HttpRequest_request_closure.prototype = $desc;
    HttpRequest_request_closure.$__fields__ = ["_captured_completer_1", "_captured_xhr_2"];
    function HttpRequestEventTarget() {
      this.$deferredAction();
    }
    HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
    if (!("name" in HttpRequestEventTarget))
      HttpRequestEventTarget.name = "HttpRequestEventTarget";
    $desc = $collectedClasses$.HttpRequestEventTarget[1];
    HttpRequestEventTarget.prototype = $desc;
    HttpRequestEventTarget.$__fields__ = [];
    function IFrameElement() {
      this.$deferredAction();
    }
    IFrameElement.builtin$cls = "IFrameElement";
    if (!("name" in IFrameElement))
      IFrameElement.name = "IFrameElement";
    $desc = $collectedClasses$.IFrameElement[1];
    IFrameElement.prototype = $desc;
    IFrameElement.$__fields__ = [];
    IFrameElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function ImageData() {
      this.$deferredAction();
    }
    ImageData.builtin$cls = "ImageData";
    if (!("name" in ImageData))
      ImageData.name = "ImageData";
    $desc = $collectedClasses$.ImageData[1];
    ImageData.prototype = $desc;
    ImageData.$__fields__ = [];
    ImageData.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function ImageElement() {
      this.$deferredAction();
    }
    ImageElement.builtin$cls = "ImageElement";
    if (!("name" in ImageElement))
      ImageElement.name = "ImageElement";
    $desc = $collectedClasses$.ImageElement[1];
    ImageElement.prototype = $desc;
    ImageElement.$__fields__ = [];
    function InputElement() {
      this.$deferredAction();
    }
    InputElement.builtin$cls = "InputElement";
    if (!("name" in InputElement))
      InputElement.name = "InputElement";
    $desc = $collectedClasses$.InputElement[1];
    InputElement.prototype = $desc;
    InputElement.$__fields__ = [];
    InputElement.prototype.get$files = function(receiver) {
      return receiver.files;
    };
    InputElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    InputElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    InputElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    InputElement.prototype.get$directory = function(receiver) {
      return receiver.webkitdirectory;
    };
    function KeyboardEvent() {
      this.$deferredAction();
    }
    KeyboardEvent.builtin$cls = "KeyboardEvent";
    if (!("name" in KeyboardEvent))
      KeyboardEvent.name = "KeyboardEvent";
    $desc = $collectedClasses$.KeyboardEvent[1];
    KeyboardEvent.prototype = $desc;
    KeyboardEvent.$__fields__ = [];
    KeyboardEvent.prototype.get$location = function(receiver) {
      return receiver.location;
    };
    function KeygenElement() {
      this.$deferredAction();
    }
    KeygenElement.builtin$cls = "KeygenElement";
    if (!("name" in KeygenElement))
      KeygenElement.name = "KeygenElement";
    $desc = $collectedClasses$.KeygenElement[1];
    KeygenElement.prototype = $desc;
    KeygenElement.$__fields__ = [];
    KeygenElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    KeygenElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function LIElement() {
      this.$deferredAction();
    }
    LIElement.builtin$cls = "LIElement";
    if (!("name" in LIElement))
      LIElement.name = "LIElement";
    $desc = $collectedClasses$.LIElement[1];
    LIElement.prototype = $desc;
    LIElement.$__fields__ = [];
    LIElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function LinkElement() {
      this.$deferredAction();
    }
    LinkElement.builtin$cls = "LinkElement";
    if (!("name" in LinkElement))
      LinkElement.name = "LinkElement";
    $desc = $collectedClasses$.LinkElement[1];
    LinkElement.prototype = $desc;
    LinkElement.$__fields__ = [];
    LinkElement.prototype.set$href = function(receiver, v) {
      return receiver.href = v;
    };
    LinkElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function Location0() {
      this.$deferredAction();
    }
    Location0.builtin$cls = "Location0";
    if (!("name" in Location0))
      Location0.name = "Location0";
    $desc = $collectedClasses$.Location0[1];
    Location0.prototype = $desc;
    Location0.$__fields__ = [];
    function MapElement() {
      this.$deferredAction();
    }
    MapElement.builtin$cls = "MapElement";
    if (!("name" in MapElement))
      MapElement.name = "MapElement";
    $desc = $collectedClasses$.MapElement[1];
    MapElement.prototype = $desc;
    MapElement.$__fields__ = [];
    MapElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function MediaElement() {
      this.$deferredAction();
    }
    MediaElement.builtin$cls = "MediaElement";
    if (!("name" in MediaElement))
      MediaElement.name = "MediaElement";
    $desc = $collectedClasses$.MediaElement[1];
    MediaElement.prototype = $desc;
    MediaElement.$__fields__ = [];
    MediaElement.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    function MediaKeyEvent() {
      this.$deferredAction();
    }
    MediaKeyEvent.builtin$cls = "MediaKeyEvent";
    if (!("name" in MediaKeyEvent))
      MediaKeyEvent.name = "MediaKeyEvent";
    $desc = $collectedClasses$.MediaKeyEvent[1];
    MediaKeyEvent.prototype = $desc;
    MediaKeyEvent.$__fields__ = [];
    MediaKeyEvent.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function MediaKeyMessageEvent() {
      this.$deferredAction();
    }
    MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
    if (!("name" in MediaKeyMessageEvent))
      MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
    $desc = $collectedClasses$.MediaKeyMessageEvent[1];
    MediaKeyMessageEvent.prototype = $desc;
    MediaKeyMessageEvent.$__fields__ = [];
    MediaKeyMessageEvent.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function MediaStream() {
      this.$deferredAction();
    }
    MediaStream.builtin$cls = "MediaStream";
    if (!("name" in MediaStream))
      MediaStream.name = "MediaStream";
    $desc = $collectedClasses$.MediaStream[1];
    MediaStream.prototype = $desc;
    MediaStream.$__fields__ = [];
    MediaStream.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    function MenuElement() {
      this.$deferredAction();
    }
    MenuElement.builtin$cls = "MenuElement";
    if (!("name" in MenuElement))
      MenuElement.name = "MenuElement";
    $desc = $collectedClasses$.MenuElement[1];
    MenuElement.prototype = $desc;
    MenuElement.$__fields__ = [];
    MenuElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function MenuItemElement() {
      this.$deferredAction();
    }
    MenuItemElement.builtin$cls = "MenuItemElement";
    if (!("name" in MenuItemElement))
      MenuItemElement.name = "MenuItemElement";
    $desc = $collectedClasses$.MenuItemElement[1];
    MenuItemElement.prototype = $desc;
    MenuItemElement.$__fields__ = [];
    MenuItemElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function MessageEvent() {
      this.$deferredAction();
    }
    MessageEvent.builtin$cls = "MessageEvent";
    if (!("name" in MessageEvent))
      MessageEvent.name = "MessageEvent";
    $desc = $collectedClasses$.MessageEvent[1];
    MessageEvent.prototype = $desc;
    MessageEvent.$__fields__ = [];
    function MetaElement() {
      this.$deferredAction();
    }
    MetaElement.builtin$cls = "MetaElement";
    if (!("name" in MetaElement))
      MetaElement.name = "MetaElement";
    $desc = $collectedClasses$.MetaElement[1];
    MetaElement.prototype = $desc;
    MetaElement.$__fields__ = [];
    MetaElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function MeterElement() {
      this.$deferredAction();
    }
    MeterElement.builtin$cls = "MeterElement";
    if (!("name" in MeterElement))
      MeterElement.name = "MeterElement";
    $desc = $collectedClasses$.MeterElement[1];
    MeterElement.prototype = $desc;
    MeterElement.$__fields__ = [];
    MeterElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function MidiMessageEvent() {
      this.$deferredAction();
    }
    MidiMessageEvent.builtin$cls = "MidiMessageEvent";
    if (!("name" in MidiMessageEvent))
      MidiMessageEvent.name = "MidiMessageEvent";
    $desc = $collectedClasses$.MidiMessageEvent[1];
    MidiMessageEvent.prototype = $desc;
    MidiMessageEvent.$__fields__ = [];
    MidiMessageEvent.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function MidiOutput() {
      this.$deferredAction();
    }
    MidiOutput.builtin$cls = "MidiOutput";
    if (!("name" in MidiOutput))
      MidiOutput.name = "MidiOutput";
    $desc = $collectedClasses$.MidiOutput[1];
    MidiOutput.prototype = $desc;
    MidiOutput.$__fields__ = [];
    function MidiPort() {
      this.$deferredAction();
    }
    MidiPort.builtin$cls = "MidiPort";
    if (!("name" in MidiPort))
      MidiPort.name = "MidiPort";
    $desc = $collectedClasses$.MidiPort[1];
    MidiPort.prototype = $desc;
    MidiPort.$__fields__ = [];
    MidiPort.prototype.get$id = function(receiver) {
      return receiver.id;
    };
    MidiPort.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    MidiPort.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    MidiPort.prototype.get$version = function(receiver) {
      return receiver.version;
    };
    function MouseEvent() {
      this.$deferredAction();
    }
    MouseEvent.builtin$cls = "MouseEvent";
    if (!("name" in MouseEvent))
      MouseEvent.name = "MouseEvent";
    $desc = $collectedClasses$.MouseEvent[1];
    MouseEvent.prototype = $desc;
    MouseEvent.$__fields__ = [];
    function Navigator() {
      this.$deferredAction();
    }
    Navigator.builtin$cls = "Navigator";
    if (!("name" in Navigator))
      Navigator.name = "Navigator";
    $desc = $collectedClasses$.Navigator[1];
    Navigator.prototype = $desc;
    Navigator.$__fields__ = [];
    function NavigatorUserMediaError() {
      this.$deferredAction();
    }
    NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
    if (!("name" in NavigatorUserMediaError))
      NavigatorUserMediaError.name = "NavigatorUserMediaError";
    $desc = $collectedClasses$.NavigatorUserMediaError[1];
    NavigatorUserMediaError.prototype = $desc;
    NavigatorUserMediaError.$__fields__ = [];
    NavigatorUserMediaError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    NavigatorUserMediaError.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function _ChildNodeListLazy(_this) {
      this._this = _this;
      this.$deferredAction();
    }
    _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
    if (!("name" in _ChildNodeListLazy))
      _ChildNodeListLazy.name = "_ChildNodeListLazy";
    $desc = $collectedClasses$._ChildNodeListLazy[1];
    _ChildNodeListLazy.prototype = $desc;
    _ChildNodeListLazy.$__fields__ = ["_this"];
    function Node() {
      this.$deferredAction();
    }
    Node.builtin$cls = "Node";
    if (!("name" in Node))
      Node.name = "Node";
    $desc = $collectedClasses$.Node[1];
    Node.prototype = $desc;
    Node.$__fields__ = [];
    Node.prototype.get$parent = function(receiver) {
      return receiver.parentElement;
    };
    Node.prototype.get$text = function(receiver) {
      return receiver.textContent;
    };
    Node.prototype.set$text = function(receiver, v) {
      return receiver.textContent = v;
    };
    function NodeList() {
      this.$deferredAction();
    }
    NodeList.builtin$cls = "NodeList";
    if (!("name" in NodeList))
      NodeList.name = "NodeList";
    $desc = $collectedClasses$.NodeList[1];
    NodeList.prototype = $desc;
    NodeList.$__fields__ = [];
    function Interceptor_ListMixin1() {
      this.$deferredAction();
    }
    Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
    if (!("name" in Interceptor_ListMixin1))
      Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
    $desc = $collectedClasses$.Interceptor_ListMixin1[1];
    Interceptor_ListMixin1.prototype = $desc;
    Interceptor_ListMixin1.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin1() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin1))
      Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin1[1];
    Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin1.$__fields__ = [];
    function OListElement() {
      this.$deferredAction();
    }
    OListElement.builtin$cls = "OListElement";
    if (!("name" in OListElement))
      OListElement.name = "OListElement";
    $desc = $collectedClasses$.OListElement[1];
    OListElement.prototype = $desc;
    OListElement.$__fields__ = [];
    OListElement.prototype.set$start = function(receiver, v) {
      return receiver.start = v;
    };
    OListElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function ObjectElement() {
      this.$deferredAction();
    }
    ObjectElement.builtin$cls = "ObjectElement";
    if (!("name" in ObjectElement))
      ObjectElement.name = "ObjectElement";
    $desc = $collectedClasses$.ObjectElement[1];
    ObjectElement.prototype = $desc;
    ObjectElement.$__fields__ = [];
    ObjectElement.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    ObjectElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    ObjectElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function OptionElement() {
      this.$deferredAction();
    }
    OptionElement.builtin$cls = "OptionElement";
    if (!("name" in OptionElement))
      OptionElement.name = "OptionElement";
    $desc = $collectedClasses$.OptionElement[1];
    OptionElement.prototype = $desc;
    OptionElement.$__fields__ = [];
    OptionElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function OutputElement() {
      this.$deferredAction();
    }
    OutputElement.builtin$cls = "OutputElement";
    if (!("name" in OutputElement))
      OutputElement.name = "OutputElement";
    $desc = $collectedClasses$.OutputElement[1];
    OutputElement.prototype = $desc;
    OutputElement.$__fields__ = [];
    OutputElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    OutputElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    OutputElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function ParamElement() {
      this.$deferredAction();
    }
    ParamElement.builtin$cls = "ParamElement";
    if (!("name" in ParamElement))
      ParamElement.name = "ParamElement";
    $desc = $collectedClasses$.ParamElement[1];
    ParamElement.prototype = $desc;
    ParamElement.$__fields__ = [];
    ParamElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    ParamElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function PluginPlaceholderElement() {
      this.$deferredAction();
    }
    PluginPlaceholderElement.builtin$cls = "PluginPlaceholderElement";
    if (!("name" in PluginPlaceholderElement))
      PluginPlaceholderElement.name = "PluginPlaceholderElement";
    $desc = $collectedClasses$.PluginPlaceholderElement[1];
    PluginPlaceholderElement.prototype = $desc;
    PluginPlaceholderElement.$__fields__ = [];
    PluginPlaceholderElement.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function PositionError() {
      this.$deferredAction();
    }
    PositionError.builtin$cls = "PositionError";
    if (!("name" in PositionError))
      PositionError.name = "PositionError";
    $desc = $collectedClasses$.PositionError[1];
    PositionError.prototype = $desc;
    PositionError.$__fields__ = [];
    PositionError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function ProgressElement0() {
      this.$deferredAction();
    }
    ProgressElement0.builtin$cls = "ProgressElement0";
    if (!("name" in ProgressElement0))
      ProgressElement0.name = "ProgressElement0";
    $desc = $collectedClasses$.ProgressElement0[1];
    ProgressElement0.prototype = $desc;
    ProgressElement0.$__fields__ = [];
    ProgressElement0.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function PushEvent() {
      this.$deferredAction();
    }
    PushEvent.builtin$cls = "PushEvent";
    if (!("name" in PushEvent))
      PushEvent.name = "PushEvent";
    $desc = $collectedClasses$.PushEvent[1];
    PushEvent.prototype = $desc;
    PushEvent.$__fields__ = [];
    PushEvent.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function Range0() {
      this.$deferredAction();
    }
    Range0.builtin$cls = "Range0";
    if (!("name" in Range0))
      Range0.name = "Range0";
    $desc = $collectedClasses$.Range0[1];
    Range0.prototype = $desc;
    Range0.$__fields__ = [];
    function ScriptElement0() {
      this.$deferredAction();
    }
    ScriptElement0.builtin$cls = "ScriptElement0";
    if (!("name" in ScriptElement0))
      ScriptElement0.name = "ScriptElement0";
    $desc = $collectedClasses$.ScriptElement0[1];
    ScriptElement0.prototype = $desc;
    ScriptElement0.$__fields__ = [];
    ScriptElement0.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function SelectElement() {
      this.$deferredAction();
    }
    SelectElement.builtin$cls = "SelectElement";
    if (!("name" in SelectElement))
      SelectElement.name = "SelectElement";
    $desc = $collectedClasses$.SelectElement[1];
    SelectElement.prototype = $desc;
    SelectElement.$__fields__ = [];
    SelectElement.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    SelectElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    SelectElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    SelectElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function ShadowRoot() {
      this.$deferredAction();
    }
    ShadowRoot.builtin$cls = "ShadowRoot";
    if (!("name" in ShadowRoot))
      ShadowRoot.name = "ShadowRoot";
    $desc = $collectedClasses$.ShadowRoot[1];
    ShadowRoot.prototype = $desc;
    ShadowRoot.$__fields__ = [];
    ShadowRoot.prototype.set$innerHtml = function(receiver, v) {
      return receiver.innerHTML = v;
    };
    function SourceElement() {
      this.$deferredAction();
    }
    SourceElement.builtin$cls = "SourceElement";
    if (!("name" in SourceElement))
      SourceElement.name = "SourceElement";
    $desc = $collectedClasses$.SourceElement[1];
    SourceElement.prototype = $desc;
    SourceElement.$__fields__ = [];
    SourceElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function SpeechRecognitionError() {
      this.$deferredAction();
    }
    SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
    if (!("name" in SpeechRecognitionError))
      SpeechRecognitionError.name = "SpeechRecognitionError";
    $desc = $collectedClasses$.SpeechRecognitionError[1];
    SpeechRecognitionError.prototype = $desc;
    SpeechRecognitionError.$__fields__ = [];
    SpeechRecognitionError.prototype.get$error = function(receiver) {
      return receiver.error;
    };
    SpeechRecognitionError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function SpeechRecognitionEvent() {
      this.$deferredAction();
    }
    SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
    if (!("name" in SpeechRecognitionEvent))
      SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
    $desc = $collectedClasses$.SpeechRecognitionEvent[1];
    SpeechRecognitionEvent.prototype = $desc;
    SpeechRecognitionEvent.$__fields__ = [];
    SpeechRecognitionEvent.prototype.get$results = function(receiver) {
      return receiver.results;
    };
    function SpeechRecognitionResult() {
      this.$deferredAction();
    }
    SpeechRecognitionResult.builtin$cls = "SpeechRecognitionResult";
    if (!("name" in SpeechRecognitionResult))
      SpeechRecognitionResult.name = "SpeechRecognitionResult";
    $desc = $collectedClasses$.SpeechRecognitionResult[1];
    SpeechRecognitionResult.prototype = $desc;
    SpeechRecognitionResult.$__fields__ = [];
    SpeechRecognitionResult.prototype.get$length = function(receiver) {
      return receiver.length;
    };
    function SpeechSynthesisEvent() {
      this.$deferredAction();
    }
    SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
    if (!("name" in SpeechSynthesisEvent))
      SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
    $desc = $collectedClasses$.SpeechSynthesisEvent[1];
    SpeechSynthesisEvent.prototype = $desc;
    SpeechSynthesisEvent.$__fields__ = [];
    SpeechSynthesisEvent.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function StyleElement() {
      this.$deferredAction();
    }
    StyleElement.builtin$cls = "StyleElement";
    if (!("name" in StyleElement))
      StyleElement.name = "StyleElement";
    $desc = $collectedClasses$.StyleElement[1];
    StyleElement.prototype = $desc;
    StyleElement.$__fields__ = [];
    StyleElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function TableElement() {
      this.$deferredAction();
    }
    TableElement.builtin$cls = "TableElement";
    if (!("name" in TableElement))
      TableElement.name = "TableElement";
    $desc = $collectedClasses$.TableElement[1];
    TableElement.prototype = $desc;
    TableElement.$__fields__ = [];
    function TableRowElement() {
      this.$deferredAction();
    }
    TableRowElement.builtin$cls = "TableRowElement";
    if (!("name" in TableRowElement))
      TableRowElement.name = "TableRowElement";
    $desc = $collectedClasses$.TableRowElement[1];
    TableRowElement.prototype = $desc;
    TableRowElement.$__fields__ = [];
    function TableSectionElement() {
      this.$deferredAction();
    }
    TableSectionElement.builtin$cls = "TableSectionElement";
    if (!("name" in TableSectionElement))
      TableSectionElement.name = "TableSectionElement";
    $desc = $collectedClasses$.TableSectionElement[1];
    TableSectionElement.prototype = $desc;
    TableSectionElement.$__fields__ = [];
    function TemplateElement() {
      this.$deferredAction();
    }
    TemplateElement.builtin$cls = "TemplateElement";
    if (!("name" in TemplateElement))
      TemplateElement.name = "TemplateElement";
    $desc = $collectedClasses$.TemplateElement[1];
    TemplateElement.prototype = $desc;
    TemplateElement.$__fields__ = [];
    function TextAreaElement() {
      this.$deferredAction();
    }
    TextAreaElement.builtin$cls = "TextAreaElement";
    if (!("name" in TextAreaElement))
      TextAreaElement.name = "TextAreaElement";
    $desc = $collectedClasses$.TextAreaElement[1];
    TextAreaElement.prototype = $desc;
    TextAreaElement.$__fields__ = [];
    TextAreaElement.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    TextAreaElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    TextAreaElement.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function TextEvent() {
      this.$deferredAction();
    }
    TextEvent.builtin$cls = "TextEvent";
    if (!("name" in TextEvent))
      TextEvent.name = "TextEvent";
    $desc = $collectedClasses$.TextEvent[1];
    TextEvent.prototype = $desc;
    TextEvent.$__fields__ = [];
    TextEvent.prototype.get$data = function(receiver) {
      return receiver.data;
    };
    function TrackElement() {
      this.$deferredAction();
    }
    TrackElement.builtin$cls = "TrackElement";
    if (!("name" in TrackElement))
      TrackElement.name = "TrackElement";
    $desc = $collectedClasses$.TrackElement[1];
    TrackElement.prototype = $desc;
    TrackElement.$__fields__ = [];
    TrackElement.prototype.get$kind = function(receiver) {
      return receiver.kind;
    };
    function UIEvent() {
      this.$deferredAction();
    }
    UIEvent.builtin$cls = "UIEvent";
    if (!("name" in UIEvent))
      UIEvent.name = "UIEvent";
    $desc = $collectedClasses$.UIEvent[1];
    UIEvent.prototype = $desc;
    UIEvent.$__fields__ = [];
    UIEvent.prototype.get$which = function(receiver) {
      return receiver.which;
    };
    function Window() {
      this.$deferredAction();
    }
    Window.builtin$cls = "Window";
    if (!("name" in Window))
      Window.name = "Window";
    $desc = $collectedClasses$.Window[1];
    Window.prototype = $desc;
    Window.$__fields__ = [];
    Window.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    function _Attr() {
      this.$deferredAction();
    }
    _Attr.builtin$cls = "_Attr";
    if (!("name" in _Attr))
      _Attr.name = "_Attr";
    $desc = $collectedClasses$._Attr[1];
    _Attr.prototype = $desc;
    _Attr.$__fields__ = [];
    _Attr.prototype.get$name = function(receiver) {
      return receiver.name;
    };
    _Attr.prototype.get$value = function(receiver) {
      return receiver.value;
    };
    function _ClientRect() {
      this.$deferredAction();
    }
    _ClientRect.builtin$cls = "_ClientRect";
    if (!("name" in _ClientRect))
      _ClientRect.name = "_ClientRect";
    $desc = $collectedClasses$._ClientRect[1];
    _ClientRect.prototype = $desc;
    _ClientRect.$__fields__ = [];
    _ClientRect.prototype.get$bottom = function(receiver) {
      return receiver.bottom;
    };
    _ClientRect.prototype.get$height = function(receiver) {
      return receiver.height;
    };
    _ClientRect.prototype.get$left = function(receiver) {
      return receiver.left;
    };
    _ClientRect.prototype.get$right = function(receiver) {
      return receiver.right;
    };
    _ClientRect.prototype.get$top = function(receiver) {
      return receiver.top;
    };
    _ClientRect.prototype.get$width = function(receiver) {
      return receiver.width;
    };
    function _DocumentType() {
      this.$deferredAction();
    }
    _DocumentType.builtin$cls = "_DocumentType";
    if (!("name" in _DocumentType))
      _DocumentType.name = "_DocumentType";
    $desc = $collectedClasses$._DocumentType[1];
    _DocumentType.prototype = $desc;
    _DocumentType.$__fields__ = [];
    function _DomRect() {
      this.$deferredAction();
    }
    _DomRect.builtin$cls = "_DomRect";
    if (!("name" in _DomRect))
      _DomRect.name = "_DomRect";
    $desc = $collectedClasses$._DomRect[1];
    _DomRect.prototype = $desc;
    _DomRect.$__fields__ = [];
    function _HTMLFrameSetElement() {
      this.$deferredAction();
    }
    _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
    if (!("name" in _HTMLFrameSetElement))
      _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
    $desc = $collectedClasses$._HTMLFrameSetElement[1];
    _HTMLFrameSetElement.prototype = $desc;
    _HTMLFrameSetElement.$__fields__ = [];
    function _NamedNodeMap() {
      this.$deferredAction();
    }
    _NamedNodeMap.builtin$cls = "_NamedNodeMap";
    if (!("name" in _NamedNodeMap))
      _NamedNodeMap.name = "_NamedNodeMap";
    $desc = $collectedClasses$._NamedNodeMap[1];
    _NamedNodeMap.prototype = $desc;
    _NamedNodeMap.$__fields__ = [];
    function Interceptor_ListMixin2() {
      this.$deferredAction();
    }
    Interceptor_ListMixin2.builtin$cls = "Interceptor_ListMixin2";
    if (!("name" in Interceptor_ListMixin2))
      Interceptor_ListMixin2.name = "Interceptor_ListMixin2";
    $desc = $collectedClasses$.Interceptor_ListMixin2[1];
    Interceptor_ListMixin2.prototype = $desc;
    Interceptor_ListMixin2.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin2() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin2.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin2";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin2))
      Interceptor_ListMixin_ImmutableListMixin2.name = "Interceptor_ListMixin_ImmutableListMixin2";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin2[1];
    Interceptor_ListMixin_ImmutableListMixin2.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin2.$__fields__ = [];
    function _SpeechRecognitionResultList() {
      this.$deferredAction();
    }
    _SpeechRecognitionResultList.builtin$cls = "_SpeechRecognitionResultList";
    if (!("name" in _SpeechRecognitionResultList))
      _SpeechRecognitionResultList.name = "_SpeechRecognitionResultList";
    $desc = $collectedClasses$._SpeechRecognitionResultList[1];
    _SpeechRecognitionResultList.prototype = $desc;
    _SpeechRecognitionResultList.$__fields__ = [];
    function Interceptor_ListMixin3() {
      this.$deferredAction();
    }
    Interceptor_ListMixin3.builtin$cls = "Interceptor_ListMixin3";
    if (!("name" in Interceptor_ListMixin3))
      Interceptor_ListMixin3.name = "Interceptor_ListMixin3";
    $desc = $collectedClasses$.Interceptor_ListMixin3[1];
    Interceptor_ListMixin3.prototype = $desc;
    Interceptor_ListMixin3.$__fields__ = [];
    function Interceptor_ListMixin_ImmutableListMixin3() {
      this.$deferredAction();
    }
    Interceptor_ListMixin_ImmutableListMixin3.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin3";
    if (!("name" in Interceptor_ListMixin_ImmutableListMixin3))
      Interceptor_ListMixin_ImmutableListMixin3.name = "Interceptor_ListMixin_ImmutableListMixin3";
    $desc = $collectedClasses$.Interceptor_ListMixin_ImmutableListMixin3[1];
    Interceptor_ListMixin_ImmutableListMixin3.prototype = $desc;
    Interceptor_ListMixin_ImmutableListMixin3.$__fields__ = [];
    function _AttributeMap(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    _AttributeMap.builtin$cls = "_AttributeMap";
    if (!("name" in _AttributeMap))
      _AttributeMap.name = "_AttributeMap";
    $desc = $collectedClasses$._AttributeMap[1];
    _AttributeMap.prototype = $desc;
    _AttributeMap.$__fields__ = ["_html$_element"];
    _AttributeMap.prototype.get$_html$_element = function() {
      return this._html$_element;
    };
    function _ElementAttributeMap(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
    if (!("name" in _ElementAttributeMap))
      _ElementAttributeMap.name = "_ElementAttributeMap";
    $desc = $collectedClasses$._ElementAttributeMap[1];
    _ElementAttributeMap.prototype = $desc;
    _ElementAttributeMap.$__fields__ = ["_html$_element"];
    function _MarginCssRect(_html$_element, left, top, _width, _height) {
      this._html$_element = _html$_element;
      this.left = left;
      this.top = top;
      this._width = _width;
      this._height = _height;
      this.$deferredAction();
    }
    _MarginCssRect.builtin$cls = "_MarginCssRect";
    if (!("name" in _MarginCssRect))
      _MarginCssRect.name = "_MarginCssRect";
    $desc = $collectedClasses$._MarginCssRect[1];
    _MarginCssRect.prototype = $desc;
    _MarginCssRect.$__fields__ = ["_html$_element", "left", "top", "_width", "_height"];
    function CssRect(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    CssRect.builtin$cls = "CssRect";
    if (!("name" in CssRect))
      CssRect.name = "CssRect";
    $desc = $collectedClasses$.CssRect[1];
    CssRect.prototype = $desc;
    CssRect.$__fields__ = ["_html$_element"];
    CssRect.prototype.get$_html$_element = function() {
      return this._html$_element;
    };
    function _ElementCssClassSet(_html$_element) {
      this._html$_element = _html$_element;
      this.$deferredAction();
    }
    _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
    if (!("name" in _ElementCssClassSet))
      _ElementCssClassSet.name = "_ElementCssClassSet";
    $desc = $collectedClasses$._ElementCssClassSet[1];
    _ElementCssClassSet.prototype = $desc;
    _ElementCssClassSet.$__fields__ = ["_html$_element"];
    _ElementCssClassSet.prototype.get$_html$_element = function() {
      return this._html$_element;
    };
    function Dimension(_html$_value, _unit) {
      this._html$_value = _html$_value;
      this._unit = _unit;
      this.$deferredAction();
    }
    Dimension.builtin$cls = "Dimension";
    if (!("name" in Dimension))
      Dimension.name = "Dimension";
    $desc = $collectedClasses$.Dimension[1];
    Dimension.prototype = $desc;
    Dimension.$__fields__ = ["_html$_value", "_unit"];
    function _EventStream(_html$_target, _eventType, _useCapture) {
      this._html$_target = _html$_target;
      this._eventType = _eventType;
      this._useCapture = _useCapture;
      this.$deferredAction();
    }
    _EventStream.builtin$cls = "_EventStream";
    if (!("name" in _EventStream))
      _EventStream.name = "_EventStream";
    $desc = $collectedClasses$._EventStream[1];
    _EventStream.prototype = $desc;
    _EventStream.$__fields__ = ["_html$_target", "_eventType", "_useCapture"];
    function _ElementEventStreamImpl(_html$_target, _eventType, _useCapture) {
      this._html$_target = _html$_target;
      this._eventType = _eventType;
      this._useCapture = _useCapture;
      this.$deferredAction();
    }
    _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
    if (!("name" in _ElementEventStreamImpl))
      _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
    $desc = $collectedClasses$._ElementEventStreamImpl[1];
    _ElementEventStreamImpl.prototype = $desc;
    _ElementEventStreamImpl.$__fields__ = ["_html$_target", "_eventType", "_useCapture"];
    function _EventStreamSubscription(_pauseCount, _html$_target, _eventType, _onData, _useCapture) {
      this._pauseCount = _pauseCount;
      this._html$_target = _html$_target;
      this._eventType = _eventType;
      this._onData = _onData;
      this._useCapture = _useCapture;
      this.$deferredAction();
    }
    _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
    if (!("name" in _EventStreamSubscription))
      _EventStreamSubscription.name = "_EventStreamSubscription";
    $desc = $collectedClasses$._EventStreamSubscription[1];
    _EventStreamSubscription.prototype = $desc;
    _EventStreamSubscription.$__fields__ = ["_pauseCount", "_html$_target", "_eventType", "_onData", "_useCapture"];
    function _Html5NodeValidator(uriPolicy) {
      this.uriPolicy = uriPolicy;
      this.$deferredAction();
    }
    _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
    if (!("name" in _Html5NodeValidator))
      _Html5NodeValidator.name = "_Html5NodeValidator";
    $desc = $collectedClasses$._Html5NodeValidator[1];
    _Html5NodeValidator.prototype = $desc;
    _Html5NodeValidator.$__fields__ = ["uriPolicy"];
    _Html5NodeValidator.prototype.get$uriPolicy = function() {
      return this.uriPolicy;
    };
    function ImmutableListMixin() {
      this.$deferredAction();
    }
    ImmutableListMixin.builtin$cls = "ImmutableListMixin";
    if (!("name" in ImmutableListMixin))
      ImmutableListMixin.name = "ImmutableListMixin";
    $desc = $collectedClasses$.ImmutableListMixin[1];
    ImmutableListMixin.prototype = $desc;
    ImmutableListMixin.$__fields__ = [];
    function NodeValidatorBuilder(_validators) {
      this._validators = _validators;
      this.$deferredAction();
    }
    NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
    if (!("name" in NodeValidatorBuilder))
      NodeValidatorBuilder.name = "NodeValidatorBuilder";
    $desc = $collectedClasses$.NodeValidatorBuilder[1];
    NodeValidatorBuilder.prototype = $desc;
    NodeValidatorBuilder.$__fields__ = ["_validators"];
    function NodeValidatorBuilder_allowsElement_closure(_captured_element_0) {
      this._captured_element_0 = _captured_element_0;
      this.$deferredAction();
    }
    NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
    if (!("name" in NodeValidatorBuilder_allowsElement_closure))
      NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
    $desc = $collectedClasses$.NodeValidatorBuilder_allowsElement_closure[1];
    NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
    NodeValidatorBuilder_allowsElement_closure.$__fields__ = ["_captured_element_0"];
    function NodeValidatorBuilder_allowsAttribute_closure(_captured_element_0, _captured_attributeName_1, _captured_value_2) {
      this._captured_element_0 = _captured_element_0;
      this._captured_attributeName_1 = _captured_attributeName_1;
      this._captured_value_2 = _captured_value_2;
      this.$deferredAction();
    }
    NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
    if (!("name" in NodeValidatorBuilder_allowsAttribute_closure))
      NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
    $desc = $collectedClasses$.NodeValidatorBuilder_allowsAttribute_closure[1];
    NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
    NodeValidatorBuilder_allowsAttribute_closure.$__fields__ = ["_captured_element_0", "_captured_attributeName_1", "_captured_value_2"];
    function _SimpleNodeValidator(uriPolicy) {
      this.uriPolicy = uriPolicy;
      this.$deferredAction();
    }
    _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
    if (!("name" in _SimpleNodeValidator))
      _SimpleNodeValidator.name = "_SimpleNodeValidator";
    $desc = $collectedClasses$._SimpleNodeValidator[1];
    _SimpleNodeValidator.prototype = $desc;
    _SimpleNodeValidator.$__fields__ = ["uriPolicy"];
    _SimpleNodeValidator.prototype.get$uriPolicy = function() {
      return this.uriPolicy;
    };
    function _SimpleNodeValidator_closure() {
      this.$deferredAction();
    }
    _SimpleNodeValidator_closure.builtin$cls = "_SimpleNodeValidator_closure";
    if (!("name" in _SimpleNodeValidator_closure))
      _SimpleNodeValidator_closure.name = "_SimpleNodeValidator_closure";
    $desc = $collectedClasses$._SimpleNodeValidator_closure[1];
    _SimpleNodeValidator_closure.prototype = $desc;
    _SimpleNodeValidator_closure.$__fields__ = [];
    function _SimpleNodeValidator_closure0() {
      this.$deferredAction();
    }
    _SimpleNodeValidator_closure0.builtin$cls = "_SimpleNodeValidator_closure0";
    if (!("name" in _SimpleNodeValidator_closure0))
      _SimpleNodeValidator_closure0.name = "_SimpleNodeValidator_closure0";
    $desc = $collectedClasses$._SimpleNodeValidator_closure0[1];
    _SimpleNodeValidator_closure0.prototype = $desc;
    _SimpleNodeValidator_closure0.$__fields__ = [];
    function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
      this._templateAttrs = _templateAttrs;
      this.allowedElements = allowedElements;
      this.allowedAttributes = allowedAttributes;
      this.allowedUriAttributes = allowedUriAttributes;
      this.uriPolicy = uriPolicy;
      this.$deferredAction();
    }
    _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
    if (!("name" in _TemplatingNodeValidator))
      _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
    $desc = $collectedClasses$._TemplatingNodeValidator[1];
    _TemplatingNodeValidator.prototype = $desc;
    _TemplatingNodeValidator.$__fields__ = ["_templateAttrs", "allowedElements", "allowedAttributes", "allowedUriAttributes", "uriPolicy"];
    function _TemplatingNodeValidator_closure() {
      this.$deferredAction();
    }
    _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
    if (!("name" in _TemplatingNodeValidator_closure))
      _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
    $desc = $collectedClasses$._TemplatingNodeValidator_closure[1];
    _TemplatingNodeValidator_closure.prototype = $desc;
    _TemplatingNodeValidator_closure.$__fields__ = [];
    function _SvgNodeValidator() {
      this.$deferredAction();
    }
    _SvgNodeValidator.builtin$cls = "_SvgNodeValidator";
    if (!("name" in _SvgNodeValidator))
      _SvgNodeValidator.name = "_SvgNodeValidator";
    $desc = $collectedClasses$._SvgNodeValidator[1];
    _SvgNodeValidator.prototype = $desc;
    _SvgNodeValidator.$__fields__ = [];
    function FixedSizeListIterator(_array, _length, _position, _current) {
      this._array = _array;
      this._length = _length;
      this._position = _position;
      this._current = _current;
      this.$deferredAction();
    }
    FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
    if (!("name" in FixedSizeListIterator))
      FixedSizeListIterator.name = "FixedSizeListIterator";
    $desc = $collectedClasses$.FixedSizeListIterator[1];
    FixedSizeListIterator.prototype = $desc;
    FixedSizeListIterator.$__fields__ = ["_array", "_length", "_position", "_current"];
    function _DOMWindowCrossFrame(_window) {
      this._window = _window;
      this.$deferredAction();
    }
    _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
    if (!("name" in _DOMWindowCrossFrame))
      _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
    $desc = $collectedClasses$._DOMWindowCrossFrame[1];
    _DOMWindowCrossFrame.prototype = $desc;
    _DOMWindowCrossFrame.$__fields__ = ["_window"];
    function _LocationCrossFrame(_location) {
      this._location = _location;
      this.$deferredAction();
    }
    _LocationCrossFrame.builtin$cls = "_LocationCrossFrame";
    if (!("name" in _LocationCrossFrame))
      _LocationCrossFrame.name = "_LocationCrossFrame";
    $desc = $collectedClasses$._LocationCrossFrame[1];
    _LocationCrossFrame.prototype = $desc;
    _LocationCrossFrame.$__fields__ = ["_location"];
    function NodeValidator() {
      this.$deferredAction();
    }
    NodeValidator.builtin$cls = "NodeValidator";
    if (!("name" in NodeValidator))
      NodeValidator.name = "NodeValidator";
    $desc = $collectedClasses$.NodeValidator[1];
    NodeValidator.prototype = $desc;
    NodeValidator.$__fields__ = [];
    function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
      this._hiddenAnchor = _hiddenAnchor;
      this._loc = _loc;
      this.$deferredAction();
    }
    _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
    if (!("name" in _SameOriginUriPolicy))
      _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
    $desc = $collectedClasses$._SameOriginUriPolicy[1];
    _SameOriginUriPolicy.prototype = $desc;
    _SameOriginUriPolicy.$__fields__ = ["_hiddenAnchor", "_loc"];
    function _ValidatingTreeSanitizer(validator) {
      this.validator = validator;
      this.$deferredAction();
    }
    _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
    if (!("name" in _ValidatingTreeSanitizer))
      _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
    $desc = $collectedClasses$._ValidatingTreeSanitizer[1];
    _ValidatingTreeSanitizer.prototype = $desc;
    _ValidatingTreeSanitizer.$__fields__ = ["validator"];
    function _ValidatingTreeSanitizer_sanitizeTree_walk(_html$_captured_this_0) {
      this._html$_captured_this_0 = _html$_captured_this_0;
      this.$deferredAction();
    }
    _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
    if (!("name" in _ValidatingTreeSanitizer_sanitizeTree_walk))
      _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
    $desc = $collectedClasses$._ValidatingTreeSanitizer_sanitizeTree_walk[1];
    _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
    _ValidatingTreeSanitizer_sanitizeTree_walk.$__fields__ = ["_html$_captured_this_0"];
    function KeyRange() {
      this.$deferredAction();
    }
    KeyRange.builtin$cls = "KeyRange";
    if (!("name" in KeyRange))
      KeyRange.name = "KeyRange";
    $desc = $collectedClasses$.KeyRange[1];
    KeyRange.prototype = $desc;
    KeyRange.$__fields__ = [];
    function AElement() {
      this.$deferredAction();
    }
    AElement.builtin$cls = "AElement";
    if (!("name" in AElement))
      AElement.name = "AElement";
    $desc = $collectedClasses$.AElement[1];
    AElement.prototype = $desc;
    AElement.$__fields__ = [];
    function AltGlyphElement() {
      this.$deferredAction();
    }
    AltGlyphElement.builtin$cls = "AltGlyphElement";
    if (!("name" in AltGlyphElement))
      AltGlyphElement.name = "AltGlyphElement";
    $desc = $collectedClasses$.AltGlyphElement[1];
    AltGlyphElement.prototype = $desc;
    AltGlyphElement.$__fields__ = [];
    function AnimationElement() {
      this.$deferredAction();
    }
    AnimationElement.builtin$cls = "AnimationElement";
    if (!("name" in AnimationElement))
      AnimationElement.name = "AnimationElement";
    $desc = $collectedClasses$.AnimationElement[1];
    AnimationElement.prototype = $desc;
    AnimationElement.$__fields__ = [];
    function FEBlendElement() {
      this.$deferredAction();
    }
    FEBlendElement.builtin$cls = "FEBlendElement";
    if (!("name" in FEBlendElement))
      FEBlendElement.name = "FEBlendElement";
    $desc = $collectedClasses$.FEBlendElement[1];
    FEBlendElement.prototype = $desc;
    FEBlendElement.$__fields__ = [];
    FEBlendElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEBlendElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEBlendElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEColorMatrixElement() {
      this.$deferredAction();
    }
    FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
    if (!("name" in FEColorMatrixElement))
      FEColorMatrixElement.name = "FEColorMatrixElement";
    $desc = $collectedClasses$.FEColorMatrixElement[1];
    FEColorMatrixElement.prototype = $desc;
    FEColorMatrixElement.$__fields__ = [];
    FEColorMatrixElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    FEColorMatrixElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEColorMatrixElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEColorMatrixElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEComponentTransferElement() {
      this.$deferredAction();
    }
    FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
    if (!("name" in FEComponentTransferElement))
      FEComponentTransferElement.name = "FEComponentTransferElement";
    $desc = $collectedClasses$.FEComponentTransferElement[1];
    FEComponentTransferElement.prototype = $desc;
    FEComponentTransferElement.$__fields__ = [];
    FEComponentTransferElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEComponentTransferElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEComponentTransferElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FECompositeElement() {
      this.$deferredAction();
    }
    FECompositeElement.builtin$cls = "FECompositeElement";
    if (!("name" in FECompositeElement))
      FECompositeElement.name = "FECompositeElement";
    $desc = $collectedClasses$.FECompositeElement[1];
    FECompositeElement.prototype = $desc;
    FECompositeElement.$__fields__ = [];
    FECompositeElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FECompositeElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FECompositeElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEConvolveMatrixElement() {
      this.$deferredAction();
    }
    FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
    if (!("name" in FEConvolveMatrixElement))
      FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
    $desc = $collectedClasses$.FEConvolveMatrixElement[1];
    FEConvolveMatrixElement.prototype = $desc;
    FEConvolveMatrixElement.$__fields__ = [];
    FEConvolveMatrixElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEConvolveMatrixElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEConvolveMatrixElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEDiffuseLightingElement() {
      this.$deferredAction();
    }
    FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
    if (!("name" in FEDiffuseLightingElement))
      FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
    $desc = $collectedClasses$.FEDiffuseLightingElement[1];
    FEDiffuseLightingElement.prototype = $desc;
    FEDiffuseLightingElement.$__fields__ = [];
    FEDiffuseLightingElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEDiffuseLightingElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEDiffuseLightingElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEDisplacementMapElement() {
      this.$deferredAction();
    }
    FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
    if (!("name" in FEDisplacementMapElement))
      FEDisplacementMapElement.name = "FEDisplacementMapElement";
    $desc = $collectedClasses$.FEDisplacementMapElement[1];
    FEDisplacementMapElement.prototype = $desc;
    FEDisplacementMapElement.$__fields__ = [];
    FEDisplacementMapElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEDisplacementMapElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEDisplacementMapElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEFloodElement() {
      this.$deferredAction();
    }
    FEFloodElement.builtin$cls = "FEFloodElement";
    if (!("name" in FEFloodElement))
      FEFloodElement.name = "FEFloodElement";
    $desc = $collectedClasses$.FEFloodElement[1];
    FEFloodElement.prototype = $desc;
    FEFloodElement.$__fields__ = [];
    FEFloodElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEFloodElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEFloodElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEGaussianBlurElement() {
      this.$deferredAction();
    }
    FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
    if (!("name" in FEGaussianBlurElement))
      FEGaussianBlurElement.name = "FEGaussianBlurElement";
    $desc = $collectedClasses$.FEGaussianBlurElement[1];
    FEGaussianBlurElement.prototype = $desc;
    FEGaussianBlurElement.$__fields__ = [];
    FEGaussianBlurElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEGaussianBlurElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEGaussianBlurElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEImageElement() {
      this.$deferredAction();
    }
    FEImageElement.builtin$cls = "FEImageElement";
    if (!("name" in FEImageElement))
      FEImageElement.name = "FEImageElement";
    $desc = $collectedClasses$.FEImageElement[1];
    FEImageElement.prototype = $desc;
    FEImageElement.$__fields__ = [];
    FEImageElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEImageElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEImageElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEMergeElement() {
      this.$deferredAction();
    }
    FEMergeElement.builtin$cls = "FEMergeElement";
    if (!("name" in FEMergeElement))
      FEMergeElement.name = "FEMergeElement";
    $desc = $collectedClasses$.FEMergeElement[1];
    FEMergeElement.prototype = $desc;
    FEMergeElement.$__fields__ = [];
    FEMergeElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEMergeElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEMergeElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEMorphologyElement() {
      this.$deferredAction();
    }
    FEMorphologyElement.builtin$cls = "FEMorphologyElement";
    if (!("name" in FEMorphologyElement))
      FEMorphologyElement.name = "FEMorphologyElement";
    $desc = $collectedClasses$.FEMorphologyElement[1];
    FEMorphologyElement.prototype = $desc;
    FEMorphologyElement.$__fields__ = [];
    FEMorphologyElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEMorphologyElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEMorphologyElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEOffsetElement() {
      this.$deferredAction();
    }
    FEOffsetElement.builtin$cls = "FEOffsetElement";
    if (!("name" in FEOffsetElement))
      FEOffsetElement.name = "FEOffsetElement";
    $desc = $collectedClasses$.FEOffsetElement[1];
    FEOffsetElement.prototype = $desc;
    FEOffsetElement.$__fields__ = [];
    FEOffsetElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FEOffsetElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEOffsetElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FEPointLightElement() {
      this.$deferredAction();
    }
    FEPointLightElement.builtin$cls = "FEPointLightElement";
    if (!("name" in FEPointLightElement))
      FEPointLightElement.name = "FEPointLightElement";
    $desc = $collectedClasses$.FEPointLightElement[1];
    FEPointLightElement.prototype = $desc;
    FEPointLightElement.$__fields__ = [];
    FEPointLightElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FEPointLightElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FESpecularLightingElement() {
      this.$deferredAction();
    }
    FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
    if (!("name" in FESpecularLightingElement))
      FESpecularLightingElement.name = "FESpecularLightingElement";
    $desc = $collectedClasses$.FESpecularLightingElement[1];
    FESpecularLightingElement.prototype = $desc;
    FESpecularLightingElement.$__fields__ = [];
    FESpecularLightingElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FESpecularLightingElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FESpecularLightingElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FESpotLightElement() {
      this.$deferredAction();
    }
    FESpotLightElement.builtin$cls = "FESpotLightElement";
    if (!("name" in FESpotLightElement))
      FESpotLightElement.name = "FESpotLightElement";
    $desc = $collectedClasses$.FESpotLightElement[1];
    FESpotLightElement.prototype = $desc;
    FESpotLightElement.$__fields__ = [];
    FESpotLightElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FESpotLightElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FETileElement() {
      this.$deferredAction();
    }
    FETileElement.builtin$cls = "FETileElement";
    if (!("name" in FETileElement))
      FETileElement.name = "FETileElement";
    $desc = $collectedClasses$.FETileElement[1];
    FETileElement.prototype = $desc;
    FETileElement.$__fields__ = [];
    FETileElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FETileElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FETileElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FETurbulenceElement() {
      this.$deferredAction();
    }
    FETurbulenceElement.builtin$cls = "FETurbulenceElement";
    if (!("name" in FETurbulenceElement))
      FETurbulenceElement.name = "FETurbulenceElement";
    $desc = $collectedClasses$.FETurbulenceElement[1];
    FETurbulenceElement.prototype = $desc;
    FETurbulenceElement.$__fields__ = [];
    FETurbulenceElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    FETurbulenceElement.prototype.get$result = function(receiver) {
      return receiver.result;
    };
    FETurbulenceElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FETurbulenceElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function FilterElement() {
      this.$deferredAction();
    }
    FilterElement.builtin$cls = "FilterElement";
    if (!("name" in FilterElement))
      FilterElement.name = "FilterElement";
    $desc = $collectedClasses$.FilterElement[1];
    FilterElement.prototype = $desc;
    FilterElement.$__fields__ = [];
    FilterElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    FilterElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function ForeignObjectElement() {
      this.$deferredAction();
    }
    ForeignObjectElement.builtin$cls = "ForeignObjectElement";
    if (!("name" in ForeignObjectElement))
      ForeignObjectElement.name = "ForeignObjectElement";
    $desc = $collectedClasses$.ForeignObjectElement[1];
    ForeignObjectElement.prototype = $desc;
    ForeignObjectElement.$__fields__ = [];
    ForeignObjectElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    ForeignObjectElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function GeometryElement() {
      this.$deferredAction();
    }
    GeometryElement.builtin$cls = "GeometryElement";
    if (!("name" in GeometryElement))
      GeometryElement.name = "GeometryElement";
    $desc = $collectedClasses$.GeometryElement[1];
    GeometryElement.prototype = $desc;
    GeometryElement.$__fields__ = [];
    function GraphicsElement() {
      this.$deferredAction();
    }
    GraphicsElement.builtin$cls = "GraphicsElement";
    if (!("name" in GraphicsElement))
      GraphicsElement.name = "GraphicsElement";
    $desc = $collectedClasses$.GraphicsElement[1];
    GraphicsElement.prototype = $desc;
    GraphicsElement.$__fields__ = [];
    function ImageElement0() {
      this.$deferredAction();
    }
    ImageElement0.builtin$cls = "ImageElement0";
    if (!("name" in ImageElement0))
      ImageElement0.name = "ImageElement0";
    $desc = $collectedClasses$.ImageElement0[1];
    ImageElement0.prototype = $desc;
    ImageElement0.$__fields__ = [];
    ImageElement0.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    ImageElement0.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function MarkerElement() {
      this.$deferredAction();
    }
    MarkerElement.builtin$cls = "MarkerElement";
    if (!("name" in MarkerElement))
      MarkerElement.name = "MarkerElement";
    $desc = $collectedClasses$.MarkerElement[1];
    MarkerElement.prototype = $desc;
    MarkerElement.$__fields__ = [];
    function MaskElement() {
      this.$deferredAction();
    }
    MaskElement.builtin$cls = "MaskElement";
    if (!("name" in MaskElement))
      MaskElement.name = "MaskElement";
    $desc = $collectedClasses$.MaskElement[1];
    MaskElement.prototype = $desc;
    MaskElement.$__fields__ = [];
    MaskElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    MaskElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function PatternElement() {
      this.$deferredAction();
    }
    PatternElement.builtin$cls = "PatternElement";
    if (!("name" in PatternElement))
      PatternElement.name = "PatternElement";
    $desc = $collectedClasses$.PatternElement[1];
    PatternElement.prototype = $desc;
    PatternElement.$__fields__ = [];
    PatternElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    PatternElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function RectElement() {
      this.$deferredAction();
    }
    RectElement.builtin$cls = "RectElement";
    if (!("name" in RectElement))
      RectElement.name = "RectElement";
    $desc = $collectedClasses$.RectElement[1];
    RectElement.prototype = $desc;
    RectElement.$__fields__ = [];
    RectElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    RectElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function ScriptElement() {
      this.$deferredAction();
    }
    ScriptElement.builtin$cls = "ScriptElement";
    if (!("name" in ScriptElement))
      ScriptElement.name = "ScriptElement";
    $desc = $collectedClasses$.ScriptElement[1];
    ScriptElement.prototype = $desc;
    ScriptElement.$__fields__ = [];
    ScriptElement.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function StyleElement0() {
      this.$deferredAction();
    }
    StyleElement0.builtin$cls = "StyleElement0";
    if (!("name" in StyleElement0))
      StyleElement0.name = "StyleElement0";
    $desc = $collectedClasses$.StyleElement0[1];
    StyleElement0.prototype = $desc;
    StyleElement0.$__fields__ = [];
    StyleElement0.prototype.get$type = function(receiver) {
      return receiver.type;
    };
    function _AttributeClassSet(_svg$_element) {
      this._svg$_element = _svg$_element;
      this.$deferredAction();
    }
    _AttributeClassSet.builtin$cls = "_AttributeClassSet";
    if (!("name" in _AttributeClassSet))
      _AttributeClassSet.name = "_AttributeClassSet";
    $desc = $collectedClasses$._AttributeClassSet[1];
    _AttributeClassSet.prototype = $desc;
    _AttributeClassSet.$__fields__ = ["_svg$_element"];
    function SvgElement() {
      this.$deferredAction();
    }
    SvgElement.builtin$cls = "SvgElement";
    if (!("name" in SvgElement))
      SvgElement.name = "SvgElement";
    $desc = $collectedClasses$.SvgElement[1];
    SvgElement.prototype = $desc;
    SvgElement.$__fields__ = [];
    function SvgSvgElement() {
      this.$deferredAction();
    }
    SvgSvgElement.builtin$cls = "SvgSvgElement";
    if (!("name" in SvgSvgElement))
      SvgSvgElement.name = "SvgSvgElement";
    $desc = $collectedClasses$.SvgSvgElement[1];
    SvgSvgElement.prototype = $desc;
    SvgSvgElement.$__fields__ = [];
    SvgSvgElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    SvgSvgElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function SymbolElement() {
      this.$deferredAction();
    }
    SymbolElement.builtin$cls = "SymbolElement";
    if (!("name" in SymbolElement))
      SymbolElement.name = "SymbolElement";
    $desc = $collectedClasses$.SymbolElement[1];
    SymbolElement.prototype = $desc;
    SymbolElement.$__fields__ = [];
    function TextContentElement() {
      this.$deferredAction();
    }
    TextContentElement.builtin$cls = "TextContentElement";
    if (!("name" in TextContentElement))
      TextContentElement.name = "TextContentElement";
    $desc = $collectedClasses$.TextContentElement[1];
    TextContentElement.prototype = $desc;
    TextContentElement.$__fields__ = [];
    function TextPathElement() {
      this.$deferredAction();
    }
    TextPathElement.builtin$cls = "TextPathElement";
    if (!("name" in TextPathElement))
      TextPathElement.name = "TextPathElement";
    $desc = $collectedClasses$.TextPathElement[1];
    TextPathElement.prototype = $desc;
    TextPathElement.$__fields__ = [];
    function TextPositioningElement() {
      this.$deferredAction();
    }
    TextPositioningElement.builtin$cls = "TextPositioningElement";
    if (!("name" in TextPositioningElement))
      TextPositioningElement.name = "TextPositioningElement";
    $desc = $collectedClasses$.TextPositioningElement[1];
    TextPositioningElement.prototype = $desc;
    TextPositioningElement.$__fields__ = [];
    TextPositioningElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    TextPositioningElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function UseElement() {
      this.$deferredAction();
    }
    UseElement.builtin$cls = "UseElement";
    if (!("name" in UseElement))
      UseElement.name = "UseElement";
    $desc = $collectedClasses$.UseElement[1];
    UseElement.prototype = $desc;
    UseElement.$__fields__ = [];
    UseElement.prototype.get$x = function(receiver) {
      return receiver.x;
    };
    UseElement.prototype.get$y = function(receiver) {
      return receiver.y;
    };
    function ViewElement() {
      this.$deferredAction();
    }
    ViewElement.builtin$cls = "ViewElement";
    if (!("name" in ViewElement))
      ViewElement.name = "ViewElement";
    $desc = $collectedClasses$.ViewElement[1];
    ViewElement.prototype = $desc;
    ViewElement.$__fields__ = [];
    function _GradientElement() {
      this.$deferredAction();
    }
    _GradientElement.builtin$cls = "_GradientElement";
    if (!("name" in _GradientElement))
      _GradientElement.name = "_GradientElement";
    $desc = $collectedClasses$._GradientElement[1];
    _GradientElement.prototype = $desc;
    _GradientElement.$__fields__ = [];
    function _SVGCursorElement() {
      this.$deferredAction();
    }
    _SVGCursorElement.builtin$cls = "_SVGCursorElement";
    if (!("name" in _SVGCursorElement))
      _SVGCursorElement.name = "_SVGCursorElement";
    $desc = $collectedClasses$._SVGCursorElement[1];
    _SVGCursorElement.prototype = $desc;
    _SVGCursorElement.$__fields__ = [];
    function _SVGFEDropShadowElement() {
      this.$deferredAction();
    }
    _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
    if (!("name" in _SVGFEDropShadowElement))
      _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
    $desc = $collectedClasses$._SVGFEDropShadowElement[1];
    _SVGFEDropShadowElement.prototype = $desc;
    _SVGFEDropShadowElement.$__fields__ = [];
    function _SVGGlyphRefElement() {
      this.$deferredAction();
    }
    _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
    if (!("name" in _SVGGlyphRefElement))
      _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
    $desc = $collectedClasses$._SVGGlyphRefElement[1];
    _SVGGlyphRefElement.prototype = $desc;
    _SVGGlyphRefElement.$__fields__ = [];
    function _SVGMPathElement() {
      this.$deferredAction();
    }
    _SVGMPathElement.builtin$cls = "_SVGMPathElement";
    if (!("name" in _SVGMPathElement))
      _SVGMPathElement.name = "_SVGMPathElement";
    $desc = $collectedClasses$._SVGMPathElement[1];
    _SVGMPathElement.prototype = $desc;
    _SVGMPathElement.$__fields__ = [];
    function SqlError() {
      this.$deferredAction();
    }
    SqlError.builtin$cls = "SqlError";
    if (!("name" in SqlError))
      SqlError.name = "SqlError";
    $desc = $collectedClasses$.SqlError[1];
    SqlError.prototype = $desc;
    SqlError.$__fields__ = [];
    SqlError.prototype.get$message = function(receiver) {
      return receiver.message;
    };
    function Capability() {
      this.$deferredAction();
    }
    Capability.builtin$cls = "Capability";
    if (!("name" in Capability))
      Capability.name = "Capability";
    $desc = $collectedClasses$.Capability[1];
    Capability.prototype = $desc;
    Capability.$__fields__ = [];
    function JsObject(_jsObject) {
      this._jsObject = _jsObject;
      this.$deferredAction();
    }
    JsObject.builtin$cls = "JsObject";
    if (!("name" in JsObject))
      JsObject.name = "JsObject";
    $desc = $collectedClasses$.JsObject[1];
    JsObject.prototype = $desc;
    JsObject.$__fields__ = ["_jsObject"];
    function JsObject__convertDataTree__convert(_captured__convertedObjects_0) {
      this._captured__convertedObjects_0 = _captured__convertedObjects_0;
      this.$deferredAction();
    }
    JsObject__convertDataTree__convert.builtin$cls = "JsObject__convertDataTree__convert";
    if (!("name" in JsObject__convertDataTree__convert))
      JsObject__convertDataTree__convert.name = "JsObject__convertDataTree__convert";
    $desc = $collectedClasses$.JsObject__convertDataTree__convert[1];
    JsObject__convertDataTree__convert.prototype = $desc;
    JsObject__convertDataTree__convert.$__fields__ = ["_captured__convertedObjects_0"];
    function JsFunction(_jsObject) {
      this._jsObject = _jsObject;
      this.$deferredAction();
    }
    JsFunction.builtin$cls = "JsFunction";
    if (!("name" in JsFunction))
      JsFunction.name = "JsFunction";
    $desc = $collectedClasses$.JsFunction[1];
    JsFunction.prototype = $desc;
    JsFunction.$__fields__ = ["_jsObject"];
    function JsArray(_jsObject) {
      this._jsObject = _jsObject;
      this.$deferredAction();
    }
    JsArray.builtin$cls = "JsArray";
    if (!("name" in JsArray))
      JsArray.name = "JsArray";
    $desc = $collectedClasses$.JsArray[1];
    JsArray.prototype = $desc;
    JsArray.$__fields__ = ["_jsObject"];
    function JsObject_ListMixin() {
      this.$deferredAction();
    }
    JsObject_ListMixin.builtin$cls = "JsObject_ListMixin";
    if (!("name" in JsObject_ListMixin))
      JsObject_ListMixin.name = "JsObject_ListMixin";
    $desc = $collectedClasses$.JsObject_ListMixin[1];
    JsObject_ListMixin.prototype = $desc;
    JsObject_ListMixin.$__fields__ = [];
    function _convertToJS_closure() {
      this.$deferredAction();
    }
    _convertToJS_closure.builtin$cls = "_convertToJS_closure";
    if (!("name" in _convertToJS_closure))
      _convertToJS_closure.name = "_convertToJS_closure";
    $desc = $collectedClasses$._convertToJS_closure[1];
    _convertToJS_closure.prototype = $desc;
    _convertToJS_closure.$__fields__ = [];
    function _convertToJS_closure0(_captured_ctor_0) {
      this._captured_ctor_0 = _captured_ctor_0;
      this.$deferredAction();
    }
    _convertToJS_closure0.builtin$cls = "_convertToJS_closure0";
    if (!("name" in _convertToJS_closure0))
      _convertToJS_closure0.name = "_convertToJS_closure0";
    $desc = $collectedClasses$._convertToJS_closure0[1];
    _convertToJS_closure0.prototype = $desc;
    _convertToJS_closure0.$__fields__ = ["_captured_ctor_0"];
    function _wrapToDart_closure() {
      this.$deferredAction();
    }
    _wrapToDart_closure.builtin$cls = "_wrapToDart_closure";
    if (!("name" in _wrapToDart_closure))
      _wrapToDart_closure.name = "_wrapToDart_closure";
    $desc = $collectedClasses$._wrapToDart_closure[1];
    _wrapToDart_closure.prototype = $desc;
    _wrapToDart_closure.$__fields__ = [];
    function _wrapToDart_closure0() {
      this.$deferredAction();
    }
    _wrapToDart_closure0.builtin$cls = "_wrapToDart_closure0";
    if (!("name" in _wrapToDart_closure0))
      _wrapToDart_closure0.name = "_wrapToDart_closure0";
    $desc = $collectedClasses$._wrapToDart_closure0[1];
    _wrapToDart_closure0.prototype = $desc;
    _wrapToDart_closure0.$__fields__ = [];
    function _wrapToDart_closure1() {
      this.$deferredAction();
    }
    _wrapToDart_closure1.builtin$cls = "_wrapToDart_closure1";
    if (!("name" in _wrapToDart_closure1))
      _wrapToDart_closure1.name = "_wrapToDart_closure1";
    $desc = $collectedClasses$._wrapToDart_closure1[1];
    _wrapToDart_closure1.prototype = $desc;
    _wrapToDart_closure1.$__fields__ = [];
    function Point0(x, y) {
      this.x = x;
      this.y = y;
      this.$deferredAction();
    }
    Point0.builtin$cls = "Point0";
    if (!("name" in Point0))
      Point0.name = "Point0";
    $desc = $collectedClasses$.Point0[1];
    Point0.prototype = $desc;
    Point0.$__fields__ = ["x", "y"];
    Point0.prototype.get$x = function(receiver) {
      return this.x;
    };
    Point0.prototype.get$y = function(receiver) {
      return this.y;
    };
    function _RectangleBase() {
      this.$deferredAction();
    }
    _RectangleBase.builtin$cls = "_RectangleBase";
    if (!("name" in _RectangleBase))
      _RectangleBase.name = "_RectangleBase";
    $desc = $collectedClasses$._RectangleBase[1];
    _RectangleBase.prototype = $desc;
    _RectangleBase.$__fields__ = [];
    function Rectangle(left, top, width, height) {
      this.left = left;
      this.top = top;
      this.width = width;
      this.height = height;
      this.$deferredAction();
    }
    Rectangle.builtin$cls = "Rectangle";
    if (!("name" in Rectangle))
      Rectangle.name = "Rectangle";
    $desc = $collectedClasses$.Rectangle[1];
    Rectangle.prototype = $desc;
    Rectangle.$__fields__ = ["left", "top", "width", "height"];
    Rectangle.prototype.get$left = function(receiver) {
      return this.left;
    };
    Rectangle.prototype.get$top = function(receiver) {
      return this.top;
    };
    Rectangle.prototype.get$width = function(receiver) {
      return this.width;
    };
    Rectangle.prototype.get$height = function(receiver) {
      return this.height;
    };
    function MutableRectangle(left, top) {
      this.left = left;
      this.top = top;
      this.$deferredAction();
    }
    MutableRectangle.builtin$cls = "MutableRectangle";
    if (!("name" in MutableRectangle))
      MutableRectangle.name = "MutableRectangle";
    $desc = $collectedClasses$.MutableRectangle[1];
    MutableRectangle.prototype = $desc;
    MutableRectangle.$__fields__ = ["left", "top"];
    MutableRectangle.prototype.get$left = function(receiver) {
      return this.left;
    };
    MutableRectangle.prototype.get$top = function(receiver) {
      return this.top;
    };
    function DefaultEquality() {
      this.$deferredAction();
    }
    DefaultEquality.builtin$cls = "DefaultEquality";
    if (!("name" in DefaultEquality))
      DefaultEquality.name = "DefaultEquality";
    $desc = $collectedClasses$.DefaultEquality[1];
    DefaultEquality.prototype = $desc;
    DefaultEquality.$__fields__ = [];
    function IterableEquality(_elementEquality) {
      this._elementEquality = _elementEquality;
      this.$deferredAction();
    }
    IterableEquality.builtin$cls = "IterableEquality";
    if (!("name" in IterableEquality))
      IterableEquality.name = "IterableEquality";
    $desc = $collectedClasses$.IterableEquality[1];
    IterableEquality.prototype = $desc;
    IterableEquality.$__fields__ = ["_elementEquality"];
    function Uint8List() {
      this.$deferredAction();
    }
    Uint8List.builtin$cls = "Uint8List";
    if (!("name" in Uint8List))
      Uint8List.name = "Uint8List";
    $desc = $collectedClasses$.Uint8List[1];
    Uint8List.prototype = $desc;
    Uint8List.$__fields__ = [];
    function NativeByteBuffer() {
      this.$deferredAction();
    }
    NativeByteBuffer.builtin$cls = "NativeByteBuffer";
    if (!("name" in NativeByteBuffer))
      NativeByteBuffer.name = "NativeByteBuffer";
    $desc = $collectedClasses$.NativeByteBuffer[1];
    NativeByteBuffer.prototype = $desc;
    NativeByteBuffer.$__fields__ = [];
    function NativeTypedData() {
      this.$deferredAction();
    }
    NativeTypedData.builtin$cls = "NativeTypedData";
    if (!("name" in NativeTypedData))
      NativeTypedData.name = "NativeTypedData";
    $desc = $collectedClasses$.NativeTypedData[1];
    NativeTypedData.prototype = $desc;
    NativeTypedData.$__fields__ = [];
    function NativeByteData() {
      this.$deferredAction();
    }
    NativeByteData.builtin$cls = "NativeByteData";
    if (!("name" in NativeByteData))
      NativeByteData.name = "NativeByteData";
    $desc = $collectedClasses$.NativeByteData[1];
    NativeByteData.prototype = $desc;
    NativeByteData.$__fields__ = [];
    function NativeTypedArray() {
      this.$deferredAction();
    }
    NativeTypedArray.builtin$cls = "NativeTypedArray";
    if (!("name" in NativeTypedArray))
      NativeTypedArray.name = "NativeTypedArray";
    $desc = $collectedClasses$.NativeTypedArray[1];
    NativeTypedArray.prototype = $desc;
    NativeTypedArray.$__fields__ = [];
    function NativeTypedArrayOfDouble() {
      this.$deferredAction();
    }
    NativeTypedArrayOfDouble.builtin$cls = "NativeTypedArrayOfDouble";
    if (!("name" in NativeTypedArrayOfDouble))
      NativeTypedArrayOfDouble.name = "NativeTypedArrayOfDouble";
    $desc = $collectedClasses$.NativeTypedArrayOfDouble[1];
    NativeTypedArrayOfDouble.prototype = $desc;
    NativeTypedArrayOfDouble.$__fields__ = [];
    function NativeTypedArray_ListMixin() {
      this.$deferredAction();
    }
    NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
    if (!("name" in NativeTypedArray_ListMixin))
      NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
    $desc = $collectedClasses$.NativeTypedArray_ListMixin[1];
    NativeTypedArray_ListMixin.prototype = $desc;
    NativeTypedArray_ListMixin.$__fields__ = [];
    function NativeTypedArray_ListMixin_FixedLengthListMixin() {
      this.$deferredAction();
    }
    NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
    if (!("name" in NativeTypedArray_ListMixin_FixedLengthListMixin))
      NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
    $desc = $collectedClasses$.NativeTypedArray_ListMixin_FixedLengthListMixin[1];
    NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
    NativeTypedArray_ListMixin_FixedLengthListMixin.$__fields__ = [];
    function NativeTypedArrayOfInt() {
      this.$deferredAction();
    }
    NativeTypedArrayOfInt.builtin$cls = "NativeTypedArrayOfInt";
    if (!("name" in NativeTypedArrayOfInt))
      NativeTypedArrayOfInt.name = "NativeTypedArrayOfInt";
    $desc = $collectedClasses$.NativeTypedArrayOfInt[1];
    NativeTypedArrayOfInt.prototype = $desc;
    NativeTypedArrayOfInt.$__fields__ = [];
    function NativeTypedArray_ListMixin0() {
      this.$deferredAction();
    }
    NativeTypedArray_ListMixin0.builtin$cls = "NativeTypedArray_ListMixin0";
    if (!("name" in NativeTypedArray_ListMixin0))
      NativeTypedArray_ListMixin0.name = "NativeTypedArray_ListMixin0";
    $desc = $collectedClasses$.NativeTypedArray_ListMixin0[1];
    NativeTypedArray_ListMixin0.prototype = $desc;
    NativeTypedArray_ListMixin0.$__fields__ = [];
    function NativeTypedArray_ListMixin_FixedLengthListMixin0() {
      this.$deferredAction();
    }
    NativeTypedArray_ListMixin_FixedLengthListMixin0.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
    if (!("name" in NativeTypedArray_ListMixin_FixedLengthListMixin0))
      NativeTypedArray_ListMixin_FixedLengthListMixin0.name = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
    $desc = $collectedClasses$.NativeTypedArray_ListMixin_FixedLengthListMixin0[1];
    NativeTypedArray_ListMixin_FixedLengthListMixin0.prototype = $desc;
    NativeTypedArray_ListMixin_FixedLengthListMixin0.$__fields__ = [];
    function NativeFloat32List() {
      this.$deferredAction();
    }
    NativeFloat32List.builtin$cls = "NativeFloat32List";
    if (!("name" in NativeFloat32List))
      NativeFloat32List.name = "NativeFloat32List";
    $desc = $collectedClasses$.NativeFloat32List[1];
    NativeFloat32List.prototype = $desc;
    NativeFloat32List.$__fields__ = [];
    function NativeFloat64List() {
      this.$deferredAction();
    }
    NativeFloat64List.builtin$cls = "NativeFloat64List";
    if (!("name" in NativeFloat64List))
      NativeFloat64List.name = "NativeFloat64List";
    $desc = $collectedClasses$.NativeFloat64List[1];
    NativeFloat64List.prototype = $desc;
    NativeFloat64List.$__fields__ = [];
    function NativeInt16List() {
      this.$deferredAction();
    }
    NativeInt16List.builtin$cls = "NativeInt16List";
    if (!("name" in NativeInt16List))
      NativeInt16List.name = "NativeInt16List";
    $desc = $collectedClasses$.NativeInt16List[1];
    NativeInt16List.prototype = $desc;
    NativeInt16List.$__fields__ = [];
    function NativeInt32List() {
      this.$deferredAction();
    }
    NativeInt32List.builtin$cls = "NativeInt32List";
    if (!("name" in NativeInt32List))
      NativeInt32List.name = "NativeInt32List";
    $desc = $collectedClasses$.NativeInt32List[1];
    NativeInt32List.prototype = $desc;
    NativeInt32List.$__fields__ = [];
    function NativeInt8List() {
      this.$deferredAction();
    }
    NativeInt8List.builtin$cls = "NativeInt8List";
    if (!("name" in NativeInt8List))
      NativeInt8List.name = "NativeInt8List";
    $desc = $collectedClasses$.NativeInt8List[1];
    NativeInt8List.prototype = $desc;
    NativeInt8List.$__fields__ = [];
    function NativeUint16List() {
      this.$deferredAction();
    }
    NativeUint16List.builtin$cls = "NativeUint16List";
    if (!("name" in NativeUint16List))
      NativeUint16List.name = "NativeUint16List";
    $desc = $collectedClasses$.NativeUint16List[1];
    NativeUint16List.prototype = $desc;
    NativeUint16List.$__fields__ = [];
    function NativeUint32List() {
      this.$deferredAction();
    }
    NativeUint32List.builtin$cls = "NativeUint32List";
    if (!("name" in NativeUint32List))
      NativeUint32List.name = "NativeUint32List";
    $desc = $collectedClasses$.NativeUint32List[1];
    NativeUint32List.prototype = $desc;
    NativeUint32List.$__fields__ = [];
    function NativeUint8ClampedList() {
      this.$deferredAction();
    }
    NativeUint8ClampedList.builtin$cls = "NativeUint8ClampedList";
    if (!("name" in NativeUint8ClampedList))
      NativeUint8ClampedList.name = "NativeUint8ClampedList";
    $desc = $collectedClasses$.NativeUint8ClampedList[1];
    NativeUint8ClampedList.prototype = $desc;
    NativeUint8ClampedList.$__fields__ = [];
    function NativeUint8List() {
      this.$deferredAction();
    }
    NativeUint8List.builtin$cls = "NativeUint8List";
    if (!("name" in NativeUint8List))
      NativeUint8List.name = "NativeUint8List";
    $desc = $collectedClasses$.NativeUint8List[1];
    NativeUint8List.prototype = $desc;
    NativeUint8List.$__fields__ = [];
    function DartdocHelper(_disposables, _control) {
      this._disposables = _disposables;
      this._control = _control;
      this.$deferredAction();
    }
    DartdocHelper.builtin$cls = "DartdocHelper";
    if (!("name" in DartdocHelper))
      DartdocHelper.name = "DartdocHelper";
    $desc = $collectedClasses$.DartdocHelper[1];
    DartdocHelper.prototype = $desc;
    DartdocHelper.$__fields__ = ["_disposables", "_control"];
    function DartdocHelper_closure(_dartdoc$_captured_this_0) {
      this._dartdoc$_captured_this_0 = _dartdoc$_captured_this_0;
      this.$deferredAction();
    }
    DartdocHelper_closure.builtin$cls = "DartdocHelper_closure";
    if (!("name" in DartdocHelper_closure))
      DartdocHelper_closure.name = "DartdocHelper_closure";
    $desc = $collectedClasses$.DartdocHelper_closure[1];
    DartdocHelper_closure.prototype = $desc;
    DartdocHelper_closure.$__fields__ = ["_dartdoc$_captured_this_0"];
    function DartdocHelper__handleDartdoc_closure(_dartdoc$_captured_this_0, _captured_explicit_1, _dartdoc$_captured_editor_2) {
      this._dartdoc$_captured_this_0 = _dartdoc$_captured_this_0;
      this._captured_explicit_1 = _captured_explicit_1;
      this._dartdoc$_captured_editor_2 = _dartdoc$_captured_editor_2;
      this.$deferredAction();
    }
    DartdocHelper__handleDartdoc_closure.builtin$cls = "DartdocHelper__handleDartdoc_closure";
    if (!("name" in DartdocHelper__handleDartdoc_closure))
      DartdocHelper__handleDartdoc_closure.name = "DartdocHelper__handleDartdoc_closure";
    $desc = $collectedClasses$.DartdocHelper__handleDartdoc_closure[1];
    DartdocHelper__handleDartdoc_closure.prototype = $desc;
    DartdocHelper__handleDartdoc_closure.$__fields__ = ["_dartdoc$_captured_this_0", "_captured_explicit_1", "_dartdoc$_captured_editor_2"];
    function DartdocHelper__render_writeTitle(_captured_buf_0) {
      this._captured_buf_0 = _captured_buf_0;
      this.$deferredAction();
    }
    DartdocHelper__render_writeTitle.builtin$cls = "DartdocHelper__render_writeTitle";
    if (!("name" in DartdocHelper__render_writeTitle))
      DartdocHelper__render_writeTitle.name = "DartdocHelper__render_writeTitle";
    $desc = $collectedClasses$.DartdocHelper__render_writeTitle[1];
    DartdocHelper__render_writeTitle.prototype = $desc;
    DartdocHelper__render_writeTitle.$__fields__ = ["_captured_buf_0"];
    function DartdocHelper__render_closure() {
      this.$deferredAction();
    }
    DartdocHelper__render_closure.builtin$cls = "DartdocHelper__render_closure";
    if (!("name" in DartdocHelper__render_closure))
      DartdocHelper__render_closure.name = "DartdocHelper__render_closure";
    $desc = $collectedClasses$.DartdocHelper__render_closure[1];
    DartdocHelper__render_closure.prototype = $desc;
    DartdocHelper__render_closure.$__fields__ = [];
    function DartdocControl(_cmdDispose, _sub, _titleDiv, _bodyDiv, _footerDiv, element) {
      this._cmdDispose = _cmdDispose;
      this._sub = _sub;
      this._titleDiv = _titleDiv;
      this._bodyDiv = _bodyDiv;
      this._footerDiv = _footerDiv;
      this.element = element;
      this.$deferredAction();
    }
    DartdocControl.builtin$cls = "DartdocControl";
    if (!("name" in DartdocControl))
      DartdocControl.name = "DartdocControl";
    $desc = $collectedClasses$.DartdocControl[1];
    DartdocControl.prototype = $desc;
    DartdocControl.$__fields__ = ["_cmdDispose", "_sub", "_titleDiv", "_bodyDiv", "_footerDiv", "element"];
    function DartdocControl_closure(_dartdoc$_captured_this_0) {
      this._dartdoc$_captured_this_0 = _dartdoc$_captured_this_0;
      this.$deferredAction();
    }
    DartdocControl_closure.builtin$cls = "DartdocControl_closure";
    if (!("name" in DartdocControl_closure))
      DartdocControl_closure.name = "DartdocControl_closure";
    $desc = $collectedClasses$.DartdocControl_closure[1];
    DartdocControl_closure.prototype = $desc;
    DartdocControl_closure.$__fields__ = ["_dartdoc$_captured_this_0"];
    function DartdocControl_closure0(_dartdoc$_captured_this_1) {
      this._dartdoc$_captured_this_1 = _dartdoc$_captured_this_1;
      this.$deferredAction();
    }
    DartdocControl_closure0.builtin$cls = "DartdocControl_closure0";
    if (!("name" in DartdocControl_closure0))
      DartdocControl_closure0.name = "DartdocControl_closure0";
    $desc = $collectedClasses$.DartdocControl_closure0[1];
    DartdocControl_closure0.prototype = $desc;
    DartdocControl_closure0.$__fields__ = ["_dartdoc$_captured_this_1"];
    function EventStream(_frappe$_controller) {
      this._frappe$_controller = _frappe$_controller;
      this.$deferredAction();
    }
    EventStream.builtin$cls = "EventStream";
    if (!("name" in EventStream))
      EventStream.name = "EventStream";
    $desc = $collectedClasses$.EventStream[1];
    EventStream.prototype = $desc;
    EventStream.$__fields__ = ["_frappe$_controller"];
    function EventStream__createControllerForStream_onListen(_frappe$_box_0, _frappe$_captured_this_1, _frappe$_captured_stream_2) {
      this._frappe$_box_0 = _frappe$_box_0;
      this._frappe$_captured_this_1 = _frappe$_captured_this_1;
      this._frappe$_captured_stream_2 = _frappe$_captured_stream_2;
      this.$deferredAction();
    }
    EventStream__createControllerForStream_onListen.builtin$cls = "EventStream__createControllerForStream_onListen";
    if (!("name" in EventStream__createControllerForStream_onListen))
      EventStream__createControllerForStream_onListen.name = "EventStream__createControllerForStream_onListen";
    $desc = $collectedClasses$.EventStream__createControllerForStream_onListen[1];
    EventStream__createControllerForStream_onListen.prototype = $desc;
    EventStream__createControllerForStream_onListen.$__fields__ = ["_frappe$_box_0", "_frappe$_captured_this_1", "_frappe$_captured_stream_2"];
    function EventStream__createControllerForStream_onCancel(_frappe$_box_0) {
      this._frappe$_box_0 = _frappe$_box_0;
      this.$deferredAction();
    }
    EventStream__createControllerForStream_onCancel.builtin$cls = "EventStream__createControllerForStream_onCancel";
    if (!("name" in EventStream__createControllerForStream_onCancel))
      EventStream__createControllerForStream_onCancel.name = "EventStream__createControllerForStream_onCancel";
    $desc = $collectedClasses$.EventStream__createControllerForStream_onCancel[1];
    EventStream__createControllerForStream_onCancel.prototype = $desc;
    EventStream__createControllerForStream_onCancel.$__fields__ = ["_frappe$_box_0"];
    function Property(_frappe$_controller, _hasCurrentValue, _currentValue) {
      this._frappe$_controller = _frappe$_controller;
      this._hasCurrentValue = _hasCurrentValue;
      this._currentValue = _currentValue;
      this.$deferredAction();
    }
    Property.builtin$cls = "Property";
    if (!("name" in Property))
      Property.name = "Property";
    $desc = $collectedClasses$.Property[1];
    Property.prototype = $desc;
    Property.$__fields__ = ["_frappe$_controller", "_hasCurrentValue", "_currentValue"];
    function Property__createControllerForStream_closure() {
      this.$deferredAction();
    }
    Property__createControllerForStream_closure.builtin$cls = "Property__createControllerForStream_closure";
    if (!("name" in Property__createControllerForStream_closure))
      Property__createControllerForStream_closure.name = "Property__createControllerForStream_closure";
    $desc = $collectedClasses$.Property__createControllerForStream_closure[1];
    Property__createControllerForStream_closure.prototype = $desc;
    Property__createControllerForStream_closure.$__fields__ = [];
    function Property__createControllerForStream_onListen(_frappe$_box_0, _frappe$_captured_this_1, _frappe$_captured_input_2) {
      this._frappe$_box_0 = _frappe$_box_0;
      this._frappe$_captured_this_1 = _frappe$_captured_this_1;
      this._frappe$_captured_input_2 = _frappe$_captured_input_2;
      this.$deferredAction();
    }
    Property__createControllerForStream_onListen.builtin$cls = "Property__createControllerForStream_onListen";
    if (!("name" in Property__createControllerForStream_onListen))
      Property__createControllerForStream_onListen.name = "Property__createControllerForStream_onListen";
    $desc = $collectedClasses$.Property__createControllerForStream_onListen[1];
    Property__createControllerForStream_onListen.prototype = $desc;
    Property__createControllerForStream_onListen.$__fields__ = ["_frappe$_box_0", "_frappe$_captured_this_1", "_frappe$_captured_input_2"];
    function Property__createControllerForStream_onListen_closure(_frappe$_captured_this_3) {
      this._frappe$_captured_this_3 = _frappe$_captured_this_3;
      this.$deferredAction();
    }
    Property__createControllerForStream_onListen_closure.builtin$cls = "Property__createControllerForStream_onListen_closure";
    if (!("name" in Property__createControllerForStream_onListen_closure))
      Property__createControllerForStream_onListen_closure.name = "Property__createControllerForStream_onListen_closure";
    $desc = $collectedClasses$.Property__createControllerForStream_onListen_closure[1];
    Property__createControllerForStream_onListen_closure.prototype = $desc;
    Property__createControllerForStream_onListen_closure.$__fields__ = ["_frappe$_captured_this_3"];
    function Property__createControllerForStream_onListen_closure0(_frappe$_captured_this_4) {
      this._frappe$_captured_this_4 = _frappe$_captured_this_4;
      this.$deferredAction();
    }
    Property__createControllerForStream_onListen_closure0.builtin$cls = "Property__createControllerForStream_onListen_closure0";
    if (!("name" in Property__createControllerForStream_onListen_closure0))
      Property__createControllerForStream_onListen_closure0.name = "Property__createControllerForStream_onListen_closure0";
    $desc = $collectedClasses$.Property__createControllerForStream_onListen_closure0[1];
    Property__createControllerForStream_onListen_closure0.prototype = $desc;
    Property__createControllerForStream_onListen_closure0.$__fields__ = ["_frappe$_captured_this_4"];
    function Property__createControllerForStream_onCancel(_frappe$_box_0) {
      this._frappe$_box_0 = _frappe$_box_0;
      this.$deferredAction();
    }
    Property__createControllerForStream_onCancel.builtin$cls = "Property__createControllerForStream_onCancel";
    if (!("name" in Property__createControllerForStream_onCancel))
      Property__createControllerForStream_onCancel.name = "Property__createControllerForStream_onCancel";
    $desc = $collectedClasses$.Property__createControllerForStream_onCancel[1];
    Property__createControllerForStream_onCancel.prototype = $desc;
    Property__createControllerForStream_onCancel.$__fields__ = ["_frappe$_box_0"];
    function Property_listen_closure(_captured_controller_0) {
      this._captured_controller_0 = _captured_controller_0;
      this.$deferredAction();
    }
    Property_listen_closure.builtin$cls = "Property_listen_closure";
    if (!("name" in Property_listen_closure))
      Property_listen_closure.name = "Property_listen_closure";
    $desc = $collectedClasses$.Property_listen_closure[1];
    Property_listen_closure.prototype = $desc;
    Property_listen_closure.$__fields__ = ["_captured_controller_0"];
    function Property_operator$gt_closure() {
      this.$deferredAction();
    }
    Property_operator$gt_closure.builtin$cls = "Property_operator$gt_closure";
    if (!("name" in Property_operator$gt_closure))
      Property_operator$gt_closure.name = "Property_operator$gt_closure";
    $desc = $collectedClasses$.Property_operator$gt_closure[1];
    Property_operator$gt_closure.prototype = $desc;
    Property_operator$gt_closure.$__fields__ = [];
    function Property_operator$ge_closure() {
      this.$deferredAction();
    }
    Property_operator$ge_closure.builtin$cls = "Property_operator$ge_closure";
    if (!("name" in Property_operator$ge_closure))
      Property_operator$ge_closure.name = "Property_operator$ge_closure";
    $desc = $collectedClasses$.Property_operator$ge_closure[1];
    Property_operator$ge_closure.prototype = $desc;
    Property_operator$ge_closure.$__fields__ = [];
    function Property_operator$lt_closure() {
      this.$deferredAction();
    }
    Property_operator$lt_closure.builtin$cls = "Property_operator$lt_closure";
    if (!("name" in Property_operator$lt_closure))
      Property_operator$lt_closure.name = "Property_operator$lt_closure";
    $desc = $collectedClasses$.Property_operator$lt_closure[1];
    Property_operator$lt_closure.prototype = $desc;
    Property_operator$lt_closure.$__fields__ = [];
    function Property_operator$le_closure() {
      this.$deferredAction();
    }
    Property_operator$le_closure.builtin$cls = "Property_operator$le_closure";
    if (!("name" in Property_operator$le_closure))
      Property_operator$le_closure.name = "Property_operator$le_closure";
    $desc = $collectedClasses$.Property_operator$le_closure[1];
    Property_operator$le_closure.prototype = $desc;
    Property_operator$le_closure.$__fields__ = [];
    function Property_operator$add_closure() {
      this.$deferredAction();
    }
    Property_operator$add_closure.builtin$cls = "Property_operator$add_closure";
    if (!("name" in Property_operator$add_closure))
      Property_operator$add_closure.name = "Property_operator$add_closure";
    $desc = $collectedClasses$.Property_operator$add_closure[1];
    Property_operator$add_closure.prototype = $desc;
    Property_operator$add_closure.$__fields__ = [];
    function Property_operator$sub_closure() {
      this.$deferredAction();
    }
    Property_operator$sub_closure.builtin$cls = "Property_operator$sub_closure";
    if (!("name" in Property_operator$sub_closure))
      Property_operator$sub_closure.name = "Property_operator$sub_closure";
    $desc = $collectedClasses$.Property_operator$sub_closure[1];
    Property_operator$sub_closure.prototype = $desc;
    Property_operator$sub_closure.$__fields__ = [];
    function Property_operator$mul_closure() {
      this.$deferredAction();
    }
    Property_operator$mul_closure.builtin$cls = "Property_operator$mul_closure";
    if (!("name" in Property_operator$mul_closure))
      Property_operator$mul_closure.name = "Property_operator$mul_closure";
    $desc = $collectedClasses$.Property_operator$mul_closure[1];
    Property_operator$mul_closure.prototype = $desc;
    Property_operator$mul_closure.$__fields__ = [];
    function Reactable() {
      this.$deferredAction();
    }
    Reactable.builtin$cls = "Reactable";
    if (!("name" in Reactable))
      Reactable.name = "Reactable";
    $desc = $collectedClasses$.Reactable[1];
    Reactable.prototype = $desc;
    Reactable.$__fields__ = [];
    function convertNativeToDart_AcceptStructuredClone_findSlot(_captured_values_0, _captured_copies_1) {
      this._captured_values_0 = _captured_values_0;
      this._captured_copies_1 = _captured_copies_1;
      this.$deferredAction();
    }
    convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
    if (!("name" in convertNativeToDart_AcceptStructuredClone_findSlot))
      convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
    $desc = $collectedClasses$.convertNativeToDart_AcceptStructuredClone_findSlot[1];
    convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
    convertNativeToDart_AcceptStructuredClone_findSlot.$__fields__ = ["_captured_values_0", "_captured_copies_1"];
    function convertNativeToDart_AcceptStructuredClone_readSlot(_captured_copies_2) {
      this._captured_copies_2 = _captured_copies_2;
      this.$deferredAction();
    }
    convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
    if (!("name" in convertNativeToDart_AcceptStructuredClone_readSlot))
      convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
    $desc = $collectedClasses$.convertNativeToDart_AcceptStructuredClone_readSlot[1];
    convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
    convertNativeToDart_AcceptStructuredClone_readSlot.$__fields__ = ["_captured_copies_2"];
    function convertNativeToDart_AcceptStructuredClone_writeSlot(_captured_copies_3) {
      this._captured_copies_3 = _captured_copies_3;
      this.$deferredAction();
    }
    convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
    if (!("name" in convertNativeToDart_AcceptStructuredClone_writeSlot))
      convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
    $desc = $collectedClasses$.convertNativeToDart_AcceptStructuredClone_writeSlot[1];
    convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
    convertNativeToDart_AcceptStructuredClone_writeSlot.$__fields__ = ["_captured_copies_3"];
    function convertNativeToDart_AcceptStructuredClone_walk(_captured_mustCopy_4, _captured_findSlot_5, _captured_readSlot_6, _captured_writeSlot_7) {
      this._captured_mustCopy_4 = _captured_mustCopy_4;
      this._captured_findSlot_5 = _captured_findSlot_5;
      this._captured_readSlot_6 = _captured_readSlot_6;
      this._captured_writeSlot_7 = _captured_writeSlot_7;
      this.$deferredAction();
    }
    convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
    if (!("name" in convertNativeToDart_AcceptStructuredClone_walk))
      convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
    $desc = $collectedClasses$.convertNativeToDart_AcceptStructuredClone_walk[1];
    convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
    convertNativeToDart_AcceptStructuredClone_walk.$__fields__ = ["_captured_mustCopy_4", "_captured_findSlot_5", "_captured_readSlot_6", "_captured_writeSlot_7"];
    function CssClassSetImpl() {
      this.$deferredAction();
    }
    CssClassSetImpl.builtin$cls = "CssClassSetImpl";
    if (!("name" in CssClassSetImpl))
      CssClassSetImpl.name = "CssClassSetImpl";
    $desc = $collectedClasses$.CssClassSetImpl[1];
    CssClassSetImpl.prototype = $desc;
    CssClassSetImpl.$__fields__ = [];
    function CssClassSetImpl_add_closure(_captured_value_0) {
      this._captured_value_0 = _captured_value_0;
      this.$deferredAction();
    }
    CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
    if (!("name" in CssClassSetImpl_add_closure))
      CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
    $desc = $collectedClasses$.CssClassSetImpl_add_closure[1];
    CssClassSetImpl_add_closure.prototype = $desc;
    CssClassSetImpl_add_closure.$__fields__ = ["_captured_value_0"];
    function CssClassSetImpl_addAll_closure(_html_common$_captured_this_0, _captured_iterable_1) {
      this._html_common$_captured_this_0 = _html_common$_captured_this_0;
      this._captured_iterable_1 = _captured_iterable_1;
      this.$deferredAction();
    }
    CssClassSetImpl_addAll_closure.builtin$cls = "CssClassSetImpl_addAll_closure";
    if (!("name" in CssClassSetImpl_addAll_closure))
      CssClassSetImpl_addAll_closure.name = "CssClassSetImpl_addAll_closure";
    $desc = $collectedClasses$.CssClassSetImpl_addAll_closure[1];
    CssClassSetImpl_addAll_closure.prototype = $desc;
    CssClassSetImpl_addAll_closure.$__fields__ = ["_html_common$_captured_this_0", "_captured_iterable_1"];
    function FilteredElementList(_node, _childNodes) {
      this._node = _node;
      this._childNodes = _childNodes;
      this.$deferredAction();
    }
    FilteredElementList.builtin$cls = "FilteredElementList";
    if (!("name" in FilteredElementList))
      FilteredElementList.name = "FilteredElementList";
    $desc = $collectedClasses$.FilteredElementList[1];
    FilteredElementList.prototype = $desc;
    FilteredElementList.$__fields__ = ["_node", "_childNodes"];
    function FilteredElementList__iterable_closure() {
      this.$deferredAction();
    }
    FilteredElementList__iterable_closure.builtin$cls = "FilteredElementList__iterable_closure";
    if (!("name" in FilteredElementList__iterable_closure))
      FilteredElementList__iterable_closure.name = "FilteredElementList__iterable_closure";
    $desc = $collectedClasses$.FilteredElementList__iterable_closure[1];
    FilteredElementList__iterable_closure.prototype = $desc;
    FilteredElementList__iterable_closure.$__fields__ = [];
    function FilteredElementList_removeRange_closure() {
      this.$deferredAction();
    }
    FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
    if (!("name" in FilteredElementList_removeRange_closure))
      FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
    $desc = $collectedClasses$.FilteredElementList_removeRange_closure[1];
    FilteredElementList_removeRange_closure.prototype = $desc;
    FilteredElementList_removeRange_closure.$__fields__ = [];
    function DartLinterConsumer(_errorRepository, _reportingDelay, _provider, _service, _oldIssues, _displayedWarning, Disposables__disposables) {
      this._errorRepository = _errorRepository;
      this._reportingDelay = _reportingDelay;
      this._provider = _provider;
      this._service = _service;
      this._oldIssues = _oldIssues;
      this._displayedWarning = _displayedWarning;
      this.Disposables__disposables = Disposables__disposables;
      this.$deferredAction();
    }
    DartLinterConsumer.builtin$cls = "DartLinterConsumer";
    if (!("name" in DartLinterConsumer))
      DartLinterConsumer.name = "DartLinterConsumer";
    $desc = $collectedClasses$.DartLinterConsumer[1];
    DartLinterConsumer.prototype = $desc;
    DartLinterConsumer.$__fields__ = ["_errorRepository", "_reportingDelay", "_provider", "_service", "_oldIssues", "_displayedWarning", "Disposables__disposables"];
    function LinterConsumer_Disposables() {
      this.$deferredAction();
    }
    LinterConsumer_Disposables.builtin$cls = "LinterConsumer_Disposables";
    if (!("name" in LinterConsumer_Disposables))
      LinterConsumer_Disposables.name = "LinterConsumer_Disposables";
    $desc = $collectedClasses$.LinterConsumer_Disposables[1];
    LinterConsumer_Disposables.prototype = $desc;
    LinterConsumer_Disposables.$__fields__ = [];
    function DartLinterConsumer_closure(_linter$_captured_this_0) {
      this._linter$_captured_this_0 = _linter$_captured_this_0;
      this.$deferredAction();
    }
    DartLinterConsumer_closure.builtin$cls = "DartLinterConsumer_closure";
    if (!("name" in DartLinterConsumer_closure))
      DartLinterConsumer_closure.name = "DartLinterConsumer_closure";
    $desc = $collectedClasses$.DartLinterConsumer_closure[1];
    DartLinterConsumer_closure.prototype = $desc;
    DartLinterConsumer_closure.$__fields__ = ["_linter$_captured_this_0"];
    function DartLinterConsumer_consume_closure(_linter$_captured_this_0) {
      this._linter$_captured_this_0 = _linter$_captured_this_0;
      this.$deferredAction();
    }
    DartLinterConsumer_consume_closure.builtin$cls = "DartLinterConsumer_consume_closure";
    if (!("name" in DartLinterConsumer_consume_closure))
      DartLinterConsumer_consume_closure.name = "DartLinterConsumer_consume_closure";
    $desc = $collectedClasses$.DartLinterConsumer_consume_closure[1];
    DartLinterConsumer_consume_closure.prototype = $desc;
    DartLinterConsumer_consume_closure.$__fields__ = ["_linter$_captured_this_0"];
    function DartLinterConsumer__regenErrors_closure(_linter$_box_0, _linter$_captured_this_1) {
      this._linter$_box_0 = _linter$_box_0;
      this._linter$_captured_this_1 = _linter$_captured_this_1;
      this.$deferredAction();
    }
    DartLinterConsumer__regenErrors_closure.builtin$cls = "DartLinterConsumer__regenErrors_closure";
    if (!("name" in DartLinterConsumer__regenErrors_closure))
      DartLinterConsumer__regenErrors_closure.name = "DartLinterConsumer__regenErrors_closure";
    $desc = $collectedClasses$.DartLinterConsumer__regenErrors_closure[1];
    DartLinterConsumer__regenErrors_closure.prototype = $desc;
    DartLinterConsumer__regenErrors_closure.$__fields__ = ["_linter$_box_0", "_linter$_captured_this_1"];
    function DartLinterConsumer__filter_closure(_captured_showInfos_0, _captured_showTodos_1, _captured_filterUnnamed_2, _captured_filterJavaScript_3) {
      this._captured_showInfos_0 = _captured_showInfos_0;
      this._captured_showTodos_1 = _captured_showTodos_1;
      this._captured_filterUnnamed_2 = _captured_filterUnnamed_2;
      this._captured_filterJavaScript_3 = _captured_filterJavaScript_3;
      this.$deferredAction();
    }
    DartLinterConsumer__filter_closure.builtin$cls = "DartLinterConsumer__filter_closure";
    if (!("name" in DartLinterConsumer__filter_closure))
      DartLinterConsumer__filter_closure.name = "DartLinterConsumer__filter_closure";
    $desc = $collectedClasses$.DartLinterConsumer__filter_closure[1];
    DartLinterConsumer__filter_closure.prototype = $desc;
    DartLinterConsumer__filter_closure.$__fields__ = ["_captured_showInfos_0", "_captured_showTodos_1", "_captured_filterUnnamed_2", "_captured_filterJavaScript_3"];
    function DartLinterConsumer__emit_closure() {
      this.$deferredAction();
    }
    DartLinterConsumer__emit_closure.builtin$cls = "DartLinterConsumer__emit_closure";
    if (!("name" in DartLinterConsumer__emit_closure))
      DartLinterConsumer__emit_closure.name = "DartLinterConsumer__emit_closure";
    $desc = $collectedClasses$.DartLinterConsumer__emit_closure[1];
    DartLinterConsumer__emit_closure.prototype = $desc;
    DartLinterConsumer__emit_closure.$__fields__ = [];
    function DartLinterProvider(grammarScopes, scope, lintOnFly, _key) {
      this.grammarScopes = grammarScopes;
      this.scope = scope;
      this.lintOnFly = lintOnFly;
      this._key = _key;
      this.$deferredAction();
    }
    DartLinterProvider.builtin$cls = "DartLinterProvider";
    if (!("name" in DartLinterProvider))
      DartLinterProvider.name = "DartLinterProvider";
    $desc = $collectedClasses$.DartLinterProvider[1];
    DartLinterProvider.prototype = $desc;
    DartLinterProvider.$__fields__ = ["grammarScopes", "scope", "lintOnFly", "_key"];
    function Logger(name, parent, _level, _children, children, _controller) {
      this.name = name;
      this.parent = parent;
      this._level = _level;
      this._children = _children;
      this.children = children;
      this._controller = _controller;
      this.$deferredAction();
    }
    Logger.builtin$cls = "Logger";
    if (!("name" in Logger))
      Logger.name = "Logger";
    $desc = $collectedClasses$.Logger[1];
    Logger.prototype = $desc;
    Logger.$__fields__ = ["name", "parent", "_level", "_children", "children", "_controller"];
    Logger.prototype.get$name = function(receiver) {
      return this.name;
    };
    Logger.prototype.get$parent = function(receiver) {
      return this.parent;
    };
    Logger.prototype.get$_children = function(receiver) {
      return this._children;
    };
    Logger.prototype.get$children = function(receiver) {
      return this.children;
    };
    function Logger_Logger_closure(_captured_name_0) {
      this._captured_name_0 = _captured_name_0;
      this.$deferredAction();
    }
    Logger_Logger_closure.builtin$cls = "Logger_Logger_closure";
    if (!("name" in Logger_Logger_closure))
      Logger_Logger_closure.name = "Logger_Logger_closure";
    $desc = $collectedClasses$.Logger_Logger_closure[1];
    Logger_Logger_closure.prototype = $desc;
    Logger_Logger_closure.$__fields__ = ["_captured_name_0"];
    function Level(name, value) {
      this.name = name;
      this.value = value;
      this.$deferredAction();
    }
    Level.builtin$cls = "Level";
    if (!("name" in Level))
      Level.name = "Level";
    $desc = $collectedClasses$.Level[1];
    Level.prototype = $desc;
    Level.$__fields__ = ["name", "value"];
    Level.prototype.get$name = function(receiver) {
      return this.name;
    };
    Level.prototype.get$value = function(receiver) {
      return this.value;
    };
    function LogRecord(level, message, loggerName, time, sequenceNumber, error, stackTrace, zone) {
      this.level = level;
      this.message = message;
      this.loggerName = loggerName;
      this.time = time;
      this.sequenceNumber = sequenceNumber;
      this.error = error;
      this.stackTrace = stackTrace;
      this.zone = zone;
      this.$deferredAction();
    }
    LogRecord.builtin$cls = "LogRecord";
    if (!("name" in LogRecord))
      LogRecord.name = "LogRecord";
    $desc = $collectedClasses$.LogRecord[1];
    LogRecord.prototype = $desc;
    LogRecord.$__fields__ = ["level", "message", "loggerName", "time", "sequenceNumber", "error", "stackTrace", "zone"];
    LogRecord.prototype.get$level = function() {
      return this.level;
    };
    LogRecord.prototype.get$message = function(receiver) {
      return this.message;
    };
    LogRecord.prototype.get$error = function(receiver) {
      return this.error;
    };
    LogRecord.prototype.get$stackTrace = function() {
      return this.stackTrace;
    };
    LogRecord.prototype.get$zone = function() {
      return this.zone;
    };
    function Node1() {
      this.$deferredAction();
    }
    Node1.builtin$cls = "Node1";
    if (!("name" in Node1))
      Node1.name = "Node1";
    $desc = $collectedClasses$.Node1[1];
    Node1.prototype = $desc;
    Node1.$__fields__ = [];
    function Element1(tag, children, attributes) {
      this.tag = tag;
      this.children = children;
      this.attributes = attributes;
      this.$deferredAction();
    }
    Element1.builtin$cls = "Element1";
    if (!("name" in Element1))
      Element1.name = "Element1";
    $desc = $collectedClasses$.Element1[1];
    Element1.prototype = $desc;
    Element1.$__fields__ = ["tag", "children", "attributes"];
    Element1.prototype.get$children = function(receiver) {
      return this.children;
    };
    Element1.prototype.get$attributes = function(receiver) {
      return this.attributes;
    };
    function Text(text) {
      this.text = text;
      this.$deferredAction();
    }
    Text.builtin$cls = "Text";
    if (!("name" in Text))
      Text.name = "Text";
    $desc = $collectedClasses$.Text[1];
    Text.prototype = $desc;
    Text.$__fields__ = ["text"];
    Text.prototype.get$text = function(receiver) {
      return this.text;
    };
    function BlockParser(lines, document, _pos) {
      this.lines = lines;
      this.document = document;
      this._pos = _pos;
      this.$deferredAction();
    }
    BlockParser.builtin$cls = "BlockParser";
    if (!("name" in BlockParser))
      BlockParser.name = "BlockParser";
    $desc = $collectedClasses$.BlockParser[1];
    BlockParser.prototype = $desc;
    BlockParser.$__fields__ = ["lines", "document", "_pos"];
    BlockParser.prototype.get$document = function(receiver) {
      return this.document;
    };
    function BlockSyntax() {
      this.$deferredAction();
    }
    BlockSyntax.builtin$cls = "BlockSyntax";
    if (!("name" in BlockSyntax))
      BlockSyntax.name = "BlockSyntax";
    $desc = $collectedClasses$.BlockSyntax[1];
    BlockSyntax.prototype = $desc;
    BlockSyntax.$__fields__ = [];
    function BlockSyntax_isAtBlockEnd_closure(_captured_parser_0) {
      this._captured_parser_0 = _captured_parser_0;
      this.$deferredAction();
    }
    BlockSyntax_isAtBlockEnd_closure.builtin$cls = "BlockSyntax_isAtBlockEnd_closure";
    if (!("name" in BlockSyntax_isAtBlockEnd_closure))
      BlockSyntax_isAtBlockEnd_closure.name = "BlockSyntax_isAtBlockEnd_closure";
    $desc = $collectedClasses$.BlockSyntax_isAtBlockEnd_closure[1];
    BlockSyntax_isAtBlockEnd_closure.prototype = $desc;
    BlockSyntax_isAtBlockEnd_closure.$__fields__ = ["_captured_parser_0"];
    function EmptyBlockSyntax() {
      this.$deferredAction();
    }
    EmptyBlockSyntax.builtin$cls = "EmptyBlockSyntax";
    if (!("name" in EmptyBlockSyntax))
      EmptyBlockSyntax.name = "EmptyBlockSyntax";
    $desc = $collectedClasses$.EmptyBlockSyntax[1];
    EmptyBlockSyntax.prototype = $desc;
    EmptyBlockSyntax.$__fields__ = [];
    function SetextHeaderSyntax() {
      this.$deferredAction();
    }
    SetextHeaderSyntax.builtin$cls = "SetextHeaderSyntax";
    if (!("name" in SetextHeaderSyntax))
      SetextHeaderSyntax.name = "SetextHeaderSyntax";
    $desc = $collectedClasses$.SetextHeaderSyntax[1];
    SetextHeaderSyntax.prototype = $desc;
    SetextHeaderSyntax.$__fields__ = [];
    function HeaderSyntax() {
      this.$deferredAction();
    }
    HeaderSyntax.builtin$cls = "HeaderSyntax";
    if (!("name" in HeaderSyntax))
      HeaderSyntax.name = "HeaderSyntax";
    $desc = $collectedClasses$.HeaderSyntax[1];
    HeaderSyntax.prototype = $desc;
    HeaderSyntax.$__fields__ = [];
    function BlockquoteSyntax() {
      this.$deferredAction();
    }
    BlockquoteSyntax.builtin$cls = "BlockquoteSyntax";
    if (!("name" in BlockquoteSyntax))
      BlockquoteSyntax.name = "BlockquoteSyntax";
    $desc = $collectedClasses$.BlockquoteSyntax[1];
    BlockquoteSyntax.prototype = $desc;
    BlockquoteSyntax.$__fields__ = [];
    function CodeBlockSyntax() {
      this.$deferredAction();
    }
    CodeBlockSyntax.builtin$cls = "CodeBlockSyntax";
    if (!("name" in CodeBlockSyntax))
      CodeBlockSyntax.name = "CodeBlockSyntax";
    $desc = $collectedClasses$.CodeBlockSyntax[1];
    CodeBlockSyntax.prototype = $desc;
    CodeBlockSyntax.$__fields__ = [];
    function FencedCodeBlockSyntax() {
      this.$deferredAction();
    }
    FencedCodeBlockSyntax.builtin$cls = "FencedCodeBlockSyntax";
    if (!("name" in FencedCodeBlockSyntax))
      FencedCodeBlockSyntax.name = "FencedCodeBlockSyntax";
    $desc = $collectedClasses$.FencedCodeBlockSyntax[1];
    FencedCodeBlockSyntax.prototype = $desc;
    FencedCodeBlockSyntax.$__fields__ = [];
    function HorizontalRuleSyntax() {
      this.$deferredAction();
    }
    HorizontalRuleSyntax.builtin$cls = "HorizontalRuleSyntax";
    if (!("name" in HorizontalRuleSyntax))
      HorizontalRuleSyntax.name = "HorizontalRuleSyntax";
    $desc = $collectedClasses$.HorizontalRuleSyntax[1];
    HorizontalRuleSyntax.prototype = $desc;
    HorizontalRuleSyntax.$__fields__ = [];
    function BlockHtmlSyntax() {
      this.$deferredAction();
    }
    BlockHtmlSyntax.builtin$cls = "BlockHtmlSyntax";
    if (!("name" in BlockHtmlSyntax))
      BlockHtmlSyntax.name = "BlockHtmlSyntax";
    $desc = $collectedClasses$.BlockHtmlSyntax[1];
    BlockHtmlSyntax.prototype = $desc;
    BlockHtmlSyntax.$__fields__ = [];
    function ListItem(forceBlock, lines) {
      this.forceBlock = forceBlock;
      this.lines = lines;
      this.$deferredAction();
    }
    ListItem.builtin$cls = "ListItem";
    if (!("name" in ListItem))
      ListItem.name = "ListItem";
    $desc = $collectedClasses$.ListItem[1];
    ListItem.prototype = $desc;
    ListItem.$__fields__ = ["forceBlock", "lines"];
    function ListSyntax() {
      this.$deferredAction();
    }
    ListSyntax.builtin$cls = "ListSyntax";
    if (!("name" in ListSyntax))
      ListSyntax.name = "ListSyntax";
    $desc = $collectedClasses$.ListSyntax[1];
    ListSyntax.prototype = $desc;
    ListSyntax.$__fields__ = [];
    function ListSyntax_parse_endItem(_block_parser$_box_0, _captured_items_1) {
      this._block_parser$_box_0 = _block_parser$_box_0;
      this._captured_items_1 = _captured_items_1;
      this.$deferredAction();
    }
    ListSyntax_parse_endItem.builtin$cls = "ListSyntax_parse_endItem";
    if (!("name" in ListSyntax_parse_endItem))
      ListSyntax_parse_endItem.name = "ListSyntax_parse_endItem";
    $desc = $collectedClasses$.ListSyntax_parse_endItem[1];
    ListSyntax_parse_endItem.prototype = $desc;
    ListSyntax_parse_endItem.$__fields__ = ["_block_parser$_box_0", "_captured_items_1"];
    function ListSyntax_parse_tryMatch(_block_parser$_box_0, _captured_parser_2) {
      this._block_parser$_box_0 = _block_parser$_box_0;
      this._captured_parser_2 = _captured_parser_2;
      this.$deferredAction();
    }
    ListSyntax_parse_tryMatch.builtin$cls = "ListSyntax_parse_tryMatch";
    if (!("name" in ListSyntax_parse_tryMatch))
      ListSyntax_parse_tryMatch.name = "ListSyntax_parse_tryMatch";
    $desc = $collectedClasses$.ListSyntax_parse_tryMatch[1];
    ListSyntax_parse_tryMatch.prototype = $desc;
    ListSyntax_parse_tryMatch.$__fields__ = ["_block_parser$_box_0", "_captured_parser_2"];
    function UnorderedListSyntax() {
      this.$deferredAction();
    }
    UnorderedListSyntax.builtin$cls = "UnorderedListSyntax";
    if (!("name" in UnorderedListSyntax))
      UnorderedListSyntax.name = "UnorderedListSyntax";
    $desc = $collectedClasses$.UnorderedListSyntax[1];
    UnorderedListSyntax.prototype = $desc;
    UnorderedListSyntax.$__fields__ = [];
    function OrderedListSyntax() {
      this.$deferredAction();
    }
    OrderedListSyntax.builtin$cls = "OrderedListSyntax";
    if (!("name" in OrderedListSyntax))
      OrderedListSyntax.name = "OrderedListSyntax";
    $desc = $collectedClasses$.OrderedListSyntax[1];
    OrderedListSyntax.prototype = $desc;
    OrderedListSyntax.$__fields__ = [];
    function ParagraphSyntax() {
      this.$deferredAction();
    }
    ParagraphSyntax.builtin$cls = "ParagraphSyntax";
    if (!("name" in ParagraphSyntax))
      ParagraphSyntax.name = "ParagraphSyntax";
    $desc = $collectedClasses$.ParagraphSyntax[1];
    ParagraphSyntax.prototype = $desc;
    ParagraphSyntax.$__fields__ = [];
    function Document(refLinks, inlineSyntaxes, linkResolver, imageLinkResolver) {
      this.refLinks = refLinks;
      this.inlineSyntaxes = inlineSyntaxes;
      this.linkResolver = linkResolver;
      this.imageLinkResolver = imageLinkResolver;
      this.$deferredAction();
    }
    Document.builtin$cls = "Document";
    if (!("name" in Document))
      Document.name = "Document";
    $desc = $collectedClasses$.Document[1];
    Document.prototype = $desc;
    Document.$__fields__ = ["refLinks", "inlineSyntaxes", "linkResolver", "imageLinkResolver"];
    Document.prototype.get$refLinks = function() {
      return this.refLinks;
    };
    function Link(id, url, title) {
      this.id = id;
      this.url = url;
      this.title = title;
      this.$deferredAction();
    }
    Link.builtin$cls = "Link";
    if (!("name" in Link))
      Link.name = "Link";
    $desc = $collectedClasses$.Link[1];
    Link.prototype = $desc;
    Link.$__fields__ = ["id", "url", "title"];
    Link.prototype.get$id = function(receiver) {
      return this.id;
    };
    function HtmlRenderer(buffer) {
      this.buffer = buffer;
      this.$deferredAction();
    }
    HtmlRenderer.builtin$cls = "HtmlRenderer";
    if (!("name" in HtmlRenderer))
      HtmlRenderer.name = "HtmlRenderer";
    $desc = $collectedClasses$.HtmlRenderer[1];
    HtmlRenderer.prototype = $desc;
    HtmlRenderer.$__fields__ = ["buffer"];
    function HtmlRenderer_visitElementBefore_closure() {
      this.$deferredAction();
    }
    HtmlRenderer_visitElementBefore_closure.builtin$cls = "HtmlRenderer_visitElementBefore_closure";
    if (!("name" in HtmlRenderer_visitElementBefore_closure))
      HtmlRenderer_visitElementBefore_closure.name = "HtmlRenderer_visitElementBefore_closure";
    $desc = $collectedClasses$.HtmlRenderer_visitElementBefore_closure[1];
    HtmlRenderer_visitElementBefore_closure.prototype = $desc;
    HtmlRenderer_visitElementBefore_closure.$__fields__ = [];
    function InlineParser(source, document, syntaxes, pos, start, _stack) {
      this.source = source;
      this.document = document;
      this.syntaxes = syntaxes;
      this.pos = pos;
      this.start = start;
      this._stack = _stack;
      this.$deferredAction();
    }
    InlineParser.builtin$cls = "InlineParser";
    if (!("name" in InlineParser))
      InlineParser.name = "InlineParser";
    $desc = $collectedClasses$.InlineParser[1];
    InlineParser.prototype = $desc;
    InlineParser.$__fields__ = ["source", "document", "syntaxes", "pos", "start", "_stack"];
    InlineParser.prototype.get$source = function(receiver) {
      return this.source;
    };
    InlineParser.prototype.get$document = function(receiver) {
      return this.document;
    };
    InlineParser.prototype.get$pos = function() {
      return this.pos;
    };
    InlineParser.prototype.set$start = function(receiver, v) {
      return this.start = v;
    };
    InlineParser.prototype.get$_stack = function() {
      return this._stack;
    };
    function InlineSyntax() {
      this.$deferredAction();
    }
    InlineSyntax.builtin$cls = "InlineSyntax";
    if (!("name" in InlineSyntax))
      InlineSyntax.name = "InlineSyntax";
    $desc = $collectedClasses$.InlineSyntax[1];
    InlineSyntax.prototype = $desc;
    InlineSyntax.$__fields__ = [];
    function TextSyntax(substitute, pattern) {
      this.substitute = substitute;
      this.pattern = pattern;
      this.$deferredAction();
    }
    TextSyntax.builtin$cls = "TextSyntax";
    if (!("name" in TextSyntax))
      TextSyntax.name = "TextSyntax";
    $desc = $collectedClasses$.TextSyntax[1];
    TextSyntax.prototype = $desc;
    TextSyntax.$__fields__ = ["substitute", "pattern"];
    function AutolinkSyntax(pattern) {
      this.pattern = pattern;
      this.$deferredAction();
    }
    AutolinkSyntax.builtin$cls = "AutolinkSyntax";
    if (!("name" in AutolinkSyntax))
      AutolinkSyntax.name = "AutolinkSyntax";
    $desc = $collectedClasses$.AutolinkSyntax[1];
    AutolinkSyntax.prototype = $desc;
    AutolinkSyntax.$__fields__ = ["pattern"];
    function TagSyntax(endPattern, tag, pattern) {
      this.endPattern = endPattern;
      this.tag = tag;
      this.pattern = pattern;
      this.$deferredAction();
    }
    TagSyntax.builtin$cls = "TagSyntax";
    if (!("name" in TagSyntax))
      TagSyntax.name = "TagSyntax";
    $desc = $collectedClasses$.TagSyntax[1];
    TagSyntax.prototype = $desc;
    TagSyntax.$__fields__ = ["endPattern", "tag", "pattern"];
    function LinkSyntax(linkResolver, resolved, endPattern, tag, pattern) {
      this.linkResolver = linkResolver;
      this.resolved = resolved;
      this.endPattern = endPattern;
      this.tag = tag;
      this.pattern = pattern;
      this.$deferredAction();
    }
    LinkSyntax.builtin$cls = "LinkSyntax";
    if (!("name" in LinkSyntax))
      LinkSyntax.name = "LinkSyntax";
    $desc = $collectedClasses$.LinkSyntax[1];
    LinkSyntax.prototype = $desc;
    LinkSyntax.$__fields__ = ["linkResolver", "resolved", "endPattern", "tag", "pattern"];
    LinkSyntax.prototype.get$linkResolver = function() {
      return this.linkResolver;
    };
    function LinkSyntax_createNode_closure() {
      this.$deferredAction();
    }
    LinkSyntax_createNode_closure.builtin$cls = "LinkSyntax_createNode_closure";
    if (!("name" in LinkSyntax_createNode_closure))
      LinkSyntax_createNode_closure.name = "LinkSyntax_createNode_closure";
    $desc = $collectedClasses$.LinkSyntax_createNode_closure[1];
    LinkSyntax_createNode_closure.prototype = $desc;
    LinkSyntax_createNode_closure.$__fields__ = [];
    function LinkSyntax_createNode_closure0() {
      this.$deferredAction();
    }
    LinkSyntax_createNode_closure0.builtin$cls = "LinkSyntax_createNode_closure0";
    if (!("name" in LinkSyntax_createNode_closure0))
      LinkSyntax_createNode_closure0.name = "LinkSyntax_createNode_closure0";
    $desc = $collectedClasses$.LinkSyntax_createNode_closure0[1];
    LinkSyntax_createNode_closure0.prototype = $desc;
    LinkSyntax_createNode_closure0.$__fields__ = [];
    function ImageLinkSyntax(ImageLinkSyntax_linkResolver, linkResolver, resolved, endPattern, tag, pattern) {
      this.ImageLinkSyntax_linkResolver = ImageLinkSyntax_linkResolver;
      this.linkResolver = linkResolver;
      this.resolved = resolved;
      this.endPattern = endPattern;
      this.tag = tag;
      this.pattern = pattern;
      this.$deferredAction();
    }
    ImageLinkSyntax.builtin$cls = "ImageLinkSyntax";
    if (!("name" in ImageLinkSyntax))
      ImageLinkSyntax.name = "ImageLinkSyntax";
    $desc = $collectedClasses$.ImageLinkSyntax[1];
    ImageLinkSyntax.prototype = $desc;
    ImageLinkSyntax.$__fields__ = ["ImageLinkSyntax_linkResolver", "linkResolver", "resolved", "endPattern", "tag", "pattern"];
    ImageLinkSyntax.prototype.get$linkResolver = function() {
      return this.ImageLinkSyntax_linkResolver;
    };
    function ImageLinkSyntax_createNode_closure() {
      this.$deferredAction();
    }
    ImageLinkSyntax_createNode_closure.builtin$cls = "ImageLinkSyntax_createNode_closure";
    if (!("name" in ImageLinkSyntax_createNode_closure))
      ImageLinkSyntax_createNode_closure.name = "ImageLinkSyntax_createNode_closure";
    $desc = $collectedClasses$.ImageLinkSyntax_createNode_closure[1];
    ImageLinkSyntax_createNode_closure.prototype = $desc;
    ImageLinkSyntax_createNode_closure.$__fields__ = [];
    function CodeSyntax(pattern) {
      this.pattern = pattern;
      this.$deferredAction();
    }
    CodeSyntax.builtin$cls = "CodeSyntax";
    if (!("name" in CodeSyntax))
      CodeSyntax.name = "CodeSyntax";
    $desc = $collectedClasses$.CodeSyntax[1];
    CodeSyntax.prototype = $desc;
    CodeSyntax.$__fields__ = ["pattern"];
    function TagState(startPos, endPos, syntax, children) {
      this.startPos = startPos;
      this.endPos = endPos;
      this.syntax = syntax;
      this.children = children;
      this.$deferredAction();
    }
    TagState.builtin$cls = "TagState";
    if (!("name" in TagState))
      TagState.name = "TagState";
    $desc = $collectedClasses$.TagState[1];
    TagState.prototype = $desc;
    TagState.$__fields__ = ["startPos", "endPos", "syntax", "children"];
    TagState.prototype.get$startPos = function() {
      return this.startPos;
    };
    TagState.prototype.get$endPos = function() {
      return this.endPos;
    };
    TagState.prototype.get$children = function(receiver) {
      return this.children;
    };
    function cleanMap_closure(_captured_map_0) {
      this._captured_map_0 = _captured_map_0;
      this.$deferredAction();
    }
    cleanMap_closure.builtin$cls = "cleanMap_closure";
    if (!("name" in cleanMap_closure))
      cleanMap_closure.name = "cleanMap_closure";
    $desc = $collectedClasses$.cleanMap_closure[1];
    cleanMap_closure.prototype = $desc;
    cleanMap_closure.$__fields__ = ["_captured_map_0"];
    function Version(major, minor, patch, preRelease, build, _text) {
      this.major = major;
      this.minor = minor;
      this.patch = patch;
      this.preRelease = preRelease;
      this.build = build;
      this._text = _text;
      this.$deferredAction();
    }
    Version.builtin$cls = "Version";
    if (!("name" in Version))
      Version.name = "Version";
    $desc = $collectedClasses$.Version[1];
    Version.prototype = $desc;
    Version.$__fields__ = ["major", "minor", "patch", "preRelease", "build", "_text"];
    Version.prototype.get$major = function() {
      return this.major;
    };
    Version.prototype.get$minor = function() {
      return this.minor;
    };
    Version.prototype.get$patch = function() {
      return this.patch;
    };
    Version.prototype.get$preRelease = function() {
      return this.preRelease;
    };
    Version.prototype.get$build = function() {
      return this.build;
    };
    function Version__splitParts_closure() {
      this.$deferredAction();
    }
    Version__splitParts_closure.builtin$cls = "Version__splitParts_closure";
    if (!("name" in Version__splitParts_closure))
      Version__splitParts_closure.name = "Version__splitParts_closure";
    $desc = $collectedClasses$.Version__splitParts_closure[1];
    Version__splitParts_closure.prototype = $desc;
    Version__splitParts_closure.$__fields__ = [];
    function Combine(_other, _combiner) {
      this._other = _other;
      this._combiner = _combiner;
      this.$deferredAction();
    }
    Combine.builtin$cls = "Combine";
    if (!("name" in Combine))
      Combine.name = "Combine";
    $desc = $collectedClasses$.Combine[1];
    Combine.prototype = $desc;
    Combine.$__fields__ = ["_other", "_combiner"];
    function Combine_all_closure(_captured_streams_0) {
      this._captured_streams_0 = _captured_streams_0;
      this.$deferredAction();
    }
    Combine_all_closure.builtin$cls = "Combine_all_closure";
    if (!("name" in Combine_all_closure))
      Combine_all_closure.name = "Combine_all_closure";
    $desc = $collectedClasses$.Combine_all_closure[1];
    Combine_all_closure.prototype = $desc;
    Combine_all_closure.$__fields__ = ["_captured_streams_0"];
    function Combine_all__closure() {
      this.$deferredAction();
    }
    Combine_all__closure.builtin$cls = "Combine_all__closure";
    if (!("name" in Combine_all__closure))
      Combine_all__closure.name = "Combine_all__closure";
    $desc = $collectedClasses$.Combine_all__closure[1];
    Combine_all__closure.prototype = $desc;
    Combine_all__closure.$__fields__ = [];
    function Combine_all___closure0(_captured_stream_1) {
      this._captured_stream_1 = _captured_stream_1;
      this.$deferredAction();
    }
    Combine_all___closure0.builtin$cls = "Combine_all___closure0";
    if (!("name" in Combine_all___closure0))
      Combine_all___closure0.name = "Combine_all___closure0";
    $desc = $collectedClasses$.Combine_all___closure0[1];
    Combine_all___closure0.prototype = $desc;
    Combine_all___closure0.$__fields__ = ["_captured_stream_1"];
    function Combine_all__closure0() {
      this.$deferredAction();
    }
    Combine_all__closure0.builtin$cls = "Combine_all__closure0";
    if (!("name" in Combine_all__closure0))
      Combine_all__closure0.name = "Combine_all__closure0";
    $desc = $collectedClasses$.Combine_all__closure0[1];
    Combine_all__closure0.prototype = $desc;
    Combine_all__closure0.$__fields__ = [];
    function Combine_all__closure1(_captured_streams_2) {
      this._captured_streams_2 = _captured_streams_2;
      this.$deferredAction();
    }
    Combine_all__closure1.builtin$cls = "Combine_all__closure1";
    if (!("name" in Combine_all__closure1))
      Combine_all__closure1.name = "Combine_all__closure1";
    $desc = $collectedClasses$.Combine_all__closure1[1];
    Combine_all__closure1.prototype = $desc;
    Combine_all__closure1.$__fields__ = ["_captured_streams_2"];
    function Combine_all__closure2(_captured_streams_3) {
      this._captured_streams_3 = _captured_streams_3;
      this.$deferredAction();
    }
    Combine_all__closure2.builtin$cls = "Combine_all__closure2";
    if (!("name" in Combine_all__closure2))
      Combine_all__closure2.name = "Combine_all__closure2";
    $desc = $collectedClasses$.Combine_all__closure2[1];
    Combine_all__closure2.prototype = $desc;
    Combine_all__closure2.$__fields__ = ["_captured_streams_3"];
    function Combine_all___closure(_captured_values_4) {
      this._captured_values_4 = _captured_values_4;
      this.$deferredAction();
    }
    Combine_all___closure.builtin$cls = "Combine_all___closure";
    if (!("name" in Combine_all___closure))
      Combine_all___closure.name = "Combine_all___closure";
    $desc = $collectedClasses$.Combine_all___closure[1];
    Combine_all___closure.prototype = $desc;
    Combine_all___closure.$__fields__ = ["_captured_values_4"];
    function Combine_all__closure3(_captured_sink_5) {
      this._captured_sink_5 = _captured_sink_5;
      this.$deferredAction();
    }
    Combine_all__closure3.builtin$cls = "Combine_all__closure3";
    if (!("name" in Combine_all__closure3))
      Combine_all__closure3.name = "Combine_all__closure3";
    $desc = $collectedClasses$.Combine_all__closure3[1];
    Combine_all__closure3.prototype = $desc;
    Combine_all__closure3.$__fields__ = ["_captured_sink_5"];
    function Combine_bind_closure(_stream_transformers$_captured_this_0, _captured_stream_1) {
      this._stream_transformers$_captured_this_0 = _stream_transformers$_captured_this_0;
      this._captured_stream_1 = _captured_stream_1;
      this.$deferredAction();
    }
    Combine_bind_closure.builtin$cls = "Combine_bind_closure";
    if (!("name" in Combine_bind_closure))
      Combine_bind_closure.name = "Combine_bind_closure";
    $desc = $collectedClasses$.Combine_bind_closure[1];
    Combine_bind_closure.prototype = $desc;
    Combine_bind_closure.$__fields__ = ["_stream_transformers$_captured_this_0", "_captured_stream_1"];
    function Combine_bind__closure(_stream_transformers$_captured_this_2, _captured_sink_3) {
      this._stream_transformers$_captured_this_2 = _stream_transformers$_captured_this_2;
      this._captured_sink_3 = _captured_sink_3;
      this.$deferredAction();
    }
    Combine_bind__closure.builtin$cls = "Combine_bind__closure";
    if (!("name" in Combine_bind__closure))
      Combine_bind__closure.name = "Combine_bind__closure";
    $desc = $collectedClasses$.Combine_bind__closure[1];
    Combine_bind__closure.prototype = $desc;
    Combine_bind__closure.$__fields__ = ["_stream_transformers$_captured_this_2", "_captured_sink_3"];
    function Debounce(_stream_transformers$_duration) {
      this._stream_transformers$_duration = _stream_transformers$_duration;
      this.$deferredAction();
    }
    Debounce.builtin$cls = "Debounce";
    if (!("name" in Debounce))
      Debounce.name = "Debounce";
    $desc = $collectedClasses$.Debounce[1];
    Debounce.prototype = $desc;
    Debounce.$__fields__ = ["_stream_transformers$_duration"];
    function Debounce_bind_closure(_stream_transformers$_captured_this_0) {
      this._stream_transformers$_captured_this_0 = _stream_transformers$_captured_this_0;
      this.$deferredAction();
    }
    Debounce_bind_closure.builtin$cls = "Debounce_bind_closure";
    if (!("name" in Debounce_bind_closure))
      Debounce_bind_closure.name = "Debounce_bind_closure";
    $desc = $collectedClasses$.Debounce_bind_closure[1];
    Debounce_bind_closure.prototype = $desc;
    Debounce_bind_closure.$__fields__ = ["_stream_transformers$_captured_this_0"];
    function Debounce_bind__closure(_stream_transformers$_captured_value_1) {
      this._stream_transformers$_captured_value_1 = _stream_transformers$_captured_value_1;
      this.$deferredAction();
    }
    Debounce_bind__closure.builtin$cls = "Debounce_bind__closure";
    if (!("name" in Debounce_bind__closure))
      Debounce_bind__closure.name = "Debounce_bind__closure";
    $desc = $collectedClasses$.Debounce_bind__closure[1];
    Debounce_bind__closure.prototype = $desc;
    Debounce_bind__closure.$__fields__ = ["_stream_transformers$_captured_value_1"];
    function FlatMap(_convert) {
      this._convert = _convert;
      this.$deferredAction();
    }
    FlatMap.builtin$cls = "FlatMap";
    if (!("name" in FlatMap))
      FlatMap.name = "FlatMap";
    $desc = $collectedClasses$.FlatMap[1];
    FlatMap.prototype = $desc;
    FlatMap.$__fields__ = ["_convert"];
    function FlatMap_bind_onListen(_captured_this_1, _captured_stream_2, _captured_subscriptions_3) {
      this._captured_this_1 = _captured_this_1;
      this._captured_stream_2 = _captured_stream_2;
      this._captured_subscriptions_3 = _captured_subscriptions_3;
      this.$deferredAction();
    }
    FlatMap_bind_onListen.builtin$cls = "FlatMap_bind_onListen";
    if (!("name" in FlatMap_bind_onListen))
      FlatMap_bind_onListen.name = "FlatMap_bind_onListen";
    $desc = $collectedClasses$.FlatMap_bind_onListen[1];
    FlatMap_bind_onListen.prototype = $desc;
    FlatMap_bind_onListen.$__fields__ = ["_captured_this_1", "_captured_stream_2", "_captured_subscriptions_3"];
    function FlatMap_bind_onListen_closeSinkIfDone(_stream_transformers$_box_0, _captured_sink_4, _captured_openStreams_5) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this._captured_sink_4 = _captured_sink_4;
      this._captured_openStreams_5 = _captured_openStreams_5;
      this.$deferredAction();
    }
    FlatMap_bind_onListen_closeSinkIfDone.builtin$cls = "FlatMap_bind_onListen_closeSinkIfDone";
    if (!("name" in FlatMap_bind_onListen_closeSinkIfDone))
      FlatMap_bind_onListen_closeSinkIfDone.name = "FlatMap_bind_onListen_closeSinkIfDone";
    $desc = $collectedClasses$.FlatMap_bind_onListen_closeSinkIfDone[1];
    FlatMap_bind_onListen_closeSinkIfDone.prototype = $desc;
    FlatMap_bind_onListen_closeSinkIfDone.$__fields__ = ["_stream_transformers$_box_0", "_captured_sink_4", "_captured_openStreams_5"];
    function FlatMap_bind_onListen_onData(_captured_this_6, _captured_subscriptions_7, _captured_sink_8, _captured_openStreams_9, _captured_closeSinkIfDone_10) {
      this._captured_this_6 = _captured_this_6;
      this._captured_subscriptions_7 = _captured_subscriptions_7;
      this._captured_sink_8 = _captured_sink_8;
      this._captured_openStreams_9 = _captured_openStreams_9;
      this._captured_closeSinkIfDone_10 = _captured_closeSinkIfDone_10;
      this.$deferredAction();
    }
    FlatMap_bind_onListen_onData.builtin$cls = "FlatMap_bind_onListen_onData";
    if (!("name" in FlatMap_bind_onListen_onData))
      FlatMap_bind_onListen_onData.name = "FlatMap_bind_onListen_onData";
    $desc = $collectedClasses$.FlatMap_bind_onListen_onData[1];
    FlatMap_bind_onListen_onData.prototype = $desc;
    FlatMap_bind_onListen_onData.$__fields__ = ["_captured_this_6", "_captured_subscriptions_7", "_captured_sink_8", "_captured_openStreams_9", "_captured_closeSinkIfDone_10"];
    function FlatMap_bind_onListen_onData_closure(_captured_sink_11) {
      this._captured_sink_11 = _captured_sink_11;
      this.$deferredAction();
    }
    FlatMap_bind_onListen_onData_closure.builtin$cls = "FlatMap_bind_onListen_onData_closure";
    if (!("name" in FlatMap_bind_onListen_onData_closure))
      FlatMap_bind_onListen_onData_closure.name = "FlatMap_bind_onListen_onData_closure";
    $desc = $collectedClasses$.FlatMap_bind_onListen_onData_closure[1];
    FlatMap_bind_onListen_onData_closure.prototype = $desc;
    FlatMap_bind_onListen_onData_closure.$__fields__ = ["_captured_sink_11"];
    function FlatMap_bind_onListen_onData_closure0(_captured_openStreams_12, _captured_closeSinkIfDone_13, _captured_mappedStream_14) {
      this._captured_openStreams_12 = _captured_openStreams_12;
      this._captured_closeSinkIfDone_13 = _captured_closeSinkIfDone_13;
      this._captured_mappedStream_14 = _captured_mappedStream_14;
      this.$deferredAction();
    }
    FlatMap_bind_onListen_onData_closure0.builtin$cls = "FlatMap_bind_onListen_onData_closure0";
    if (!("name" in FlatMap_bind_onListen_onData_closure0))
      FlatMap_bind_onListen_onData_closure0.name = "FlatMap_bind_onListen_onData_closure0";
    $desc = $collectedClasses$.FlatMap_bind_onListen_onData_closure0[1];
    FlatMap_bind_onListen_onData_closure0.prototype = $desc;
    FlatMap_bind_onListen_onData_closure0.$__fields__ = ["_captured_openStreams_12", "_captured_closeSinkIfDone_13", "_captured_mappedStream_14"];
    function FlatMap_bind_onListen_closure(_stream_transformers$_box_0, _captured_closeSinkIfDone_15) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this._captured_closeSinkIfDone_15 = _captured_closeSinkIfDone_15;
      this.$deferredAction();
    }
    FlatMap_bind_onListen_closure.builtin$cls = "FlatMap_bind_onListen_closure";
    if (!("name" in FlatMap_bind_onListen_closure))
      FlatMap_bind_onListen_closure.name = "FlatMap_bind_onListen_closure";
    $desc = $collectedClasses$.FlatMap_bind_onListen_closure[1];
    FlatMap_bind_onListen_closure.prototype = $desc;
    FlatMap_bind_onListen_closure.$__fields__ = ["_stream_transformers$_box_0", "_captured_closeSinkIfDone_15"];
    function FlatMap_bind_onListen_closure0(_captured_sink_16) {
      this._captured_sink_16 = _captured_sink_16;
      this.$deferredAction();
    }
    FlatMap_bind_onListen_closure0.builtin$cls = "FlatMap_bind_onListen_closure0";
    if (!("name" in FlatMap_bind_onListen_closure0))
      FlatMap_bind_onListen_closure0.name = "FlatMap_bind_onListen_closure0";
    $desc = $collectedClasses$.FlatMap_bind_onListen_closure0[1];
    FlatMap_bind_onListen_closure0.prototype = $desc;
    FlatMap_bind_onListen_closure0.$__fields__ = ["_captured_sink_16"];
    function FlatMap_bind_onCancel(_captured_subscriptions_17) {
      this._captured_subscriptions_17 = _captured_subscriptions_17;
      this.$deferredAction();
    }
    FlatMap_bind_onCancel.builtin$cls = "FlatMap_bind_onCancel";
    if (!("name" in FlatMap_bind_onCancel))
      FlatMap_bind_onCancel.name = "FlatMap_bind_onCancel";
    $desc = $collectedClasses$.FlatMap_bind_onCancel[1];
    FlatMap_bind_onCancel.prototype = $desc;
    FlatMap_bind_onCancel.$__fields__ = ["_captured_subscriptions_17"];
    function FlatMapLatest(_convert) {
      this._convert = _convert;
      this.$deferredAction();
    }
    FlatMapLatest.builtin$cls = "FlatMapLatest";
    if (!("name" in FlatMapLatest))
      FlatMapLatest.name = "FlatMapLatest";
    $desc = $collectedClasses$.FlatMapLatest[1];
    FlatMapLatest.prototype = $desc;
    FlatMapLatest.$__fields__ = ["_convert"];
    function FlatMapLatest_bind_closure() {
      this.$deferredAction();
    }
    FlatMapLatest_bind_closure.builtin$cls = "FlatMapLatest_bind_closure";
    if (!("name" in FlatMapLatest_bind_closure))
      FlatMapLatest_bind_closure.name = "FlatMapLatest_bind_closure";
    $desc = $collectedClasses$.FlatMapLatest_bind_closure[1];
    FlatMapLatest_bind_closure.prototype = $desc;
    FlatMapLatest_bind_closure.$__fields__ = [];
    function FlatMapLatest_bind_onListen(_stream_transformers$_box_0, _captured_this_1, _captured_input_2) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this._captured_this_1 = _captured_this_1;
      this._captured_input_2 = _captured_input_2;
      this.$deferredAction();
    }
    FlatMapLatest_bind_onListen.builtin$cls = "FlatMapLatest_bind_onListen";
    if (!("name" in FlatMapLatest_bind_onListen))
      FlatMapLatest_bind_onListen.name = "FlatMapLatest_bind_onListen";
    $desc = $collectedClasses$.FlatMapLatest_bind_onListen[1];
    FlatMapLatest_bind_onListen.prototype = $desc;
    FlatMapLatest_bind_onListen.$__fields__ = ["_stream_transformers$_box_0", "_captured_this_1", "_captured_input_2"];
    function FlatMapLatest_bind_onListen_closure(_captured_done_3) {
      this._captured_done_3 = _captured_done_3;
      this.$deferredAction();
    }
    FlatMapLatest_bind_onListen_closure.builtin$cls = "FlatMapLatest_bind_onListen_closure";
    if (!("name" in FlatMapLatest_bind_onListen_closure))
      FlatMapLatest_bind_onListen_closure.name = "FlatMapLatest_bind_onListen_closure";
    $desc = $collectedClasses$.FlatMapLatest_bind_onListen_closure[1];
    FlatMapLatest_bind_onListen_closure.prototype = $desc;
    FlatMapLatest_bind_onListen_closure.$__fields__ = ["_captured_done_3"];
    function FlatMapLatest_bind_onListen_closure1() {
      this.$deferredAction();
    }
    FlatMapLatest_bind_onListen_closure1.builtin$cls = "FlatMapLatest_bind_onListen_closure1";
    if (!("name" in FlatMapLatest_bind_onListen_closure1))
      FlatMapLatest_bind_onListen_closure1.name = "FlatMapLatest_bind_onListen_closure1";
    $desc = $collectedClasses$.FlatMapLatest_bind_onListen_closure1[1];
    FlatMapLatest_bind_onListen_closure1.prototype = $desc;
    FlatMapLatest_bind_onListen_closure1.$__fields__ = [];
    function FlatMapLatest_bind_onListen_closure0(_captured_done_4) {
      this._captured_done_4 = _captured_done_4;
      this.$deferredAction();
    }
    FlatMapLatest_bind_onListen_closure0.builtin$cls = "FlatMapLatest_bind_onListen_closure0";
    if (!("name" in FlatMapLatest_bind_onListen_closure0))
      FlatMapLatest_bind_onListen_closure0.name = "FlatMapLatest_bind_onListen_closure0";
    $desc = $collectedClasses$.FlatMapLatest_bind_onListen_closure0[1];
    FlatMapLatest_bind_onListen_closure0.prototype = $desc;
    FlatMapLatest_bind_onListen_closure0.$__fields__ = ["_captured_done_4"];
    function FlatMapLatest_bind_onListen_closure2(_stream_transformers$_captured_this_5, _captured_done_6) {
      this._stream_transformers$_captured_this_5 = _stream_transformers$_captured_this_5;
      this._captured_done_6 = _captured_done_6;
      this.$deferredAction();
    }
    FlatMapLatest_bind_onListen_closure2.builtin$cls = "FlatMapLatest_bind_onListen_closure2";
    if (!("name" in FlatMapLatest_bind_onListen_closure2))
      FlatMapLatest_bind_onListen_closure2.name = "FlatMapLatest_bind_onListen_closure2";
    $desc = $collectedClasses$.FlatMapLatest_bind_onListen_closure2[1];
    FlatMapLatest_bind_onListen_closure2.prototype = $desc;
    FlatMapLatest_bind_onListen_closure2.$__fields__ = ["_stream_transformers$_captured_this_5", "_captured_done_6"];
    function FlatMapLatest_bind_onListen_closure3(_captured_sink_7) {
      this._captured_sink_7 = _captured_sink_7;
      this.$deferredAction();
    }
    FlatMapLatest_bind_onListen_closure3.builtin$cls = "FlatMapLatest_bind_onListen_closure3";
    if (!("name" in FlatMapLatest_bind_onListen_closure3))
      FlatMapLatest_bind_onListen_closure3.name = "FlatMapLatest_bind_onListen_closure3";
    $desc = $collectedClasses$.FlatMapLatest_bind_onListen_closure3[1];
    FlatMapLatest_bind_onListen_closure3.prototype = $desc;
    FlatMapLatest_bind_onListen_closure3.$__fields__ = ["_captured_sink_7"];
    function FlatMapLatest_bind_onListen_closure4(_captured_sink_8) {
      this._captured_sink_8 = _captured_sink_8;
      this.$deferredAction();
    }
    FlatMapLatest_bind_onListen_closure4.builtin$cls = "FlatMapLatest_bind_onListen_closure4";
    if (!("name" in FlatMapLatest_bind_onListen_closure4))
      FlatMapLatest_bind_onListen_closure4.name = "FlatMapLatest_bind_onListen_closure4";
    $desc = $collectedClasses$.FlatMapLatest_bind_onListen_closure4[1];
    FlatMapLatest_bind_onListen_closure4.prototype = $desc;
    FlatMapLatest_bind_onListen_closure4.$__fields__ = ["_captured_sink_8"];
    function FlatMapLatest_bind_closure0(_stream_transformers$_box_0) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this.$deferredAction();
    }
    FlatMapLatest_bind_closure0.builtin$cls = "FlatMapLatest_bind_closure0";
    if (!("name" in FlatMapLatest_bind_closure0))
      FlatMapLatest_bind_closure0.name = "FlatMapLatest_bind_closure0";
    $desc = $collectedClasses$.FlatMapLatest_bind_closure0[1];
    FlatMapLatest_bind_closure0.prototype = $desc;
    FlatMapLatest_bind_closure0.$__fields__ = ["_stream_transformers$_box_0"];
    function MergeAll() {
      this.$deferredAction();
    }
    MergeAll.builtin$cls = "MergeAll";
    if (!("name" in MergeAll))
      MergeAll.name = "MergeAll";
    $desc = $collectedClasses$.MergeAll[1];
    MergeAll.prototype = $desc;
    MergeAll.$__fields__ = [];
    function MergeAll_bind_closure() {
      this.$deferredAction();
    }
    MergeAll_bind_closure.builtin$cls = "MergeAll_bind_closure";
    if (!("name" in MergeAll_bind_closure))
      MergeAll_bind_closure.name = "MergeAll_bind_closure";
    $desc = $collectedClasses$.MergeAll_bind_closure[1];
    MergeAll_bind_closure.prototype = $desc;
    MergeAll_bind_closure.$__fields__ = [];
    function Scan(_initialValue, _combine) {
      this._initialValue = _initialValue;
      this._combine = _combine;
      this.$deferredAction();
    }
    Scan.builtin$cls = "Scan";
    if (!("name" in Scan))
      Scan.name = "Scan";
    $desc = $collectedClasses$.Scan[1];
    Scan.prototype = $desc;
    Scan.$__fields__ = ["_initialValue", "_combine"];
    function Scan_bind_closure(_captured_this_1, _captured_stream_2) {
      this._captured_this_1 = _captured_this_1;
      this._captured_stream_2 = _captured_stream_2;
      this.$deferredAction();
    }
    Scan_bind_closure.builtin$cls = "Scan_bind_closure";
    if (!("name" in Scan_bind_closure))
      Scan_bind_closure.name = "Scan_bind_closure";
    $desc = $collectedClasses$.Scan_bind_closure[1];
    Scan_bind_closure.prototype = $desc;
    Scan_bind_closure.$__fields__ = ["_captured_this_1", "_captured_stream_2"];
    function Scan_bind__onData(_stream_transformers$_box_0, _captured_this_3, _captured_sink_4) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this._captured_this_3 = _captured_this_3;
      this._captured_sink_4 = _captured_sink_4;
      this.$deferredAction();
    }
    Scan_bind__onData.builtin$cls = "Scan_bind__onData";
    if (!("name" in Scan_bind__onData))
      Scan_bind__onData.name = "Scan_bind__onData";
    $desc = $collectedClasses$.Scan_bind__onData[1];
    Scan_bind__onData.prototype = $desc;
    Scan_bind__onData.$__fields__ = ["_stream_transformers$_box_0", "_captured_this_3", "_captured_sink_4"];
    function TakeUntil(_signal) {
      this._signal = _signal;
      this.$deferredAction();
    }
    TakeUntil.builtin$cls = "TakeUntil";
    if (!("name" in TakeUntil))
      TakeUntil.name = "TakeUntil";
    $desc = $collectedClasses$.TakeUntil[1];
    TakeUntil.prototype = $desc;
    TakeUntil.$__fields__ = ["_signal"];
    function TakeUntil_bind_onListen(_stream_transformers$_box_1, _stream_transformers$_captured_this_2, _captured_stream_3) {
      this._stream_transformers$_box_1 = _stream_transformers$_box_1;
      this._stream_transformers$_captured_this_2 = _stream_transformers$_captured_this_2;
      this._captured_stream_3 = _captured_stream_3;
      this.$deferredAction();
    }
    TakeUntil_bind_onListen.builtin$cls = "TakeUntil_bind_onListen";
    if (!("name" in TakeUntil_bind_onListen))
      TakeUntil_bind_onListen.name = "TakeUntil_bind_onListen";
    $desc = $collectedClasses$.TakeUntil_bind_onListen[1];
    TakeUntil_bind_onListen.prototype = $desc;
    TakeUntil_bind_onListen.$__fields__ = ["_stream_transformers$_box_1", "_stream_transformers$_captured_this_2", "_captured_stream_3"];
    function TakeUntil_bind_onListen_done(_stream_transformers$_box_0, _captured_sink_4) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this._captured_sink_4 = _captured_sink_4;
      this.$deferredAction();
    }
    TakeUntil_bind_onListen_done.builtin$cls = "TakeUntil_bind_onListen_done";
    if (!("name" in TakeUntil_bind_onListen_done))
      TakeUntil_bind_onListen_done.name = "TakeUntil_bind_onListen_done";
    $desc = $collectedClasses$.TakeUntil_bind_onListen_done[1];
    TakeUntil_bind_onListen_done.prototype = $desc;
    TakeUntil_bind_onListen_done.$__fields__ = ["_stream_transformers$_box_0", "_captured_sink_4"];
    function TakeUntil_bind_onListen_closure(_captured_done_5) {
      this._captured_done_5 = _captured_done_5;
      this.$deferredAction();
    }
    TakeUntil_bind_onListen_closure.builtin$cls = "TakeUntil_bind_onListen_closure";
    if (!("name" in TakeUntil_bind_onListen_closure))
      TakeUntil_bind_onListen_closure.name = "TakeUntil_bind_onListen_closure";
    $desc = $collectedClasses$.TakeUntil_bind_onListen_closure[1];
    TakeUntil_bind_onListen_closure.prototype = $desc;
    TakeUntil_bind_onListen_closure.$__fields__ = ["_captured_done_5"];
    function TakeUntil_bind_onListen_closure0(_captured_sink_6) {
      this._captured_sink_6 = _captured_sink_6;
      this.$deferredAction();
    }
    TakeUntil_bind_onListen_closure0.builtin$cls = "TakeUntil_bind_onListen_closure0";
    if (!("name" in TakeUntil_bind_onListen_closure0))
      TakeUntil_bind_onListen_closure0.name = "TakeUntil_bind_onListen_closure0";
    $desc = $collectedClasses$.TakeUntil_bind_onListen_closure0[1];
    TakeUntil_bind_onListen_closure0.prototype = $desc;
    TakeUntil_bind_onListen_closure0.$__fields__ = ["_captured_sink_6"];
    function TakeUntil_bind_onListen_closure1(_captured_done_7) {
      this._captured_done_7 = _captured_done_7;
      this.$deferredAction();
    }
    TakeUntil_bind_onListen_closure1.builtin$cls = "TakeUntil_bind_onListen_closure1";
    if (!("name" in TakeUntil_bind_onListen_closure1))
      TakeUntil_bind_onListen_closure1.name = "TakeUntil_bind_onListen_closure1";
    $desc = $collectedClasses$.TakeUntil_bind_onListen_closure1[1];
    TakeUntil_bind_onListen_closure1.prototype = $desc;
    TakeUntil_bind_onListen_closure1.$__fields__ = ["_captured_done_7"];
    function TakeUntil_bind_closure(_stream_transformers$_box_1) {
      this._stream_transformers$_box_1 = _stream_transformers$_box_1;
      this.$deferredAction();
    }
    TakeUntil_bind_closure.builtin$cls = "TakeUntil_bind_closure";
    if (!("name" in TakeUntil_bind_closure))
      TakeUntil_bind_closure.name = "TakeUntil_bind_closure";
    $desc = $collectedClasses$.TakeUntil_bind_closure[1];
    TakeUntil_bind_closure.prototype = $desc;
    TakeUntil_bind_closure.$__fields__ = ["_stream_transformers$_box_1"];
    function _bindStream_closure0(_stream_transformers$_box_0, _captured_onListen_1) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this._captured_onListen_1 = _captured_onListen_1;
      this.$deferredAction();
    }
    _bindStream_closure0.builtin$cls = "_bindStream_closure0";
    if (!("name" in _bindStream_closure0))
      _bindStream_closure0.name = "_bindStream_closure0";
    $desc = $collectedClasses$._bindStream_closure0[1];
    _bindStream_closure0.prototype = $desc;
    _bindStream_closure0.$__fields__ = ["_stream_transformers$_box_0", "_captured_onListen_1"];
    function _bindStream_closure1(_stream_transformers$_box_0) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this.$deferredAction();
    }
    _bindStream_closure1.builtin$cls = "_bindStream_closure1";
    if (!("name" in _bindStream_closure1))
      _bindStream_closure1.name = "_bindStream_closure1";
    $desc = $collectedClasses$._bindStream_closure1[1];
    _bindStream_closure1.prototype = $desc;
    _bindStream_closure1.$__fields__ = ["_stream_transformers$_box_0"];
    function _bindStream_closure2(_stream_transformers$_box_0) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this.$deferredAction();
    }
    _bindStream_closure2.builtin$cls = "_bindStream_closure2";
    if (!("name" in _bindStream_closure2))
      _bindStream_closure2.name = "_bindStream_closure2";
    $desc = $collectedClasses$._bindStream_closure2[1];
    _bindStream_closure2.prototype = $desc;
    _bindStream_closure2.$__fields__ = ["_stream_transformers$_box_0"];
    function _bindStream_closure(_stream_transformers$_box_0, _captured_onCancel_2) {
      this._stream_transformers$_box_0 = _stream_transformers$_box_0;
      this._captured_onCancel_2 = _captured_onCancel_2;
      this.$deferredAction();
    }
    _bindStream_closure.builtin$cls = "_bindStream_closure";
    if (!("name" in _bindStream_closure))
      _bindStream_closure.name = "_bindStream_closure";
    $desc = $collectedClasses$._bindStream_closure[1];
    _bindStream_closure.prototype = $desc;
    _bindStream_closure.$__fields__ = ["_stream_transformers$_box_0", "_captured_onCancel_2"];
    function _bindStream__closure() {
      this.$deferredAction();
    }
    _bindStream__closure.builtin$cls = "_bindStream__closure";
    if (!("name" in _bindStream__closure))
      _bindStream__closure.name = "_bindStream__closure";
    $desc = $collectedClasses$._bindStream__closure[1];
    _bindStream__closure.prototype = $desc;
    _bindStream__closure.$__fields__ = [];
    function _bindStream__closure0() {
      this.$deferredAction();
    }
    _bindStream__closure0.builtin$cls = "_bindStream__closure0";
    if (!("name" in _bindStream__closure0))
      _bindStream__closure0.name = "_bindStream__closure0";
    $desc = $collectedClasses$._bindStream__closure0[1];
    _bindStream__closure0.prototype = $desc;
    _bindStream__closure0.$__fields__ = [];
    function _bindStream__closure1() {
      this.$deferredAction();
    }
    _bindStream__closure1.builtin$cls = "_bindStream__closure1";
    if (!("name" in _bindStream__closure1))
      _bindStream__closure1.name = "_bindStream__closure1";
    $desc = $collectedClasses$._bindStream__closure1[1];
    _bindStream__closure1.prototype = $desc;
    _bindStream__closure1.$__fields__ = [];
    return [JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSUnmodifiableArray, ArrayIterator, JSNumber, JSInt, JSDouble, JSString, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _IsolateContext_handlePing_respond, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, IsolateNatives__startIsolate_runStartFunction, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TimerImpl$periodic_closure, CapabilityImpl, _Serializer, _Deserializer, ConstantMapView, ConstantMap, ConstantStringMap, _ConstantMapKeyIterable, JSInvocationMirror, ReflectionInfo, Primitives_initTicker_closure, Primitives_functionNoSuchMethod_closure, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, StaticClosure, BoundClosure, CastErrorImplementation, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, ExceptionAndStackTrace, asyncHelper_closure, _wrapJsFunctionForAsync_closure, TypeImpl, JsLinkedHashMap, JsLinkedHashMap_values_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, StringMatch, ErrorRepository, Server, Domain, ServerDomain, ServerStatus, VersionResult, AnalysisDomain, AnalysisErrors, AnalysisErrors_parse_closure, AnalysisFlushResults, AnalysisNavigation, AnalysisNavigation_parse_closure, AnalysisNavigation_parse_closure0, HoverResult, HoverResult_parse_closure, CompletionDomain, CompletionResults, CompletionResults_parse_closure, SuggestionsResult, SearchDomain, SearchResults, SearchResults_parse_closure, FindElementReferencesResult, TypeHierarchyResult, TypeHierarchyResult_parse_closure, EditDomain, FormatResult, FormatResult_parse_closure, AvailableRefactoringsResult, FixesResult, FixesResult_parse_closure, RefactoringResult, RefactoringResult_parse_closure, RefactoringResult_parse_closure0, RefactoringResult_parse_closure1, ExecutionDomain, AddContentOverlay, AnalysisError, AnalysisErrorFixes, AnalysisErrorFixes_parse_closure, AnalysisOptions, AnalysisStatus, CompletionSuggestion, Element0, HoverInformation, LinkedEditGroup, LinkedEditGroup_parse_closure, LinkedEditGroup_parse_closure0, LinkedEditSuggestion, Location, NavigationRegion, NavigationTarget, Position, PubStatus, RefactoringFeedback, RefactoringOptions, RefactoringProblem, RemoveContentOverlay, RequestError, SearchResult, SearchResult_parse_closure, SourceChange, SourceChange_parse_closure, SourceChange_parse_closure0, SourceEdit, SourceFileEdit, SourceFileEdit_parse_closure, TypeHierarchyItem, AtomPackage, registerPackage_closure, registerPackage__closure, Atom, ViewRegistry, Workspace, Workspace_getTextEditors_closure, Workspace_observeTextEditors_closure, Workspace_observeActivePaneItem_closure, Workspace_open_closure, Panel, Panel_onDidDestroy_closure, CommandRegistry, CommandRegistry_add_closure, Config, NotificationManager, PackageManager, Project, Project_getDirectories_closure, Entry, File, Directory, Directory_getEntriesSync_closure, TextEditorView, TextEditor, TextEditor_setSelectedBufferRanges_closure, TextBuffer, Range, Point, AtomEvent, Shell, BufferedProcess, Stats, AnalysisServer, AnalysisServer__setup_closure, AnalysisServer__setup_closure0, AnalysisServer__setup_closure1, AnalysisServer__syncRoots_closure, AnalysisServer__reconcileRoots_closure, AnalysisServer__focusedEditorChanged_closure, AnalysisServer_filterSearchResults_closure, AnalysisServer_filterSearchResults_closure0, AnalysisServer__initNewServer_closure, AnalysisServer__initNewServer_closure0, AnalysisServer__initNewServer_closure1, AnalysisServer__initNewServer_closure2, AnalysisServer__initNewServer_closure3, AnalysisServer__initNewServer_closure4, QuickFixHelper_handleQuickFix_closure, QuickFixHelper_handleQuickFix__closure, QuickFixHelper_handleQuickFix__closure0, QuickFixHelper_handleQuickFix___closure, QuickFixHelper_handleQuickFix_closure0, QuickFixHelper__applyChange_closure, _AnalyzingJob, _AnalyzingJob_closure, _AnalyzingJob_start_closure, _AnalysisServerWrapper, _AnalysisServerWrapper_closure, _AnalysisServerWrapper_setup_closure, _AnalysisServerWrapper_setup_closure0, _AnalysisServerWrapper_restart_closure, _AnalysisServerWrapper_restart__closure, _AnalysisServerWrapper_restart_closure0, _AnalysisServerWrapper_kill_closure, _AnalysisServerWrapper__startProcess_closure, _AnalysisServerWrapper__startProcess_closure0, _AnalysisServerWrapper__startProcess_closure1, _AnalysisServerWrapper__messageWriter_closure, RenameRefactoringOptions, AnalysisServerDialog, AnalysisServerDialog_closure, AnalysisServerDialog_closure0, AnalysisServerDialog_closure1, AnalysisServerDialog__updateStatus_closure, promptUser_closure, promptUser_closure0, promptUser_closure1, promptUser_closure2, PermissiveNodeValidator, TrustedHtmlTreeSanitizer, loadPackageJson_closure, getPackageVersion_closure, AutocompleteProvider, AutocompleteProvider__getSuggestions_closure, AutocompleteProvider__getSuggestions__closure, AutocompleteOptions, Suggestion, _checkChangelog_closure, _extractVersion_closure, _extractVersion_closure0, NavigationHelper, NavigationHelper__activate_closure, NavigationHelper__activate__closure, NavigationHelper__handleNavigateEditor_closure, NavigationHelper__handleNavigateEditor_closure0, NavigationHelper__getNavigationInfoFor_closure, NavigationHelper__getNavigationInfoFor_closure0, NavigationHelper__processNavInfo_closure, _handleEnterKey_closure, _handleEnterKey_closure0, _handleEnterKey_closure1, _handleEnterKey_closure2, _handleEnterKey_closure3, _handleEnterKey_closure4, _handleEnterKey_closure5, applyEdits_closure, applyEdits__closure, selectEditGroups_closure, _sortEdits_closure, EditorManager, EditorManager_jumpToLocation_closure, Editors, Editors__observeTextEditors_closure, CoreElement, CoreElement_add_closure, CoreElement_click_closure, ProgressElement, ViewResizer, ViewResizer__init_closure0, ViewResizer__init_closure, ViewResizer__init__closure, ViewResizer__init__closure0, CloseButton, TitledModelDialog, TitledModelDialog_closure, TitledModelDialog_closure0, AtomView, AtomView_closure, AtomView_closure0, ListTreeBuilder, ListTreeBuilder__addNode_closure, ListTreeBuilder__addNode_closure0, ListTreeBuilder__addNode_closure1, ListTreeBuilder__addNode_closure2, Node0, FormattingHelper, FormattingHelper_closure, FormattingHelper_closure0, FormattingHelper_formatFile_closure, FormattingHelper_formatEditor_closure, FormattingHelper_formatEditor_closure0, Job, JobManager, JobManager_activeJob_closure, JobManager_activeJob_closure0, JobManager__exec_closure, JobManager__exec_closure0, JobManager__exec_closure1, JobInstance, promiseToFuture_closure, promiseToFuture_closure0, ProxyHolder, ProxyHolder_eventStream_closure, ProxyHolder_eventStream_closure0, ProxyHolder_eventStream2Args_closure, ProxyHolder_eventStream2Args_closure0, Promise, Promise__jsObjectFromFuture_closure, Promise__jsObjectFromFuture__closure, Promise__jsObjectFromFuture__closure0, JsDisposable, EventListener, EventListener_closure, LinterProvider, LinterConsumer, LinterService, LinterService_setMessages_closure, LintMessage, Rn, Pt, AtomDartPackage, AtomDartPackage_closure, AtomDartPackage_closure0, AtomDartPackage_closure1, AtomDartPackage__closure, AtomDartPackage__closure0, AtomDartPackage_closure2, AtomDartPackage_packageActivated_closure, AtomDartPackage_packageActivated_closure0, AtomDartPackage_packageActivated_closure1, AtomDartPackage_packageActivated_closure2, AtomDartPackage_packageActivated__closure, AtomDartPackage_packageActivated__closure0, AtomDartPackage_packageActivated_closure3, AtomDartPackage__setupLogging_closure, exec_closure, ProcessRunner, ProcessRunner_execSimple_closure, ProcessRunner_execSimple_closure0, ProcessRunner_execSimple_closure1, ProcessRunner_execStreaming_closure1, ProcessRunner_execStreaming_closure0, ProcessRunner_execStreaming_closure, ProcessRunner_kill_closure, ProcessResult, ProjectManager, ProjectManager_closure, ProjectManager_dispose_closure, ProjectManager__fullScanForProjects_closure, ProjectManager__fullScanForProjects_closure0, ProjectManager__fullScanForProjects_closure1, ProjectManager__fullScanForProjects_closure2, ProjectManager__updateChangeListeners_closure, ProjectManager__handleDirectoryChanged_closure, DartProject, ProjectScanJob, PubManager, PubManager_closure, PubManager_closure0, PubManager_closure1, PubManager_closure2, PubManager_closure3, PubManager_closure4, PubManager_closure5, PubManager__addSdkCmd_closure, PubManager__handleRun_closure, PubManager__handleGlobalRun_closure, PubManager__handleGlobalActivate_closure, PubJob, PubJob_run_closure, PubRunJob, PubRunJob_run_closure, PubGlobalActivate, PubGlobalActivate_run_closure, RebuildJob, RebuildJob_run_closure, RebuildJob_run_closure0, RebuildJob_run_closure1, RebuildJob_run_closure2, RebuildJob_run__closure, RebuildJob_run__closure0, RefactoringHelper, RefactoringHelper_closure, RefactoringHelper__handleRenameRefactor_closure, RefactoringHelper__handleRenameRefactor_closure0, RefactoringHelper__handleRenameRefactor_closure1, RefactoringHelper__handleRenameRefactor__closure, RefactoringHelper__apply_closure, RefactoringHelper__apply__closure0, RefactoringHelper__apply_closure0, RefactoringHelper__apply__closure, RefactoringHelper__apply_closure1, FindReferencesHelper, FindReferencesHelper__handleReferencesEditor_closure, FindReferencesHelper__handleReferencesEditor_closure0, FindReferencesView, FindReferencesView__showView_closure, FindReferencesView__showView__closure, _MatchParser, SdkManager, SdkManager_closure, SdkManager_tryToAutoConfigure_closure, SdkManager__verifyMinVersion_closure, Sdk, Sdk_getVersion_closure, SdkDiscovery, SdkDiscovery_discoverSdk_closure, SdkDiscovery_discoverSdk_closure0, SdkDiscovery_discoverSdk_closure1, SdkDiscovery_discoverSdk_closure2, SdkDiscovery_discoverSdk_closure3, SdkDiscovery_discoverSdk_closure4, SdkLocationJob, smokeTest_closure, smokeTest_closure0, smokeTest_closure1, smokeTest_closure2, smokeTest_closure3, smokeTest_closure4, smokeTest_closure5, smokeTest_closure8, smokeTest_closure7, smokeTest_closure6, smokeTest_closure9, smokeTest_closure10, smokeTest_closure11, smokeTest_closure12, smokeTest_closure13, _TestJob, State, StatusDisplay, StatusDisplay_closure, StatusDisplay__closure, StatusDisplay_closure0, JobsDialog, StatusBar, Tile, ToolbarContribution, Toolbar, ToolbarTile, TypeHierarchyHelper, TypeHierarchyHelper__handleHierarchyEditor_closure, TypeHierarchyHelper__handleHierarchyEditor_closure0, TypeHierarchyView, TypeHierarchyView__render_closure, TypeHierarchyView__render_closure0, Disposable, Disposables, StreamSubscriptions, DartAutocompleteProvider, DartAutocompleteProvider_getSuggestions_closure, DartAutocompleteProvider_getSuggestions__closure, DartAutocompleteProvider_getSuggestions__closure0, DartAutocompleteProvider_getSuggestions__closure1, DartAutocompleteProvider__handleCompletionResults_closure, DartAutocompleteProvider__handleCompletionResults_closure0, DartAutocompleteProvider__handleCompletionResults__closure, BufferObserverManager, BufferObserverManager_dispose_closure, BufferObserver, BufferFormatter, BufferFormatter_closure, BufferFormatter__closure, BufferFormatter___closure, BufferFormatter_closure0, BufferUpdater, Dependencies, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, ExpandIterable, ExpandIterator, TakeIterable, EfficientLengthTakeIterable, TakeIterator, TakeWhileIterable, TakeWhileIterator, SkipIterable, EfficientLengthSkipIterable, SkipIterator, SkipWhileIterable, SkipWhileIterator, EmptyIterator, FixedLengthListMixin, Symbol0, _AsyncRun__initializeScheduleImmediate_internalCallback, _AsyncRun__initializeScheduleImmediate_closure, _AsyncRun__scheduleImmediateJsOverride_internalCallback, _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, _UncaughtAsyncError, _BroadcastStream, _BroadcastSubscription, _BroadcastStreamController, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, _AsyncBroadcastStreamController, _AsBroadcastStreamController, Future, Future_Future_closure, Future_Future$microtask_closure, Future_Future$delayed_closure, Future_wait_handleError, Future_wait_closure, Future_forEach_closure, Future_forEach__closure, Future_forEach__closure0, Future_doWhile_closure, _Completer, _AsyncCompleter, _FutureListener, _Future, _Future__addListener_closure, _Future__chainForeignFuture_closure, _Future__chainForeignFuture_closure0, _Future__chainForeignFuture_closure1, _Future__asyncComplete_closure, _Future__asyncComplete_closure0, _Future__asyncCompleteError_closure, _Future__propagateToListeners_handleValueCallback, _Future__propagateToListeners_handleError, _Future__propagateToListeners_handleWhenCompleteCallback, _Future__propagateToListeners_handleWhenCompleteCallback_closure, _Future__propagateToListeners_handleWhenCompleteCallback_closure0, _AsyncCallbackEntry, Stream, Stream_Stream$fromIterable_closure, Stream_Stream$periodic_sendEvent, Stream_Stream$periodic_startPeriodicTimer, Stream_Stream$periodic_startPeriodicTimer_closure, Stream_Stream$periodic_closure0, Stream_Stream$periodic_closure1, Stream_Stream$periodic_closure2, Stream_Stream$periodic__closure, Stream_Stream$periodic_closure, Stream_join_closure, Stream_join_closure1, Stream_join_closure0, Stream_contains_closure, Stream_contains__closure, Stream_contains__closure0, Stream_contains_closure0, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, Stream_first_closure, Stream_first_closure0, Stream_last_closure, Stream_last_closure0, StreamSubscription, EventSink, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _SyncStreamController, _ControllerStream, _ControllerSubscription, _AddStreamState, _AddStreamState_makeErrorHandler_closure, _AddStreamState_cancel_closure, _StreamControllerAddStreamState, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _GeneratedStreamImpl, _IterablePendingEvents, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _DoneStreamSubscription, _AsBroadcastStream, _BroadcastSubscriptionWrapper, _StreamIteratorImpl, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, _WhereStream, _MapStream, _TakeStream, _StateStreamSubscription, _EventSinkWrapper, _SinkTransformerStreamSubscription, _BoundSinkStream, Timer, AsyncError, _Zone, _rootHandleUncaughtError_closure, _RootZone, _RootZone_bindCallback_closure, _RootZone_bindCallback_closure0, _RootZone_bindUnaryCallback_closure, _RootZone_bindUnaryCallback_closure0, _HashMap, _IdentityHashMap, HashMapKeyIterable, HashMapKeyIterator, _LinkedIdentityHashMap, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, _HashSetBase, IterableBase, LinkedHashMap_LinkedHashMap$from_closure, ListBase, Object_ListMixin, ListMixin, _UnmodifiableMapMixin, MapView, UnmodifiableMapView, Maps_mapToString_closure, ListQueue, _ListQueueIterator, SetMixin, SetBase, _JsonMap, _JsonMap_values_closure, _JsonMapKeyIterable, _JsonDecoderSink, ChunkedConversionSink, _ConverterStreamEventSink, Codec, Converter, Converter_bind_closure, JsonUnsupportedObjectError, JsonCyclicError, JsonCodec, JsonEncoder, _JsonEncoderSink, JsonDecoder, _JsonStringifier, _JsonStringifier_writeMap_closure, _JsonStringStringifier, _StringConversionSinkAsStringSinkAdapter, StringConversionSinkBase, StringConversionSinkMixin, _StringSinkConversionSink, _StringAdapterSink, NoSuchMethodError_toString_closure, bool, Comparable, DateTime, $double, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, IndexError, NoSuchMethodError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, OutOfMemoryError, StackOverflowError, CyclicInitializationError, _Exception, FormatException, IntegerDivisionByZeroException, Expando, Function, $int, Iterable, Iterator, List, Map, Null, num, Object, Match, RegExp, StackTrace, Stopwatch, String, StringBuffer, Symbol, HtmlElement, AnchorElement, ApplicationCacheErrorEvent, AreaElement, BaseElement, Blob, BodyElement, ButtonElement, CharacterData, CompositionEvent, CssStyleDeclaration, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, DeviceLightEvent, DivElement, Document0, DocumentFragment, DomError, DomException, DomRectReadOnly, DomSettableTokenList, DomTokenList, _ChildrenElementList, Element, Element_Element$html_closure, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, File0, FileList, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, FormElement, HtmlCollection, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, HttpRequest, HttpRequest_getString_closure, HttpRequest_request_closure, HttpRequestEventTarget, IFrameElement, ImageData, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LinkElement, Location0, MapElement, MediaElement, MediaKeyEvent, MediaKeyMessageEvent, MediaStream, MenuElement, MenuItemElement, MessageEvent, MetaElement, MeterElement, MidiMessageEvent, MidiOutput, MidiPort, MouseEvent, Navigator, NavigatorUserMediaError, _ChildNodeListLazy, Node, NodeList, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, OListElement, ObjectElement, OptionElement, OutputElement, ParamElement, PluginPlaceholderElement, PositionError, ProgressElement0, PushEvent, Range0, ScriptElement0, SelectElement, ShadowRoot, SourceElement, SpeechRecognitionError, SpeechRecognitionEvent, SpeechRecognitionResult, SpeechSynthesisEvent, StyleElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, TextAreaElement, TextEvent, TrackElement, UIEvent, Window, _Attr, _ClientRect, _DocumentType, _DomRect, _HTMLFrameSetElement, _NamedNodeMap, Interceptor_ListMixin2, Interceptor_ListMixin_ImmutableListMixin2, _SpeechRecognitionResultList, Interceptor_ListMixin3, Interceptor_ListMixin_ImmutableListMixin3, _AttributeMap, _ElementAttributeMap, _MarginCssRect, CssRect, _ElementCssClassSet, Dimension, _EventStream, _ElementEventStreamImpl, _EventStreamSubscription, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _SimpleNodeValidator_closure, _SimpleNodeValidator_closure0, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, _SvgNodeValidator, FixedSizeListIterator, _DOMWindowCrossFrame, _LocationCrossFrame, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, KeyRange, AElement, AltGlyphElement, AnimationElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEFloodElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GeometryElement, GraphicsElement, ImageElement0, MarkerElement, MaskElement, PatternElement, RectElement, ScriptElement, StyleElement0, _AttributeClassSet, SvgElement, SvgSvgElement, SymbolElement, TextContentElement, TextPathElement, TextPositioningElement, UseElement, ViewElement, _GradientElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGGlyphRefElement, _SVGMPathElement, SqlError, Capability, JsObject, JsObject__convertDataTree__convert, JsFunction, JsArray, JsObject_ListMixin, _convertToJS_closure, _convertToJS_closure0, _wrapToDart_closure, _wrapToDart_closure0, _wrapToDart_closure1, Point0, _RectangleBase, Rectangle, MutableRectangle, DefaultEquality, IterableEquality, Uint8List, NativeByteBuffer, NativeTypedData, NativeByteData, NativeTypedArray, NativeTypedArrayOfDouble, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, NativeTypedArrayOfInt, NativeTypedArray_ListMixin0, NativeTypedArray_ListMixin_FixedLengthListMixin0, NativeFloat32List, NativeFloat64List, NativeInt16List, NativeInt32List, NativeInt8List, NativeUint16List, NativeUint32List, NativeUint8ClampedList, NativeUint8List, DartdocHelper, DartdocHelper_closure, DartdocHelper__handleDartdoc_closure, DartdocHelper__render_writeTitle, DartdocHelper__render_closure, DartdocControl, DartdocControl_closure, DartdocControl_closure0, EventStream, EventStream__createControllerForStream_onListen, EventStream__createControllerForStream_onCancel, Property, Property__createControllerForStream_closure, Property__createControllerForStream_onListen, Property__createControllerForStream_onListen_closure, Property__createControllerForStream_onListen_closure0, Property__createControllerForStream_onCancel, Property_listen_closure, Property_operator$gt_closure, Property_operator$ge_closure, Property_operator$lt_closure, Property_operator$le_closure, Property_operator$add_closure, Property_operator$sub_closure, Property_operator$mul_closure, Reactable, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, CssClassSetImpl, CssClassSetImpl_add_closure, CssClassSetImpl_addAll_closure, FilteredElementList, FilteredElementList__iterable_closure, FilteredElementList_removeRange_closure, DartLinterConsumer, LinterConsumer_Disposables, DartLinterConsumer_closure, DartLinterConsumer_consume_closure, DartLinterConsumer__regenErrors_closure, DartLinterConsumer__filter_closure, DartLinterConsumer__emit_closure, DartLinterProvider, Logger, Logger_Logger_closure, Level, LogRecord, Node1, Element1, Text, BlockParser, BlockSyntax, BlockSyntax_isAtBlockEnd_closure, EmptyBlockSyntax, SetextHeaderSyntax, HeaderSyntax, BlockquoteSyntax, CodeBlockSyntax, FencedCodeBlockSyntax, HorizontalRuleSyntax, BlockHtmlSyntax, ListItem, ListSyntax, ListSyntax_parse_endItem, ListSyntax_parse_tryMatch, UnorderedListSyntax, OrderedListSyntax, ParagraphSyntax, Document, Link, HtmlRenderer, HtmlRenderer_visitElementBefore_closure, InlineParser, InlineSyntax, TextSyntax, AutolinkSyntax, TagSyntax, LinkSyntax, LinkSyntax_createNode_closure, LinkSyntax_createNode_closure0, ImageLinkSyntax, ImageLinkSyntax_createNode_closure, CodeSyntax, TagState, cleanMap_closure, Version, Version__splitParts_closure, Combine, Combine_all_closure, Combine_all__closure, Combine_all___closure0, Combine_all__closure0, Combine_all__closure1, Combine_all__closure2, Combine_all___closure, Combine_all__closure3, Combine_bind_closure, Combine_bind__closure, Debounce, Debounce_bind_closure, Debounce_bind__closure, FlatMap, FlatMap_bind_onListen, FlatMap_bind_onListen_closeSinkIfDone, FlatMap_bind_onListen_onData, FlatMap_bind_onListen_onData_closure, FlatMap_bind_onListen_onData_closure0, FlatMap_bind_onListen_closure, FlatMap_bind_onListen_closure0, FlatMap_bind_onCancel, FlatMapLatest, FlatMapLatest_bind_closure, FlatMapLatest_bind_onListen, FlatMapLatest_bind_onListen_closure, FlatMapLatest_bind_onListen_closure1, FlatMapLatest_bind_onListen_closure0, FlatMapLatest_bind_onListen_closure2, FlatMapLatest_bind_onListen_closure3, FlatMapLatest_bind_onListen_closure4, FlatMapLatest_bind_closure0, MergeAll, MergeAll_bind_closure, Scan, Scan_bind_closure, Scan_bind__onData, TakeUntil, TakeUntil_bind_onListen, TakeUntil_bind_onListen_done, TakeUntil_bind_onListen_closure, TakeUntil_bind_onListen_closure0, TakeUntil_bind_onListen_closure1, TakeUntil_bind_closure, _bindStream_closure0, _bindStream_closure1, _bindStream_closure2, _bindStream_closure, _bindStream__closure, _bindStream__closure0, _bindStream__closure1];
  };
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      var fieldNames = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        fieldNames += "'" + field + "',";
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
      str += accessors.join("");
      return str;
    }
    init.createNewIsolate = function() {
      return new Isolate();
    };
    init.classIdExtractor = function(o) {
      return o.constructor.name;
    };
    init.classFieldsExtractor = function(o) {
      var fieldNames = o.constructor.$__fields__;
      if (!fieldNames)
        return [];
      var result = [];
      result.length = fieldNames.length;
      for (var i = 0; i < fieldNames.length; i++)
        result[i] = o[fieldNames[i]];
      return result;
    };
    init.instanceFromClassId = function(name) {
      return new init.allClasses[name]();
    };
    init.initializeEmptyInstance = function(name, o, fields) {
      init.allClasses[name].apply(o, fields);
      return o;
    };
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      var constructors = init.precompiled(processedClasses.collected);
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
      var isReflectable = array.length > unmangledNameIndex;
      if (isReflectable) {
        funcs[0].$reflectable = 1;
        funcs[0].$reflectionInfo = array;
        for (var i = 1; i < funcs.length; i++) {
          funcs[i].$reflectable = 2;
          funcs[i].$reflectionInfo = array;
        }
        var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
        var unmangledName = array[unmangledNameIndex];
        var reflectionName = unmangledName;
        if (getterStubName)
          mangledNames[getterStubName] = reflectionName;
        if (isSetter)
          reflectionName += "=";
        else if (!isGetter)
          reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
        mangledNames[name] = reflectionName;
        funcs[0].$reflectionName = reflectionName;
        funcs[0].$metadataIndex = unmangledNameIndex + 1;
        if (optionalParameterCount)
          prototype[unmangledName + "*"] = funcs[0];
      }
    }
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      var cache = null;
      return isIntercepted ? function(x) {
        if (cache === null)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
        return new cache(this, funcs[0], x, name);
      } : function() {
        if (cache === null)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
        return new cache(this, funcs[0], null, name);
      };
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor == null) {
        proto = Object.getPrototypeOf(object);
        if (proto == null || proto === Object.prototype)
          return C.PlainJavaScriptObject_methods;
        else
          return C.UnknownJavaScriptObject_methods;
      }
      return interceptor;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }],
      noSuchMethod$1: ["super$Interceptor$noSuchMethod", function(receiver, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, null, "get$noSuchMethod", 2, 0, null, 29],
      "%": "DOMImplementation|MediaError|MediaKeyError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList|SpeechRecognitionAlternative"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      noSuchMethod$1: [function(receiver, invocation) {
        return this.super$Interceptor$noSuchMethod(receiver, invocation);
      }, null, "get$noSuchMethod", 2, 0, null, 29]
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(_) {
        return 0;
      },
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        return String(receiver);
      }
    },
    JSArray: {
      "^": "Interceptor;",
      checkMutable$1: function(receiver, reason) {
        if (!!receiver.immutable$list)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      add$1: function(receiver, value) {
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      remove$1: function(receiver, element) {
        var i;
        this.checkGrowable$1(receiver, "remove");
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element)) {
            receiver.splice(i, 1);
            return true;
          }
        return false;
      },
      _removeWhere$2: function(receiver, test, removeMatching) {
        var retained, end, i, element, t1;
        retained = [];
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (test.call$1(element) !== true === removeMatching)
            retained.push(element);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        t1 = retained.length;
        if (t1 === end)
          return;
        this.set$length(receiver, t1);
        for (i = 0; i < retained.length; ++i)
          this.$indexSet(receiver, i, retained[i]);
      },
      where$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, f), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      expand$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.ExpandIterable(receiver, f), [H.getTypeArgumentByIndex(receiver, 0), null]);
      },
      addAll$1: function(receiver, collection) {
        var t1;
        this.checkGrowable$1(receiver, "addAll");
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      forEach$1: function(receiver, f) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      map$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
      },
      join$1: function(receiver, separator) {
        var t1, list, i, t2;
        t1 = receiver.length;
        list = Array(t1);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i) {
          t2 = H.S(receiver[i]);
          if (i >= t1)
            return H.ioore(list, i);
          list[i] = t2;
        }
        return list.join(separator);
      },
      take$1: function(receiver, n) {
        return H.SubListIterable$(receiver, 0, n, H.getTypeArgumentByIndex(receiver, 0));
      },
      skip$1: function(receiver, n) {
        return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
      },
      fold$2: function(receiver, initialValue, combine) {
        var $length, value, i;
        $length = receiver.length;
        for (value = initialValue, i = 0; i < $length; ++i) {
          value = combine.call$2(value, receiver[i]);
          if (receiver.length !== $length)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      firstWhere$2$orElse: function(receiver, test, orElse) {
        var end, i, element;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (test.call$1(element) === true)
            return element;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        if (orElse != null)
          return orElse.call$0();
        throw H.wrapException(H.IterableElementError_noElement());
      },
      firstWhere$1: function($receiver, test) {
        return this.firstWhere$2$orElse($receiver, test, null);
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        if (typeof start !== "number" || Math.floor(start) !== start)
          throw H.wrapException(H.argumentErrorValue(start));
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        if (end == null)
          end = receiver.length;
        else {
          if (typeof end !== "number" || Math.floor(end) !== end)
            throw H.wrapException(H.argumentErrorValue(end));
          if (end < start || end > receiver.length)
            throw H.wrapException(P.RangeError$range(end, start, receiver.length, null, null));
        }
        if (start === end)
          return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
        return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      removeRange$2: function(receiver, start, end) {
        this.checkGrowable$1(receiver, "removeRange");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        receiver.splice(start, end - start);
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var $length, i, t1;
        this.checkMutable$1(receiver, "set range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        if (skipCount + $length > iterable.length)
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i) {
            t1 = skipCount + i;
            if (t1 < 0 || t1 >= iterable.length)
              return H.ioore(iterable, t1);
            receiver[start + i] = iterable[t1];
          }
        else
          for (i = 0; i < $length; ++i) {
            t1 = skipCount + i;
            if (t1 < 0 || t1 >= iterable.length)
              return H.ioore(iterable, t1);
            receiver[start + i] = iterable[t1];
          }
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      any$1: function(receiver, test) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (test.call$1(receiver[i]) === true)
            return true;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return false;
      },
      every$1: function(receiver, test) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (test.call$1(receiver[i]) !== true)
            return false;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return true;
      },
      sort$1: function(receiver, compare) {
        var t1;
        this.checkMutable$1(receiver, "sort");
        t1 = compare == null ? P.core_Comparable_compare$closure() : compare;
        H.Sort__doSort(receiver, 0, receiver.length - 1, t1);
      },
      indexOf$2: function(receiver, element, start) {
        var i;
        if (start >= receiver.length)
          return -1;
        for (i = start; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      lastIndexOf$2: function(receiver, element, startIndex) {
        var i;
        startIndex = receiver.length - 1;
        for (i = startIndex; i >= 0; --i) {
          if (i >= receiver.length)
            return H.ioore(receiver, i);
          if (J.$eq$(receiver[i], element))
            return i;
        }
        return -1;
      },
      lastIndexOf$1: function($receiver, element) {
        return this.lastIndexOf$2($receiver, element, null);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      toList$1$growable: function(receiver, growable) {
        var t1;
        if (growable)
          t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        else {
          t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
          t1.fixed$length = Array;
          t1 = t1;
        }
        return t1;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$iterator: function(receiver) {
        return new J.ArrayIterator(receiver, receiver.length, 0, null);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        this.checkGrowable$1(receiver, "set length");
        if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
          throw H.wrapException(P.ArgumentError$value(newLength, "newLength", null));
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (!!receiver.immutable$list)
          H.throwExpression(new P.UnsupportedError("indexed set"));
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    JSUnmodifiableArray: {
      "^": "JSArray;"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current",
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.__interceptors$_current = null;
          return false;
        }
        this.__interceptors$_current = t1[t2];
        this.__interceptors$_index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      compareTo$1: function(receiver, b) {
        var bIsNegative;
        if (typeof b !== "number")
          throw H.wrapException(H.argumentErrorValue(b));
        if (receiver < b)
          return -1;
        else if (receiver > b)
          return 1;
        else if (receiver === b) {
          if (receiver === 0) {
            bIsNegative = this.get$isNegative(b);
            if (this.get$isNegative(receiver) === bIsNegative)
              return 0;
            if (this.get$isNegative(receiver))
              return -1;
            return 1;
          }
          return 0;
        } else if (isNaN(receiver)) {
          if (this.get$isNaN(b))
            return 0;
          return 1;
        } else
          return -1;
      },
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      get$isNaN: function(receiver) {
        return isNaN(receiver);
      },
      get$isFinite: function(receiver) {
        return isFinite(receiver);
      },
      remainder$1: function(receiver, b) {
        return receiver % b;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $add: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $sub: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver - other;
      },
      $mul: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver * other;
      },
      $tdiv: function(receiver, other) {
        if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
          return receiver / other | 0;
        else {
          if (typeof other !== "number")
            H.throwExpression(H.argumentErrorValue(other));
          return this.toInt$0(receiver / other);
        }
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
      },
      $shl: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      $shr: function(receiver, other) {
        var t1;
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      $and: function(receiver, other) {
        return (receiver & other) >>> 0;
      },
      $xor: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return (receiver ^ other) >>> 0;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $le: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver <= other;
      },
      $ge: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      $is$double: 1,
      $isnum: 1,
      $is$int: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      $is$double: 1,
      $isnum: 1
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      allMatches$2: function(receiver, string, start) {
        H.checkString(string);
        H.checkInt(start);
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return H.allMatchesInStringUnchecked(receiver, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, i;
        if (start < 0 || start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        t1 = receiver.length;
        if (start + t1 > string.length)
          return;
        for (i = 0; i < t1; ++i)
          if (this.codeUnitAt$1(string, start + i) !== this.codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      endsWith$1: function(receiver, other) {
        var otherLength, t1;
        H.checkString(other);
        otherLength = other.length;
        t1 = receiver.length;
        if (otherLength > t1)
          return false;
        return other === this.substring$1(receiver, t1 - otherLength);
      },
      replaceAll$2: function(receiver, from, to) {
        H.checkString(to);
        return H.stringReplaceAllUnchecked(receiver, from, to);
      },
      split$1: function(receiver, pattern) {
        return receiver.split(pattern);
      },
      startsWith$2: function(receiver, pattern, index) {
        var endIndex;
        H.checkInt(index);
        if (index > receiver.length)
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        if (typeof pattern === "string") {
          endIndex = index + pattern.length;
          if (endIndex > receiver.length)
            return false;
          return pattern === receiver.substring(index, endIndex);
        }
        return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        var t1;
        if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
          H.throwExpression(H.argumentErrorValue(startIndex));
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
          H.throwExpression(H.argumentErrorValue(endIndex));
        t1 = J.getInterceptor$n(startIndex);
        if (t1.$lt(startIndex, 0) === true)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (t1.$gt(startIndex, endIndex) === true)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (J.$gt$n(endIndex, receiver.length) === true)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      toLowerCase$0: function(receiver) {
        return receiver.toLowerCase();
      },
      toUpperCase$0: function(receiver) {
        return receiver.toUpperCase();
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this.codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      trimLeft$0: function(receiver) {
        var result, startIndex;
        if (typeof receiver.trimLeft != "undefined") {
          result = receiver.trimLeft();
          if (result.length === 0)
            return result;
          startIndex = this.codeUnitAt$1(result, 0) === 133 ? J.JSString__skipLeadingWhitespace(result, 1) : 0;
        } else {
          startIndex = J.JSString__skipLeadingWhitespace(receiver, 0);
          result = receiver;
        }
        if (startIndex === 0)
          return result;
        if (startIndex === result.length)
          return "";
        return result.substring(startIndex);
      },
      trimRight$0: function(receiver) {
        var result, endIndex, t1;
        if (typeof receiver.trimRight != "undefined") {
          result = receiver.trimRight();
          endIndex = result.length;
          if (endIndex === 0)
            return result;
          t1 = endIndex - 1;
          if (this.codeUnitAt$1(result, t1) === 133)
            endIndex = J.JSString__skipTrailingWhitespace(result, t1);
        } else {
          endIndex = J.JSString__skipTrailingWhitespace(receiver, receiver.length);
          result = receiver;
        }
        if (endIndex === result.length)
          return result;
        if (endIndex === 0)
          return "";
        return result.substring(0, endIndex);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (typeof times !== "number")
          return H.iae(times);
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      indexOf$2: function(receiver, pattern, start) {
        if (start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        return receiver.indexOf(pattern, start);
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      lastIndexOf$2: function(receiver, pattern, start) {
        var t1, t2;
        start = receiver.length;
        t1 = pattern.length;
        t2 = receiver.length;
        if (start + t1 > t2)
          start = t2 - t1;
        return receiver.lastIndexOf(pattern, start);
      },
      lastIndexOf$1: function($receiver, pattern) {
        return this.lastIndexOf$2($receiver, pattern, null);
      },
      contains$2: function(receiver, other, startIndex) {
        if (other == null)
          H.throwExpression(H.argumentErrorValue(other));
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      contains$1: function($receiver, other) {
        return this.contains$2($receiver, other, 0);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      compareTo$1: function(receiver, other) {
        var t1;
        if (typeof other !== "string")
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver === other)
          t1 = 0;
        else
          t1 = receiver < other ? -1 : 1;
        return t1;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $isString: 1,
      static: {JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 6158:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }, JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        }, JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }}
    }
  }], ["_isolate_helper", "dart:_isolate_helper",, H, {
    "^": "",
    _callInIsolate: function(isolate, $function) {
      var result = isolate.eval$1($function);
      if (!init.globalState.currentContext._isExecutingEvent)
        init.globalState.topEventLoop.run$0();
      return result;
    },
    leaveJsAsync: function() {
      --init.globalState.topEventLoop._activeJsAsyncCount;
    },
    startRootIsolate: function(entry, args) {
      var t1, t2, t3, t4, t5, rootContext;
      t1 = {};
      t1._captured_args_0 = args;
      args = args;
      t1._captured_args_0 = args;
      if (args == null) {
        args = [];
        t1._captured_args_0 = args;
        t2 = args;
      } else
        t2 = args;
      if (!J.getInterceptor(t2).$isList)
        throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
      t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
      t2._nativeDetectEnvironment$0();
      t2.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      t2.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      t2.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (t2.isWorker === true) {
        t2.mainManager = new H._MainManagerStub();
        t2._nativeInitWorkerMessageHandler$0();
      }
      init.globalState = t2;
      if (init.globalState.isWorker === true)
        return;
      t2 = init.globalState.nextIsolateId++;
      t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
      t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
      t5 = new H.RawReceivePortImpl(0, null, false);
      rootContext = new H._IsolateContext(t2, t3, t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      t4.add$1(0, 0);
      rootContext._addRegistration$2(0, t5);
      init.globalState.rootContext = rootContext;
      init.globalState.currentContext = rootContext;
      t2 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
      if (t3)
        rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
      else {
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
        if (t2)
          rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
        else
          rootContext.eval$1(entry);
      }
      init.globalState.topEventLoop.run$0();
    },
    IsolateNatives_computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (init.globalState.isWorker === true)
        return H.IsolateNatives_computeThisScriptFromTrace();
      return;
    },
    IsolateNatives_computeThisScriptFromTrace: function() {
      var stack, matches;
      stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(new P.UnsupportedError("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(new P.UnsupportedError("Cannot extract URI from \"" + H.S(stack) + "\""));
    },
    IsolateNatives__processWorkerMessage: [function(sender, e) {
      var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
      msg = new H._Deserializer(true, []).deserialize$1(e.data);
      t1 = J.getInterceptor$asx(msg);
      switch (t1.$index(msg, "command")) {
        case "start":
          init.globalState.currentManagerId = t1.$index(msg, "id");
          functionName = t1.$index(msg, "functionName");
          entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
          args = t1.$index(msg, "args");
          message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
          isSpawnUri = t1.$index(msg, "isSpawnUri");
          startPaused = t1.$index(msg, "startPaused");
          replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
          t1 = init.globalState.nextIsolateId++;
          t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
          t4 = new H.RawReceivePortImpl(0, null, false);
          context = new H._IsolateContext(t1, t2, t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          t3.add$1(0, 0);
          context._addRegistration$2(0, t4);
          init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
          init.globalState.currentContext = context;
          init.globalState.topEventLoop.run$0();
          break;
        case "spawn-worker":
          break;
        case "message":
          if (t1.$index(msg, "port") != null)
            J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
          init.globalState.topEventLoop.run$0();
          break;
        case "close":
          init.globalState.managers.remove$1(0, $.$get$IsolateNatives_workerIds().$index(0, sender));
          sender.terminate();
          init.globalState.topEventLoop.run$0();
          break;
        case "log":
          H.IsolateNatives__log(t1.$index(msg, "msg"));
          break;
        case "print":
          if (init.globalState.isWorker === true) {
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", msg]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          } else
            P.print(t1.$index(msg, "msg"));
          break;
        case "error":
          throw H.wrapException(t1.$index(msg, "msg"));
      }
    }, null, null, 4, 0, null, 79, 2],
    IsolateNatives__log: function(msg) {
      var trace, t1, t2, exception;
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = P.LinkedHashMap__makeLiteral(["command", "log", "msg", msg]);
        t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
        t1.toString;
        self.postMessage(t2);
      } else
        try {
          self.console.log(msg);
        } catch (exception) {
          H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          throw H.wrapException(P.Exception_Exception(trace));
        }
    },
    IsolateNatives__getJSFunctionFromName: function(functionName) {
      return init.globalFunctions[functionName]();
    },
    IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
      var context, t1, t2, t3;
      context = init.globalState.currentContext;
      t1 = context.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
      t1 = context.controlPort;
      t2 = init.globalState.currentContext.id;
      t3 = context.pauseCapability;
      J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
      t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
      if (startPaused === true) {
        context.addPause$2(t3, t3);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
      } else
        t2.call$0();
    },
    _clone: function(message) {
      return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(message));
    },
    startRootIsolate_closure: {
      "^": "Closure:1;__isolate_helper$_box_0,_captured_entry_1",
      call$0: function() {
        this._captured_entry_1.call$1(this.__isolate_helper$_box_0._captured_args_0);
      }
    },
    startRootIsolate_closure0: {
      "^": "Closure:1;__isolate_helper$_box_0,_captured_entry_2",
      call$0: function() {
        this._captured_entry_2.call$2(this.__isolate_helper$_box_0._captured_args_0, null);
      }
    },
    _Manager: {
      "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
      _nativeDetectEnvironment$0: function() {
        var t1, t2, t3;
        t1 = self.window == null;
        t2 = self.Worker;
        t3 = t1 && !!self.postMessage;
        this.isWorker = t3;
        if (!t3)
          t2 = t2 != null && $.$get$IsolateNatives_thisScript() != null;
        else
          t2 = true;
        this.supportsWorkers = t2;
        this.fromCommandLine = t1 && !t3;
      },
      _nativeInitWorkerMessageHandler$0: function() {
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, this.mainManager);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      },
      static: {_Manager__serializePrintMessage: [function(object) {
          var t1 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", object]);
          return new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
        }, null, null, 2, 0, null, 22]}
    },
    _IsolateContext: {
      "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
      addPause$2: function(authentification, resume) {
        if (!this.pauseCapability.$eq(0, authentification))
          return;
        if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
          this.isPaused = true;
        this._updateGlobalState$0();
      },
      removePause$1: function(resume) {
        var t1, t2, $event, t3, t4, t5;
        if (!this.isPaused)
          return;
        t1 = this.pauseTokens;
        t1.remove$1(0, resume);
        if (t1._collection$_length === 0) {
          for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
            if (0 >= t2)
              return H.ioore(t1, 0);
            $event = t1.pop();
            t2 = init.globalState.topEventLoop.events;
            t3 = t2._head;
            t4 = t2._table;
            t5 = t4.length;
            t3 = (t3 - 1 & t5 - 1) >>> 0;
            t2._head = t3;
            if (t3 < 0 || t3 >= t5)
              return H.ioore(t4, t3);
            t4[t3] = $event;
            if (t3 === t2._tail)
              t2._grow$0();
            ++t2._modificationCount;
          }
          this.isPaused = false;
        }
        this._updateGlobalState$0();
      },
      addDoneListener$2: function(responsePort, response) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          this.doneHandlers = [];
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 1;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = response;
            return;
          }
        t2.push(responsePort);
        this.doneHandlers.push(response);
      },
      removeDoneListener$1: function(responsePort) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          return;
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 2;
            t1.toString;
            if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
              H.throwExpression(new P.UnsupportedError("removeRange"));
            P.RangeError_checkValidRange(i, t2, t1.length, null, null, null);
            t1.splice(i, t2 - i);
            return;
          }
      },
      setErrorsFatal$2: function(authentification, errorsAreFatal) {
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        this.errorsAreFatal = errorsAreFatal;
      },
      handlePing$3: function(responsePort, pingType, response) {
        var t1 = J.getInterceptor(pingType);
        if (!t1.$eq(pingType, 0))
          t1 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          J.send$1$x(responsePort, response);
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(new H._IsolateContext_handlePing_respond(responsePort, response));
      },
      handleKill$2: function(authentification, priority) {
        var t1;
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        t1 = J.getInterceptor(priority);
        if (!t1.$eq(priority, 0))
          t1 = t1.$eq(priority, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          this.kill$0();
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(this.get$kill());
      },
      handleUncaughtError$2: function(error, stackTrace) {
        var t1, message, t2;
        t1 = this.errorPorts;
        if (t1._collection$_length === 0) {
          if (this.errorsAreFatal === true && this === init.globalState.rootContext)
            return;
          if (self.console && self.console.error)
            self.console.error(error, stackTrace);
          else {
            P.print(error);
            if (stackTrace != null)
              P.print(stackTrace);
          }
          return;
        }
        message = Array(2);
        message.fixed$length = Array;
        message[0] = J.toString$0$(error);
        message[1] = stackTrace == null ? null : J.toString$0$(stackTrace);
        for (t2 = new P.LinkedHashSetIterator(t1, t1._collection$_modifications, null, null), t2._collection$_cell = t1._collection$_first; t2.moveNext$0();)
          J.send$1$x(t2._collection$_current, message);
      },
      eval$1: function(code) {
        var old, result, oldIsExecutingEvent, e, s, exception, t1;
        old = init.globalState.currentContext;
        init.globalState.currentContext = this;
        $ = this.isolateStatics;
        result = null;
        oldIsExecutingEvent = this._isExecutingEvent;
        this._isExecutingEvent = true;
        try {
          result = code.call$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
          if (this.errorsAreFatal === true) {
            this.kill$0();
            if (this === init.globalState.rootContext)
              throw exception;
          }
        } finally {
          this._isExecutingEvent = oldIsExecutingEvent;
          init.globalState.currentContext = old;
          if (old != null)
            $ = old.get$isolateStatics();
          if (this._scheduledControlEvents != null)
            for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
              this._scheduledControlEvents.removeFirst$0().call$0();
        }
        return result;
      },
      handleControlMessage$1: function(message) {
        var t1 = J.getInterceptor$asx(message);
        switch (t1.$index(message, 0)) {
          case "pause":
            this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "resume":
            this.removePause$1(t1.$index(message, 1));
            break;
          case "add-ondone":
            this.addDoneListener$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "remove-ondone":
            this.removeDoneListener$1(t1.$index(message, 1));
            break;
          case "set-errors-fatal":
            this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "ping":
            this.handlePing$3(t1.$index(message, 1), t1.$index(message, 2), t1.$index(message, 3));
            break;
          case "kill":
            this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "getErrors":
            this.errorPorts.add$1(0, t1.$index(message, 1));
            break;
          case "stopErrors":
            this.errorPorts.remove$1(0, t1.$index(message, 1));
            break;
        }
      },
      lookup$1: function(portId) {
        return this.ports.$index(0, portId);
      },
      _addRegistration$2: function(portId, port) {
        var t1 = this.ports;
        if (t1.containsKey$1(portId))
          throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
        t1.$indexSet(0, portId, port);
      },
      _updateGlobalState$0: function() {
        var t1 = this.ports;
        if (t1.get$length(t1) - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
          init.globalState.isolates.$indexSet(0, this.id, this);
        else
          this.kill$0();
      },
      kill$0: [function() {
        var t1, t2, i, responsePort, t3;
        t1 = this._scheduledControlEvents;
        if (t1 != null)
          t1.clear$0(0);
        for (t1 = this.ports, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          t2.get$current().__isolate_helper$_close$0();
        t1.clear$0(0);
        this.weakPorts.clear$0(0);
        init.globalState.isolates.remove$1(0, this.id);
        this.errorPorts.clear$0(0);
        if (this.doneHandlers != null) {
          for (i = 0; t1 = this.doneHandlers, t2 = t1.length, i < t2; i += 2) {
            responsePort = t1[i];
            t3 = i + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            J.send$1$x(responsePort, t1[t3]);
          }
          this.doneHandlers = null;
        }
      }, "call$0", "get$kill", 0, 0, 2]
    },
    _IsolateContext_handlePing_respond: {
      "^": "Closure:2;_captured_responsePort_0,_captured_response_1",
      call$0: [function() {
        J.send$1$x(this._captured_responsePort_0, this._captured_response_1);
      }, null, null, 0, 0, null, "call"]
    },
    _EventLoop: {
      "^": "Object;events,_activeJsAsyncCount",
      dequeue$0: function() {
        var t1 = this.events;
        if (t1._head === t1._tail)
          return;
        return t1.removeFirst$0();
      },
      runIteration$0: function() {
        var $event, t1, t2;
        $event = this.dequeue$0();
        if ($event == null) {
          if (init.globalState.rootContext != null)
            if (init.globalState.isolates.containsKey$1(init.globalState.rootContext.id))
              if (init.globalState.fromCommandLine === true) {
                t1 = init.globalState.rootContext.ports;
                t1 = t1.get$isEmpty(t1);
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
          t1 = init.globalState;
          if (t1.isWorker === true) {
            t2 = t1.isolates;
            t2 = t2.get$isEmpty(t2) && t1.topEventLoop._activeJsAsyncCount === 0;
          } else
            t2 = false;
          if (t2) {
            t1 = t1.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "close"]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
          return false;
        }
        $event.process$0();
        return true;
      },
      _runHelper$0: function() {
        if (self.window != null)
          new H._EventLoop__runHelper_next(this).call$0();
        else
          for (; this.runIteration$0();)
            ;
      },
      run$0: function() {
        var e, trace, exception, t1, t2;
        if (init.globalState.isWorker !== true)
          this._runHelper$0();
        else
          try {
            this._runHelper$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            trace = H.getTraceFromException(exception);
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
      }
    },
    _EventLoop__runHelper_next: {
      "^": "Closure:2;_captured_this_0",
      call$0: function() {
        if (!this._captured_this_0.runIteration$0())
          return;
        P.Timer_Timer(C.Duration_0, this);
      }
    },
    _IsolateEvent: {
      "^": "Object;isolate,fn,message>",
      process$0: function() {
        var t1 = this.isolate;
        if (t1.get$isPaused()) {
          t1.get$delayedEvents().push(this);
          return;
        }
        t1.eval$1(this.fn);
      }
    },
    _MainManagerStub: {
      "^": "Object;"
    },
    IsolateNatives__processWorkerMessage_closure: {
      "^": "Closure:1;_captured_entryPoint_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_startPaused_4,_captured_replyTo_5",
      call$0: function() {
        H.IsolateNatives__startIsolate(this._captured_entryPoint_0, this._captured_args_1, this._captured_message_2, this._captured_isSpawnUri_3, this._captured_startPaused_4, this._captured_replyTo_5);
      }
    },
    IsolateNatives__startIsolate_runStartFunction: {
      "^": "Closure:2;_captured_topLevel_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_context_4",
      call$0: function() {
        var t1, t2, t3;
        this._captured_context_4.set$initialized(true);
        if (this._captured_isSpawnUri_3 !== true)
          this._captured_topLevel_0.call$1(this._captured_message_2);
        else {
          t1 = this._captured_topLevel_0;
          t2 = H.getDynamicRuntimeType();
          t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          if (t3)
            t1.call$2(this._captured_args_1, this._captured_message_2);
          else {
            t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
            if (t2)
              t1.call$1(this._captured_args_1);
            else
              t1.call$0();
          }
        }
      }
    },
    _BaseSendPort: {
      "^": "Object;"
    },
    _NativeJsSendPort: {
      "^": "_BaseSendPort;_receivePort,_isolateId",
      send$1: function(_, message) {
        var isolate, t1, msg, t2;
        isolate = init.globalState.isolates.$index(0, this._isolateId);
        if (isolate == null)
          return;
        t1 = this._receivePort;
        if (t1.get$_isClosed())
          return;
        msg = H._clone(message);
        if (isolate.get$controlPort() === t1) {
          isolate.handleControlMessage$1(msg);
          return;
        }
        t1 = init.globalState.topEventLoop;
        t2 = "receive " + H.S(message);
        t1.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), t2));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._NativeJsSendPort && J.$eq$(this._receivePort, other._receivePort);
      },
      get$hashCode: function(_) {
        return this._receivePort.get$__isolate_helper$_id();
      }
    },
    _NativeJsSendPort_send_closure: {
      "^": "Closure:1;_captured_this_0,_captured_msg_1",
      call$0: function() {
        var t1 = this._captured_this_0._receivePort;
        if (!t1.get$_isClosed())
          t1.__isolate_helper$_add$1(this._captured_msg_1);
      }
    },
    _WorkerSendPort: {
      "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
      send$1: function(_, message) {
        var t1, workerMessage, manager;
        t1 = P.LinkedHashMap__makeLiteral(["command", "message", "port", this, "msg", message]);
        workerMessage = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
        if (init.globalState.isWorker === true) {
          init.globalState.mainManager.toString;
          self.postMessage(workerMessage);
        } else {
          manager = init.globalState.managers.$index(0, this._workerId);
          if (manager != null)
            manager.postMessage(workerMessage);
        }
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._WorkerSendPort && J.$eq$(this._workerId, other._workerId) && J.$eq$(this._isolateId, other._isolateId) && J.$eq$(this._receivePortId, other._receivePortId);
      },
      get$hashCode: function(_) {
        var t1, t2, t3;
        t1 = J.$shl$n(this._workerId, 16);
        t2 = J.$shl$n(this._isolateId, 8);
        t3 = this._receivePortId;
        if (typeof t3 !== "number")
          return H.iae(t3);
        return (t1 ^ t2 ^ t3) >>> 0;
      }
    },
    RawReceivePortImpl: {
      "^": "Object;__isolate_helper$_id<,_handler,_isClosed<",
      __isolate_helper$_close$0: function() {
        this._isClosed = true;
        this._handler = null;
      },
      close$0: [function(_) {
        var t1, t2;
        if (this._isClosed)
          return;
        this._isClosed = true;
        this._handler = null;
        t1 = init.globalState.currentContext;
        t2 = this.__isolate_helper$_id;
        t1.ports.remove$1(0, t2);
        t1.weakPorts.remove$1(0, t2);
        t1._updateGlobalState$0();
      }, null, "get$close", 0, 0, null],
      __isolate_helper$_add$1: function(dataEvent) {
        if (this._isClosed)
          return;
        this._handler$1(dataEvent);
      },
      _handler$1: function(arg0) {
        return this._handler.call$1(arg0);
      },
      $isRawReceivePort: 1
    },
    TimerImpl: {
      "^": "Object;_once,_inEventLoop,_handle",
      cancel$0: [function() {
        if (self.setTimeout != null) {
          if (this._inEventLoop)
            throw H.wrapException(new P.UnsupportedError("Timer in event loop cannot be canceled."));
          if (this._handle == null)
            return;
          H.leaveJsAsync();
          var t1 = this._handle;
          if (this._once)
            self.clearTimeout(t1);
          else
            self.clearInterval(t1);
          this._handle = null;
        } else
          throw H.wrapException(new P.UnsupportedError("Canceling a timer."));
      }, "call$0", "get$cancel", 0, 0, 2],
      get$isActive: function() {
        return this._handle != null;
      },
      TimerImpl$periodic$2: function(milliseconds, callback) {
        if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Periodic timer."));
      },
      TimerImpl$2: function(milliseconds, callback) {
        var t1, t2;
        if (milliseconds === 0)
          t1 = self.setTimeout == null || init.globalState.isWorker === true;
        else
          t1 = false;
        if (t1) {
          this._handle = 1;
          t1 = init.globalState.topEventLoop;
          t2 = init.globalState.currentContext;
          t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
          this._inEventLoop = true;
        } else if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
      },
      static: {TimerImpl$: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(true, false, null);
          t1.TimerImpl$2(milliseconds, callback);
          return t1;
        }, TimerImpl$periodic: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(false, false, null);
          t1.TimerImpl$periodic$2(milliseconds, callback);
          return t1;
        }}
    },
    TimerImpl_internalCallback: {
      "^": "Closure:2;_captured_this_0,_captured_callback_1",
      call$0: function() {
        this._captured_this_0._handle = null;
        this._captured_callback_1.call$0();
      }
    },
    TimerImpl_internalCallback0: {
      "^": "Closure:2;_captured_this_2,_captured_callback_3",
      call$0: [function() {
        this._captured_this_2._handle = null;
        H.leaveJsAsync();
        this._captured_callback_3.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    TimerImpl$periodic_closure: {
      "^": "Closure:1;_captured_this_0,_captured_callback_1",
      call$0: [function() {
        this._captured_callback_1.call$1(this._captured_this_0);
      }, null, null, 0, 0, null, "call"]
    },
    CapabilityImpl: {
      "^": "Object;__isolate_helper$_id<",
      get$hashCode: function(_) {
        var hash, t1, t2;
        hash = this.__isolate_helper$_id;
        t1 = J.getInterceptor$n(hash);
        t2 = t1.$shr(hash, 0);
        t1 = t1.$tdiv(hash, 4294967296);
        if (typeof t1 !== "number")
          return H.iae(t1);
        hash = t2 ^ t1;
        hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
        hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
        hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
        return (hash ^ hash >>> 16) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof H.CapabilityImpl) {
          t1 = this.__isolate_helper$_id;
          t2 = other.__isolate_helper$_id;
          return t1 == null ? t2 == null : t1 === t2;
        }
        return false;
      }
    },
    _Serializer: {
      "^": "Object;_serializeSendPorts,serializedObjectIds",
      serialize$1: [function(x) {
        var t1, serializationId, serializeTearOff, t2, $name;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        t1 = this.serializedObjectIds;
        serializationId = t1.$index(0, x);
        if (serializationId != null)
          return ["ref", serializationId];
        t1.$indexSet(0, x, t1.get$length(t1));
        t1 = J.getInterceptor(x);
        if (!!t1.$isNativeByteBuffer)
          return ["buffer", x];
        if (!!t1.$isNativeTypedData)
          return ["typed", x];
        if (!!t1.$isJSIndexable)
          return this.serializeJSIndexable$1(x);
        if (!!t1.$isInternalMap) {
          serializeTearOff = this.get$serialize();
          t2 = x.get$keys();
          t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "Iterable", 0), null);
          t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
          t1 = t1.get$values(x);
          t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
          return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0))];
        }
        if (!!t1.$isJSObject)
          return this.serializeJSObject$1(x);
        if (!!t1.$isInterceptor)
          this.unsupported$1(x);
        if (!!t1.$isRawReceivePort)
          this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
        if (!!t1.$is_NativeJsSendPort)
          return this.serializeJsSendPort$1(x);
        if (!!t1.$is_WorkerSendPort)
          return this.serializeWorkerSendPort$1(x);
        if (!!t1.$isClosure) {
          $name = x.$name;
          if ($name == null)
            this.unsupported$2(x, "Closures can't be transmitted:");
          return ["function", $name];
        }
        if (!!t1.$isCapabilityImpl)
          return ["capability", x.__isolate_helper$_id];
        if (!(x instanceof P.Object))
          this.unsupported$1(x);
        return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
      }, "call$1", "get$serialize", 2, 0, 0, 27],
      unsupported$2: function(x, message) {
        throw H.wrapException(new P.UnsupportedError(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
      },
      unsupported$1: function(x) {
        return this.unsupported$2(x, null);
      },
      serializeJSIndexable$1: function(indexable) {
        var serialized = this.serializeArray$1(indexable);
        if (!!indexable.fixed$length)
          return ["fixed", serialized];
        if (!indexable.fixed$length)
          return ["extendable", serialized];
        if (!indexable.immutable$list)
          return ["mutable", serialized];
        if (indexable.constructor === Array)
          return ["const", serialized];
        this.unsupported$2(indexable, "Can't serialize indexable: ");
      },
      serializeArray$1: function(x) {
        var serialized, i, t1;
        serialized = [];
        C.JSArray_methods.set$length(serialized, x.length);
        for (i = 0; i < x.length; ++i) {
          t1 = this.serialize$1(x[i]);
          if (i >= serialized.length)
            return H.ioore(serialized, i);
          serialized[i] = t1;
        }
        return serialized;
      },
      serializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
        return x;
      },
      serializeJSObject$1: function(x) {
        var keys, values, i, t1;
        if (!!x.constructor && x.constructor !== Object)
          this.unsupported$2(x, "Only plain JS Objects are supported:");
        keys = Object.keys(x);
        values = [];
        C.JSArray_methods.set$length(values, keys.length);
        for (i = 0; i < keys.length; ++i) {
          t1 = this.serialize$1(x[keys[i]]);
          if (i >= values.length)
            return H.ioore(values, i);
          values[i] = t1;
        }
        return ["js-object", keys, values];
      },
      serializeWorkerSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", x._workerId, x._isolateId, x._receivePortId];
        return ["raw sendport", x];
      },
      serializeJsSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$__isolate_helper$_id()];
        return ["raw sendport", x];
      }
    },
    _Deserializer: {
      "^": "Object;_adjustSendPorts,deserializedObjects",
      deserialize$1: [function(x) {
        var serializationId, t1, result, classId, fields, emptyInstance;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        if (typeof x !== "object" || x === null || x.constructor !== Array)
          throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
        switch (C.JSArray_methods.get$first(x)) {
          case "ref":
            if (1 >= x.length)
              return H.ioore(x, 1);
            serializationId = x[1];
            t1 = this.deserializedObjects;
            if (serializationId >>> 0 !== serializationId || serializationId >= t1.length)
              return H.ioore(t1, serializationId);
            return t1[serializationId];
          case "buffer":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "typed":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "fixed":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            t1.fixed$length = Array;
            return t1;
          case "extendable":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            return t1;
          case "mutable":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return this.deserializeArrayInPlace$1(result);
          case "const":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            t1.fixed$length = Array;
            return t1;
          case "map":
            return this.deserializeMap$1(x);
          case "sendport":
            return this.deserializeSendPort$1(x);
          case "raw sendport":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "js-object":
            return this.deserializeJSObject$1(x);
          case "function":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = init.globalFunctions[x[1]]();
            this.deserializedObjects.push(result);
            return result;
          case "capability":
            if (1 >= x.length)
              return H.ioore(x, 1);
            return new H.CapabilityImpl(x[1]);
          case "dart":
            t1 = x.length;
            if (1 >= t1)
              return H.ioore(x, 1);
            classId = x[1];
            if (2 >= t1)
              return H.ioore(x, 2);
            fields = x[2];
            emptyInstance = init.instanceFromClassId(classId);
            this.deserializedObjects.push(emptyInstance);
            this.deserializeArrayInPlace$1(fields);
            return init.initializeEmptyInstance(classId, emptyInstance, fields);
          default:
            throw H.wrapException("couldn't deserialize: " + H.S(x));
        }
      }, "call$1", "get$deserialize", 2, 0, 0, 27],
      deserializeArrayInPlace$1: function(x) {
        var t1, i, t2;
        t1 = J.getInterceptor$asx(x);
        i = 0;
        while (true) {
          t2 = t1.get$length(x);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.$indexSet(x, i, this.deserialize$1(t1.$index(x, i)));
          ++i;
        }
        return x;
      },
      deserializeMap$1: function(x) {
        var t1, keys, values, result, t2, i;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        values = x[2];
        result = P.LinkedHashMap__makeEmpty();
        this.deserializedObjects.push(result);
        keys = J.toList$0$ax(J.map$1$ax(keys, this.get$deserialize()));
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i)
          result.$indexSet(0, t1.$index(keys, i), this.deserialize$1(t2.$index(values, i)));
        return result;
      },
      deserializeSendPort$1: function(x) {
        var t1, managerId, isolateId, receivePortId, isolate, receivePort, result;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        managerId = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        isolateId = x[2];
        if (3 >= t1)
          return H.ioore(x, 3);
        receivePortId = x[3];
        if (J.$eq$(managerId, init.globalState.currentManagerId)) {
          isolate = init.globalState.isolates.$index(0, isolateId);
          if (isolate == null)
            return;
          receivePort = isolate.lookup$1(receivePortId);
          if (receivePort == null)
            return;
          result = new H._NativeJsSendPort(receivePort, isolateId);
        } else
          result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
        this.deserializedObjects.push(result);
        return result;
      },
      deserializeJSObject$1: function(x) {
        var t1, keys, values, o, t2, i, t3;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        values = x[2];
        o = {};
        this.deserializedObjects.push(o);
        t1 = J.getInterceptor$asx(keys);
        t2 = J.getInterceptor$asx(values);
        i = 0;
        while (true) {
          t3 = t1.get$length(keys);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
          ++i;
        }
        return o;
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable Map"));
    },
    getType: function(index) {
      return init.types[index];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives__parseIntError: function(source, handleError) {
      if (handleError == null)
        throw H.wrapException(new P.FormatException(source, null, null));
      return handleError.call$1(source);
    },
    Primitives_parseInt: function(source, radix, handleError) {
      var match, decimalMatch;
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return H.Primitives__parseIntError(source, handleError);
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = match[3];
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return H.Primitives__parseIntError(source, handleError);
    },
    Primitives__parseDoubleError: function(source, handleError) {
      if (handleError == null)
        throw H.wrapException(new P.FormatException("Invalid double", source, null));
      return handleError.call$1(source);
    },
    Primitives_parseDouble: function(source, handleError) {
      var result, trimmed;
      H.checkString(source);
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return H.Primitives__parseDoubleError(source, handleError);
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = C.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return H.Primitives__parseDoubleError(source, handleError);
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      var $name, decompiled;
      $name = C.JS_CONST_8ZY(J.getInterceptor(object));
      if ($name === "Object") {
        decompiled = String(object.constructor).match(/^\s*function\s*([\w$]*)\s*\(/)[1];
        if (typeof decompiled === "string")
          $name = /^\w+$/.test(decompiled) ? decompiled : $name;
      }
      if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives_dateNow: [function() {
      return Date.now();
    }, "call$0", "_js_helper_Primitives_dateNow$closure", 0, 0, 81],
    Primitives_initTicker: function() {
      var $window, performance;
      if ($.Primitives_timerFrequency != null)
        return;
      $.Primitives_timerFrequency = 1000;
      $.Primitives_timerTicks = H._js_helper_Primitives_dateNow$closure();
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver.millisecondsSinceEpoch);
      return receiver.date;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, namedArgumentList;
      t1 = {};
      t1._captured_argumentCount_0 = 0;
      $arguments = [];
      namedArgumentList = [];
      t1._captured_argumentCount_0 = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1._captured_names_1 = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, "call" + "$" + t1._captured_argumentCount_0 + t1._captured_names_1, 0, $arguments, namedArgumentList, null));
    },
    Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
      var $arguments, t1;
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      t1 = $arguments.length;
      if (t1 === 0) {
        if (!!$function.call$0)
          return $function.call$0();
      } else if (t1 === 1) {
        if (!!$function.call$1)
          return $function.call$1($arguments[0]);
      } else if (t1 === 2) {
        if (!!$function.call$2)
          return $function.call$2($arguments[0], $arguments[1]);
      } else if (t1 === 3)
        if (!!$function.call$3)
          return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
      return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
    },
    Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
      var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
      argumentCount = $arguments.length;
      jsFunction = $function["call" + "$" + argumentCount];
      if (jsFunction == null) {
        jsFunction = J.getInterceptor($function)["call*"];
        if (jsFunction == null)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        requiredArgumentCount = info.requiredParameterCount;
        maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
        if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        $arguments = P.List_List$from($arguments, true, null);
        for (pos = argumentCount; pos < maxArgumentCount; ++pos)
          C.JSArray_methods.add$1($arguments, init.metadata[info.defaultValue$1(0, pos)]);
      }
      return jsFunction.apply($function, $arguments);
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = J.get$length$asx(indexable);
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: [function() {
      return J.toString$0$(this.dartException);
    }, null, null, 0, 0, null],
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, t2, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              t2 = H.S(message) + " (Error " + ieErrorCode + ")";
              return t1.call$1(new H.NullError(t2, null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(new H.NullError(message, match == null ? null : match.method));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception, null);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception, null);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      var t1 = J.getInterceptor(numberOfArguments);
      if (t1.$eq(numberOfArguments, 0))
        return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
      else if (t1.$eq(numberOfArguments, 1))
        return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
      else if (t1.$eq(numberOfArguments, 2))
        return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
      else if (t1.$eq(numberOfArguments, 3))
        return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
      else if (t1.$eq(numberOfArguments, 4))
        return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
      else
        throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    }, null, null, 14, 0, null, 96, 49, 56, 60, 67, 70, 73],
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, init.globalState.currentContext, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else
        $constructor = function(a, b, c, d) {
          this.$initialize(a, b, c, d);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      t1 = !isStatic;
      if (t1) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(t) {
          return function() {
            return H.getType(t);
          };
        }(functionType);
      else if (t1 && typeof functionType == "function") {
        getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
        signatureFunction = function(f, r) {
          return function() {
            return f.apply({$receiver: r(this)}, arguments);
          };
        }(functionType, getReceiver);
      } else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t1, stubName, arity, lookedUpFunction;
      H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    propertyTypeCastError: function(value, property) {
      var t1 = J.getInterceptor$asx(property);
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = typeof value === "object" && J.getInterceptor(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
    },
    buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
      return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
    },
    getDynamicRuntimeType: function() {
      return C.C_DynamicRuntimeType;
    },
    random64: function() {
      return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    asyncHelper: function(object, bodyFunctionOrErrorCode, completer) {
      var future;
      if (bodyFunctionOrErrorCode === 0) {
        J.complete$1$x(completer, object);
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
        return;
      }
      if (!!J.getInterceptor(object).$isFuture)
        future = object;
      else {
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        future._asyncComplete$1(object);
      }
      future.then$2$onError(H._wrapJsFunctionForAsync(bodyFunctionOrErrorCode, 0), new H.asyncHelper_closure(bodyFunctionOrErrorCode));
      return completer.get$future();
    },
    _wrapJsFunctionForAsync: function($function, errorCode) {
      return new H._wrapJsFunctionForAsync_closure(errorCode, function(errorCode, result) {
        while (true)
          try {
            $function(errorCode, result);
            break;
          } catch (error) {
            result = error;
            errorCode = 1;
          }
      });
    },
    createRuntimeType: function($name) {
      return new H.TypeImpl($name, null);
    },
    setRuntimeTypeInfo: function(target, rti) {
      if (target != null)
        target.$builtinTypeInfo = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$builtinTypeInfo;
    },
    getRuntimeTypeArguments: function(target, substitutionName) {
      return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      if (rti == null)
        return "dynamic";
      else if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return rti[0].builtin$cls + H.joinArguments(rti, 1, onTypeVariable);
      else if (typeof rti == "function")
        return rti.builtin$cls;
      else if (typeof rti === "number" && Math.floor(rti) === rti)
        return C.JSInt_methods.toString$0(rti);
      else
        return;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var buffer, index, firstArgument, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents = t1 + ", ";
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
      }
      return allDynamic ? "" : "<" + H.S(buffer) + ">";
    },
    substitute: function(substitution, $arguments) {
      if (typeof substitution == "function") {
        substitution = H.invokeOn(substitution, null, $arguments);
        if (substitution == null || typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
          $arguments = substitution;
        else if (typeof substitution == "function")
          $arguments = H.invokeOn(substitution, null, $arguments);
      }
      return $arguments;
    },
    areSubtypes: function(s, t) {
      var len, i;
      if (s == null || t == null)
        return true;
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtype(s[i], t[i]))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        if (!('$is' + H.runtimeTypeToString(typeOfT, null) in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t2 ? t.slice(1) : null;
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, sLength, tLength, i, t2;
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      sLength = s.length;
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        t1 = s[i];
        t2 = t[i];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      t1 = Object.getOwnPropertyNames(t);
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
      if (!('func' in s))
        return false;
      if ("void" in s) {
        if (!("void" in t) && "ret" in t)
          return false;
      } else if (!("void" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (pos = 0; pos < sParametersLen; ++pos) {
          t1 = sParameterTypes[pos];
          t2 = tParameterTypes[pos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    invokeOn: function($function, receiver, $arguments) {
      return $function.apply(receiver, $arguments);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      return H.Primitives_objectHashCode(object);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = $.getTagFunction.call$1(obj);
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = $.alternateTagFunction.call$2(obj, tag);
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_gkc();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    allMatchesInStringUnchecked: function(pattern, string, startIndex) {
      var result, $length, patternLength, position, endIndex;
      result = H.setRuntimeTypeInfo([], [P.Match]);
      $length = string.length;
      patternLength = pattern.length;
      for (; true;) {
        position = string.indexOf(pattern, startIndex);
        if (position === -1)
          break;
        result.push(new H.StringMatch(position, string, pattern));
        endIndex = position + patternLength;
        if (endIndex === $length)
          break;
        else
          startIndex = position === endIndex ? startIndex + 1 : endIndex;
      }
      return result;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other === "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else {
        t1 = J.getInterceptor(other);
        if (!!t1.$isJSSyntaxRegExp) {
          t1 = C.JSString_methods.substring$1(receiver, startIndex);
          return other._nativeRegExp.test(H.checkString(t1));
        } else
          return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
      }
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var $length, t1, i;
      H.checkString(replacement);
      if (pattern === "")
        if (receiver === "")
          return replacement;
        else {
          $length = receiver.length;
          for (t1 = replacement, i = 0; i < $length; ++i)
            t1 = t1 + receiver[i] + replacement;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      else
        return receiver.replace(new RegExp(pattern.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;_map",
      $asUnmodifiableMapView: Isolate.functionThatReturnsNull,
      $asMapView: Isolate.functionThatReturnsNull,
      $asMap: Isolate.functionThatReturnsNull,
      $isMap: 1
    },
    ConstantMap: {
      "^": "Object;",
      get$isEmpty: function(_) {
        return J.$eq$(this.get$length(this), 0);
      },
      get$isNotEmpty: function(_) {
        return !J.$eq$(this.get$length(this), 0);
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      $indexSet: function(_, key, val) {
        return H.ConstantMap__throwUnmodifiable();
      },
      $isMap: 1
    },
    ConstantStringMap: {
      "^": "ConstantMap;length>,__js_helper$_jsObject,_keys",
      containsKey$1: function(key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this.__js_helper$_jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this.__js_helper$_jsObject[key];
      },
      forEach$1: function(_, f) {
        var keys, i, key;
        keys = this._keys;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          f.call$2(key, this._fetch$1(key));
        }
      },
      get$keys: function() {
        return H.setRuntimeTypeInfo(new H._ConstantMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
      }
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;__js_helper$_map",
      get$iterator: function(_) {
        return J.get$iterator$ax(this.__js_helper$_map._keys);
      },
      get$length: function(_) {
        return J.get$length$asx(this.__js_helper$_map._keys);
      }
    },
    JSInvocationMirror: {
      "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
      get$memberName: function() {
        return this.__js_helper$_memberName;
      },
      get$positionalArguments: function() {
        var t1, argumentCount, list, index;
        if (this._kind === 1)
          return C.List_empty;
        t1 = this._arguments;
        argumentCount = t1.length - this._namedArgumentNames.length;
        if (argumentCount === 0)
          return C.List_empty;
        list = [];
        for (index = 0; index < argumentCount; ++index) {
          if (index >= t1.length)
            return H.ioore(t1, index);
          list.push(t1[index]);
        }
        list.fixed$length = Array;
        list.immutable$list = Array;
        return list;
      },
      get$namedArguments: function() {
        var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
        if (this._kind !== 0)
          return C.Map_empty;
        t1 = this._namedArgumentNames;
        namedArgumentCount = t1.length;
        t2 = this._arguments;
        namedArgumentsStartIndex = t2.length - namedArgumentCount;
        if (namedArgumentCount === 0)
          return C.Map_empty;
        map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
        for (i = 0; i < namedArgumentCount; ++i) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t3 = t1[i];
          t4 = namedArgumentsStartIndex + i;
          if (t4 < 0 || t4 >= t2.length)
            return H.ioore(t2, t4);
          map.$indexSet(0, new H.Symbol0(t3), t2[t4]);
        }
        return H.setRuntimeTypeInfo(new H.ConstantMapView(map), [P.Symbol, null]);
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount<,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      defaultValue$1: function(_, parameter) {
        var t1 = this.requiredParameterCount;
        if (typeof parameter !== "number")
          return parameter.$lt();
        if (parameter < t1)
          return;
        return this.data[3 + parameter - t1];
      },
      static: {ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }}
    },
    Primitives_initTicker_closure: {
      "^": "Closure:1;_captured_performance_0",
      call$0: function() {
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * this._captured_performance_0.now()));
      }
    },
    Primitives_functionNoSuchMethod_closure: {
      "^": "Closure:63;__js_helper$_box_0,_captured_arguments_1,_captured_namedArgumentList_2",
      call$2: function($name, argument) {
        var t1 = this.__js_helper$_box_0;
        t1._captured_names_1 = t1._captured_names_1 + "$" + H.S($name);
        this._captured_namedArgumentList_2.push($name);
        this._captured_arguments_1.push(argument);
        ++t1._captured_argumentCount_0;
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = [];
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }}
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + H.S(t1) + "' on null";
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + H.S(t1) + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(this._message) + ")";
      },
      static: {JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }}
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
      }
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:0;_captured_ex_0",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this._captured_ex_0;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      }
    },
    invokeClosure_closure: {
      "^": "Closure:1;_captured_closure_0",
      call$0: function() {
        return this._captured_closure_0.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:1;_captured_closure_1,_captured_arg1_2",
      call$0: function() {
        return this._captured_closure_1.call$1(this._captured_arg1_2);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:1;_captured_closure_3,_captured_arg1_4,_captured_arg2_5",
      call$0: function() {
        return this._captured_closure_3.call$2(this._captured_arg1_4, this._captured_arg2_5);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:1;_captured_closure_6,_captured_arg1_7,_captured_arg2_8,_captured_arg3_9",
      call$0: function() {
        return this._captured_closure_6.call$3(this._captured_arg1_7, this._captured_arg2_8, this._captured_arg3_9);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:1;_captured_closure_10,_captured_arg1_11,_captured_arg2_12,_captured_arg3_13,_captured_arg4_14",
      call$0: function() {
        return this._captured_closure_10.call$4(this._captured_arg1_11, this._captured_arg2_12, this._captured_arg3_13, this._captured_arg4_14);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this) + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {BoundClosure_selfOf: function(closure) {
          return closure._self;
        }, BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        }, BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        }, BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = Object.getOwnPropertyNames(template);
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }}
    },
    CastErrorImplementation: {
      "^": "Error;message>",
      toString$0: function(_) {
        return this.message;
      },
      static: {CastErrorImplementation$: function(actualType, expectedType) {
          return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
        }}
    },
    RuntimeError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    RuntimeType: {
      "^": "Object;"
    },
    RuntimeFunctionType: {
      "^": "RuntimeType;returnType<,parameterTypes,optionalParameterTypes,namedParameters",
      _isTest$1: function(expression) {
        var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
        return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
      },
      _extractFunctionTypeObjectFrom$1: function(o) {
        var interceptor = J.getInterceptor(o);
        return "$signature" in interceptor ? interceptor.$signature() : null;
      },
      toRti$0: function() {
        var result, t1, t2, namedRti, keys, i, $name;
        result = {func: "dynafunc"};
        t1 = this.returnType;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isVoidRuntimeType)
          result.void = true;
        else if (!t2.$isDynamicRuntimeType)
          result.ret = t1.toRti$0();
        t1 = this.parameterTypes;
        if (t1 != null && t1.length !== 0)
          result.args = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0)
          result.opt = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.namedParameters;
        if (t1 != null) {
          namedRti = Object.create(null);
          keys = H.extractKeys(t1);
          for (t2 = keys.length, i = 0; i < t2; ++i) {
            $name = keys[i];
            namedRti[$name] = t1[$name].toRti$0();
          }
          result.named = namedRti;
        }
        return result;
      },
      toString$0: function(_) {
        var t1, t2, result, needsComma, i, type, keys, $name;
        t1 = this.parameterTypes;
        if (t1 != null)
          for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += H.S(type);
          }
        else {
          result = "(";
          needsComma = false;
        }
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0) {
          result = (needsComma ? result + ", " : result) + "[";
          for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += H.S(type);
          }
          result += "]";
        } else {
          t1 = this.namedParameters;
          if (t1 != null) {
            result = (needsComma ? result + ", " : result) + "{";
            keys = H.extractKeys(t1);
            for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
              $name = keys[i];
              if (needsComma)
                result += ", ";
              result += H.S(t1[$name].toRti$0()) + " " + $name;
            }
            result += "}";
          }
        }
        return result + (") -> " + H.S(this.returnType));
      },
      static: {RuntimeFunctionType_listToRti: function(list) {
          var result, t1, i;
          list = list;
          result = [];
          for (t1 = list.length, i = 0; i < t1; ++i)
            result.push(list[i].toRti$0());
          return result;
        }}
    },
    DynamicRuntimeType: {
      "^": "RuntimeType;",
      toString$0: function(_) {
        return "dynamic";
      },
      toRti$0: function() {
        return;
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace<"
    },
    asyncHelper_closure: {
      "^": "Closure:12;_captured_bodyFunctionOrErrorCode_0",
      call$2: [function(error, stackTrace) {
        H._wrapJsFunctionForAsync(this._captured_bodyFunctionOrErrorCode_0, 1).call$1(new H.ExceptionAndStackTrace(error, stackTrace));
      }, null, null, 4, 0, null, 5, 6, "call"]
    },
    _wrapJsFunctionForAsync_closure: {
      "^": "Closure:0;_captured_errorCode_0,_captured_protected_1",
      call$1: [function(result) {
        this._captured_protected_1(this._captured_errorCode_0, result);
      }, null, null, 2, 0, null, 1, "call"]
    },
    TypeImpl: {
      "^": "Object;_typeName,_unmangledName",
      toString$0: function(_) {
        var t1, unmangledName;
        t1 = this._unmangledName;
        if (t1 != null)
          return t1;
        unmangledName = this._typeName.replace(/[^<,> ]+/g, function(m) {
          return init.mangledGlobalNames[m] || m;
        });
        this._unmangledName = unmangledName;
        return unmangledName;
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this._typeName);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.TypeImpl && J.$eq$(this._typeName, other._typeName);
      }
    },
    JsLinkedHashMap: {
      "^": "Object;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$keys: function() {
        return H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableEntry$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      $index: function(_, key) {
        var strings, cell, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableEntry$2(strings, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableEntry$2(nums, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableEntry$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$hashMapCellValue();
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: function(key, value) {
        var rest, hash, bucket, index;
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableEntry$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$hashMapCellValue(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      },
      putIfAbsent$2: function(key, ifAbsent) {
        var value;
        if (this.containsKey$1(key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: [function(_, key) {
        if (typeof key === "string")
          return this.__js_helper$_removeHashTableEntry$2(this._strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this.__js_helper$_removeHashTableEntry$2(this._nums, key);
        else
          return this.internalRemove$1(key);
      }, "call$1", "get$remove", 2, 0, function() {
        return H.computeSignature(function(K, V) {
          return {func: 1, ret: V, args: [P.Object]};
        }, this.$receiver, "JsLinkedHashMap");
      }, 46],
      internalRemove$1: function(key) {
        var rest, bucket, index, cell;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableEntry$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this.__js_helper$_unlinkCell$1(cell);
        return cell.get$hashMapCellValue();
      },
      clear$0: function(_) {
        if (this.__js_helper$_length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this.__js_helper$_length = 0;
          this._modifications = this._modifications + 1 & 67108863;
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell = this._getTableEntry$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.set$hashMapCellValue(value);
      },
      __js_helper$_removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return;
        cell = this._getTableEntry$2(table, key);
        if (cell == null)
          return;
        this.__js_helper$_unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return cell.get$hashMapCellValue();
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(key, value, null, null);
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
        return cell;
      },
      __js_helper$_unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_previous();
        next = cell.get$_next();
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._previous = previous;
        --this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$hashMapCellKey(), key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _getTableEntry$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableEntry$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isInternalMap: 1,
      $isMap: 1
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure:0;__js_helper$_captured_this_0",
      call$1: [function(each) {
        return this.__js_helper$_captured_this_0.$index(0, each);
      }, null, null, 2, 0, null, 31, "call"]
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey<,hashMapCellValue@,_next<,_previous<"
    },
    LinkedHashMapKeyIterable: {
      "^": "Iterable;__js_helper$_map",
      get$length: function(_) {
        return this.__js_helper$_map.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_map.__js_helper$_length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.__js_helper$_map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
        t2._cell = t1._first;
        return t2;
      },
      contains$1: function(_, element) {
        return this.__js_helper$_map.containsKey$1(element);
      },
      forEach$1: function(_, f) {
        var t1, cell, modifications;
        t1 = this.__js_helper$_map;
        cell = t1._first;
        modifications = t1._modifications;
        for (; cell != null;) {
          f.call$1(cell.hashMapCellKey);
          if (modifications !== t1._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
          cell = cell._next;
        }
      },
      $isEfficientLength: 1
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;__js_helper$_map,_modifications,_cell,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this.__js_helper$_map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this.__js_helper$_current = null;
            return false;
          } else {
            this.__js_helper$_current = t1.hashMapCellKey;
            this._cell = t1._next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:0;_captured_getTag_0",
      call$1: function(o) {
        return this._captured_getTag_0(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:46;_captured_getUnknownTag_1",
      call$2: function(o, tag) {
        return this._captured_getUnknownTag_1(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:4;_captured_prototypeForTag_2",
      call$1: function(tag) {
        return this._captured_prototypeForTag_2(tag);
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      get$_nativeAnchoredVersion: function() {
        var t1 = this._nativeAnchoredRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern + "|()", t1.multiline, !t1.ignoreCase, true);
        this._nativeAnchoredRegExp = t1;
        return t1;
      },
      firstMatch$1: function(string) {
        var m = this._nativeRegExp.exec(H.checkString(string));
        if (m == null)
          return;
        return H._MatchImplementation$(this, m);
      },
      allMatches$2: function(_, string, start) {
        H.checkString(string);
        H.checkInt(start);
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._AllMatchesIterable(this, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      _execGlobal$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeGlobalVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        return H._MatchImplementation$(this, match);
      },
      _execAnchored$2: function(string, start) {
        var regexp, match, t1, t2;
        regexp = this.get$_nativeAnchoredVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        t1 = match.length;
        t2 = t1 - 1;
        if (t2 < 0)
          return H.ioore(match, t2);
        if (match[t2] != null)
          return;
        C.JSArray_methods.set$length(match, t2);
        return H._MatchImplementation$(this, match);
      },
      matchAsPrefix$2: function(_, string, start) {
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return this._execAnchored$2(string, start);
      },
      static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          H.checkString(source);
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function() {
            try {
              return new RegExp(source, m + i + g);
            } catch (e) {
              return e;
            }
          }();
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(new P.FormatException("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }}
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match<",
      get$start: function(_) {
        return this._match.index;
      },
      $index: function(_, index) {
        var t1 = this._match;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      _MatchImplementation$2: function(pattern, _match) {
      },
      start$0: function($receiver) {
        return this.get$start(this).call$0();
      },
      static: {_MatchImplementation$: function(pattern, _match) {
          var t1 = new H._MatchImplementation(pattern, _match);
          t1._MatchImplementation$2(pattern, _match);
          return t1;
        }}
    },
    _AllMatchesIterable: {
      "^": "IterableBase;_re,_string,__js_helper$_start",
      get$iterator: function(_) {
        return new H._AllMatchesIterator(this._re, this._string, this.__js_helper$_start, null);
      },
      $asIterableBase: function() {
        return [P.Match];
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _AllMatchesIterator: {
      "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1, t2, match, t3, nextIndex;
        t1 = this._string;
        if (t1 == null)
          return false;
        t2 = this._nextIndex;
        if (t2 <= t1.length) {
          match = this._regExp._execGlobal$2(t1, t2);
          if (match != null) {
            this.__js_helper$_current = match;
            t1 = match._match;
            t2 = t1.index;
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            t3 = J.get$length$asx(t1[0]);
            if (typeof t3 !== "number")
              return H.iae(t3);
            nextIndex = t2 + t3;
            this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
            return true;
          }
        }
        this.__js_helper$_current = null;
        this._string = null;
        return false;
      }
    },
    StringMatch: {
      "^": "Object;start,input,pattern",
      $index: function(_, g) {
        if (!J.$eq$(g, 0))
          H.throwExpression(P.RangeError$value(g, null, null));
        return this.pattern;
      },
      start$0: function($receiver) {
        return this.start.call$0();
      }
    }
  }], ["analysis.errors", "package:atom_dartlang/error_repository.dart",, F, {
    "^": "",
    ErrorRepository: {
      "^": "Object;knownErrors<,subs,_errors$_controller,_errorStream,_flushStream",
      get$onChange: function(_) {
        var t1 = this._errors$_controller;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      initStreams$2: function(errorStream, flushStream) {
        var t1;
        this._errorStream = errorStream;
        this._flushStream = flushStream;
        t1 = this.subs;
        t1.cancel$0();
        t1 = t1._subscriptions;
        t1.push(this._errorStream.listen$1(this.get$_handleAddErrors()));
        t1.push(this._flushStream.listen$1(this.get$_handleFlushErrors()));
      },
      clearAll$0: function() {
        this.knownErrors.clear$0(0);
        var t1 = this._errors$_controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      },
      clearForDirectory$1: function(dir) {
        var t1, paths, t2, t3, _i, path;
        t1 = this.knownErrors;
        paths = t1.get$keys().toList$0(0);
        for (t2 = paths.length, t3 = J.getInterceptor$asx(dir), _i = 0; _i < paths.length; paths.length === t2 || (0, H.throwConcurrentModificationError)(paths), ++_i) {
          path = paths[_i];
          if (t3.contains$1(dir, path) === true)
            t1.remove$1(0, path);
        }
      },
      dispose$0: [function() {
        return this.subs.cancel$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleAddErrors$1: [function(analysisErrors) {
        var path, t1, oldErrors, newErrors;
        path = analysisErrors.get$file();
        if (new E.File(E._create("File", path, null)).invoke$1("existsSync") === true && new E.Stats($.$get$context().callMethod$2("require", ["fs"]).callMethod$2("statSync", [path])).invoke$1("isFile") === true) {
          t1 = this.knownErrors;
          oldErrors = t1.$index(0, path);
          newErrors = analysisErrors.get$errors();
          if (oldErrors == null)
            oldErrors = C.List_empty;
          if (newErrors == null)
            newErrors = C.List_empty;
          t1.$indexSet(0, path, analysisErrors.get$errors());
          if (!G.listIdentical(oldErrors, newErrors)) {
            t1 = this._errors$_controller;
            if (!t1.get$_mayAddEvent())
              H.throwExpression(t1._addEventError$0());
            t1._sendData$1(null);
          }
        } else
          $.$get$_logger13().info$1("received an error event for a non-existent file: " + H.S(path));
      }, "call$1", "get$_handleAddErrors", 2, 0, 35, 62],
      _handleFlushErrors$1: [function(analysisFlushResults) {
        var t1 = this.knownErrors;
        J.forEach$1$ax(J.get$files$x(analysisFlushResults), t1.get$remove(t1));
        t1 = this._errors$_controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      }, "call$1", "get$_handleFlushErrors", 2, 0, 99, 63],
      $isDisposable: 1
    }
  }], ["analysis_server_gen", "package:atom_dartlang/analysis/analysis_server_gen.dart",, N, {
    "^": "",
    Server__toEncodable: [function(obj) {
      return !!J.getInterceptor(obj).$isJsonable ? obj.toMap$0() : obj;
    }, "call$1", "analysis_server_gen_Server__toEncodable$closure", 2, 0, 0, 3],
    _mapify: function(m) {
      var copy, t1, key, value;
      copy = P.LinkedHashMap__makeEmpty();
      for (t1 = m.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        value = m.$index(0, key);
        if (value != null)
          copy.$indexSet(0, key, value);
      }
      return copy;
    },
    Server: {
      "^": "Object;",
      get$server: function() {
        return this._analysis_server_gen$_server;
      },
      get$analysis: function() {
        return this._analysis;
      },
      get$completion: function() {
        return this._completion;
      },
      get$onSend: function() {
        var t1 = this._onSend;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onReceive: function() {
        var t1 = this._onReceive;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      dispose$0: function() {
        var t1 = this._streamSub;
        if (t1 != null)
          t1.cancel$0();
        this._completers.clear$0(0);
      },
      _processMessage$1: [function(message) {
        var json, $event, prefix, completer, e, t1, t2, t3, exception;
        try {
          t1 = this._onReceive;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(message);
          json = C.JsonCodec_null_null.decode$1(message);
          if (J.$index$asx(json, "id") == null) {
            $event = J.$index$asx(json, "event");
            prefix = J.substring$2$s($event, 0, J.indexOf$1$asx($event, "."));
            t1 = this._domains;
            if (t1.$index(0, prefix) == null)
              $.$get$_logger9().severe$1("no domain for notification: " + H.S(message));
            else {
              t1 = t1.$index(0, prefix);
              t2 = $event;
              t3 = J.$index$asx(json, "params");
              t1 = t1._controllers;
              if (t1.$index(0, t2) != null) {
                t1 = t1.$index(0, t2);
                if (!t1.get$_mayAddEvent())
                  H.throwExpression(t1._addEventError$0());
                t1._sendData$1(t3);
              }
            }
          } else {
            completer = this._completers.remove$1(0, J.$index$asx(json, "id"));
            if (completer == null)
              $.$get$_logger9().severe$1("unmatched request response: " + H.S(message));
            else if (J.$index$asx(json, "error") != null)
              completer.completeError$1(N.RequestError_parse(J.$index$asx(json, "error")));
            else
              J.complete$1$x(completer, J.$index$asx(json, "result"));
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          $.$get$_logger9().severe$1("unable to decode message: " + H.S(message) + ", " + H.S(e));
        }
      }, "call$1", "get$_processMessage", 2, 0, 13, 14],
      _call$2: function(method, args) {
        var id, t1, m, message, t2;
        id = "" + ++this._id;
        t1 = this._completers;
        t1.$indexSet(0, id, H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]));
        m = P.LinkedHashMap__makeLiteral(["id", id, "method", method]);
        if (args != null)
          m.$indexSet(0, "params", args);
        message = this._jsonEncoder.encode$1(m);
        t2 = this._onSend;
        if (!t2.get$_mayAddEvent())
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(message);
        this._writeMessage$1(message);
        return t1.$index(0, id).future;
      },
      Server$2: function(inStream, writeMessage) {
        var t1, t2;
        this.dispose$0();
        this._streamSub = inStream.listen$1(this.get$_processMessage());
        this._writeMessage = writeMessage;
        t1 = new N.ServerDomain(this, "server", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2 = this._domains;
        t2.$indexSet(0, "server", t1);
        this._analysis_server_gen$_server = t1;
        t1 = new N.AnalysisDomain(this, "analysis", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "analysis", t1);
        this._analysis = t1;
        t1 = new N.CompletionDomain(this, "completion", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "completion", t1);
        this._completion = t1;
        t1 = new N.SearchDomain(this, "search", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "search", t1);
        this._search = t1;
        t1 = new N.EditDomain(this, "edit", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "edit", t1);
        this._edit = t1;
        t1 = new N.ExecutionDomain(this, "execution", P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty());
        t2.$indexSet(0, "execution", t1);
        this._execution = t1;
      },
      _writeMessage$1: function(arg0) {
        return this._writeMessage.call$1(arg0);
      }
    },
    Domain: {
      "^": "Object;server<,name>",
      _listen$2: function($name, cvt) {
        var t1, t2;
        t1 = this._streams;
        if (t1.$index(0, $name) == null) {
          t2 = this._controllers;
          t2.$indexSet(0, $name, P.StreamController_StreamController$broadcast(null, null, false, null));
          t2 = t2.$index(0, $name);
          t2.toString;
          t2 = H.setRuntimeTypeInfo(new P._BroadcastStream(t2), [H.getTypeArgumentByIndex(t2, 0)]);
          t1.$indexSet(0, $name, H.setRuntimeTypeInfo(new P._MapStream(cvt, t2), [H.getRuntimeTypeArgument(t2, "Stream", 0), null]));
        }
        return t1.$index(0, $name);
      },
      toString$0: function(_) {
        return "Domain " + this.name;
      }
    },
    ServerDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      getVersion$0: function() {
        return this.server._call$2("server.getVersion", null).then$1(N.analysis_server_gen_VersionResult_parse$closure());
      },
      shutdown$0: function() {
        return this.server._call$2("server.shutdown", null);
      }
    },
    ServerStatus: {
      "^": "Object;analysis<,pub",
      static: {ServerStatus_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new N.ServerStatus(N.AnalysisStatus_parse(t1.$index(m, "analysis")), N.PubStatus_parse(t1.$index(m, "pub")));
        }, "call$1", "analysis_server_gen_ServerStatus_parse$closure", 2, 0, 82, 7]}
    },
    VersionResult: {
      "^": "Object;version>",
      static: {VersionResult_parse: [function(m) {
          return new N.VersionResult(J.$index$asx(m, "version"));
        }, "call$1", "analysis_server_gen_VersionResult_parse$closure", 2, 0, 83, 7]}
    },
    AnalysisDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      getHover$2: function(file, offset) {
        return this.server._call$2("analysis.getHover", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset])).then$1(N.analysis_server_gen_HoverResult_parse$closure());
      }
    },
    AnalysisErrors: {
      "^": "Object;file<,errors<",
      static: {AnalysisErrors_parse: [function(m) {
          var t1, t2;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "file");
          return new N.AnalysisErrors(t2, t1.$index(m, "errors") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "errors"), new N.AnalysisErrors_parse_closure())));
        }, "call$1", "analysis_server_gen_AnalysisErrors_parse$closure", 2, 0, 84, 7]}
    },
    AnalysisErrors_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.AnalysisError_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    AnalysisFlushResults: {
      "^": "Object;files>",
      static: {AnalysisFlushResults_parse: [function(m) {
          return new N.AnalysisFlushResults(J.$index$asx(m, "files"));
        }, "call$1", "analysis_server_gen_AnalysisFlushResults_parse$closure", 2, 0, 85, 7]}
    },
    AnalysisNavigation: {
      "^": "Object;file<,regions<,targets<,files>",
      static: {AnalysisNavigation_parse: [function(m) {
          var t1, t2, t3, t4;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "file");
          t3 = t1.$index(m, "regions") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "regions"), new N.AnalysisNavigation_parse_closure()));
          t4 = t1.$index(m, "targets") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "targets"), new N.AnalysisNavigation_parse_closure0()));
          return new N.AnalysisNavigation(t2, t3, t4, t1.$index(m, "files"));
        }, "call$1", "analysis_server_gen_AnalysisNavigation_parse$closure", 2, 0, 86, 7]}
    },
    AnalysisNavigation_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.NavigationRegion_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    AnalysisNavigation_parse_closure0: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.NavigationTarget_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    HoverResult: {
      "^": "Object;hovers<",
      static: {HoverResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new N.HoverResult(t1.$index(m, "hovers") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "hovers"), new N.HoverResult_parse_closure())));
        }, "call$1", "analysis_server_gen_HoverResult_parse$closure", 2, 0, 87, 7]}
    },
    HoverResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.HoverInformation_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    CompletionDomain: {
      "^": "Domain;server,name,_controllers,_streams"
    },
    CompletionResults: {
      "^": "Object;id>,replacementOffset<,replacementLength,results>,isLast<",
      static: {CompletionResults_parse: [function(m) {
          var t1, t2, t3, t4, t5;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "id");
          t3 = t1.$index(m, "replacementOffset");
          t4 = t1.$index(m, "replacementLength");
          t5 = t1.$index(m, "results") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "results"), new N.CompletionResults_parse_closure()));
          return new N.CompletionResults(t2, t3, t4, t5, t1.$index(m, "isLast"));
        }, "call$1", "analysis_server_gen_CompletionResults_parse$closure", 2, 0, 88, 7]}
    },
    CompletionResults_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.CompletionSuggestion_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    SuggestionsResult: {
      "^": "Object;id>",
      static: {SuggestionsResult_parse: [function(m) {
          return new N.SuggestionsResult(J.$index$asx(m, "id"));
        }, "call$1", "analysis_server_gen_SuggestionsResult_parse$closure", 2, 0, 89, 7]}
    },
    SearchDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      findElementReferences$3: function(file, offset, includePotential) {
        return this.server._call$2("search.findElementReferences", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset, "includePotential", includePotential])).then$1(N.analysis_server_gen_FindElementReferencesResult_parse$closure());
      },
      getTypeHierarchy$2: function(file, offset) {
        return this.server._call$2("search.getTypeHierarchy", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset])).then$1(N.analysis_server_gen_TypeHierarchyResult_parse$closure());
      }
    },
    SearchResults: {
      "^": "Object;id>,results>,isLast<",
      static: {SearchResults_parse: [function(m) {
          var t1, t2, t3;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "id");
          t3 = t1.$index(m, "results") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "results"), new N.SearchResults_parse_closure()));
          return new N.SearchResults(t2, t3, t1.$index(m, "isLast"));
        }, "call$1", "analysis_server_gen_SearchResults_parse$closure", 2, 0, 90, 7]}
    },
    SearchResults_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.SearchResult_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    FindElementReferencesResult: {
      "^": "Object;id>,element<",
      static: {FindElementReferencesResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new N.FindElementReferencesResult(t1.$index(m, "id"), N.Element_parse(t1.$index(m, "element")));
        }, "call$1", "analysis_server_gen_FindElementReferencesResult_parse$closure", 2, 0, 91, 7]}
    },
    TypeHierarchyResult: {
      "^": "Object;hierarchyItems<",
      static: {TypeHierarchyResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new N.TypeHierarchyResult(t1.$index(m, "hierarchyItems") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "hierarchyItems"), new N.TypeHierarchyResult_parse_closure())));
        }, "call$1", "analysis_server_gen_TypeHierarchyResult_parse$closure", 2, 0, 92, 7]}
    },
    TypeHierarchyResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.TypeHierarchyItem_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    EditDomain: {
      "^": "Domain;server,name,_controllers,_streams",
      format$4$lineLength: function(_, file, selectionOffset, selectionLength, lineLength) {
        var m = P.LinkedHashMap__makeLiteral(["file", file, "selectionOffset", selectionOffset, "selectionLength", selectionLength]);
        if (lineLength != null)
          m.$indexSet(0, "lineLength", lineLength);
        return this.server._call$2("edit.format", m).then$1(N.analysis_server_gen_FormatResult_parse$closure());
      },
      getAvailableRefactorings$3: function(file, offset, $length) {
        return this.server._call$2("edit.getAvailableRefactorings", P.LinkedHashMap__makeLiteral(["file", file, "offset", offset, "length", $length])).then$1(N.analysis_server_gen_AvailableRefactoringsResult_parse$closure());
      },
      getRefactoring$6$options: function(kind, file, offset, $length, validateOnly, options) {
        var m = P.LinkedHashMap__makeLiteral(["kind", kind, "file", file, "offset", offset, "length", $length, "validateOnly", validateOnly]);
        m.$indexSet(0, "options", options);
        return this.server._call$2("edit.getRefactoring", m).then$1(N.analysis_server_gen_RefactoringResult_parse$closure());
      }
    },
    FormatResult: {
      "^": "Object;edits<,selectionOffset<,selectionLength<",
      static: {FormatResult_parse: [function(m) {
          var t1, t2;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "edits") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "edits"), new N.FormatResult_parse_closure()));
          return new N.FormatResult(t2, t1.$index(m, "selectionOffset"), t1.$index(m, "selectionLength"));
        }, "call$1", "analysis_server_gen_FormatResult_parse$closure", 2, 0, 93, 7]}
    },
    FormatResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.SourceEdit_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    AvailableRefactoringsResult: {
      "^": "Object;kinds<",
      static: {AvailableRefactoringsResult_parse: [function(m) {
          return new N.AvailableRefactoringsResult(J.$index$asx(m, "kinds"));
        }, "call$1", "analysis_server_gen_AvailableRefactoringsResult_parse$closure", 2, 0, 94, 7]}
    },
    FixesResult: {
      "^": "Object;fixes<",
      static: {FixesResult_parse: [function(m) {
          var t1 = J.getInterceptor$asx(m);
          return new N.FixesResult(t1.$index(m, "fixes") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "fixes"), new N.FixesResult_parse_closure())));
        }, "call$1", "analysis_server_gen_FixesResult_parse$closure", 2, 0, 95, 7]}
    },
    FixesResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.AnalysisErrorFixes_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    RefactoringResult: {
      "^": "Object;initialProblems<,optionsProblems,finalProblems,feedback,change<,potentialEdits",
      static: {RefactoringResult_parse: [function(m) {
          var t1, t2, t3, t4;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "initialProblems") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "initialProblems"), new N.RefactoringResult_parse_closure()));
          t3 = t1.$index(m, "optionsProblems") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "optionsProblems"), new N.RefactoringResult_parse_closure0()));
          t4 = t1.$index(m, "finalProblems") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "finalProblems"), new N.RefactoringResult_parse_closure1()));
          return new N.RefactoringResult(t2, t3, t4, N.RefactoringFeedback_parse(t1.$index(m, "feedback")), N.SourceChange_parse(t1.$index(m, "change")), t1.$index(m, "potentialEdits"));
        }, "call$1", "analysis_server_gen_RefactoringResult_parse$closure", 2, 0, 96, 7]}
    },
    RefactoringResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.RefactoringProblem_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    RefactoringResult_parse_closure0: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.RefactoringProblem_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    RefactoringResult_parse_closure1: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.RefactoringProblem_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    ExecutionDomain: {
      "^": "Domain;server,name,_controllers,_streams"
    },
    AddContentOverlay: {
      "^": "Object;type>,content",
      toMap$0: function() {
        return N._mapify(P.LinkedHashMap__makeLiteral(["type", this.type, "content", this.content]));
      },
      $isJsonable: 1
    },
    AnalysisError: {
      "^": "Object;severity<,type>,location>,message>,correction",
      $eq: function(_, o) {
        if (o == null)
          return false;
        return o instanceof N.AnalysisError && J.$eq$(this.severity, o.severity) && J.$eq$(this.type, o.type) && J.$eq$(this.location, o.location) && J.$eq$(this.message, o.message) && J.$eq$(this.correction, o.correction);
      },
      get$hashCode: function(_) {
        var t1, t2, t3;
        t1 = J.$xor$n(J.get$hashCode$(this.severity), J.get$hashCode$(this.type));
        t2 = J.get$hashCode$(this.location);
        t3 = J.get$hashCode$(this.message);
        if (typeof t3 !== "number")
          return H.iae(t3);
        return (t1 ^ t2 ^ t3) >>> 0;
      },
      toString$0: function(_) {
        return "[AnalysisError severity: " + H.S(this.severity) + ", type: " + H.S(this.type) + ", location: " + J.toString$0$(this.location) + ", message: " + H.S(this.message) + "]";
      },
      static: {AnalysisError_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.AnalysisError(t1.$index(m, "severity"), t1.$index(m, "type"), N.Location_parse(t1.$index(m, "location")), t1.$index(m, "message"), t1.$index(m, "correction"));
        }}
    },
    AnalysisErrorFixes: {
      "^": "Object;error>,fixes<",
      static: {AnalysisErrorFixes_parse: function(m) {
          var t1, t2;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = N.AnalysisError_parse(t1.$index(m, "error"));
          return new N.AnalysisErrorFixes(t2, t1.$index(m, "fixes") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "fixes"), new N.AnalysisErrorFixes_parse_closure())));
        }}
    },
    AnalysisErrorFixes_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.SourceChange_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    AnalysisOptions: {
      "^": "Object;enableAsync,enableDeferredLoading,enableEnums,enableNullAwareOperators,generateDart2jsHints,generateHints,generateLints",
      toMap$0: function() {
        return N._mapify(P.LinkedHashMap__makeLiteral(["enableAsync", this.enableAsync, "enableDeferredLoading", this.enableDeferredLoading, "enableEnums", this.enableEnums, "enableNullAwareOperators", this.enableNullAwareOperators, "generateDart2jsHints", this.generateDart2jsHints, "generateHints", this.generateHints, "generateLints", this.generateLints]));
      },
      $isJsonable: 1
    },
    AnalysisStatus: {
      "^": "Object;isAnalyzing<,analysisTarget",
      static: {AnalysisStatus_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.AnalysisStatus(t1.$index(m, "isAnalyzing"), t1.$index(m, "analysisTarget"));
        }}
    },
    CompletionSuggestion: {
      "^": "Object;kind>,relevance<,completion<,selectionOffset<,selectionLength<,isDeprecated<,isPotential<,docSummary<,docComplete,declaringType,element<,returnType<,parameterNames<,parameterTypes,requiredParameterCount<,hasNamedParameters,parameterName,parameterType<,importUri<",
      toString$0: function(_) {
        return "[CompletionSuggestion kind: " + H.S(this.kind) + ", relevance: " + H.S(this.relevance) + ", completion: " + H.S(this.completion) + ", selectionOffset: " + H.S(this.selectionOffset) + ", selectionLength: " + H.S(this.selectionLength) + ", isDeprecated: " + H.S(this.isDeprecated) + ", isPotential: " + H.S(this.isPotential) + "]";
      },
      static: {CompletionSuggestion_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.CompletionSuggestion(t1.$index(m, "kind"), t1.$index(m, "relevance"), t1.$index(m, "completion"), t1.$index(m, "selectionOffset"), t1.$index(m, "selectionLength"), t1.$index(m, "isDeprecated"), t1.$index(m, "isPotential"), t1.$index(m, "docSummary"), t1.$index(m, "docComplete"), t1.$index(m, "declaringType"), N.Element_parse(t1.$index(m, "element")), t1.$index(m, "returnType"), t1.$index(m, "parameterNames"), t1.$index(m, "parameterTypes"), t1.$index(m, "requiredParameterCount"), t1.$index(m, "hasNamedParameters"), t1.$index(m, "parameterName"), t1.$index(m, "parameterType"), t1.$index(m, "importUri"));
        }}
    },
    Element0: {
      "^": "Object;kind>,name>,flags,location>,parameters<,returnType<,typeParameters",
      toString$0: function(_) {
        return "[Element kind: " + H.S(this.kind) + ", name: " + H.S(this.name) + ", flags: " + H.S(this.flags) + "]";
      },
      static: {Element_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.Element0(t1.$index(m, "kind"), t1.$index(m, "name"), t1.$index(m, "flags"), N.Location_parse(t1.$index(m, "location")), t1.$index(m, "parameters"), t1.$index(m, "returnType"), t1.$index(m, "typeParameters"));
        }}
    },
    HoverInformation: {
      "^": "Object;offset>,length>,containingLibraryPath<,containingLibraryName<,containingClassDescription<,dartdoc<,elementDescription<,elementKind<,parameter,propagatedType<,staticType<",
      static: {HoverInformation_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.HoverInformation(t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "containingLibraryPath"), t1.$index(m, "containingLibraryName"), t1.$index(m, "containingClassDescription"), t1.$index(m, "dartdoc"), t1.$index(m, "elementDescription"), t1.$index(m, "elementKind"), t1.$index(m, "parameter"), t1.$index(m, "propagatedType"), t1.$index(m, "staticType"));
        }}
    },
    LinkedEditGroup: {
      "^": "Object;positions<,length>,suggestions",
      toString$0: function(_) {
        return "[LinkedEditGroup positions: " + H.S(this.positions) + ", length: " + H.S(this.length) + ", suggestions: " + H.S(this.suggestions) + "]";
      },
      static: {LinkedEditGroup_parse: function(m) {
          var t1, t2, t3;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "positions") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "positions"), new N.LinkedEditGroup_parse_closure()));
          t3 = t1.$index(m, "length");
          return new N.LinkedEditGroup(t2, t3, t1.$index(m, "suggestions") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "suggestions"), new N.LinkedEditGroup_parse_closure0())));
        }}
    },
    LinkedEditGroup_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.Position_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    LinkedEditGroup_parse_closure0: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.LinkedEditSuggestion_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    LinkedEditSuggestion: {
      "^": "Object;value>,kind>",
      static: {LinkedEditSuggestion_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.LinkedEditSuggestion(t1.$index(m, "value"), t1.$index(m, "kind"));
        }}
    },
    Location: {
      "^": "Object;file<,offset>,length>,startLine<,startColumn<",
      $eq: function(_, o) {
        if (o == null)
          return false;
        return o instanceof N.Location && J.$eq$(this.file, o.file) && J.$eq$(this.offset, o.offset) && J.$eq$(this.length, o.length) && J.$eq$(this.startLine, o.startLine) && J.$eq$(this.startColumn, o.startColumn);
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4;
        t1 = J.$xor$n(J.get$hashCode$(this.file), J.get$hashCode$(this.offset));
        t2 = J.get$hashCode$(this.length);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = J.get$hashCode$(this.startLine);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = J.get$hashCode$(this.startColumn);
        if (typeof t4 !== "number")
          return H.iae(t4);
        return (t1 ^ t2 ^ t3 ^ t4) >>> 0;
      },
      toString$0: function(_) {
        return "[Location file: " + H.S(this.file) + ", offset: " + H.S(this.offset) + ", length: " + H.S(this.length) + ", startLine: " + H.S(this.startLine) + ", startColumn: " + H.S(this.startColumn) + "]";
      },
      static: {Location_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.Location(t1.$index(m, "file"), t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "startLine"), t1.$index(m, "startColumn"));
        }}
    },
    NavigationRegion: {
      "^": "Object;offset>,length>,targets<",
      toString$0: function(_) {
        return "[NavigationRegion offset: " + H.S(this.offset) + ", length: " + H.S(this.length) + ", targets: " + H.S(this.targets) + "]";
      },
      static: {NavigationRegion_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.NavigationRegion(t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "targets"));
        }}
    },
    NavigationTarget: {
      "^": "Object;kind>,fileIndex<,offset>,length>,startLine<,startColumn<",
      toString$0: function(_) {
        return "[NavigationTarget kind: " + H.S(this.kind) + ", fileIndex: " + H.S(this.fileIndex) + ", offset: " + H.S(this.offset) + ", length: " + H.S(this.length) + ", startLine: " + H.S(this.startLine) + ", startColumn: " + H.S(this.startColumn) + "]";
      },
      static: {NavigationTarget_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.NavigationTarget(t1.$index(m, "kind"), t1.$index(m, "fileIndex"), t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "startLine"), t1.$index(m, "startColumn"));
        }}
    },
    Position: {
      "^": "Object;file<,offset>",
      toString$0: function(_) {
        return "[Position file: " + H.S(this.file) + ", offset: " + H.S(this.offset) + "]";
      },
      static: {Position_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.Position(t1.$index(m, "file"), t1.$index(m, "offset"));
        }}
    },
    PubStatus: {
      "^": "Object;isListingPackageDirs",
      toString$0: function(_) {
        return "[PubStatus isListingPackageDirs: " + H.S(this.isListingPackageDirs) + "]";
      },
      static: {PubStatus_parse: function(m) {
          if (m == null)
            return;
          return new N.PubStatus(J.$index$asx(m, "isListingPackageDirs"));
        }}
    },
    RefactoringFeedback: {
      "^": "Object;",
      static: {RefactoringFeedback_parse: function(m) {
          if (m == null)
            return;
          return new N.RefactoringFeedback();
        }}
    },
    RefactoringOptions: {
      "^": "Object;",
      toMap$0: function() {
        return N._mapify(P.LinkedHashMap__makeEmpty());
      },
      $isJsonable: 1
    },
    RefactoringProblem: {
      "^": "Object;severity<,message>,location>",
      static: {RefactoringProblem_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.RefactoringProblem(t1.$index(m, "severity"), t1.$index(m, "message"), N.Location_parse(t1.$index(m, "location")));
        }}
    },
    RemoveContentOverlay: {
      "^": "Object;type>",
      toMap$0: function() {
        return N._mapify(P.LinkedHashMap__makeLiteral(["type", this.type]));
      },
      $isJsonable: 1
    },
    RequestError: {
      "^": "Object;code,message>,stackTrace<",
      toString$0: function(_) {
        return "[RequestError code: " + H.S(this.code) + ", message: " + H.S(this.message) + "]";
      },
      static: {RequestError_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.RequestError(t1.$index(m, "code"), t1.$index(m, "message"), t1.$index(m, "stackTrace"));
        }}
    },
    SearchResult: {
      "^": "Object;location>,kind>,isPotential<,path>",
      toString$0: function(_) {
        return "[SearchResult location: " + J.toString$0$(this.location) + ", kind: " + H.S(this.kind) + ", isPotential: " + H.S(this.isPotential) + ", path: " + H.S(this.path) + "]";
      },
      static: {SearchResult_parse: function(m) {
          var t1, t2, t3, t4;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = N.Location_parse(t1.$index(m, "location"));
          t3 = t1.$index(m, "kind");
          t4 = t1.$index(m, "isPotential");
          return new N.SearchResult(t2, t3, t4, t1.$index(m, "path") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "path"), new N.SearchResult_parse_closure())));
        }}
    },
    SearchResult_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.Element_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    SourceChange: {
      "^": "Object;message>,edits<,linkedEditGroups<,selection",
      toString$0: function(_) {
        return "[SourceChange message: " + H.S(this.message) + ", edits: " + H.S(this.edits) + ", linkedEditGroups: " + H.S(this.linkedEditGroups) + "]";
      },
      static: {SourceChange_parse: function(m) {
          var t1, t2, t3, t4;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "message");
          t3 = t1.$index(m, "edits") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "edits"), new N.SourceChange_parse_closure()));
          t4 = t1.$index(m, "linkedEditGroups") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "linkedEditGroups"), new N.SourceChange_parse_closure0()));
          return new N.SourceChange(t2, t3, t4, N.Position_parse(t1.$index(m, "selection")));
        }}
    },
    SourceChange_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.SourceFileEdit_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    SourceChange_parse_closure0: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.LinkedEditGroup_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    SourceEdit: {
      "^": "Object;offset>,length>,replacement<,id>",
      toMap$0: function() {
        return N._mapify(P.LinkedHashMap__makeLiteral(["offset", this.offset, "length", this.length, "replacement", this.replacement, "id", this.id]));
      },
      toString$0: function(_) {
        return "[SourceEdit offset: " + H.S(this.offset) + ", length: " + H.S(this.length) + ", replacement: " + H.S(this.replacement) + "]";
      },
      $isJsonable: 1,
      static: {SourceEdit_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.SourceEdit(t1.$index(m, "offset"), t1.$index(m, "length"), t1.$index(m, "replacement"), t1.$index(m, "id"));
        }}
    },
    SourceFileEdit: {
      "^": "Object;file<,fileStamp,edits<",
      toString$0: function(_) {
        return "[SourceFileEdit file: " + H.S(this.file) + ", fileStamp: " + H.S(this.fileStamp) + ", edits: " + H.S(this.edits) + "]";
      },
      static: {SourceFileEdit_parse: function(m) {
          var t1, t2, t3;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          t2 = t1.$index(m, "file");
          t3 = t1.$index(m, "fileStamp");
          return new N.SourceFileEdit(t2, t3, t1.$index(m, "edits") == null ? null : J.toList$0$ax(J.map$1$ax(t1.$index(m, "edits"), new N.SourceFileEdit_parse_closure())));
        }}
    },
    SourceFileEdit_parse_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return N.SourceEdit_parse(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    TypeHierarchyItem: {
      "^": "Object;classElement<,interfaces<,mixins<,subclasses<,displayName<,memberElement,superclass<",
      static: {TypeHierarchyItem_parse: function(m) {
          var t1;
          if (m == null)
            return;
          t1 = J.getInterceptor$asx(m);
          return new N.TypeHierarchyItem(N.Element_parse(t1.$index(m, "classElement")), t1.$index(m, "interfaces"), t1.$index(m, "mixins"), t1.$index(m, "subclasses"), t1.$index(m, "displayName"), N.Element_parse(t1.$index(m, "memberElement")), t1.$index(m, "superclass"));
        }}
    }
  }], ["atom", "package:atom_dartlang/atom.dart",, E, {
    "^": "",
    registerPackage: function($package) {
      var exports, t1;
      if ($._package != null)
        throw H.wrapException(new P.StateError("can only register one package"));
      $._package = $package;
      exports = J.$index$asx(J.$index$asx($.$get$context(), "module"), "exports");
      t1 = J.getInterceptor$ax(exports);
      t1.$indexSet(exports, "activate", $._package.get$packageActivated());
      t1.$indexSet(exports, "deactivate", $._package.get$packageDeactivated());
      $._package.toString;
      t1.$indexSet(exports, "config", K.jsify(P.LinkedHashMap__makeLiteral(["sdkLocation", P.LinkedHashMap__makeLiteral(["title", "Dart SDK Location", "description", "The location of the Dart SDK.", "type", "string", "default", "", "order", 1]), "showInfos", P.LinkedHashMap__makeLiteral(["title", "Show infos", "description", "Show informational level analysis issues.", "type", "boolean", "default", true, "order", 2]), "showTodos", P.LinkedHashMap__makeLiteral(["title", "Show todos", "description", "When showing infos, also show TODO items.", "type", "boolean", "default", false, "order", 2]), "formatOnSave", P.LinkedHashMap__makeLiteral(["title", "Format current file on save", "description", "Format the current editor on save.", "type", "boolean", "default", false, "order", 3]), "filterUnnamedLibraryWarnings", P.LinkedHashMap__makeLiteral(["title", "Filter unnamed library warnings", "description", "Don't display warnings about unnamed libraries.", "type", "boolean", "default", true, "order", 4]), "filterCompiledToJSWarnings", P.LinkedHashMap__makeLiteral(["title", "Filter warnings about compiling to JavaScript", "description", "Don't display warnings about compiling to JavaScript.", "type", "boolean", "default", true, "order", 4])])));
      t1.$indexSet(exports, "serialize", $._package.get$serialize());
      $package._registeredMethods.forEach$1(0, new E.registerPackage_closure(exports));
      $package._registeredMethods = null;
    },
    _create: function(className, arg1, arg2) {
      if (arg2 != null)
        return P.JsObject_JsObject(J.$index$asx($.$get$context().callMethod$2("require", ["atom"]), className), [arg1, arg2]);
      else
        return P.JsObject_JsObject(J.$index$asx($.$get$context().callMethod$2("require", ["atom"]), className), [arg1]);
    },
    _cvt: function(object) {
      if (object == null)
        return;
      return P.JsObject_JsObject$fromBrowserObject(object);
    },
    AtomPackage: {
      "^": "Object;",
      registerServiceConsumer$2: function(methodName, callback) {
        var t1 = this._registeredMethods;
        if (t1 == null)
          throw H.wrapException(new P.StateError("method must be registered in the package ctor"));
        t1.$indexSet(0, methodName, callback);
        return;
      }
    },
    registerPackage_closure: {
      "^": "Closure:3;_captured_exports_0",
      call$2: function(methodName, f) {
        J.$indexSet$ax(this._captured_exports_0, methodName, new E.registerPackage__closure(f));
      }
    },
    registerPackage__closure: {
      "^": "Closure:0;_captured_f_1",
      call$1: [function(arg) {
        var result, t1;
        result = this._captured_f_1.call$1(arg);
        t1 = J.getInterceptor(result);
        if (!!t1.$isDisposable)
          return K.jsify(P.LinkedHashMap__makeLiteral(["dispose", result.get$dispose()]));
        else if (!!t1.$isList || !!t1.$isMap)
          return K.jsify(result);
        else if (!!t1.$isJsObject)
          return result;
        else
          return;
      }, null, null, 2, 0, null, 17, "call"]
    },
    Atom: {
      "^": "ProxyHolder;_commands,_config,_notifications,_packages,_project,_views,_workspace,obj",
      Atom$0: function() {
        var t1, t2;
        t1 = this.obj;
        t2 = J.getInterceptor$asx(t1);
        this._commands = new E.CommandRegistry(t2.$index(t1, "commands"));
        this._config = new E.Config(t2.$index(t1, "config"));
        this._notifications = new E.NotificationManager(t2.$index(t1, "notifications"));
        this._packages = new E.PackageManager(t2.$index(t1, "packages"));
        this._project = new E.Project(t2.$index(t1, "project"));
        this._views = new E.ViewRegistry(t2.$index(t1, "views"));
        this._workspace = new E.Workspace(t2.$index(t1, "workspace"));
      }
    },
    ViewRegistry: {
      "^": "ProxyHolder;obj"
    },
    Workspace: {
      "^": "ProxyHolder;obj",
      getTextEditors$0: function() {
        return J.toList$0$ax(J.map$1$ax(this.invoke$1("getTextEditors"), new E.Workspace_getTextEditors_closure()));
      },
      getActiveTextEditor$0: function() {
        var result = this.invoke$1("getActiveTextEditor");
        return result == null ? null : new E.TextEditor(E._cvt(result));
      },
      observeTextEditors$1: function(callback) {
        return new K.JsDisposable(this.invoke$2("observeTextEditors", new E.Workspace_observeTextEditors_closure(callback)));
      },
      observeActivePaneItem$1: function(callback) {
        return new K.JsDisposable(this.invoke$2("observeActivePaneItem", new E.Workspace_observeActivePaneItem_closure(callback)));
      },
      open$2$options: function(_, url, options) {
        return K.promiseToFuture(this.invoke$3("open", url, options)).then$1(new E.Workspace_open_closure(url));
      },
      _panelOptions$3: function(item, visible, priority) {
        var options = P.LinkedHashMap__makeLiteral(["item", item]);
        if (visible != null)
          options.$indexSet(0, "visible", visible);
        return options;
      }
    },
    Workspace_getTextEditors_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return new E.TextEditor(E._cvt(e));
      }, null, null, 2, 0, null, 2, "call"]
    },
    Workspace_observeTextEditors_closure: {
      "^": "Closure:0;_atom$_captured_callback_0",
      call$1: [function(ed) {
        return this._atom$_captured_callback_0.call$1(new E.TextEditor(E._cvt(ed)));
      }, null, null, 2, 0, null, 81, "call"]
    },
    Workspace_observeActivePaneItem_closure: {
      "^": "Closure:0;_atom$_captured_callback_0",
      call$1: [function(item) {
        return this._atom$_captured_callback_0.call$1(item);
      }, null, null, 2, 0, null, 89, "call"]
    },
    Workspace_open_closure: {
      "^": "Closure:0;_captured_url_0",
      call$1: [function(result) {
        var editor;
        if (result == null)
          throw H.wrapException("unable to open " + H.S(this._captured_url_0));
        editor = new E.TextEditor(E._cvt(result));
        if (editor.isValid$0() === true)
          return editor;
        throw H.wrapException("result is not a text editor");
      }, null, null, 2, 0, null, 1, "call"]
    },
    Panel: {
      "^": "ProxyHolder;obj",
      get$onDidDestroy: function() {
        var t1 = this.eventStream$1("onDidDestroy");
        return H.setRuntimeTypeInfo(new P._MapStream(new E.Panel_onDidDestroy_closure(), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
      }
    },
    Panel_onDidDestroy_closure: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        return new E.Panel(obj);
      }, null, null, 2, 0, null, 3, "call"]
    },
    CommandRegistry: {
      "^": "ProxyHolder;obj",
      add$3: function(_, target, commandName, callback) {
        return new K.JsDisposable(this.invoke$4("add", target, commandName, new E.CommandRegistry_add_closure(callback)));
      }
    },
    CommandRegistry_add_closure: {
      "^": "Closure:0;_atom$_captured_callback_0",
      call$1: [function(e) {
        return this._atom$_captured_callback_0.call$1(new E.AtomEvent(E._cvt(e)));
      }, null, null, 2, 0, null, 2, "call"]
    },
    Config: {
      "^": "ProxyHolder;obj",
      getValue$2$scope: function(keyPath, scope) {
        return this.invoke$3("get", keyPath, scope != null ? P.LinkedHashMap__makeLiteral(["scope", scope]) : null);
      },
      getValue$1: function(keyPath) {
        return this.getValue$2$scope(keyPath, null);
      },
      observe$3: function(keyPath, options, callback) {
        return new K.JsDisposable(this.invoke$4("observe", keyPath, P.LinkedHashMap__makeEmpty(), callback));
      },
      onDidChange$2: [function(keyPath, options) {
        return this.eventStream2Args$3("onDidChangePaths", keyPath, options);
      }, function(keyPath) {
        return this.onDidChange$2(keyPath, null);
      }, "onDidChange$1", "call$2", "call$1", "get$onDidChange", 2, 2, 33, 4]
    },
    NotificationManager: {
      "^": "ProxyHolder;obj",
      _options$4$description$detail$dismissable$icon: function(description, detail, dismissable, icon) {
        var t1, m;
        t1 = detail == null;
        if (t1 && description == null && dismissable == null && icon == null)
          return;
        m = P.LinkedHashMap__makeEmpty();
        if (!t1)
          m.$indexSet(0, "detail", detail);
        if (description != null)
          m.$indexSet(0, "description", description);
        if (dismissable != null)
          m.$indexSet(0, "dismissable", dismissable);
        if (icon != null)
          m.$indexSet(0, "icon", icon);
        return m;
      }
    },
    PackageManager: {
      "^": "ProxyHolder;obj"
    },
    Project: {
      "^": "ProxyHolder;obj",
      getDirectories$0: function() {
        return J.toList$0$ax(J.map$1$ax(this.invoke$1("getDirectories"), new E.Project_getDirectories_closure()));
      },
      contains$1: function(_, pathToCheck) {
        return this.invoke$2("contains", pathToCheck);
      }
    },
    Project_getDirectories_closure: {
      "^": "Closure:0;",
      call$1: [function(dir) {
        return new E.Directory(dir);
      }, null, null, 2, 0, null, 23, "call"]
    },
    Entry: {
      "^": "ProxyHolder;",
      get$onDidChange: function() {
        return this.eventStream$1("onDidChange");
      },
      get$path: function(_) {
        return J.$index$asx(this.obj, "path");
      },
      isFile$0: function() {
        return this.invoke$1("isFile");
      },
      isDirectory$0: function() {
        return this.invoke$1("isDirectory");
      },
      existsSync$0: function() {
        return this.invoke$1("existsSync");
      },
      getBaseName$0: function() {
        return this.invoke$1("getBaseName");
      },
      getPath$0: function() {
        return this.invoke$1("getPath");
      },
      getRealPathSync$0: function() {
        return this.invoke$1("getRealPathSync");
      },
      getParent$0: function() {
        return new E.Directory(this.invoke$1("getParent"));
      },
      toString$0: function(_) {
        return J.$index$asx(this.obj, "path");
      }
    },
    File: {
      "^": "Entry;obj",
      getDigestSync$0: function() {
        return this.invoke$1("getDigestSync");
      },
      getEncoding$0: function() {
        return this.invoke$1("getEncoding");
      },
      read$1: function(flushCache) {
        return K.promiseToFuture(this.invoke$2("read", flushCache));
      },
      read$0: function() {
        return this.read$1(null);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(J.$index$asx(this.obj, "path"));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof E.File && J.$eq$(J.$index$asx(this.obj, "path"), J.$index$asx(other.obj, "path"));
      }
    },
    Directory: {
      "^": "Entry;obj",
      getFile$1: function(filename) {
        return new E.File(E._cvt(this.invoke$2("getFile", filename)));
      },
      getSubdirectory$1: function(dirname) {
        return new E.Directory(this.invoke$2("getSubdirectory", dirname));
      },
      getEntriesSync$0: function() {
        return J.toList$0$ax(J.map$1$ax(this.invoke$1("getEntriesSync"), new E.Directory_getEntriesSync_closure()));
      },
      contains$1: function(_, p) {
        return this.invoke$2("contains", p);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(J.$index$asx(this.obj, "path"));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof E.Directory && J.$eq$(J.$index$asx(this.obj, "path"), J.$index$asx(other.obj, "path"));
      }
    },
    Directory_getEntriesSync_closure: {
      "^": "Closure:0;",
      call$1: [function(entry) {
        entry = E._cvt(entry);
        return entry.callMethod$1("isFile") === true ? new E.File(entry) : new E.Directory(entry);
      }, null, null, 2, 0, null, 55, "call"]
    },
    TextEditorView: {
      "^": "ProxyHolder;obj"
    },
    TextEditor: {
      "^": "ProxyHolder;obj",
      isValid$0: function() {
        var exception;
        try {
          this.invoke$1("getTitle");
          this.invoke$1("getLongTitle");
          this.invoke$1("getPath");
          return true;
        } catch (exception) {
          H.unwrapException(exception);
          return false;
        }
      },
      getBuffer$0: function() {
        return new E.TextBuffer(E._cvt(this.invoke$1("getBuffer")));
      },
      getPath$0: function() {
        return this.invoke$1("getPath");
      },
      isModified$0: function() {
        return this.invoke$1("isModified");
      },
      isEmpty$0: [function(_) {
        return this.invoke$1("isEmpty");
      }, "call$0", "get$isEmpty", 0, 0, 7],
      isNotEmpty$0: [function(_) {
        return this.invoke$1("isEmpty") !== true;
      }, "call$0", "get$isNotEmpty", 0, 0, 7],
      insertText$2$options: function(text, options) {
        var result, t1;
        result = this.invoke$3("insertText", text, options);
        if (typeof result === "boolean")
          t1 = result;
        else
          t1 = result == null ? null : new E.Range(E._cvt(result));
        return t1;
      },
      insertText$1: function(text) {
        return this.insertText$2$options(text, null);
      },
      getText$0: function() {
        return this.invoke$1("getText");
      },
      getSelectedBufferRange$0: function() {
        var t1 = this.invoke$1("getSelectedBufferRange");
        return t1 == null ? null : new E.Range(E._cvt(t1));
      },
      setSelectedBufferRange$1: function(bufferRange) {
        return this.invoke$2("setSelectedBufferRange", bufferRange);
      },
      setSelectedBufferRanges$1: function(ranges) {
        return this.invoke$2("setSelectedBufferRanges", H.setRuntimeTypeInfo(new H.MappedListIterable(ranges, new E.TextEditor_setSelectedBufferRanges_closure()), [null, null]).toList$0(0));
      },
      selectRight$1: function(columnCount) {
        return this.invoke$2("selectRight", columnCount);
      },
      atomic$1: function(fn) {
        var checkpoint, e, exception, t1;
        checkpoint = this.invoke$1("createCheckpoint");
        try {
          fn.call$0();
          this.invoke$2("groupChangesSinceCheckpoint", checkpoint);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          this.invoke$2("revertToCheckpoint", checkpoint);
          $.$get$_logger3().warning$1("transaction failed: " + H.S(e));
        }
      },
      save$0: function() {
        return this.invoke$1("save");
      },
      get$onDidChange: function() {
        return this.eventStream$1("onDidChange");
      },
      get$onDidDestroy: function() {
        return this.eventStream$1("onDidDestroy");
      },
      get$onDidSave: function() {
        return this.eventStream$1("onDidSave");
      },
      get$view: function(_) {
        return $.$get$atom()._views.invoke$2("getView", this.obj);
      },
      toString$0: function(_) {
        return this.invoke$1("getTitle");
      }
    },
    TextEditor_setSelectedBufferRanges_closure: {
      "^": "Closure:49;",
      call$1: [function(r) {
        return r.get$obj();
      }, null, null, 2, 0, null, 25, "call"]
    },
    TextBuffer: {
      "^": "ProxyHolder;obj",
      getPath$0: function() {
        return this.invoke$1("getPath");
      },
      atomic$1: function(fn) {
        var checkpoint, e, exception, t1;
        checkpoint = this.invoke$1("createCheckpoint");
        try {
          fn.call$0();
          this.invoke$2("groupChangesSinceCheckpoint", checkpoint);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          this.invoke$2("revertToCheckpoint", checkpoint);
          $.$get$_logger3().warning$1("transaction failed: " + H.S(e));
        }
      }
    },
    Range: {
      "^": "ProxyHolder;obj",
      isEmpty$0: [function(_) {
        return this.invoke$1("isEmpty");
      }, "call$0", "get$isEmpty", 0, 0, 7],
      isNotEmpty$0: [function(_) {
        return this.invoke$1("isEmpty") !== true;
      }, "call$0", "get$isNotEmpty", 0, 0, 7],
      get$start: function(_) {
        return new E.Point(E._cvt(J.$index$asx(this.obj, "start")));
      },
      toString$0: function(_) {
        return this.invoke$1("toString");
      },
      start$0: function($receiver) {
        return this.get$start(this).call$0();
      }
    },
    Point: {
      "^": "ProxyHolder;obj",
      toString$0: function(_) {
        return this.invoke$1("toString");
      }
    },
    AtomEvent: {
      "^": "ProxyHolder;obj",
      get$editor: function() {
        return new E.TextEditor(E._cvt(new E.TextEditorView(E._cvt(J.$index$asx(this.obj, "currentTarget"))).invoke$1("getModel")));
      },
      get$selectedFilePath: function() {
        var element = J.querySelector$1$x(J.$index$asx(this.obj, "currentTarget"), "li[is=tree-view-file].selected span.name");
        return element == null ? null : element.getAttribute("data-path");
      },
      preventDefault$0: function(_) {
        return this.invoke$1("preventDefault");
      }
    },
    Shell: {
      "^": "Object;"
    },
    BufferedProcess: {
      "^": "ProxyHolder;_stdin,obj",
      static: {BufferedProcess_create: function(command, args, cwd, env, exit, stderr, stdout) {
          var options, t1, nodeOptions;
          options = P.LinkedHashMap__makeLiteral(["command", command]);
          if (args != null)
            options.$indexSet(0, "args", args);
          options.$indexSet(0, "stdout", stdout);
          options.$indexSet(0, "stderr", stderr);
          options.$indexSet(0, "exit", exit);
          t1 = cwd == null;
          if (!t1 || false) {
            nodeOptions = P.LinkedHashMap__makeEmpty();
            if (!t1)
              nodeOptions.$indexSet(0, "cwd", cwd);
            options.$indexSet(0, "options", K.jsify(nodeOptions));
          }
          return new E.BufferedProcess(null, P.JsObject_JsObject(J.$index$asx($.$get$context().callMethod$2("require", ["atom"]), "BufferedProcess"), [K.jsify(options)]));
        }}
    },
    Stats: {
      "^": "ProxyHolder;obj",
      isFile$0: function() {
        return this.invoke$1("isFile");
      },
      isDirectory$0: function() {
        return this.invoke$1("isDirectory");
      }
    }
  }], ["atom.analysis_server", "package:atom_dartlang/analysis_server.dart",, X, {
    "^": "",
    QuickFixHelper_handleQuickFix: function(server, $event) {
      var editor, path, t1, range, offset, m;
      if (server == null)
        return;
      editor = $event.get$editor();
      path = editor.invoke$1("getPath");
      t1 = editor.invoke$1("getSelectedBufferRange");
      range = t1 == null ? null : new E.Range(E._cvt(t1));
      offset = new E.TextBuffer(E._cvt(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", new E.Point(E._cvt(J.$index$asx(range.obj, "start"))));
      t1 = server._edit;
      t1.toString;
      m = P.LinkedHashMap__makeLiteral(["file", path, "offset", offset]);
      t1.server._call$2("edit.getFixes", m).then$1(N.analysis_server_gen_FixesResult_parse$closure()).then$1(new X.QuickFixHelper_handleQuickFix_closure(editor, path)).catchError$1(new X.QuickFixHelper_handleQuickFix_closure0());
    },
    QuickFixHelper__applyChange: function(editor, change) {
      var sourceFileEdits, linkedEditGroups, t1;
      sourceFileEdits = change.get$edits();
      linkedEditGroups = change.get$linkedEditGroups();
      t1 = J.expand$1$ax(sourceFileEdits, new X.QuickFixHelper__applyChange_closure());
      F.applyEdits(editor, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0)));
      F.selectEditGroups(editor, linkedEditGroups);
      t1 = $.$get$atom()._notifications;
      t1.invoke$3("addSuccess", "Executed quick fix: " + H.S(G.toStartingLowerCase(J.get$message$x(change))), t1._options$4$description$detail$dismissable$icon(null, null, null, null));
    },
    AnalysisServer: {
      "^": "Object;subs,disposables,_serverActiveController,_serverBusyController,_onSendController,_onReceiveController,_onNavigatonController,_server<,_job,knownRoots,isActiveProperty<",
      get$onActive: function() {
        var t1 = this._serverActiveController;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onBusy: function() {
        var t1 = this._serverBusyController;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onSend: function() {
        var t1 = this._onSendController;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onReceive: function() {
        var t1 = this._onReceiveController;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onNavigaton: function() {
        var t1 = this._onNavigatonController;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onAnalysisErrors: function() {
        return X.Dependencies_instance().getDependency$1(C.Type_bhC).get$_server()._analysis._listen$2("analysis.errors", N.analysis_server_gen_AnalysisErrors_parse$closure());
      },
      get$onAnalysisFlushResults: function() {
        return X.Dependencies_instance().getDependency$1(C.Type_bhC).get$_server()._analysis._listen$2("analysis.flushResults", N.analysis_server_gen_AnalysisFlushResults_parse$closure());
      },
      get$server: function() {
        return this._server;
      },
      _setup$0: [function() {
        var t1, t2;
        t1 = this.subs._subscriptions;
        t1.push(X.Dependencies_instance().getDependency$1(C.Type_CvJ).get$onChanged().listen$1(this.get$_reconcileRoots()));
        t1.push(X.Dependencies_instance().getDependency$1(C.Type_OHH).get$onSdkChange().listen$1(this.get$_handleSdkChange()));
        t1 = X.Dependencies_instance().getDependency$1(C.Type_25m).get$dartProjectEditors()._activeEditorController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(this.get$_focusedEditorChanged());
        t1 = this.knownRoots;
        C.JSArray_methods.set$length(t1, 0);
        C.JSArray_methods.addAll$1(t1, X.Dependencies_instance().getDependency$1(C.Type_CvJ).get$projects());
        this._checkTrigger$0();
        t1 = X.Dependencies_instance();
        t2 = S.AnalysisServerDialog$();
        t1._instances.$indexSet(0, C.Type_oyn, t2);
        t1 = this.disposables.Disposables__disposables;
        t1.push(t2);
        t1.push($.$get$atom()._commands.add$3(0, "atom-text-editor", "dartlang:quick-fix", new X.AnalysisServer__setup_closure(this)));
        t1 = this._onSendController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__setup_closure0());
        t1 = this._onReceiveController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__setup_closure1());
      }, "call$0", "get$_setup", 0, 0, 2],
      get$isActive: function() {
        var t1 = this._server;
        return t1 != null && t1.process != null;
      },
      get$isBusy: function() {
        var t1 = this._server;
        return t1 != null && t1.analyzing === true;
      },
      _syncRoots$0: function() {
        var t1, roots, m;
        t1 = this._server;
        if (t1 != null && t1.process != null) {
          roots = H.setRuntimeTypeInfo(new H.MappedListIterable(this.knownRoots, new X.AnalysisServer__syncRoots_closure()), [null, null]).toList$0(0);
          $.$get$_logger8().fine$1("setAnalysisRoots(" + H.S(roots) + ")");
          t1 = this._server._analysis;
          t1.toString;
          m = P.LinkedHashMap__makeLiteral(["included", roots, "excluded", []]);
          t1.server._call$2("analysis.setAnalysisRoots", m);
        }
      },
      dispose$0: [function() {
        $.$get$_logger8().fine$1("dispose()");
        this._checkTrigger$1$dispose(true);
        this.subs.cancel$0();
        this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _reconcileRoots$1: [function(currentProjects) {
        var t1, oldSet, currentSet, addedProjects, removedProjects;
        t1 = this.knownRoots;
        oldSet = P.LinkedHashSet_LinkedHashSet$from(t1, null);
        currentSet = P.LinkedHashSet_LinkedHashSet$from(currentProjects, null);
        addedProjects = currentSet.difference$1(oldSet);
        removedProjects = oldSet.difference$1(currentSet);
        C.JSArray_methods.set$length(t1, 0);
        C.JSArray_methods.addAll$1(t1, currentProjects);
        if (removedProjects._collection$_length !== 0) {
          $.$get$_logger8().fine$1("removed: " + P.IterableBase_iterableToFullString(removedProjects, "{", "}"));
          removedProjects.forEach$1(0, new X.AnalysisServer__reconcileRoots_closure());
        }
        if (addedProjects._collection$_length !== 0)
          $.$get$_logger8().fine$1("added: " + P.IterableBase_iterableToFullString(addedProjects, "{", "}"));
        if (removedProjects._collection$_length !== 0 || addedProjects._collection$_length !== 0)
          this._syncRoots$0();
        this._checkTrigger$0();
      }, "call$1", "get$_reconcileRoots", 2, 0, 57, 58],
      _handleSdkChange$1: [function(newSdk) {
        this._checkTrigger$0();
      }, "call$1", "get$_handleSdkChange", 2, 0, 58, 59],
      _focusedEditorChanged$1: [function(editor) {
        var t1, path, t2;
        t1 = this._server;
        if (!(t1 != null && t1.process != null) || editor == null)
          return;
        path = editor.getPath$0();
        if (path != null) {
          t1 = this._server._analysis;
          t2 = P.LinkedHashMap__makeLiteral(["NAVIGATION", [path]]);
          t1.toString;
          t2 = P.LinkedHashMap__makeLiteral(["subscriptions", t2]);
          t1.server._call$2("analysis.setSubscriptions", t2);
          if (X.Dependencies_instance().getDependency$1(C.Type_CvJ).getProjectFor$1(path) != null) {
            t1 = this._server._analysis;
            t1.toString;
            t2 = P.LinkedHashMap__makeLiteral(["files", [path]]);
            t1.server._call$2("analysis.setPriorityFiles", t2).catchError$1(new X.AnalysisServer__focusedEditorChanged_closure());
          }
        }
      }, "call$1", "get$_focusedEditorChanged", 2, 0, 8, 13],
      start$0: [function(_) {
        var t1, server;
        if (!X.Dependencies_instance().getDependency$1(C.Type_OHH).get$hasSdk())
          return;
        t1 = this._server;
        if (t1 == null) {
          server = X._AnalysisServerWrapper_create(X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk());
          this._server = server;
          this._initNewServer$1(server);
        } else if (t1.process == null) {
          t1.restart$1(X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk());
          this._initExistingServer$1(this._server);
        }
      }, null, "get$start", 0, 0, null],
      reanalyzeSources$0: function() {
        var t1, m;
        t1 = this._server;
        if (t1 != null && t1.process != null) {
          t1 = t1._analysis;
          t1.toString;
          m = P.LinkedHashMap__makeEmpty();
          t1.server._call$2("analysis.reanalyze", m);
        }
      },
      filterSearchResults$1: function(id) {
        var t1, controller;
        t1 = {};
        t1._captured_sub_0 = null;
        controller = P.StreamController_StreamController(new X.AnalysisServer_filterSearchResults_closure(t1), null, null, null, false, null);
        t1._captured_sub_0 = this._server._search._listen$2("search.results", N.analysis_server_gen_SearchResults_parse$closure())._createSubscription$4(new X.AnalysisServer_filterSearchResults_closure0(t1, id, controller), null, null, false);
        return H.setRuntimeTypeInfo(new P._ControllerStream(controller), [H.getTypeArgumentByIndex(controller, 0)]);
      },
      format$4$lineLength: function(_, path, selectionOffset, selectionLength, lineLength) {
        return this._server._edit.format$4$lineLength(0, path, selectionOffset, selectionLength, lineLength);
      },
      getAvailableRefactorings$3: function(path, offset, $length) {
        return this._server._edit.getAvailableRefactorings$3(path, offset, $length);
      },
      getRefactoring$6$options: function(kind, path, offset, $length, validateOnly, options) {
        return this._server._edit.getRefactoring$6$options(kind, path, offset, $length, validateOnly, options);
      },
      getHover$2: function(file, offset) {
        return this._server._analysis.getHover$2(file, offset);
      },
      findElementReferences$3: function(path, offset, includePotential) {
        return this._server._search.findElementReferences$3(path, offset, includePotential);
      },
      getTypeHierarchy$2: function(path, offset) {
        return this._server._search.getTypeHierarchy$2(path, offset);
      },
      shutdown$0: function() {
        var t1 = this._server;
        if (t1 != null)
          t1.kill$0();
      },
      _checkTrigger$1$dispose: function(dispose) {
        var shouldBeRunning, t1, server;
        shouldBeRunning = this.knownRoots.length !== 0 && X.Dependencies_instance().getDependency$1(C.Type_OHH).get$hasSdk();
        if (!dispose)
          t1 = !shouldBeRunning && this._server != null;
        else
          t1 = true;
        if (t1)
          this._server.kill$0();
        else if (shouldBeRunning) {
          t1 = this._server;
          if (t1 == null) {
            server = X._AnalysisServerWrapper_create(X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk());
            this._server = server;
            this._initNewServer$1(server);
          } else if (t1.process == null) {
            t1.restart$1(X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk());
            this._initExistingServer$1(this._server);
          }
        }
      },
      _checkTrigger$0: function() {
        return this._checkTrigger$1$dispose(false);
      },
      _initNewServer$1: function(server) {
        var t1 = server._analyzingController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure(this));
        t1 = server._disposedController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure0(this, server));
        t1 = server._onSend;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure1(this));
        t1 = server._onReceive;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure2(this));
        server._analysis._listen$2("analysis.navigation", N.analysis_server_gen_AnalysisNavigation_parse$closure())._createSubscription$4(new X.AnalysisServer__initNewServer_closure3(this), null, null, false);
        t1 = this._serverBusyController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X.AnalysisServer__initNewServer_closure4(this));
        this._initExistingServer$1(server);
      },
      _initExistingServer$1: function(server) {
        var t1 = this._serverActiveController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(true);
        this._syncRoots$0();
        this._focusedEditorChanged$1(X.Dependencies_instance().getDependency$1(C.Type_25m).get$dartProjectEditors()._activeEditor);
      },
      $isDisposable: 1
    },
    AnalysisServer__setup_closure: {
      "^": "Closure:0;_analysis_server$_captured_this_0",
      call$1: function($event) {
        X.QuickFixHelper_handleQuickFix(this._analysis_server$_captured_this_0._server, $event);
      }
    },
    AnalysisServer__setup_closure0: {
      "^": "Closure:4;",
      call$1: [function(message) {
        return $.$get$_logger8().finer$1("--> " + H.S(message));
      }, null, null, 2, 0, null, 14, "call"]
    },
    AnalysisServer__setup_closure1: {
      "^": "Closure:4;",
      call$1: [function(message) {
        return $.$get$_logger8().finer$1("<-- " + H.S(message));
      }, null, null, 2, 0, null, 14, "call"]
    },
    AnalysisServer__syncRoots_closure: {
      "^": "Closure:0;",
      call$1: [function(dir) {
        return J.get$path$x(dir);
      }, null, null, 2, 0, null, 23, "call"]
    },
    AnalysisServer__reconcileRoots_closure: {
      "^": "Closure:0;",
      call$1: function(project) {
        return X.Dependencies_instance().getDependency$1(C.Type_43h).clearForDirectory$1(J.get$directory$x(project));
      }
    },
    AnalysisServer__focusedEditorChanged_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        $.$get$_logger8().warning$2("Error from setPriorityFiles", e);
      }, null, null, 2, 0, null, 2, "call"]
    },
    AnalysisServer_filterSearchResults_closure: {
      "^": "Closure:1;_analysis_server$_box_0",
      call$0: [function() {
        return this._analysis_server$_box_0._captured_sub_0.cancel$0();
      }, null, null, 0, 0, null, "call"]
    },
    AnalysisServer_filterSearchResults_closure0: {
      "^": "Closure:52;_analysis_server$_box_0,_captured_id_1,_captured_controller_2",
      call$1: [function(result) {
        var t1, t2, r, t3;
        t1 = J.getInterceptor$x(result);
        if (J.$eq$(this._captured_id_1, t1.get$id(result)) && (this._captured_controller_2._state & 4) === 0) {
          for (t1 = J.get$iterator$ax(t1.get$results(result)), t2 = this._captured_controller_2; t1.moveNext$0();) {
            r = t1.get$current();
            if (t2._state >= 4)
              H.throwExpression(t2._badEventState$0());
            t3 = t2._state;
            if ((t3 & 1) !== 0)
              t2._sendData$1(r);
            else if ((t3 & 3) === 0)
              t2._ensurePendingEvents$0().add$1(0, new P._DelayedData(r, null));
          }
          if (result.get$isLast() === true) {
            this._analysis_server$_box_0._captured_sub_0.cancel$0();
            t2.close$0(0);
          }
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    AnalysisServer__initNewServer_closure: {
      "^": "Closure:0;_analysis_server$_captured_this_0",
      call$1: [function(value) {
        var t1 = this._analysis_server$_captured_this_0._serverBusyController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(value);
        return;
      }, null, null, 2, 0, null, 8, "call"]
    },
    AnalysisServer__initNewServer_closure0: {
      "^": "Closure:0;_analysis_server$_captured_this_1,_captured_server_2",
      call$1: [function(exitCode) {
        var t1, t2;
        t1 = this._analysis_server$_captured_this_1;
        if (t1._server === this._captured_server_2) {
          t2 = t1._serverActiveController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(false);
          t1 = t1._serverBusyController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(false);
          X.Dependencies_instance().getDependency$1(C.Type_43h).clearAll$0();
        }
        return;
      }, null, null, 2, 0, null, 28, "call"]
    },
    AnalysisServer__initNewServer_closure1: {
      "^": "Closure:0;_analysis_server$_captured_this_3",
      call$1: [function(message) {
        var t1 = this._analysis_server$_captured_this_3._onSendController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(message);
        return;
      }, null, null, 2, 0, null, 14, "call"]
    },
    AnalysisServer__initNewServer_closure2: {
      "^": "Closure:0;_analysis_server$_captured_this_4",
      call$1: [function(message) {
        var t1 = this._analysis_server$_captured_this_4._onReceiveController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(message);
        return;
      }, null, null, 2, 0, null, 14, "call"]
    },
    AnalysisServer__initNewServer_closure3: {
      "^": "Closure:0;_analysis_server$_captured_this_5",
      call$1: [function(e) {
        var t1 = this._analysis_server$_captured_this_5._onNavigatonController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(e);
        return;
      }, null, null, 2, 0, null, 2, "call"]
    },
    AnalysisServer__initNewServer_closure4: {
      "^": "Closure:0;_analysis_server$_captured_this_6",
      call$1: [function(busy) {
        var t1, t2;
        t1 = busy === true;
        if (!t1 && this._analysis_server$_captured_this_6._job != null) {
          t1 = this._analysis_server$_captured_this_6;
          t2 = t1._job.completer;
          if (t2.future._state === 0)
            t2.complete$0(0);
          t1._job = null;
        } else if (t1 && this._analysis_server$_captured_this_6._job == null) {
          t1 = X._AnalyzingJob$();
          t1.start$0(0);
          this._analysis_server$_captured_this_6._job = t1;
        }
      }, null, null, 2, 0, null, 47, "call"]
    },
    QuickFixHelper_handleQuickFix_closure: {
      "^": "Closure:61;_analysis_server$_captured_editor_0,_captured_path_1",
      call$1: [function(result) {
        var fixes, t1, changes;
        fixes = result.get$fixes();
        t1 = J.getInterceptor$asx(fixes);
        if (t1.get$isEmpty(fixes)) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        t1 = t1.expand$1(fixes, new X.QuickFixHelper_handleQuickFix__closure());
        t1 = H.setRuntimeTypeInfo(new H.WhereIterable(t1, new X.QuickFixHelper_handleQuickFix__closure0(this._captured_path_1)), [H.getRuntimeTypeArgument(t1, "Iterable", 0)]);
        changes = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        t1 = changes.length;
        if (t1 === 0) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        if (t1 === 1)
          X.QuickFixHelper__applyChange(this._analysis_server$_captured_editor_0, C.JSArray_methods.get$first(changes));
        else {
          $.$get$_logger8().info$1("multiple fixes returned (" + t1 + ")");
          $.$get$atom().invoke$1("beep");
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    QuickFixHelper_handleQuickFix__closure: {
      "^": "Closure:0;",
      call$1: function(fix) {
        return fix.get$fixes();
      }
    },
    QuickFixHelper_handleQuickFix__closure0: {
      "^": "Closure:32;_analysis_server$_captured_path_2",
      call$1: function(change) {
        return J.every$1$ax(change.get$edits(), new X.QuickFixHelper_handleQuickFix___closure(this._analysis_server$_captured_path_2));
      }
    },
    QuickFixHelper_handleQuickFix___closure: {
      "^": "Closure:18;_captured_path_3",
      call$1: function(edit) {
        return J.$eq$(edit.get$file(), this._captured_path_3);
      }
    },
    QuickFixHelper_handleQuickFix_closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        $.$get$_logger8().warning$1(H.S(e));
        $.$get$atom().invoke$1("beep");
      }, null, null, 2, 0, null, 2, "call"]
    },
    QuickFixHelper__applyChange_closure: {
      "^": "Closure:0;",
      call$1: function(e) {
        return e.get$edits();
      }
    },
    _AnalyzingJob: {
      "^": "Job;completer,_infoAction,name,schedulingRule",
      get$quiet: function() {
        return true;
      },
      get$infoAction: function() {
        return this._infoAction;
      },
      run$0: function() {
        return this.completer.future;
      },
      start$0: [function(_) {
        P.Timer_Timer(C.Duration_250000, new X._AnalyzingJob_start_closure(this));
      }, null, "get$start", 0, 0, null],
      _AnalyzingJob$0: function() {
        this._infoAction = new X._AnalyzingJob_closure();
      },
      static: {_AnalyzingJob$: function() {
          var t1 = new X._AnalyzingJob(H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]), null, "Analyzing", null);
          t1._AnalyzingJob$0();
          return t1;
        }}
    },
    _AnalyzingJob_closure: {
      "^": "Closure:1;",
      call$0: function() {
        X.Dependencies_instance().getDependency$1(C.Type_oyn).showDialog$0();
      }
    },
    _AnalyzingJob_start_closure: {
      "^": "Closure:1;_analysis_server$_captured_this_0",
      call$0: function() {
        var t1 = this._analysis_server$_captured_this_0;
        if (t1.completer.future._state === 0)
          $.$get$jobs()._enqueue$1(t1);
      }
    },
    _AnalysisServerWrapper: {
      "^": "Server;process,_processCompleter,analyzing,_analyzingController,_disposedController,_streamSub,_writeMessage,_id,_completers,_jsonEncoder,_domains,_onSend,_onReceive,_analysis_server_gen$_server,_analysis,_completion,_search,_edit,_execution",
      setup$0: function() {
        var t1, t2;
        t1 = this._analysis_server_gen$_server;
        t1.toString;
        t2 = P.LinkedHashMap__makeLiteral(["subscriptions", ["STATUS"]]);
        t1.server._call$2("server.setSubscriptions", t2);
        t2 = this._analysis;
        t2.toString;
        t1 = P.LinkedHashMap__makeLiteral(["options", new N.AnalysisOptions(null, null, null, true, null, null, null)]);
        t2.server._call$2("analysis.updateOptions", t1);
        this._analysis_server_gen$_server.server._call$2("server.getVersion", null).then$1(N.analysis_server_gen_VersionResult_parse$closure()).then$1(new X._AnalysisServerWrapper_setup_closure());
        this._analysis_server_gen$_server._listen$2("server.status", N.analysis_server_gen_ServerStatus_parse$closure())._createSubscription$4(new X._AnalysisServerWrapper_setup_closure0(this), null, null, false);
      },
      get$isRunning: function() {
        return this.process != null;
      },
      restart$1: function(sdk) {
        var startServer, t1;
        startServer = new X._AnalysisServerWrapper_restart_closure(this, sdk);
        t1 = this.process;
        if (t1 != null)
          t1.kill$0().then$1(new X._AnalysisServerWrapper_restart_closure0(startServer));
        else
          startServer.call$0();
      },
      kill$0: function() {
        var t1, exception;
        t1 = $.$get$_logger8();
        t1.fine$1("server forcibly terminated");
        if (this.process != null) {
          try {
            this._analysis_server_gen$_server.server._call$2("server.shutdown", null).catchError$1(new X._AnalysisServerWrapper_kill_closure());
          } catch (exception) {
            H.unwrapException(exception);
          }
          this.process.kill$0();
          this.process = null;
          try {
            this.dispose$0();
          } catch (exception) {
            H.unwrapException(exception);
          }
          t1 = this._processCompleter;
          if (t1.future._state === 0)
            t1.complete$1(0, 0);
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1(0);
          return t1;
        } else {
          t1.warning$1("kill signal sent to dead analysis server");
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1(1);
          return t1;
        }
      },
      _AnalysisServerWrapper$4: function(process, _processCompleter, inStream, writeMessage) {
        this._processCompleter.future.then$1(new X._AnalysisServerWrapper_closure(this));
      },
      process$0: function() {
        return this.process.call$0();
      },
      static: {_AnalysisServerWrapper_create: function(sdk) {
          var controller, process, wrapper;
          controller = P.StreamController_StreamController(null, null, null, null, false, null);
          process = X._AnalysisServerWrapper__createProcess(sdk);
          wrapper = X._AnalysisServerWrapper$(process, X._AnalysisServerWrapper__startProcess(process, controller), H.setRuntimeTypeInfo(new P._ControllerStream(controller), [H.getTypeArgumentByIndex(controller, 0)]), X._AnalysisServerWrapper__messageWriter(process));
          wrapper.setup$0();
          return wrapper;
        }, _AnalysisServerWrapper$: function(process, _processCompleter, inStream, writeMessage) {
          var t1 = new X._AnalysisServerWrapper(process, _processCompleter, false, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, null, 0, P.LinkedHashMap__makeEmpty(), new P.JsonCodec(null, N.analysis_server_gen_Server__toEncodable$closure()), P.LinkedHashMap__makeEmpty(), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, null, null, null, null, null);
          t1.Server$2(inStream, writeMessage);
          t1._AnalysisServerWrapper$4(process, _processCompleter, inStream, writeMessage);
          return t1;
        }, _AnalysisServerWrapper__createProcess: function(sdk) {
          var t1, t2;
          t1 = sdk.directory;
          t2 = J.$index$asx(E._create("File", S.join(t1, "bin", "snapshots", "analysis_server.dart.snapshot"), null), "path");
          t1 = J.$index$asx(t1.obj, "path");
          return new Z.ProcessRunner(J.$index$asx(sdk.get$dartVm().obj, "path"), [t2, "--sdk", t1], null, null, null, H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]), null, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null));
        }, _AnalysisServerWrapper__startProcess: function(process, sc) {
          var completer, t1;
          completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
          t1 = process._stderrController;
          H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X._AnalysisServerWrapper__startProcess_closure());
          t1 = process._stdoutController;
          H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new X._AnalysisServerWrapper__startProcess_closure0(sc));
          process.execStreaming$0().then$1(new X._AnalysisServerWrapper__startProcess_closure1(completer));
          return completer;
        }, _AnalysisServerWrapper__messageWriter: function(process) {
          return new X._AnalysisServerWrapper__messageWriter_closure(process);
        }}
    },
    _AnalysisServerWrapper_closure: {
      "^": "Closure:0;_analysis_server$_captured_this_0",
      call$1: [function(result) {
        var t1 = this._analysis_server$_captured_this_0._disposedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(result);
        return;
      }, null, null, 2, 0, null, 1, "call"]
    },
    _AnalysisServerWrapper_setup_closure: {
      "^": "Closure:0;",
      call$1: [function(v) {
        return $.$get$_logger8().info$1("version " + H.S(J.get$version$x(v)));
      }, null, null, 2, 0, null, 30, "call"]
    },
    _AnalysisServerWrapper_setup_closure0: {
      "^": "Closure:31;_analysis_server$_captured_this_0",
      call$1: [function($status) {
        var t1, t2;
        if ($status.get$analysis() != null) {
          t1 = this._analysis_server$_captured_this_0;
          t2 = $status.get$analysis().get$isAnalyzing();
          t1.analyzing = t2;
          t1 = t1._analyzingController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(t2);
        }
      }, null, null, 2, 0, null, 71, "call"]
    },
    _AnalysisServerWrapper_restart_closure: {
      "^": "Closure:1;_analysis_server$_captured_this_0,_captured_sdk_1",
      call$0: function() {
        var controller, t1, t2, t3;
        controller = P.StreamController_StreamController(null, null, null, null, false, null);
        t1 = this._analysis_server$_captured_this_0;
        t2 = X._AnalysisServerWrapper__createProcess(this._captured_sdk_1);
        t1.process = t2;
        t2 = X._AnalysisServerWrapper__startProcess(t2, controller);
        t1._processCompleter = t2;
        t2.future.then$1(new X._AnalysisServerWrapper_restart__closure(t1));
        t2 = H.setRuntimeTypeInfo(new P._ControllerStream(controller), [H.getTypeArgumentByIndex(controller, 0)]);
        t3 = X._AnalysisServerWrapper__messageWriter(t1.process);
        t1.dispose$0();
        t1._streamSub = t2.listen$1(t1.get$_processMessage());
        t1._writeMessage = t3;
        t1.setup$0();
      }
    },
    _AnalysisServerWrapper_restart__closure: {
      "^": "Closure:0;_analysis_server$_captured_this_2",
      call$1: [function(result) {
        var t1 = this._analysis_server$_captured_this_2._disposedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(result);
        return;
      }, null, null, 2, 0, null, 1, "call"]
    },
    _AnalysisServerWrapper_restart_closure0: {
      "^": "Closure:0;_captured_startServer_3",
      call$1: [function(_) {
        return this._captured_startServer_3.call$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    _AnalysisServerWrapper_kill_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 2, "call"]
    },
    _AnalysisServerWrapper__startProcess_closure: {
      "^": "Closure:4;",
      call$1: [function(str) {
        return $.$get$_logger8().severe$1(J.trim$0$s(str));
      }, null, null, 2, 0, null, 10, "call"]
    },
    _AnalysisServerWrapper__startProcess_closure0: {
      "^": "Closure:4;_captured_sc_0",
      call$1: [function(str) {
        var lines, t1, t2, _i, t3, t4;
        lines = J.trim$0$s(str).split("\n");
        for (t1 = lines.length, t2 = this._captured_sc_0, _i = 0; _i < lines.length; lines.length === t1 || (0, H.throwConcurrentModificationError)(lines), ++_i) {
          t3 = J.trim$0$s(lines[_i]);
          if (t2._state >= 4)
            H.throwExpression(t2._badEventState$0());
          t4 = t2._state;
          if ((t4 & 1) !== 0)
            t2._sendData$1(t3);
          else if ((t4 & 3) === 0)
            t2._ensurePendingEvents$0().add$1(0, new P._DelayedData(t3, null));
        }
      }, null, null, 2, 0, null, 10, "call"]
    },
    _AnalysisServerWrapper__startProcess_closure1: {
      "^": "Closure:19;_analysis_server$_captured_completer_1",
      call$1: [function(exitCode) {
        var t1;
        $.$get$_logger8().fine$1("exited with code " + H.S(exitCode));
        t1 = this._analysis_server$_captured_completer_1;
        if (t1.future._state === 0)
          t1.complete$1(0, exitCode);
      }, null, null, 2, 0, null, 28, "call"]
    },
    _AnalysisServerWrapper__messageWriter_closure: {
      "^": "Closure:4;_captured_process_0",
      call$1: function(message) {
        var t1, t2, t3;
        t1 = this._captured_process_0;
        if (t1 != null) {
          t2 = message + "\n";
          t1 = t1._process$_process;
          t3 = t1._stdin;
          if (t3 == null) {
            t3 = J.$index$asx(J.$index$asx(t1.obj, "process"), "stdin");
            t1._stdin = t3;
            t1 = t3;
          } else
            t1 = t3;
          t1.callMethod$2("write", [t2, "utf8"]);
        }
      }
    },
    RenameRefactoringOptions: {
      "^": "RefactoringOptions;newName",
      toMap$0: function() {
        return P.LinkedHashMap__makeLiteral(["newName", this.newName]);
      }
    }
  }], ["atom.analysis_server_dialog", "package:atom_dartlang/analysis/analysis_server_dialog.dart",, S, {
    "^": "",
    AnalysisServerDialog: {
      "^": "Object;_analysis_server_dialog$_disposables,_dialog,_messageElement,_statusElement,_startButton,_reanalyzeButton,_stopButton",
      dispose$0: [function() {
        return this._analysis_server_dialog$_disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      showDialog$0: function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = this._dialog;
        if (t1 != null) {
          t1._panel.invoke$1("show");
          return;
        }
        t1 = K.TitledModelDialog$("Analysis Server", "analysis-dialog");
        this._dialog = t1;
        t1 = t1.content;
        t2 = K.CoreElement$("div", null, "block", null);
        t3 = t2.element;
        t4 = J.getInterceptor$x(t3);
        t4.setAttribute$2(t3, "layout", "");
        t4.setAttribute$2(t3, "horizontal", "");
        t3 = K.CoreElement$("div", null, null, "Status:");
        t3.flex$0(0);
        t3.clazz$1("inline-block-tight");
        this._statusElement = t3;
        t4 = K.CoreElement$("button", null, "btn btn-sm", "Start");
        t4.clazz$1("inline-block-tight");
        t4.click$1(0, this.get$_handleServerStart());
        this._startButton = t4;
        t5 = K.CoreElement$("button", null, "btn btn-sm", "Reanalyze");
        t5.clazz$1("inline-block-tight");
        t5.click$1(0, this.get$_handleReanalyze());
        this._reanalyzeButton = t5;
        t6 = K.CoreElement$("button", null, "btn btn-sm", "Shutdown");
        t6.clazz$1("inline-block-tight");
        t6.click$1(0, this.get$_handleServerStop());
        this._stopButton = t6;
        t2.add$1(0, [t3, t4, t5, t6]);
        t6 = K.CoreElement$("div", null, "last-message text-subtle", null);
        this._messageElement = t6;
        t1.add$1(0, [t2, t6]);
        this._updateStatus$1$updateTitle(true);
        this._analysis_server_dialog$_disposables.Disposables__disposables.push(this._dialog);
      },
      _logTraffic$1: [function(message) {
        var t1, t2;
        if (this._messageElement != null && this._dialog != null) {
          t1 = J.getInterceptor$asx(message);
          if (J.$gt$n(t1.get$length(message), 300) === true)
            message = t1.substring$2(message, 0, 300) + "\u2026";
          t1 = this._messageElement;
          t2 = H.S(message);
          J.set$text$x(t1.element, t2);
        }
      }, "call$1", "get$_logTraffic", 2, 0, 13, 14],
      _updateStatus$1$updateTitle: function(updateTitle) {
        var t1, t2;
        if (this._statusElement == null)
          return;
        if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isBusy())
          J.set$text$x(this._statusElement.element, "Status: analyzing\u2026");
        else {
          t1 = X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive();
          t2 = this._statusElement;
          if (t1)
            J.set$text$x(t2.element, "Status: idle");
          else
            J.set$text$x(t2.element, "Status: process not running");
        }
        this._startButton.attribute$2("disabled", X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive());
        this._reanalyzeButton.attribute$2("disabled", !X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive());
        this._stopButton.attribute$2("disabled", !X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive());
        if (updateTitle)
          if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive())
            X.Dependencies_instance().getDependency$1(C.Type_bhC).get$server().get$server().getVersion$0().then$1(new S.AnalysisServerDialog__updateStatus_closure(this));
          else
            J.set$text$x(this._dialog.title.element, "Analysis Server");
      },
      _updateStatus$0: function() {
        return this._updateStatus$1$updateTitle(false);
      },
      _handleServerStart$0: [function() {
        return J.start$0$x(X.Dependencies_instance().getDependency$1(C.Type_bhC));
      }, "call$0", "get$_handleServerStart", 0, 0, 2],
      _handleReanalyze$0: [function() {
        return X.Dependencies_instance().getDependency$1(C.Type_bhC).reanalyzeSources$0();
      }, "call$0", "get$_handleReanalyze", 0, 0, 2],
      _handleServerStop$0: [function() {
        return X.Dependencies_instance().getDependency$1(C.Type_bhC).shutdown$0();
      }, "call$0", "get$_handleServerStop", 0, 0, 2],
      AnalysisServerDialog$0: function() {
        this._analysis_server_dialog$_disposables.Disposables__disposables.push($.$get$atom()._commands.add$3(0, "atom-workspace", "dartlang:analysis-server-status", new S.AnalysisServerDialog_closure(this)));
        X.Dependencies_instance().getDependency$1(C.Type_bhC).get$onActive().listen$1(new S.AnalysisServerDialog_closure0(this));
        X.Dependencies_instance().getDependency$1(C.Type_bhC).get$onBusy().listen$1(new S.AnalysisServerDialog_closure1(this));
        X.Dependencies_instance().getDependency$1(C.Type_bhC).get$onSend().listen$1(this.get$_logTraffic());
        X.Dependencies_instance().getDependency$1(C.Type_bhC).get$onReceive().listen$1(this.get$_logTraffic());
      },
      $isDisposable: 1,
      static: {AnalysisServerDialog$: function() {
          var t1 = new S.AnalysisServerDialog(new G.Disposables([]), null, null, null, null, null, null);
          t1.AnalysisServerDialog$0();
          return t1;
        }}
    },
    AnalysisServerDialog_closure: {
      "^": "Closure:0;_analysis_server_dialog$_captured_this_0",
      call$1: function(_) {
        return this._analysis_server_dialog$_captured_this_0.showDialog$0();
      }
    },
    AnalysisServerDialog_closure0: {
      "^": "Closure:0;_analysis_server_dialog$_captured_this_1",
      call$1: [function(val) {
        return this._analysis_server_dialog$_captured_this_1._updateStatus$1$updateTitle(true);
      }, null, null, 2, 0, null, 16, "call"]
    },
    AnalysisServerDialog_closure1: {
      "^": "Closure:0;_analysis_server_dialog$_captured_this_2",
      call$1: [function(val) {
        return this._analysis_server_dialog$_captured_this_2._updateStatus$0();
      }, null, null, 2, 0, null, 16, "call"]
    },
    AnalysisServerDialog__updateStatus_closure: {
      "^": "Closure:0;_analysis_server_dialog$_captured_this_0",
      call$1: [function(result) {
        J.set$text$x(this._analysis_server_dialog$_captured_this_0._dialog.title.element, "Analysis Server (v" + H.S(J.get$version$x(result)) + ")");
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.atom_utils", "package:atom_dartlang/atom_utils.dart",, S, {
    "^": "",
    join: function(dir, arg1, arg2, arg3) {
      var t1, t2, path;
      t1 = H.S(dir instanceof E.Directory ? J.$index$asx(dir.obj, "path") : dir);
      t2 = $.$get$separator();
      path = t1 + t2 + arg1;
      if (arg2 != null) {
        path = path + t2 + arg2;
        if (arg3 != null)
          path = path + t2 + arg3;
      }
      return path;
    },
    dirname: function(entry) {
      var t1, index;
      t1 = J.getInterceptor(entry);
      if (!!t1.$isEntry)
        return J.$index$asx(entry.invoke$1("getParent"), "path");
      index = t1.lastIndexOf$1(entry, $.$get$separator());
      return index === -1 ? null : t1.substring$2(entry, 0, index);
    },
    promptUser: function($prompt, defaultText, selectText) {
      var completer, t1, element, editorElement, editor, t2, t3;
      if (defaultText == null)
        defaultText = "";
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      t1 = [];
      element = document.createElement("div", null);
      J.setInnerHtml$2$treeSanitizer$x(element, "    <atom-text-editor mini>" + H.S(defaultText) + "</atom-text-editor>\n    <div class=\"message\">" + $prompt + "</div>\n", new S.TrustedHtmlTreeSanitizer());
      editorElement = element.querySelector("atom-text-editor");
      editor = new E.TextEditor(E._cvt(J.$index$asx($.$get$context(), "getTextEditorForElement").apply$1([editorElement])));
      if (selectText)
        editor.invoke$1("selectAll");
      P.Timer_Timer(C.Duration_0, new S.promptUser_closure(editorElement));
      t2 = $.$get$atom();
      t1.push(t2._commands.add$3(0, "atom-workspace", "core:confirm", new S.promptUser_closure0(completer, editor)));
      t1.push(t2._commands.add$3(0, "atom-workspace", "core:cancel", new S.promptUser_closure1(completer)));
      t2 = t2._workspace;
      t3 = completer.future;
      t3.whenComplete$1(new S.promptUser_closure2(new G.Disposables(t1), new E.Panel(t2.invoke$2("addModalPanel", t2._panelOptions$3(element, true, null)))));
      return t3;
    },
    loadPackageJson: function() {
      return W.HttpRequest_getString("atom://dartlang/package.json", null, null).then$1(new S.loadPackageJson_closure());
    },
    getPackageVersion: function() {
      return S.loadPackageJson().then$1(new S.getPackageVersion_closure());
    },
    promptUser_closure: {
      "^": "Closure:1;_captured_editorElement_0",
      call$0: function() {
        var e, exception, t1;
        try {
          this._captured_editorElement_0.focus();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          $.$get$_logger7().warning$1(e);
        }
      }
    },
    promptUser_closure0: {
      "^": "Closure:0;_atom_utils$_captured_completer_1,_atom_utils$_captured_editor_2",
      call$1: function(_) {
        var t1 = this._atom_utils$_captured_completer_1;
        if (t1.future._state === 0)
          t1.complete$1(0, this._atom_utils$_captured_editor_2.invoke$1("getText"));
      }
    },
    promptUser_closure1: {
      "^": "Closure:0;_captured_completer_3",
      call$1: function(_) {
        var t1 = this._captured_completer_3;
        if (t1.future._state === 0)
          t1.complete$1(0, null);
      }
    },
    promptUser_closure2: {
      "^": "Closure:1;_captured_disposables_4,_captured_panel_5",
      call$0: [function() {
        this._captured_disposables_4.dispose$0();
        this._captured_panel_5.invoke$1("destroy");
      }, null, null, 0, 0, null, "call"]
    },
    PermissiveNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        return true;
      },
      allowsAttribute$3: function(element, attributeName, value) {
        return true;
      }
    },
    TrustedHtmlTreeSanitizer: {
      "^": "Object;",
      sanitizeTree$1: function(node) {
      }
    },
    loadPackageJson_closure: {
      "^": "Closure:0;",
      call$1: [function(str) {
        return C.JsonCodec_null_null.decode$1(str);
      }, null, null, 2, 0, null, 10, "call"]
    },
    getPackageVersion_closure: {
      "^": "Closure:0;",
      call$1: [function(map) {
        return J.$index$asx(map, "version");
      }, null, null, 2, 0, null, 82, "call"]
    }
  }], ["atom.autocomplete", "package:atom_dartlang/atom_autocomplete.dart",, X, {
    "^": "",
    AutocompleteProvider: {
      "^": "Object;",
      onDidInsertSuggestion$3: function(editor, triggerPosition, suggestion) {
      },
      dispose$0: [function() {
      }, "call$0", "get$dispose", 0, 0, 2],
      _getSuggestions$1: [function(options) {
        var opts, t1, timer;
        opts = new X.AutocompleteOptions(null, null, null, null);
        t1 = J.getInterceptor$asx(options);
        opts.editor = new E.TextEditor(E._cvt(t1.$index(options, "editor")));
        opts.bufferPosition = new E.Point(E._cvt(t1.$index(options, "bufferPosition")));
        opts.scopeDescriptor = t1.$index(options, "scopeDescriptor");
        opts.prefix = t1.$index(options, "prefix");
        timer = new P.Stopwatch(null, null);
        H.Primitives_initTicker();
        $.Stopwatch__frequency = $.Primitives_timerFrequency;
        timer.start$0(0);
        return K.Promise__jsObjectFromFuture(this.getSuggestions$1(opts).then$1(new X.AutocompleteProvider__getSuggestions_closure(timer)));
      }, "call$1", "get$_getSuggestions", 2, 0, 51, 32],
      _onDidInsertSuggestion$1: [function(options) {
        var t1 = J.getInterceptor$asx(options);
        this.onDidInsertSuggestion$3(new E.TextEditor(E._cvt(t1.$index(options, "editor"))), new E.Point(E._cvt(t1.$index(options, "triggerPosition"))), K.toDartObjectViaWizardy(t1.$index(options, "suggestion")));
      }, "call$1", "get$_onDidInsertSuggestion", 2, 0, 20, 32],
      $isDisposable: 1
    },
    AutocompleteProvider__getSuggestions_closure: {
      "^": "Closure:0;_captured_timer_0",
      call$1: [function(suggestions) {
        var t1 = J.getInterceptor$asx(suggestions);
        $.$get$_logger12().fine$1("code completion in " + H.S(J.$tdiv$n(J.$mul$ns(this._captured_timer_0.get$elapsedTicks(), 1000), $.Stopwatch__frequency)) + "ms, " + H.S(t1.get$length(suggestions)) + " results");
        return J.toList$0$ax(t1.map$1(suggestions, new X.AutocompleteProvider__getSuggestions__closure()));
      }, null, null, 2, 0, null, 90, "call"]
    },
    AutocompleteProvider__getSuggestions__closure: {
      "^": "Closure:0;",
      call$1: [function(suggestion) {
        return suggestion._toProxy$0();
      }, null, null, 2, 0, null, 91, "call"]
    },
    AutocompleteOptions: {
      "^": "Object;editor,bufferPosition,scopeDescriptor,prefix",
      toString$0: function(_) {
        return "[" + H.S(this.bufferPosition) + ", " + H.S(this.scopeDescriptor) + ", " + H.S(this.prefix) + "]";
      }
    },
    Suggestion: {
      "^": "Object;text>,snippet,displayText,replacementPrefix,type>,leftLabel,leftLabelHTML,rightLabel,rightLabelHTML,className,iconHTML,description,descriptionMoreURL,requiredImport",
      _toProxy$0: function() {
        var m, t1;
        m = P.LinkedHashMap__makeEmpty();
        t1 = this.text;
        if (t1 != null)
          m.$indexSet(0, "text", t1);
        t1 = this.snippet;
        if (t1 != null)
          m.$indexSet(0, "snippet", t1);
        t1 = this.replacementPrefix;
        if (t1 != null)
          m.$indexSet(0, "replacementPrefix", t1);
        t1 = this.type;
        if (t1 != null)
          m.$indexSet(0, "type", t1);
        t1 = this.leftLabel;
        if (t1 != null)
          m.$indexSet(0, "leftLabel", t1);
        t1 = this.rightLabel;
        if (t1 != null)
          m.$indexSet(0, "rightLabel", t1);
        t1 = this.className;
        if (t1 != null)
          m.$indexSet(0, "className", t1);
        t1 = this.description;
        if (t1 != null)
          m.$indexSet(0, "description", t1);
        t1 = this.requiredImport;
        if (t1 != null)
          m.$indexSet(0, "requiredImport", t1);
        return K.jsify(m);
      }
    }
  }], ["atom.changelog", "package:atom_dartlang/impl/changelog.dart",, Z, {
    "^": "",
    _checkChangelog: [function(currentVersion) {
      var t1, lastVersion;
      t1 = $.$get$state();
      lastVersion = J.$index$asx(t1._state$_map, "version");
      if (!J.$eq$(lastVersion, currentVersion)) {
        $.$get$_logger10().info$1("upgraded from " + H.S(lastVersion) + " to " + H.S(currentVersion));
        W.HttpRequest_getString("atom://dartlang/CHANGELOG.md", null, null).then$1(new Z._checkChangelog_closure(currentVersion, lastVersion));
      }
      J.$indexSet$ax(t1._state$_map, "version", currentVersion);
    }, "call$1", "changelog___checkChangelog$closure", 2, 0, 13, 92],
    _extractVersion: function(changelog, last, inclusive) {
      var lastVersion, changes, itor, t1;
      lastVersion = T.Version_Version$parse(last);
      changes = J.split$1$s(changelog, "\n");
      itor = H.setRuntimeTypeInfo(new H.SkipWhileIterable(changes, new Z._extractVersion_closure()), [H.getTypeArgumentByIndex(changes, 0)]);
      t1 = H.setRuntimeTypeInfo(new H.TakeWhileIterable(itor, new Z._extractVersion_closure0(inclusive, lastVersion)), [H.getRuntimeTypeArgument(itor, "Iterable", 0)]);
      return C.JSString_methods.trim$0(C.JSArray_methods.join$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0)), "\n"));
    },
    _checkChangelog_closure: {
      "^": "Closure:0;_captured_currentVersion_0,_captured_lastVersion_1",
      call$1: [function(str) {
        var t1, changes;
        t1 = this._captured_lastVersion_1;
        changes = t1 != null ? Z._extractVersion(str, t1, false) : Z._extractVersion(str, this._captured_currentVersion_0, true);
        if (changes.length !== 0) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "Upgraded to dartlang plugin version " + H.S(this._captured_currentVersion_0) + ".", t1._options$4$description$detail$dismissable$icon(changes, null, true, null));
        }
      }, null, null, 2, 0, null, 10, "call"]
    },
    _extractVersion_closure: {
      "^": "Closure:0;",
      call$1: function(line) {
        return !J.startsWith$1$s(line, "##");
      }
    },
    _extractVersion_closure0: {
      "^": "Closure:0;_captured_inclusive_0,_captured_lastVersion_1",
      call$1: function(line) {
        var ver, t1, exception;
        if (J.startsWith$1$s(line, "## "))
          try {
            line = J.substring$1$s(line, 3);
            ver = T.Version_Version$parse(line);
            if (this._captured_inclusive_0) {
              t1 = J.compareTo$1$ns(ver, this._captured_lastVersion_1);
              return t1 >= 0;
            }
            t1 = J.compareTo$1$ns(ver, this._captured_lastVersion_1);
            return t1 > 0;
          } catch (exception) {
            H.unwrapException(exception);
            return true;
          }
        return true;
      }
    }
  }], ["atom.declaration_nav", "package:atom_dartlang/analysis/declaration_nav.dart",, D, {
    "^": "",
    NavigationHelper: {
      "^": "Object;_declaration_nav$_commands,_lastNavInfo,_navCompleters,_eventListener",
      dispose$0: [function() {
        return this._declaration_nav$_commands.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _activate$1: [function(editor) {
        this._eventListener.dispose$0();
        if (editor == null)
          return;
        this._eventListener = K.EventListener$(J.get$view$x(editor), "click", new D.NavigationHelper__activate_closure(this, editor));
      }, "call$1", "get$_activate", 2, 0, 8, 13],
      _navigationEvent$1: [function(navInfo) {
        var path, t1;
        path = navInfo.get$file();
        this._lastNavInfo = navInfo;
        t1 = this._navCompleters;
        if (t1.$index(0, path) != null)
          J.complete$1$x(t1.$index(0, path), navInfo);
      }, "call$1", "get$_navigationEvent", 2, 0, 62, 33],
      _handleNavigate$1: [function($event) {
        this._handleNavigateEditor$1($event.get$editor());
      }, "call$1", "get$_handleNavigate", 2, 0, 10],
      _handleNavigateEditor$1: function(editor) {
        var path, range, offset;
        if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive()) {
          path = editor.getPath$0();
          range = editor.getSelectedBufferRange$0();
          offset = editor.getBuffer$0().invoke$2("characterIndexForPosition", new E.Point(E._cvt(J.$index$asx(range.obj, "start"))));
          this._getNavigationInfoFor$1(path).then$1(new D.NavigationHelper__handleNavigateEditor_closure(this, editor, offset)).catchError$1(new D.NavigationHelper__handleNavigateEditor_closure0(this));
        } else
          $.$get$atom().invoke$1("beep");
      },
      _getNavigationInfoFor$1: function(path) {
        var t1, t2, completer;
        t1 = this._lastNavInfo;
        if (t1 != null && J.$eq$(t1.get$file(), path)) {
          t1 = this._lastNavInfo;
          t2 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t2._asyncComplete$1(t1);
          return t2;
        }
        t1 = this._navCompleters;
        if (t1.$index(0, path) != null)
          return t1.$index(0, path).future;
        completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
        t1.$indexSet(0, path, completer);
        P.Timer_Timer(P.Duration$(0, 0, 0, 350, 0, 0), new D.NavigationHelper__getNavigationInfoFor_closure(completer));
        t1 = completer.future;
        t1.whenComplete$1(new D.NavigationHelper__getNavigationInfoFor_closure0(this, path));
        return t1;
      },
      $isDisposable: 1,
      static: {NavigationHelper__processNavInfo: function(editor, offset, navInfo) {
          var files, targets, t1, region, t2, target, file, buffer;
          files = J.get$files$x(navInfo);
          targets = navInfo.get$targets();
          for (t1 = J.get$iterator$ax(navInfo.get$regions()); t1.moveNext$0();) {
            region = t1.__interceptors$_current;
            t2 = J.getInterceptor$x(region);
            if (J.$le$n(t2.get$offset(region), offset) === true && J.$gt$n(J.$add$ns(t2.get$offset(region), t2.get$length(region)), offset) === true) {
              target = J.$index$asx(targets, J.get$first$ax(region.get$targets()));
              file = J.$index$asx(files, target.get$fileIndex());
              buffer = editor.getBuffer$0();
              return F.flashSelection(editor, new E.Range(E._create("Range", E._cvt(buffer.invoke$2("positionForCharacterIndex", t2.get$offset(region))), E._cvt(buffer.invoke$2("positionForCharacterIndex", J.$add$ns(t2.get$offset(region), t2.get$length(region))))))).then$1(new D.NavigationHelper__processNavInfo_closure(target, file));
            }
          }
          return P.Future_Future$error("no element", null, null);
        }}
    },
    NavigationHelper__activate_closure: {
      "^": "Closure:74;_declaration_nav$_captured_this_0,_declaration_nav$_captured_editor_1",
      call$1: function(evt) {
        var jump, exception;
        try {
          jump = false;
          if ($.$get$isMac() === true)
            jump = J.$index$asx(evt, "altKey") === true || J.$index$asx(evt, "metaKey") === true;
          else
            jump = J.$index$asx(evt, "ctrlKey ") === true || J.$index$asx(evt, "altKey") === true;
          if (jump === true)
            P.Timer_Timer(C.Duration_0, new D.NavigationHelper__activate__closure(this._declaration_nav$_captured_this_0, this._declaration_nav$_captured_editor_1));
        } catch (exception) {
          H.unwrapException(exception);
        }
      }
    },
    NavigationHelper__activate__closure: {
      "^": "Closure:1;_declaration_nav$_captured_this_2,_declaration_nav$_captured_editor_3",
      call$0: function() {
        return this._declaration_nav$_captured_this_2._handleNavigateEditor$1(this._declaration_nav$_captured_editor_3);
      }
    },
    NavigationHelper__handleNavigateEditor_closure: {
      "^": "Closure:100;_declaration_nav$_captured_this_0,_declaration_nav$_captured_editor_1,_captured_offset_2",
      call$1: [function(navInfo) {
        if (navInfo != null)
          return D.NavigationHelper__processNavInfo(this._declaration_nav$_captured_editor_1, this._captured_offset_2, navInfo);
        else
          $.$get$atom().invoke$1("beep");
      }, null, null, 2, 0, null, 33, "call"]
    },
    NavigationHelper__handleNavigateEditor_closure0: {
      "^": "Closure:0;_declaration_nav$_captured_this_3",
      call$1: [function(_) {
        return $.$get$atom().invoke$1("beep");
      }, null, null, 2, 0, null, 0, "call"]
    },
    NavigationHelper__getNavigationInfoFor_closure: {
      "^": "Closure:1;_declaration_nav$_captured_completer_0",
      call$0: function() {
        var t1 = this._declaration_nav$_captured_completer_0;
        if (t1.future._state === 0)
          t1.complete$1(0, null);
      }
    },
    NavigationHelper__getNavigationInfoFor_closure0: {
      "^": "Closure:1;_declaration_nav$_captured_this_1,_declaration_nav$_captured_path_2",
      call$0: [function() {
        return this._declaration_nav$_captured_this_1._navCompleters.remove$1(0, this._declaration_nav$_captured_path_2);
      }, null, null, 0, 0, null, "call"]
    },
    NavigationHelper__processNavInfo_closure: {
      "^": "Closure:0;_declaration_nav$_captured_target_0,_captured_file_1",
      call$1: [function(_) {
        var t1 = this._declaration_nav$_captured_target_0;
        X.Dependencies_instance().getDependency$1(C.Type_25m).jumpToLocation$4(this._captured_file_1, J.$sub$n(t1.get$startLine(), 1), J.$sub$n(t1.get$startColumn(), 1), J.get$length$asx(t1));
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.editing", "package:atom_dartlang/impl/editing.dart",, B, {
    "^": "",
    handleEnterKey: [function($event) {
      var view, editor, selection, row, col, handled, e, t1, exception;
      try {
        view = new E.TextEditorView(E._cvt(J.$index$asx($event.get$obj(), "currentTarget")));
        editor = new E.TextEditor(E._cvt(view.invoke$1("getModel")));
        t1 = editor.invoke$1("getSelectedBufferRange");
        selection = t1 == null ? null : new E.Range(E._cvt(t1));
        if (selection.invoke$1("isEmpty") !== true)
          $event.invoke$1("abortKeyBinding");
        else {
          row = J.$index$asx(E._cvt(J.$index$asx(selection.get$obj(), "start")), "row");
          if (!J.$eq$(editor.invoke$2("isBufferRowCommented", row), true))
            $event.invoke$1("abortKeyBinding");
          else {
            col = J.$index$asx(E._cvt(J.$index$asx(selection.get$obj(), "start")), "column");
            handled = B._handleEnterKey(editor, row, col);
            if (handled !== true)
              $event.invoke$1("abortKeyBinding");
          }
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        $event.invoke$1("abortKeyBinding");
        $.$get$_logger2().severe$1("exception during enter key handling: " + H.S(e));
      }
    }, "call$1", "editing__handleEnterKey$closure", 2, 0, 10],
    _handleEnterKey: function(editor, row, col) {
      var t1, line, t2, trimmedText, atEol, t3, leading, inComment, previousLine;
      t1 = {};
      col = J.$sub$n(col, 1);
      line = editor.invoke$2("lineTextForBufferRow", row);
      t2 = J.getInterceptor$s(line);
      trimmedText = t2.trimLeft$0(line);
      atEol = J.$eq$(J.$add$ns(col, 1), t2.get$length(line));
      t1._captured_leading_0 = " ";
      if (C.JSString_methods.startsWith$1(trimmedText, "///")) {
        t3 = trimmedText.length;
        leading = C.JSString_methods.substring$2(trimmedText, 3, t3 - C.JSString_methods.trimLeft$0(C.JSString_methods.substring$1(trimmedText, 3)).length);
        t1._captured_leading_0 = leading;
        inComment = J.$le$n(J.$add$ns(J.$sub$n(t2.get$length(line), t3), 2), col);
        t2 = leading;
      } else if (C.JSString_methods.startsWith$1(trimmedText, "*")) {
        t3 = trimmedText.length;
        leading = C.JSString_methods.substring$2(trimmedText, 1, t3 - C.JSString_methods.trimLeft$0(C.JSString_methods.substring$1(trimmedText, 1)).length);
        t1._captured_leading_0 = leading;
        inComment = J.$le$n(J.$add$ns(J.$sub$n(t2.get$length(line), t3), 0), col);
        t2 = leading;
      } else {
        inComment = C.JSString_methods.startsWith$1(trimmedText, "/*") && J.$le$n(J.$add$ns(J.$sub$n(t2.get$length(line), trimmedText.length), 1), col);
        t2 = " ";
      }
      if (inComment !== true)
        return false;
      if (t2.length === 0)
        t1._captured_leading_0 = " ";
      t2 = J.getInterceptor$n(row);
      previousLine = t2.$gt(row, 0) === true ? J.trimLeft$0$s(editor.invoke$2("lineTextForBufferRow", t2.$sub(row, 1))) : "";
      if (C.JSString_methods.startsWith$1(trimmedText, "///")) {
        if (trimmedText === "/// /" && atEol)
          editor.atomic$1(new B._handleEnterKey_closure(editor));
        else
          editor.atomic$1(new B._handleEnterKey_closure0(t1, editor));
        return true;
      }
      if (C.JSString_methods.startsWith$1(trimmedText, "/*")) {
        editor.atomic$1(new B._handleEnterKey_closure1(editor));
        return true;
      }
      if (C.JSString_methods.endsWith$1(trimmedText, "*/") && atEol) {
        editor.atomic$1(new B._handleEnterKey_closure2(editor));
        return true;
      }
      if (C.JSString_methods.startsWith$1(trimmedText, "*"))
        if (t2.$gt(row, 0) === true)
          if (C.JSString_methods.startsWith$1(previousLine, "/*") || C.JSString_methods.startsWith$1(previousLine, "*")) {
            if (C.JSString_methods.endsWith$1(trimmedText, "* /"))
              editor.atomic$1(new B._handleEnterKey_closure3(editor));
            else if (C.JSString_methods.endsWith$1(trimmedText, " /") && atEol)
              editor.atomic$1(new B._handleEnterKey_closure4(editor));
            else
              editor.atomic$1(new B._handleEnterKey_closure5(t1, editor));
            return true;
          }
      return false;
    },
    _handleEnterKey_closure: {
      "^": "Closure:1;_editing$_captured_editor_1",
      call$0: function() {
        var t1 = this._editing$_captured_editor_1;
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
      }
    },
    _handleEnterKey_closure0: {
      "^": "Closure:1;_editing$_box_0,_captured_editor_2",
      call$0: function() {
        var t1 = this._captured_editor_2;
        t1.invoke$1("insertNewline");
        t1.insertText$1("///" + this._editing$_box_0._captured_leading_0);
      }
    },
    _handleEnterKey_closure1: {
      "^": "Closure:1;_editing$_captured_editor_3",
      call$0: function() {
        var t1 = this._editing$_captured_editor_3;
        t1.invoke$1("insertNewline");
        t1.insertText$1(" * ");
      }
    },
    _handleEnterKey_closure2: {
      "^": "Closure:1;_captured_editor_4",
      call$0: function() {
        var t1 = this._captured_editor_4;
        t1.invoke$1("insertNewline");
        t1.invoke$1("backspace");
      }
    },
    _handleEnterKey_closure3: {
      "^": "Closure:1;_captured_editor_5",
      call$0: function() {
        var t1 = this._captured_editor_5;
        t1.invoke$1("backspace");
        t1.invoke$1("backspace");
        t1.insertText$1("/");
        t1.invoke$1("insertNewline");
        t1.invoke$1("backspace");
      }
    },
    _handleEnterKey_closure4: {
      "^": "Closure:1;_captured_editor_6",
      call$0: function() {
        var t1 = this._captured_editor_6;
        t1.invoke$1("backspace");
        t1.invoke$1("insertNewline");
        t1.insertText$1("*/");
      }
    },
    _handleEnterKey_closure5: {
      "^": "Closure:1;_editing$_box_0,_captured_editor_7",
      call$0: function() {
        var t1 = this._captured_editor_7;
        t1.invoke$1("insertNewline");
        t1.insertText$1("*" + this._editing$_box_0._captured_leading_0);
      }
    }
  }], ["atom.editors", "package:atom_dartlang/editors.dart",, F, {
    "^": "",
    flashSelection: function(editor, range) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, original, t1, $async$temp1;
      function $async$flashSelection($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = editor;
              original = $async$temp1.getSelectedBufferRange$0();
              $async$temp1 = editor;
              $async$temp1.setSelectedBufferRange$1(range);
              $async$temp1 = $;
              t1 = $async$temp1.$get$_flashDuration();
              $async$temp1 = P;
              $async$goto = 3;
              return H.asyncHelper($async$temp1.Future_Future$delayed(t1, null, null), $async$flashSelection, $async$completer);
            case 3:
              // returning from await.
              $async$temp1 = editor;
              $async$temp1.setSelectedBufferRange$1(original);
              $async$temp1 = P;
              $async$returnValue = $async$temp1.Future_Future$delayed(t1, null, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return H.asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return H.asyncHelper($async$currentError, 1, $async$completer);
          }
      }
      return H.asyncHelper(null, $async$flashSelection, $async$completer, null);
    },
    applyEdits: function(editor, edits) {
      var buffer;
      F._sortEdits(edits);
      buffer = editor.getBuffer$0();
      buffer.atomic$1(new F.applyEdits_closure(edits, buffer));
    },
    selectEditGroups: function(editor, groups) {
      var t1, t2, group, bestLength, g;
      t1 = {};
      t2 = J.getInterceptor$asx(groups);
      if (t2.get$isEmpty(groups))
        return;
      group = t2.get$first(groups);
      t1._captured_group_0 = group;
      bestLength = J.get$length$asx(group.get$positions());
      for (t2 = t2.get$iterator(groups); t2.moveNext$0();) {
        g = t2.__interceptors$_current;
        if (J.get$length$asx(g.get$positions()) > bestLength) {
          t1._captured_group_0 = g;
          bestLength = J.get$length$asx(g.get$positions());
        }
      }
      t2 = E._cvt(editor.invoke$1("getBuffer"));
      editor.setSelectedBufferRanges$1(J.map$1$ax(t1._captured_group_0.get$positions(), new F.selectEditGroups_closure(t1, new E.TextBuffer(t2))).toList$0(0));
    },
    _sortEdits: function(edits) {
      J.sort$1$ax(edits, new F._sortEdits_closure());
    },
    applyEdits_closure: {
      "^": "Closure:1;_captured_edits_0,_editors$_captured_buffer_1",
      call$0: function() {
        J.forEach$1$ax(this._captured_edits_0, new F.applyEdits__closure(this._editors$_captured_buffer_1));
      }
    },
    applyEdits__closure: {
      "^": "Closure:29;_captured_buffer_2",
      call$1: function(edit) {
        var t1, t2;
        t1 = this._captured_buffer_2;
        t2 = J.getInterceptor$x(edit);
        t2 = t1.invoke$3("setTextInRange", new E.Range(E._create("Range", E._cvt(t1.invoke$2("positionForCharacterIndex", t2.get$offset(edit))), E._cvt(t1.invoke$2("positionForCharacterIndex", J.$add$ns(t2.get$offset(edit), t2.get$length(edit)))))), edit.get$replacement());
        if (t2 == null)
          ;
        else
          E._cvt(t2);
      }
    },
    selectEditGroups_closure: {
      "^": "Closure:30;_editors$_box_0,_editors$_captured_buffer_1",
      call$1: [function(position) {
        var t1, t2;
        t1 = this._editors$_captured_buffer_1;
        t2 = J.getInterceptor$x(position);
        return new E.Range(E._create("Range", E._cvt(t1.invoke$2("positionForCharacterIndex", t2.get$offset(position))), E._cvt(t1.invoke$2("positionForCharacterIndex", J.$add$ns(t2.get$offset(position), J.get$length$asx(this._editors$_box_0._captured_group_0))))));
      }, null, null, 2, 0, null, 97, "call"]
    },
    _sortEdits_closure: {
      "^": "Closure:60;",
      call$2: function(a, b) {
        return J.$sub$n(J.get$offset$x(b), J.get$offset$x(a));
      }
    },
    EditorManager: {
      "^": "Object;dartEditors,dartProjectEditors<",
      jumpToLocation$4: function(path, line, column, $length) {
        var options, t1, ed;
        options = P.LinkedHashMap__makeLiteral(["initialLine", line, "initialColumn", column, "searchAllPanes", true]);
        t1 = $.$get$atom();
        ed = t1._workspace.getActiveTextEditor$0();
        if (ed != null && J.$eq$(ed.invoke$1("getPath"), path))
          options.$indexSet(0, "searchAllPanes", false);
        t1._workspace.open$2$options(0, path, options).then$1(new F.EditorManager_jumpToLocation_closure($length));
      },
      dispose$0: [function() {
        this.dartEditors.dispose$0();
        this.dartProjectEditors.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    EditorManager_jumpToLocation_closure: {
      "^": "Closure:22;_captured_length_0",
      call$1: [function(editor) {
        var t1 = this._captured_length_0;
        if (t1 != null)
          editor.selectRight$1(t1);
      }, null, null, 2, 0, null, 13, "call"]
    },
    Editors: {
      "^": "Object;_editors$_matches,_editorObserve,_itemObserve,_editors$_subs,_editorOpenedController,_activeEditorController,_editorClosedController,_activeEditor,_openEditors",
      dispose$0: [function() {
        this._editorObserve.invoke$1("dispose");
        this._itemObserve.invoke$1("dispose");
        this._editors$_subs.cancel$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _observeTextEditors$1: [function(editor) {
        var t1, t2, sub;
        t1 = {};
        if (this._editors$_matches$1(editor) === true) {
          this._openEditors.push(editor);
          t2 = this._editorOpenedController;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(editor);
          t1._captured_sub_0 = null;
          sub = editor.eventStream$1("onDidDestroy").listen$1(new F.Editors__observeTextEditors_closure(t1, this, editor));
          t1._captured_sub_0 = sub;
          this._editors$_subs._subscriptions.push(sub);
        }
      }, "call$1", "get$_observeTextEditors", 2, 0, 8],
      _observeActivePaneItem$1: [function(_) {
        var editor, t1;
        editor = $.$get$atom()._workspace.getActiveTextEditor$0();
        if (this._editors$_matches$1(editor) !== true)
          editor = null;
        this._activeEditor = editor;
        t1 = this._activeEditorController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(editor);
      }, function() {
        return this._observeActivePaneItem$1(null);
      }, "_observeActivePaneItem$0", "call$1", "call$0", "get$_observeActivePaneItem", 0, 2, 14, 4],
      Editors$_allDartEditors$0: function() {
        this._editors$_matches = F.editors_Editors__isDartTypeEditor$closure();
        var t1 = $.$get$atom();
        this._editorObserve = t1._workspace.observeTextEditors$1(this.get$_observeTextEditors());
        this._itemObserve = t1._workspace.observeActivePaneItem$1(this.get$_observeActivePaneItem());
      },
      _editors$_matches$1: function(arg0) {
        return this._editors$_matches.call$1(arg0);
      },
      $isDisposable: 1,
      static: {Editors__isDartTypeEditor: [function(editor) {
          var grammar, scopes;
          if (editor == null)
            return false;
          grammar = K.toDartObjectViaWizardy(editor.invoke$1("getRootScopeDescriptor"));
          scopes = grammar == null ? null : J.$index$asx(grammar, "scopes");
          return scopes == null ? false : J.contains$1$asx(scopes, "source.dart");
        }, "call$1", "editors_Editors__isDartTypeEditor$closure", 2, 0, 97], Editors$_allDartEditors: function() {
          var t1 = new F.Editors(null, null, null, new G.StreamSubscriptions([]), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, []);
          t1.Editors$_allDartEditors$0();
          return t1;
        }}
    },
    Editors__observeTextEditors_closure: {
      "^": "Closure:0;_editors$_box_0,_editors$_captured_this_1,_editors$_captured_editor_2",
      call$1: [function(_) {
        var t1 = this._editors$_captured_this_1;
        C.JSArray_methods.remove$1(t1._editors$_subs._subscriptions, this._editors$_box_0._captured_sub_0);
        t1 = t1._editorClosedController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(this._editors$_captured_editor_2);
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.elements", "package:atom_dartlang/elements.dart",, K, {
    "^": "",
    CoreElement: {
      "^": "Object;element<",
      get$id: function(_) {
        return J.get$attributes$x(this.element).$index(0, "id");
      },
      attribute$2: function($name, value) {
        var t1;
        if (value == null)
          value = J.get$attributes$x(this.element).containsKey$1($name) !== true;
        t1 = this.element;
        if (value === true)
          J.setAttribute$2$x(t1, $name, "");
        else
          J.get$attributes$x(t1).remove$1(0, $name);
      },
      attribute$1: function($name) {
        return this.attribute$2($name, null);
      },
      get$attributes: function(_) {
        return J.get$attributes$x(this.element);
      },
      setAttribute$2: function(_, $name, value) {
        return J.setAttribute$2$x(this.element, $name, value);
      },
      clazz$1: function(_class) {
        if (C.JSString_methods.contains$1(_class, " "))
          throw H.wrapException(P.ArgumentError$("spaces not allowed in class names"));
        J.get$classes$x(this.element).add$1(0, _class);
      },
      toggleClass$2: function($name, value) {
        J.get$classes$x(this.element).toggle$2(0, $name, value);
      },
      toggleClass$1: function($name) {
        return this.toggleClass$2($name, null);
      },
      set$text: function(_, value) {
        J.set$text$x(this.element, value);
      },
      add$1: function(_, child) {
        var t1 = J.getInterceptor(child);
        if (!!t1.$isList)
          return t1.map$1(child, new K.CoreElement_add_closure(this)).toList$0(0);
        else if (!!t1.$isCoreElement)
          J.add$1$ax(J.get$children$x(this.element), child.element);
        else if (!!t1.$isElement)
          J.add$1$ax(J.get$children$x(this.element), child);
        else
          throw H.wrapException(P.ArgumentError$("argument type not supported"));
        return child;
      },
      flex$1: function(_, flexAmount) {
        this.attribute$2("flex", true);
      },
      flex$0: function($receiver) {
        return this.flex$1($receiver, null);
      },
      get$onClick: function(_) {
        return J.get$onClick$x(this.element);
      },
      click$1: function(_, handle) {
        var t1 = J.get$onClick$x(this.element);
        t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new K.CoreElement_click_closure(handle)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
        t1._tryResume$0();
        return t1;
      },
      dispose$0: ["super$CoreElement$dispose", function() {
        var t1, t2, exception;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$parent(t1) == null)
          return;
        if (J.contains$1$asx(J.get$children$x(t2.get$parent(t1)), t1))
          try {
            J.remove$1$ax(J.get$children$x(t2.get$parent(t1)), t1);
          } catch (exception) {
            H.unwrapException(exception);
          }
      }],
      toString$0: function(_) {
        return J.toString$0$(this.element);
      },
      CoreElement$4$attributes$classes$text: function(tag, attributes, classes, text) {
        if (text != null)
          J.set$text$x(this.element, text);
        if (classes != null)
          J.get$classes$x(this.element).addAll$1(0, classes.split(" "));
      },
      static: {CoreElement$: function(tag, attributes, classes, text) {
          var t1 = new K.CoreElement(W._ElementFactoryProvider_createElement_tag(tag, null));
          t1.CoreElement$4$attributes$classes$text(tag, attributes, classes, text);
          return t1;
        }}
    },
    CoreElement_add_closure: {
      "^": "Closure:0;_elements$_captured_this_0",
      call$1: [function(c) {
        return this._elements$_captured_this_0.add$1(0, c);
      }, null, null, 2, 0, null, 100, "call"]
    },
    CoreElement_click_closure: {
      "^": "Closure:0;_captured_handle_0",
      call$1: [function(_) {
        return this._captured_handle_0.call$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    ProgressElement: {
      "^": "CoreElement;_progress,element"
    },
    ViewResizer: {
      "^": "CoreElement;_elements$_controller,_elements$_offset,_moveSub,_upSub,element",
      _init$0: function() {
        var t1, t2;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        t2.get$classes(t1).toggle$2(0, "view-resize", true);
        if (t2.get$attributes(t1).containsKey$1("horizontal") !== true && t2.get$attributes(t1).containsKey$1("vertical") !== true) {
          t2.get$attributes(t1).remove$1(0, "vertical");
          this.attribute$1("horizontal");
        }
        t1 = t2.get$onMouseDown(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new K.ViewResizer__init_closure(this, new K.ViewResizer__init_closure0(this))), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      },
      _minSize$1: function(e) {
        var style, str, t1;
        style = J.getComputedStyle$0$x(e);
        str = J.get$attributes$x(this.element).containsKey$1("vertical") === true ? style.minWidth : style.minHeight;
        t1 = str.length;
        if (t1 === 0)
          return 0;
        return P.num_parse(C.JSString_methods.endsWith$1(str, "px") ? C.JSString_methods.substring$2(str, 0, t1 - 2) : str, null);
      },
      get$_targetSize: function() {
        var t1, t2, style, str;
        t1 = this.element;
        t2 = J.getInterceptor$x(t1);
        style = J.getComputedStyle$0$x(t2.get$parent(t1));
        str = t2.get$attributes(t1).containsKey$1("vertical") === true ? style.width : style.height;
        return P.num_parse(C.JSString_methods.endsWith$1(str, "px") ? C.JSString_methods.substring$2(str, 0, str.length - 2) : str, null);
      },
      set$_targetSize: function(size) {
        var t1, currentPos, t2, t3, newPos;
        t1 = this._elements$_controller;
        currentPos = t1._async$_next !== t1 ? this.get$_targetSize() : null;
        t2 = this.element;
        size = P.max(size, this._minSize$1(t2));
        t3 = J.getInterceptor$x(t2);
        if (t3.get$attributes(t2).containsKey$1("vertical") === true) {
          t2 = J.get$style$x(t3.get$parent(t2));
          t3 = H.S(size) + "px";
          t2.width = t3;
        } else {
          t2 = J.get$style$x(t3.get$parent(t2));
          t3 = H.S(size) + "px";
          t2.height = t3;
        }
        if (t1._async$_next !== t1) {
          newPos = this.get$_targetSize();
          if (!J.$eq$(currentPos, newPos)) {
            if (!t1.get$_mayAddEvent())
              H.throwExpression(t1._addEventError$0());
            t1._sendData$1(newPos);
          }
        }
      }
    },
    ViewResizer__init_closure0: {
      "^": "Closure:1;_elements$_captured_this_0",
      call$0: function() {
        var t1, t2;
        t1 = this._elements$_captured_this_0;
        t2 = t1._moveSub;
        if (t2 != null)
          t2.cancel$0();
        t1 = t1._upSub;
        if (t1 != null)
          t1.cancel$0();
      }
    },
    ViewResizer__init_closure: {
      "^": "Closure:0;_elements$_captured_this_1,_captured_cancel_2",
      call$1: [function(e) {
        var t1, t2, t3;
        t1 = J.getInterceptor$x(e);
        if (t1.get$which(e) !== 1)
          return;
        t1.preventDefault$0(e);
        t2 = this._elements$_captured_this_1;
        t2._elements$_offset = t1.get$offset(e);
        t1 = H.setRuntimeTypeInfo(new W._EventStream(document, "mousemove", false), [null]);
        t3 = this._captured_cancel_2;
        t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new K.ViewResizer__init__closure(t2, t3)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
        t1._tryResume$0();
        t2._moveSub = t1;
        t1 = H.setRuntimeTypeInfo(new W._EventStream(document, "mouseup", false), [null]);
        t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new K.ViewResizer__init__closure0(t3)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
        t1._tryResume$0();
        t2._upSub = t1;
      }, null, null, 2, 0, null, 2, "call"]
    },
    ViewResizer__init__closure: {
      "^": "Closure:34;_elements$_captured_this_3,_captured_cancel_4",
      call$1: [function(e) {
        var t1, t2, t3, t4, t5, current;
        t1 = J.getInterceptor$x(e);
        if (t1.get$which(e) !== 1)
          this._captured_cancel_4.call$0();
        else {
          t2 = this._elements$_captured_this_3;
          t3 = t2.element;
          t4 = J.getInterceptor$x(t3);
          t5 = J.get$marginEdge$x(t4.get$parent(t3));
          current = H.setRuntimeTypeInfo(new P.Point0(t5.get$left(t5) + t5.get$width(t5), t5.get$top(t5) + t5.get$height(t5)), [H.getRuntimeTypeArgument(t5, "_RectangleBase", 0)]).$sub(0, t1.get$client(e)).$add(0, t2._elements$_offset);
          t2.set$_targetSize(t4.get$attributes(t3).containsKey$1("vertical") === true ? current.x : current.y);
        }
      }, null, null, 2, 0, null, 2, "call"]
    },
    ViewResizer__init__closure0: {
      "^": "Closure:0;_captured_cancel_5",
      call$1: [function(e) {
        this._captured_cancel_5.call$0();
      }, null, null, 2, 0, null, 2, "call"]
    },
    CloseButton: {
      "^": "CoreElement;element"
    },
    TitledModelDialog: {
      "^": "Object;_panel,_cancelCommand,title,content",
      dispose$0: [function() {
        this._panel.invoke$1("destroy");
        this._cancelCommand.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      TitledModelDialog$2$classes: function(inTitle, classes) {
        var root, t1, t2, t3, closeButton;
        root = K.CoreElement$("div", null, classes, null);
        t1 = K.CoreElement$("div", null, "modal-header", null);
        t2 = t1.element;
        t3 = J.getInterceptor$x(t2);
        t3.setAttribute$2(t2, "layout", "");
        t3.setAttribute$2(t2, "horizontal", "");
        t2 = K.CoreElement$("div", null, "text-highlight", inTitle);
        t2.flex$0(0);
        this.title = t2;
        t3 = W._ElementFactoryProvider_createElement_tag("div", null);
        closeButton = new K.CloseButton(t3);
        closeButton.CoreElement$4$attributes$classes$text("div", null, "close-button", null);
        t1.add$1(0, [t2, closeButton]);
        t2 = K.CoreElement$("div", null, null, null);
        this.content = t2;
        root.add$1(0, [t1, t2]);
        t3 = J.get$onClick$x(t3);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(new K.TitledModelDialog_closure(this)), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
        t3 = $.$get$atom();
        t2 = t3._workspace;
        this._panel = new E.Panel(t2.invoke$2("addModalPanel", t2._panelOptions$3(root.element, null, null)));
        this._cancelCommand = t3._commands.add$3(0, "atom-workspace", "core:cancel", new K.TitledModelDialog_closure0(this));
      },
      $isDisposable: 1,
      static: {TitledModelDialog$: function(inTitle, classes) {
          var t1 = new K.TitledModelDialog(null, null, null, null);
          t1.TitledModelDialog$2$classes(inTitle, classes);
          return t1;
        }}
    },
    TitledModelDialog_closure: {
      "^": "Closure:0;_elements$_captured_this_0",
      call$1: [function(e) {
        this._elements$_captured_this_0._panel.invoke$1("hide");
        J.preventDefault$0$x(e);
      }, null, null, 2, 0, null, 2, "call"]
    },
    TitledModelDialog_closure0: {
      "^": "Closure:0;_elements$_captured_this_1",
      call$1: function(_) {
        return this._elements$_captured_this_1._panel.invoke$1("hide");
      }
    },
    AtomView: {
      "^": "Object;",
      hide$0: ["super$AtomView$hide", function() {
        return this._panel.invoke$1("hide");
      }],
      dispose$0: [function() {
        return this._panel.invoke$1("destroy");
      }, "call$0", "get$dispose", 0, 0, 2],
      AtomView$3$classes$prefName: function(inTitle, classes, prefName) {
        var root, t1, t2, t3, t4, closeButton, t5, t6, t7, resizer, pos;
        root = K.CoreElement$("div", null, "atom-view tree-view " + classes, null);
        t1 = root.element;
        t2 = J.getInterceptor$x(t1);
        t2.setAttribute$2(t1, "layout", "");
        t2.setAttribute$2(t1, "vertical", "");
        t2 = K.CoreElement$("div", null, "panel-heading", null);
        t3 = t2.element;
        t4 = J.getInterceptor$x(t3);
        t4.setAttribute$2(t3, "layout", "");
        t4.setAttribute$2(t3, "horizontal", "");
        t3 = K.CoreElement$("div", null, "text-highlight view-header", inTitle);
        t3.flex$0(0);
        this.title = t3;
        t4 = W._ElementFactoryProvider_createElement_tag("div", null);
        closeButton = new K.CloseButton(t4);
        closeButton.CoreElement$4$attributes$classes$text("div", null, "close-button", null);
        t2.add$1(0, [t3, closeButton]);
        t3 = K.CoreElement$("div", null, "view-content", null);
        t3.flex$0(0);
        this.content = t3;
        t5 = P.StreamController_StreamController$broadcast(null, null, false, null);
        t6 = H.setRuntimeTypeInfo(new P.Point0(0, 0), [null]);
        t7 = W._ElementFactoryProvider_createElement_tag("div", null);
        resizer = new K.ViewResizer(t5, t6, null, null, t7);
        resizer.CoreElement$4$attributes$classes$text("div", null, null, null);
        J.get$attributes$x(t7).remove$1(0, "horizontal");
        resizer.attribute$1("vertical");
        resizer._init$0();
        root.add$1(0, [t2, t3, resizer]);
        t2 = J.get$onClick$x(t4);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new K.AtomView_closure(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        pos = J.$index$asx($.$get$state()._state$_map, prefName);
        if (pos != null)
          resizer.set$_targetSize(pos);
        H.setRuntimeTypeInfo(new P._BroadcastStream(t5), [H.getTypeArgumentByIndex(t5, 0)]).listen$1(new K.AtomView_closure0(prefName));
        t2 = $.$get$atom()._workspace;
        this._panel = new E.Panel(t2.invoke$2("addRightPanel", t2._panelOptions$3(t1, null, null)));
      },
      $isDisposable: 1
    },
    AtomView_closure: {
      "^": "Closure:0;_elements$_captured_this_0",
      call$1: [function(e) {
        this._elements$_captured_this_0.hide$0();
        J.preventDefault$0$x(e);
      }, null, null, 2, 0, null, 2, "call"]
    },
    AtomView_closure0: {
      "^": "Closure:0;_captured_prefName_1",
      call$1: [function(pos) {
        J.$indexSet$ax($.$get$state()._state$_map, this._captured_prefName_1, pos);
      }, null, null, 2, 0, null, 48, "call"]
    },
    ListTreeBuilder: {
      "^": "CoreElement;_selectedController,_doubleClickController,render,_selectedNode,_nodeToElementMap,element",
      addNode$1: function(node) {
        return this._addNode$2(this, node);
      },
      _addNode$2: function($parent, node) {
        var t1, t2, element, e, t3, t4, t5, t6, d, t7, u;
        t1 = J.getInterceptor$x(node);
        t2 = this._nodeToElementMap;
        if (!node.get$canHaveChildren()) {
          element = K.CoreElement$("li", null, "list-item", null);
          e = element.element;
          this.render$2(t1.get$data(node), e);
          t2.$indexSet(0, node, e);
          t1 = J.getInterceptor$x(e);
          t2 = t1.get$onClick(e);
          t3 = t2._eventType;
          t4 = t2._useCapture;
          t5 = new W._EventStreamSubscription(0, t2._html$_target, t3, W._wrapZone(new K.ListTreeBuilder__addNode_closure(this, node)), t4);
          t5.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
          t2 = t5._onData;
          t6 = t2 != null;
          if (t6 && t5._pauseCount <= 0) {
            t5 = t5._html$_target;
            t5.toString;
            if (t6)
              J._addEventListener$3$x(t5, t3, t2, t4);
          }
          t1.get$onDoubleClick(e).listen$1(new K.ListTreeBuilder__addNode_closure0(this, node));
          $parent.add$1(0, element);
        } else {
          element = K.CoreElement$("li", null, "list-nested-item", null);
          $parent.add$1(0, element);
          d = K.CoreElement$("div", null, "list-item", null);
          e = d.element;
          this.render$2(t1.get$data(node), e);
          t2.$indexSet(0, node, e);
          t2 = J.getInterceptor$x(e);
          t3 = t2.get$onClick(e);
          t4 = t3._eventType;
          t5 = t3._useCapture;
          t6 = new W._EventStreamSubscription(0, t3._html$_target, t4, W._wrapZone(new K.ListTreeBuilder__addNode_closure1(this, node)), t5);
          t6.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
          t3 = t6._onData;
          t7 = t3 != null;
          if (t7 && t6._pauseCount <= 0) {
            t6 = t6._html$_target;
            t6.toString;
            if (t7)
              J._addEventListener$3$x(t6, t4, t3, t5);
          }
          t2.get$onDoubleClick(e).listen$1(new K.ListTreeBuilder__addNode_closure2(this, node));
          element.add$1(0, d);
          u = K.CoreElement$("ul", null, "list-tree", null);
          element.add$1(0, u);
          for (t1 = J.get$iterator$ax(t1.get$children(node)); t1.moveNext$0();)
            this._addNode$2(u, t1.get$current());
        }
      },
      selectNode$1: function(_, node) {
        var t1, e, t2;
        t1 = this._selectedNode;
        if (t1 != null) {
          e = this._nodeToElementMap.$index(0, t1);
          if (e != null)
            J.get$classes$x(e).toggle$2(0, "tree-selected", false);
        }
        this._selectedNode = node;
        if (node != null) {
          e = this._nodeToElementMap.$index(0, node);
          if (e != null)
            J.get$classes$x(e).toggle$2(0, "tree-selected", true);
        }
        t1 = this._selectedController;
        t2 = this._selectedNode;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
      },
      clear$0: function(_) {
        this._nodeToElementMap.clear$0(0);
        J.clear$0$ax(J.get$children$x(this.element));
      },
      get$onSelected: function() {
        var t1 = this._selectedController;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$onDoubleClick: function(_) {
        var t1 = this._doubleClickController;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      render$2: function(arg0, arg1) {
        return this.render.call$2(arg0, arg1);
      }
    },
    ListTreeBuilder__addNode_closure: {
      "^": "Closure:0;_elements$_captured_this_0,_captured_node_1",
      call$1: [function(_) {
        return this._elements$_captured_this_0.selectNode$1(0, this._captured_node_1);
      }, null, null, 2, 0, null, 0, "call"]
    },
    ListTreeBuilder__addNode_closure0: {
      "^": "Closure:0;_elements$_captured_this_2,_captured_node_3",
      call$1: [function(_) {
        var t1 = this._elements$_captured_this_2._doubleClickController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(this._captured_node_3);
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    ListTreeBuilder__addNode_closure1: {
      "^": "Closure:0;_elements$_captured_this_4,_captured_node_5",
      call$1: [function(_) {
        return this._elements$_captured_this_4.selectNode$1(0, this._captured_node_5);
      }, null, null, 2, 0, null, 0, "call"]
    },
    ListTreeBuilder__addNode_closure2: {
      "^": "Closure:0;_elements$_captured_this_6,_captured_node_7",
      call$1: [function(_) {
        var t1 = this._elements$_captured_this_6._doubleClickController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(this._captured_node_7);
        return;
      }, null, null, 2, 0, null, 0, "call"]
    },
    Node0: {
      "^": "Object;data>,canHaveChildren<,children>",
      add$1: function(_, node) {
        return this.children.push(node);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof K.Node0 && J.$eq$(this.data, other.data);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this.data);
      },
      toString$0: function(_) {
        return J.toString$0$(this.data);
      }
    }
  }], ["atom.entry", "entry.dart",, T, {
    "^": "",
    main: [function() {
      N.Logger_Logger("").set$level(C.Level_WARNING_900);
      N.Logger_Logger("").get$onRecord().listen$1(P.core__print$closure());
      E.registerPackage(R.AtomDartPackage$());
    }, "call$0", "entry__main$closure", 0, 0, 1]
  }, 1], ["atom.formatting", "package:atom_dartlang/analysis/formatting.dart",, F, {
    "^": "",
    FormattingHelper: {
      "^": "Object;_formatting$_commands",
      dispose$0: [function() {
        return this._formatting$_commands.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      FormattingHelper$0: function() {
        var t1, t2;
        t1 = $.$get$atom();
        t2 = this._formatting$_commands.Disposables__disposables;
        t2.push(t1._commands.add$3(0, ".tree-view", "dartlang:dart-format", new F.FormattingHelper_closure()));
        t2.push(t1._commands.add$3(0, "atom-text-editor", "dartlang:dart-format", new F.FormattingHelper_closure0()));
      },
      $isDisposable: 1,
      static: {FormattingHelper$: function() {
          var t1 = new F.FormattingHelper(new G.Disposables([]));
          t1.FormattingHelper$0();
          return t1;
        }, FormattingHelper_formatFile: function(path) {
          var args;
          if (!X.Dependencies_instance().getDependency$1(C.Type_OHH).get$hasSdk()) {
            $.$get$atom().invoke$1("beep");
            return;
          }
          args = [];
          args.push("-l" + H.S($.$get$atom()._config.getValue$2$scope("editor.preferredLineLength", ["source.dart"])));
          args.push("-w");
          args.push(path);
          X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk().execBinSimple$2("dartfmt", args).then$1(new F.FormattingHelper_formatFile_closure());
        }, FormattingHelper_formatEditor: function(editor) {
          var path, t1, range, buffer, t2, offset, end;
          path = editor.getPath$0();
          if (X.Dependencies_instance().getDependency$1(C.Type_CvJ).getProjectFor$1(path) == null) {
            $.$get$atom().invoke$1("beep");
            t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
            t1._asyncComplete$1(false);
            return t1;
          }
          if (!X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive()) {
            $.$get$atom().invoke$1("beep");
            t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
            t1._asyncComplete$1(false);
            return t1;
          }
          range = editor.getSelectedBufferRange$0();
          buffer = editor.getBuffer$0();
          t1 = range.obj;
          t2 = J.getInterceptor$asx(t1);
          offset = buffer.invoke$2("characterIndexForPosition", new E.Point(E._cvt(t2.$index(t1, "start"))));
          end = buffer.invoke$2("characterIndexForPosition", new E.Point(E._cvt(t2.$index(t1, "end"))));
          return J.format$4$lineLength$x(X.Dependencies_instance().getDependency$1(C.Type_bhC), path, offset, J.$sub$n(end, offset), $.$get$atom()._config.getValue$2$scope("editor.preferredLineLength", ["source.dart"])).then$1(new F.FormattingHelper_formatEditor_closure(editor, buffer)).catchError$1(new F.FormattingHelper_formatEditor_closure0());
        }}
    },
    FormattingHelper_closure: {
      "^": "Closure:0;",
      call$1: function(e) {
        F.FormattingHelper_formatFile(e.get$selectedFilePath());
      }
    },
    FormattingHelper_closure0: {
      "^": "Closure:0;",
      call$1: function(e) {
        F.FormattingHelper_formatEditor(e.get$editor());
      }
    },
    FormattingHelper_formatFile_closure: {
      "^": "Closure:6;",
      call$1: [function(result) {
        var t1;
        if (J.$eq$(result.get$exit(), 0)) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "Formatting successful.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addError", "Error while formatting", t1._options$4$description$detail$dismissable$icon(null, result.get$stderr(), null, null));
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    FormattingHelper_formatEditor_closure: {
      "^": "Closure:36;_captured_editor_0,_captured_buffer_1",
      call$1: [function(result) {
        var t1, t2;
        if (J.get$isEmpty$asx(result.get$edits())) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "No formatting changes.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
          return false;
        } else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addSuccess", "Formatting successful.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
          t1 = this._captured_editor_0;
          F.applyEdits(t1, result.get$edits());
          t2 = this._captured_buffer_1;
          t1.setSelectedBufferRange$1(new E.Range(E._create("Range", E._cvt(t2.invoke$2("positionForCharacterIndex", result.get$selectionOffset())), E._cvt(t2.invoke$2("positionForCharacterIndex", J.$add$ns(result.get$selectionOffset(), result.get$selectionLength()))))));
          return true;
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    FormattingHelper_formatEditor_closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1;
        if (e instanceof N.RequestError) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addError", "Error while formatting", t1._options$4$description$detail$dismissable$icon(null, e.message, null, null));
        } else {
          $.$get$atom().invoke$1("beep");
          $.$get$_logger0().warning$1("error when formatting: " + H.S(e));
        }
        return false;
      }, null, null, 2, 0, null, 2, "call"]
    }
  }], ["atom.jobs", "package:atom_dartlang/jobs.dart",, S, {
    "^": "",
    Job: {
      "^": "Object;name>,schedulingRule<",
      get$quiet: function() {
        return false;
      },
      get$pinResult: function() {
        return false;
      },
      get$infoAction: function() {
        return;
      },
      toString$0: function(_) {
        return this.name;
      }
    },
    JobManager: {
      "^": "Object;_jobs$_controller,_jobs,_toasts,_lastNotifiedJob",
      get$activeJob: function() {
        var instance = C.JSArray_methods.firstWhere$2$orElse(this._jobs, new S.JobManager_activeJob_closure(), new S.JobManager_activeJob_closure0());
        return instance == null ? null : instance.get$job();
      },
      schedule$1: function(job) {
        return this._enqueue$1(job);
      },
      _enqueue$1: function(job) {
        var t1;
        $.$get$_logger4().fine$1("scheduling job " + job.get$name(job));
        t1 = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
        this._jobs.push(new S.JobInstance(this, job, t1, false));
        this._checkForRunnableJobs$0();
        this._checkNotifyJobChanged$0();
        return t1.future;
      },
      _checkForRunnableJobs$0: function() {
        var rules, t1, t2, _i, jobInstance, t3, rule;
        rules = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        for (t1 = this._jobs, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          jobInstance = t1[_i];
          t3 = jobInstance.job;
          if (jobInstance.get$isRunning())
            rules.add$1(0, t3.get$schedulingRule());
          else {
            rule = t3.get$schedulingRule();
            if (rule == null || !rules.contains$1(0, rule)) {
              rules.add$1(0, rule);
              this._exec$1(jobInstance);
            }
          }
        }
      },
      _exec$1: function(jobInstance) {
        var job, current, t1;
        job = jobInstance.get$job();
        $.$get$_logger4().fine$1("starting job " + job.get$name(job));
        jobInstance.set$_running(true);
        current = this.get$activeJob();
        t1 = this._lastNotifiedJob;
        if (t1 == null ? current != null : t1 !== current) {
          t1 = this._jobs$_controller;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(current);
          this._lastNotifiedJob = current;
        }
        job.run$0().then$1(new S.JobManager__exec_closure(this, jobInstance, job)).whenComplete$1(new S.JobManager__exec_closure0(this, jobInstance)).catchError$1(new S.JobManager__exec_closure1(this, jobInstance, job));
      },
      _checkNotifyJobChanged$0: function() {
        var current, t1;
        current = this.get$activeJob();
        t1 = this._lastNotifiedJob;
        if (t1 == null ? current != null : t1 !== current) {
          t1 = this._jobs$_controller;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(current);
          this._lastNotifiedJob = current;
        }
      },
      JobManager$0: function() {
        this._toasts = $.$get$atom()._notifications;
      }
    },
    JobManager_activeJob_closure: {
      "^": "Closure:0;",
      call$1: function(j) {
        return j.get$isRunning();
      }
    },
    JobManager_activeJob_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        return;
      }
    },
    JobManager__exec_closure: {
      "^": "Closure:0;_jobs$_captured_this_0,_captured_jobInstance_1,_captured_job_2",
      call$1: [function(result) {
        var t1, detail, t2, t3;
        t1 = this._captured_job_2;
        if (!t1.get$quiet()) {
          detail = result == null ? null : H.S(result);
          t2 = this._jobs$_captured_this_0._toasts;
          t3 = H.S(J.get$name$x(this._captured_jobInstance_1)) + " completed.";
          t2.invoke$3("addSuccess", t3, t2._options$4$description$detail$dismissable$icon(null, detail, detail != null && detail.length !== 0 && t1.get$pinResult(), null));
        }
        this._captured_jobInstance_1.get$_completer().complete$1(0, result);
      }, null, null, 2, 0, null, 1, "call"]
    },
    JobManager__exec_closure0: {
      "^": "Closure:1;_jobs$_captured_this_3,_captured_jobInstance_4",
      call$0: [function() {
        var t1, t2;
        t1 = this._jobs$_captured_this_3;
        t2 = this._captured_jobInstance_4;
        $.$get$_logger4().fine$1("finished job " + H.S(J.get$name$x(t2)));
        t2.set$_running(false);
        C.JSArray_methods.remove$1(t1._jobs, t2);
        t1._checkForRunnableJobs$0();
        t1._checkNotifyJobChanged$0();
      }, null, null, 0, 0, null, "call"]
    },
    JobManager__exec_closure1: {
      "^": "Closure:0;_jobs$_captured_this_5,_captured_jobInstance_6,_captured_job_7",
      call$1: [function(e) {
        var t1, t2;
        this._captured_jobInstance_6.get$_completer().complete$0(0);
        t1 = this._jobs$_captured_this_5._toasts;
        t2 = this._captured_job_7;
        t1.invoke$3("addError", t2.get$name(t2) + " failed.", t1._options$4$description$detail$dismissable$icon(null, H.S(e), true, null));
      }, null, null, 2, 0, null, 2, "call"]
    },
    JobInstance: {
      "^": "Object;jobs,job<,_completer<,_running?",
      get$name: function(_) {
        var t1 = this.job;
        return t1.get$name(t1);
      },
      get$isRunning: function() {
        return this._running;
      },
      get$whenComplete: function() {
        return this._completer.future;
      },
      whenComplete$1: function(arg0) {
        return this.get$whenComplete().call$1(arg0);
      }
    }
  }], ["atom.js", "package:atom_dartlang/js.dart",, K, {
    "^": "",
    jsify: function(obj) {
      var t1;
      if (obj == null)
        return;
      t1 = J.getInterceptor(obj);
      if (!!t1.$isJsObject)
        return obj;
      if (!!t1.$isList || !!t1.$isMap) {
        if (!t1.$isMap && !t1.$isIterable)
          H.throwExpression(P.ArgumentError$("object must be a Map or Iterable"));
        return P._wrapToDart(P.JsObject__convertDataTree(obj));
      }
      if (!!t1.$isProxyHolder)
        return obj.obj;
      return obj;
    },
    require: function(input) {
      return $.$get$context().callMethod$2("require", [input]);
    },
    toDartObjectViaWizardy: function(obj) {
      if (obj == null)
        throw H.wrapException("The Wizard says: \"Null?! You shall not pass!\"");
      return C.JsonCodec_null_null.decode$1($.$get$_browserJson().callMethod$2("stringify", [obj]));
    },
    promiseToFuture: function(promise) {
      var completer;
      if (promise instanceof P.JsObject)
        promise = new K.Promise(promise);
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      promise.then$2(new K.promiseToFuture_closure(completer), new K.promiseToFuture_closure0(completer));
      return completer.future;
    },
    promiseToFuture_closure: {
      "^": "Closure:0;_captured_completer_0",
      call$1: [function(result) {
        this._captured_completer_0.complete$1(0, result);
      }, null, null, 2, 0, null, 1, "call"]
    },
    promiseToFuture_closure0: {
      "^": "Closure:0;_js0$_captured_completer_1",
      call$1: [function(error) {
        this._js0$_captured_completer_1.completeError$1(error);
      }, null, null, 2, 0, null, 5, "call"]
    },
    ProxyHolder: {
      "^": "Object;obj<",
      invoke$4: function(method, arg1, arg2, arg3) {
        var t1;
        if (arg1 != null)
          arg1 = K.jsify(arg1);
        if (arg2 != null)
          arg2 = K.jsify(arg2);
        if (arg3 != null)
          arg3 = K.jsify(arg3);
        if (arg3 != null)
          return this.obj.callMethod$2(method, [arg1, arg2, arg3]);
        else if (arg2 != null)
          return this.obj.callMethod$2(method, [arg1, arg2]);
        else {
          t1 = this.obj;
          if (arg1 != null)
            return t1.callMethod$2(method, [arg1]);
          else
            return t1.callMethod$1(method);
        }
      },
      invoke$1: function(method) {
        return this.invoke$4(method, null, null, null);
      },
      invoke$3: function(method, arg1, arg2) {
        return this.invoke$4(method, arg1, arg2, null);
      },
      invoke$2: function(method, arg1) {
        return this.invoke$4(method, arg1, null, null);
      },
      eventStream$1: function(eventName) {
        var t1, controller, e, st, exception;
        t1 = {};
        t1._captured_disposable_0 = null;
        controller = P.StreamController_StreamController$broadcast(new K.ProxyHolder_eventStream_closure(t1), null, false, null);
        try {
          t1._captured_disposable_0 = new K.JsDisposable(this.invoke$2(eventName, new K.ProxyHolder_eventStream_closure0(controller)));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          st = H.getTraceFromException(exception);
          $.$get$_logger1().warning$1(H.S(e) + " listening to " + H.S(eventName) + "\n" + H.S(st));
        }
        t1 = controller;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      eventStream2Args$3: function(eventName, arg1, arg2) {
        var t1, controller, e, st, exception;
        t1 = {};
        t1._captured_disposable_0 = null;
        controller = P.StreamController_StreamController$broadcast(new K.ProxyHolder_eventStream2Args_closure(t1), null, false, null);
        try {
          t1._captured_disposable_0 = new K.JsDisposable(this.invoke$4(eventName, arg1, arg2, new K.ProxyHolder_eventStream2Args_closure0(controller)));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          st = H.getTraceFromException(exception);
          $.$get$_logger1().warning$1(H.S(e) + " listening to " + H.S(eventName) + "\n" + H.S(st));
        }
        t1 = controller;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      }
    },
    ProxyHolder_eventStream_closure: {
      "^": "Closure:1;_js0$_box_0",
      call$0: function() {
        return this._js0$_box_0._captured_disposable_0.invoke$1("dispose");
      }
    },
    ProxyHolder_eventStream_closure0: {
      "^": "Closure:0;_captured_controller_1",
      call$1: [function(evt) {
        var t1 = this._captured_controller_1;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(evt);
        return;
      }, null, null, 2, 0, null, 34, "call"]
    },
    ProxyHolder_eventStream2Args_closure: {
      "^": "Closure:1;_js0$_box_0",
      call$0: function() {
        return this._js0$_box_0._captured_disposable_0.invoke$1("dispose");
      }
    },
    ProxyHolder_eventStream2Args_closure0: {
      "^": "Closure:0;_captured_controller_1",
      call$1: [function(evt) {
        var t1 = this._captured_controller_1;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(evt);
        return;
      }, null, null, 2, 0, null, 34, "call"]
    },
    Promise: {
      "^": "ProxyHolder;obj",
      then$2: function(thenCallback, errorCallback) {
        this.invoke$3("then", thenCallback, errorCallback);
      },
      then$1: function(thenCallback) {
        return this.then$2(thenCallback, null);
      },
      error$1: [function(_, errorCallback) {
        return this.invoke$2("catch", errorCallback);
      }, "call$1", "get$error", 2, 0, 37, 50],
      static: {Promise__jsObjectFromFuture: function(future) {
          return P.JsObject_JsObject(J.$index$asx($.$get$context(), "Promise"), [new K.Promise__jsObjectFromFuture_closure(future)]);
        }}
    },
    Promise__jsObjectFromFuture_closure: {
      "^": "Closure:3;_js0$_captured_future_0",
      call$2: [function(resolve, reject) {
        this._js0$_captured_future_0.then$1(new K.Promise__jsObjectFromFuture__closure(resolve)).catchError$1(new K.Promise__jsObjectFromFuture__closure0(reject));
      }, null, null, 4, 0, null, 51, 52, "call"]
    },
    Promise__jsObjectFromFuture__closure: {
      "^": "Closure:0;_captured_resolve_1",
      call$1: [function(result) {
        this._captured_resolve_1.apply$1([K.jsify(result)]);
      }, null, null, 2, 0, null, 1, "call"]
    },
    Promise__jsObjectFromFuture__closure0: {
      "^": "Closure:0;_captured_reject_2",
      call$1: [function(e) {
        this._captured_reject_2.apply$1([e]);
      }, null, null, 2, 0, null, 2, "call"]
    },
    JsDisposable: {
      "^": "ProxyHolder;obj",
      dispose$0: [function() {
        return this.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    EventListener: {
      "^": "Object;obj<,eventName,_callback",
      dispose$0: [function() {
        var t1 = this._callback;
        if (t1 != null)
          this.obj.callMethod$2("removeEventListener", [this.eventName, t1]);
        this._callback = null;
      }, "call$0", "get$dispose", 0, 0, 2],
      EventListener$3: function(obj, eventName, fn) {
        var t1 = new P.JsFunction(P._convertDartFunction(new K.EventListener_closure(fn), true));
        this._callback = t1;
        this.obj.callMethod$2("addEventListener", [this.eventName, t1]);
      },
      $isDisposable: 1,
      static: {EventListener$: function(obj, eventName, fn) {
          var t1 = new K.EventListener(obj, eventName, null);
          t1.EventListener$3(obj, eventName, fn);
          return t1;
        }}
    },
    EventListener_closure: {
      "^": "Closure:3;_captured_fn_0",
      call$2: [function(_this, e) {
        return this._captured_fn_0.call$1(P.JsObject_JsObject$fromBrowserObject(e));
      }, null, null, 4, 0, null, 53, 2, "call"]
    }
  }], ["atom.linter", "package:atom_dartlang/atom_linter.dart",, E, {
    "^": "",
    LinterProvider: {
      "^": "Object;"
    },
    LinterConsumer: {
      "^": "Object;"
    },
    LinterService: {
      "^": "ProxyHolder;obj",
      deleteMessages$1: function(provider) {
        this.invoke$2("deleteMessages", provider._key);
      },
      setMessages$2: function(provider, messages) {
        this.invoke$3("setMessages", provider._key, H.setRuntimeTypeInfo(new H.MappedListIterable(messages, new E.LinterService_setMessages_closure()), [null, null]).toList$0(0));
      }
    },
    LinterService_setMessages_closure: {
      "^": "Closure:0;",
      call$1: [function(m) {
        return m.toMap$0();
      }, null, null, 2, 0, null, 7, "call"]
    },
    LintMessage: {
      "^": "Object;type>,text>,html,filePath,range",
      toMap$0: function() {
        var m, t1, t2;
        m = P.LinkedHashMap__makeEmpty();
        t1 = this.type;
        if (t1 != null)
          m.$indexSet(0, "type", t1);
        t1 = this.text;
        if (t1 != null)
          m.$indexSet(0, "text", t1);
        t1 = this.filePath;
        if (t1 != null)
          m.$indexSet(0, "filePath", t1);
        t1 = this.range;
        t2 = t1.start;
        t1 = t1.end;
        m.$indexSet(0, "range", [[t2.row, t2.column], [t1.row, t1.column]]);
        return m;
      }
    },
    Rn: {
      "^": "Object;start,end",
      start$0: function($receiver) {
        return this.start.call$0();
      }
    },
    Pt: {
      "^": "Object;row,column"
    }
  }], ["atom.plugin", "package:atom_dartlang/plugin.dart",, R, {
    "^": "",
    AtomDartPackage: {
      "^": "AtomPackage;disposables,subscriptions,_registeredMethods",
      packageActivated$1: [function(inState) {
        var t1, t2, t3, t4, t5;
        this._setupLogging$0();
        $.$get$_logger().info$1("activated");
        if (X.Dependencies_instance() == null)
          $.Dependencies__global = new X.Dependencies(P.LinkedHashMap__makeEmpty());
        t1 = $.$get$state();
        t1.toString;
        t1._state$_map = inState == null ? P.LinkedHashMap__makeEmpty() : inState;
        S.getPackageVersion().then$1(Z.changelog___checkChangelog$closure());
        t1 = X.Dependencies_instance();
        t2 = V.SdkManager$();
        t1._instances.$indexSet(0, C.Type_OHH, t2);
        t1 = this.disposables.Disposables__disposables;
        t1.push(t2);
        t2 = X.Dependencies_instance();
        t3 = L.ProjectManager$();
        t2._instances.$indexSet(0, C.Type_CvJ, t3);
        t1.push(t3);
        t3 = X.Dependencies_instance();
        t2 = P.StreamController_StreamController$broadcast(null, null, false, null);
        t4 = new X.AnalysisServer(new G.StreamSubscriptions([]), new G.Disposables([]), t2, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), null, null, [], null);
        t2 = H.setRuntimeTypeInfo(new P._BroadcastStream(t2), [H.getTypeArgumentByIndex(t2, 0)]);
        t5 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t5._hasCurrentValue = true;
        t5._currentValue = false;
        t5._frappe$_controller = t5._createControllerForStream$1(t2);
        t4.isActiveProperty = t5;
        P.Timer_Timer(C.Duration_0, t4.get$_setup());
        t3._instances.$indexSet(0, C.Type_bhC, t4);
        t1.push(t4);
        t4 = X.Dependencies_instance();
        t3 = new F.EditorManager(F.Editors$_allDartEditors(), F.Editors$_allDartEditors());
        t4._instances.$indexSet(0, C.Type_25m, t3);
        t1.push(t3);
        t3 = X.Dependencies_instance();
        t4 = new F.ErrorRepository(P.LinkedHashMap__makeEmpty(), new G.StreamSubscriptions([]), P.StreamController_StreamController$broadcast(null, null, false, null), null, null);
        t3._instances.$indexSet(0, C.Type_43h, t4);
        t1.push(t4);
        t1.push(B.DartdocHelper$());
        t1.push(F.FormattingHelper$());
        t4 = [];
        t3 = new D.NavigationHelper(new G.Disposables(t4), null, P.LinkedHashMap__makeEmpty(), new G.Disposables([]));
        t5 = $.$get$atom();
        t4.push(t5._commands.add$3(0, "atom-text-editor", "dartlang:jump-to-declaration", t3.get$_handleNavigate()));
        t4.push(t5._commands.add$3(0, "atom-text-editor[data-grammar~=\"dart\"]", "symbols-view:go-to-declaration", t3.get$_handleNavigate()));
        X.Dependencies_instance().getDependency$1(C.Type_bhC).get$onNavigaton().listen$1(t3.get$_navigationEvent());
        t4 = X.Dependencies_instance().getDependency$1(C.Type_25m).get$dartProjectEditors()._activeEditorController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t4), [H.getTypeArgumentByIndex(t4, 0)]).listen$1(t3.get$_activate());
        t3._activate$1(X.Dependencies_instance().getDependency$1(C.Type_25m).get$dartProjectEditors()._activeEditor);
        t1.push(t3);
        t1.push(R.PubManager$());
        t1.push(F.RefactoringHelper$());
        t3 = new V.FindReferencesHelper(null, null);
        t3._command = t5._commands.add$3(0, "atom-text-editor", "dartlang:find-references", t3.get$_handleReferences());
        t1.push(t3);
        t3 = new E.TypeHierarchyHelper(null, null);
        t3._type_hierarchy$_command = t5._commands.add$3(0, "atom-text-editor", "dartlang:type-hierarchy", t3.get$_handleHierarchy());
        t1.push(t3);
        t1.push(t5._commands.add$3(0, "atom-workspace", "dartlang:smoke-test-dev", new R.AtomDartPackage_packageActivated_closure()));
        t1.push(t5._commands.add$3(0, "atom-workspace", "dartlang:rebuild-restart-dev", new R.AtomDartPackage_packageActivated_closure0()));
        t1.push(t5._commands.add$3(0, "atom-workspace", "dartlang:auto-locate-sdk", new R.AtomDartPackage_packageActivated_closure1()));
        t1.push(t5._commands.add$3(0, "atom-workspace", "dartlang:reanalyze-sources", new R.AtomDartPackage_packageActivated_closure2()));
        t1.push(t5._commands.add$3(0, "atom-workspace", "dartlang:send-feedback", new R.AtomDartPackage_packageActivated_closure3()));
        t1.push(t5._commands.add$3(0, "atom-text-editor", "dartlang:newline", B.editing__handleEnterKey$closure()));
        t5 = new N.BufferObserverManager([]);
        C.JSArray_methods.forEach$1(X.Dependencies_instance().getDependency$1(C.Type_25m).get$dartProjectEditors()._openEditors, t5.get$_newEditor());
        t3 = X.Dependencies_instance().getDependency$1(C.Type_25m).get$dartProjectEditors()._editorOpenedController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t3), [H.getTypeArgumentByIndex(t3, 0)]).listen$1(t5.get$_newEditor());
        t1.push(t5);
        P.Timer_Timer(C.Duration_0, this.get$_initPlugin());
      }, function() {
        return this.packageActivated$1(null);
      }, "packageActivated$0", "call$1", "call$0", "get$packageActivated", 0, 2, 38, 4, 54],
      _initPlugin$0: [function() {
        S.loadPackageJson().then$1(this.get$_verifyPackages());
      }, "call$0", "get$_initPlugin", 0, 0, 2],
      _verifyPackages$1: [function(m) {
        var deps, packages, t1, t2, dep, t3;
        deps = J.$index$asx(m, "packages");
        if (deps == null)
          deps = [];
        packages = $.$get$atom()._packages.invoke$1("getAvailablePackageNames");
        for (t1 = J.get$iterator$ax(deps), t2 = J.getInterceptor$asx(packages); t1.moveNext$0();) {
          dep = t1.get$current();
          if (t2.contains$1(packages, dep) !== true) {
            t3 = $.$get$atom()._notifications;
            t3.invoke$3("addWarning", "The 'dartlang' plugin requires the '" + H.S(dep) + "' plugin in order to work. You can install it via the Install section of the Settings dialog.", t3._options$4$description$detail$dismissable$icon(null, null, true, null));
          }
        }
      }, "call$1", "get$_verifyPackages", 2, 0, 39, 7],
      serialize$0: [function() {
        return $.$get$state()._state$_map;
      }, "call$0", "get$serialize", 0, 0, 40],
      packageDeactivated$0: [function() {
        $.$get$_logger().info$1("deactivated");
        this.disposables.dispose$0();
        this.subscriptions.cancel$0();
      }, "call$0", "get$packageDeactivated", 0, 0, 2],
      _setupLogging$0: function() {
        this.disposables.Disposables__disposables.push($.$get$atom()._config.observe$3("dartlang.logging", null, new R.AtomDartPackage__setupLogging_closure()));
      },
      AtomDartPackage$0: function() {
        this.registerServiceConsumer$2("consumeStatusBar", new R.AtomDartPackage_closure(this));
        this.registerServiceConsumer$2("consumeToolbar", new R.AtomDartPackage_closure0(this));
        this.registerServiceConsumer$2("consumeLinter", new R.AtomDartPackage_closure1());
        J.$indexSet$ax(J.$index$asx(J.$index$asx($.$get$context(), "module"), "exports"), "provideAutocomplete", new R.AtomDartPackage_closure2(new D.DartAutocompleteProvider(".source.dart", ".source.dart .comment", 100, true, true)));
      },
      static: {AtomDartPackage$: function() {
          var t1 = new R.AtomDartPackage(new G.Disposables([]), new G.StreamSubscriptions([]), P.LinkedHashMap__makeEmpty());
          t1.AtomDartPackage$0();
          return t1;
        }}
    },
    AtomDartPackage_closure: {
      "^": "Closure:0;_plugin$_captured_this_0",
      call$1: [function(obj) {
        var $status = E.StatusDisplay$(new T.StatusBar(obj));
        this._plugin$_captured_this_0.disposables.Disposables__disposables.push($status);
        return $status;
      }, null, null, 2, 0, null, 3, "call"]
    },
    AtomDartPackage_closure0: {
      "^": "Closure:0;_plugin$_captured_this_1",
      call$1: [function(obj) {
        var $toolbar, e;
        $toolbar = new D.ToolbarContribution(null);
        e = K.CoreElement$("div", null, "btn-group btn-group-sm dartlang-toolbar", null);
        e.add$1(0, []);
        $toolbar._tile = new D.Toolbar(obj).addRightTile$1$item(e.element);
        this._plugin$_captured_this_1.disposables.Disposables__disposables.push($toolbar);
        return $toolbar;
      }, null, null, 2, 0, null, 3, "call"]
    },
    AtomDartPackage_closure1: {
      "^": "Closure:0;",
      call$1: [function(obj) {
        var errorController, flushController, consumer, t1, t2;
        errorController = P.StreamController_StreamController$broadcast(null, null, false, null);
        flushController = P.StreamController_StreamController$broadcast(null, null, false, null);
        X.Dependencies_instance().getDependency$1(C.Type_43h).initStreams$2(H.setRuntimeTypeInfo(new P._BroadcastStream(errorController), [H.getTypeArgumentByIndex(errorController, 0)]), H.setRuntimeTypeInfo(new P._BroadcastStream(flushController), [H.getTypeArgumentByIndex(flushController, 0)]));
        consumer = T.DartLinterConsumer$(X.Dependencies_instance().getDependency$1(C.Type_43h));
        consumer.consume$1(new E.LinterService(obj));
        t1 = X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActiveProperty();
        t1 = t1.super$Stream$where(t1, new R.AtomDartPackage__closure());
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        t2.listen$1(new R.AtomDartPackage__closure0(errorController, flushController));
        return consumer;
      }, null, null, 2, 0, null, 3, "call"]
    },
    AtomDartPackage__closure: {
      "^": "Closure:0;",
      call$1: function(active) {
        return active;
      }
    },
    AtomDartPackage__closure0: {
      "^": "Closure:0;_captured_errorController_2,_captured_flushController_3",
      call$1: [function(_) {
        var t1 = this._captured_errorController_2;
        X.Dependencies_instance().getDependency$1(C.Type_bhC).get$onAnalysisErrors()._createSubscription$4(t1.get$add(t1), null, null, false);
        t1 = this._captured_flushController_3;
        X.Dependencies_instance().getDependency$1(C.Type_bhC).get$onAnalysisFlushResults()._createSubscription$4(t1.get$add(t1), null, null, false);
      }, null, null, 2, 0, null, 0, "call"]
    },
    AtomDartPackage_closure2: {
      "^": "Closure:1;_captured_provider_4",
      call$0: [function() {
        var t1, map;
        t1 = this._captured_provider_4;
        map = P.LinkedHashMap__makeLiteral(["selector", t1.selector, "getSuggestions", t1.get$_getSuggestions(), "onDidInsertSuggestion", t1.get$_onDidInsertSuggestion(), "dispose", t1.get$dispose()]);
        map.$indexSet(0, "disableForSelector", t1.disableForSelector);
        map.$indexSet(0, "inclusionPriority", t1.inclusionPriority);
        map.$indexSet(0, "excludeLowerPriority", t1.excludeLowerPriority);
        map.$indexSet(0, "filterSuggestions", t1.filterSuggestions);
        return K.jsify(map);
      }, null, null, 0, 0, null, "call"]
    },
    AtomDartPackage_packageActivated_closure: {
      "^": "Closure:0;",
      call$1: function(_) {
        return E.smokeTest();
      }
    },
    AtomDartPackage_packageActivated_closure0: {
      "^": "Closure:0;",
      call$1: function(_) {
        $.$get$jobs()._enqueue$1(new Z.RebuildJob("Rebuilding dart-lang", C.Type_uti));
      }
    },
    AtomDartPackage_packageActivated_closure1: {
      "^": "Closure:0;",
      call$1: function(_) {
        var t1 = X.Dependencies_instance().getDependency$1(C.Type_OHH);
        $.$get$jobs()._enqueue$1(new V.SdkLocationJob(t1, "Auto locate SDK", null));
      }
    },
    AtomDartPackage_packageActivated_closure2: {
      "^": "Closure:0;",
      call$1: function(_) {
        $.$get$jobs()._enqueue$1(new L.ProjectScanJob("Refresh Dart project list", null)).then$1(new R.AtomDartPackage_packageActivated__closure()).then$1(new R.AtomDartPackage_packageActivated__closure0());
      }
    },
    AtomDartPackage_packageActivated__closure: {
      "^": "Closure:0;",
      call$1: [function(_) {
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 100, 0, 0), null, null);
      }, null, null, 2, 0, null, 0, "call"]
    },
    AtomDartPackage_packageActivated__closure0: {
      "^": "Closure:0;",
      call$1: [function(_) {
        var t1;
        if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive())
          X.Dependencies_instance().getDependency$1(C.Type_bhC).reanalyzeSources$0();
        else {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "Analysis server not active.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
        }
      }, null, null, 2, 0, null, 0, "call"]
    },
    AtomDartPackage_packageActivated_closure3: {
      "^": "Closure:0;",
      call$1: function(_) {
        $.$get$shell().toString;
        $.$get$context().callMethod$2("require", ["shell"]).callMethod$2("openExternal", ["https://github.com/dart-atom/dartlang/issues"]);
      }
    },
    AtomDartPackage__setupLogging_closure: {
      "^": "Closure:0;",
      call$1: [function(val) {
        var t1, _i, level;
        if (val == null)
          return;
        for (t1 = J.getInterceptor$s(val), _i = 0; _i < 10; ++_i) {
          level = C.List_O1R[_i];
          if (t1.toUpperCase$0(val) === level.name) {
            N.Logger_Logger("").set$level(level);
            break;
          }
        }
        $.$get$_logger().info$1("logging level: " + H.S(N.Logger_Logger("").get$level()));
      }, null, null, 2, 0, null, 16, "call"]
    }
  }], ["atom.process", "package:atom_dartlang/process.dart",, Z, {
    "^": "",
    exec: function(cmd, args) {
      return new Z.ProcessRunner(cmd, args, null, null, null, H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]), null, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null)).execSimple$0().then$1(new Z.exec_closure());
    },
    exec_closure: {
      "^": "Closure:6;",
      call$1: [function(result) {
        if (J.$eq$(result.get$exit(), 0))
          return result.get$stdout();
        else
          throw H.wrapException(result.get$exit());
      }, null, null, 2, 0, null, 1, "call"]
    },
    ProcessRunner: {
      "^": "Object;command,args,cwd,env,_process$_process,_exitCompleter,_exit,_stdoutController,_stderrController",
      get$exit: function() {
        return this._exit;
      },
      execSimple$0: function() {
        var stdout, stderr, t1;
        if (this._process$_process != null)
          throw H.wrapException(new P.StateError("exec can only be called once"));
        stdout = new P.StringBuffer("");
        stderr = new P.StringBuffer("");
        t1 = this._stdoutController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new Z.ProcessRunner_execSimple_closure(stdout));
        t1 = this._stderrController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new Z.ProcessRunner_execSimple_closure0(stderr));
        return this.execStreaming$0().then$1(new Z.ProcessRunner_execSimple_closure1(stdout, stderr));
      },
      execStreaming$0: function() {
        var t1, t2, t3, t4, t5;
        if (this._process$_process != null)
          throw H.wrapException(new P.StateError("exec can only be called once"));
        t1 = $.$get$_logger6();
        t2 = this.command;
        t3 = "exec: " + H.S(t2) + " ";
        t4 = this.args;
        t3 += t4 == null ? "" : (t4 && C.JSArray_methods).join$1(t4, " ");
        t5 = this.cwd;
        t1.fine$1(t3 + (t5 == null ? "" : " (cwd=" + H.S(t5) + ")"));
        this._process$_process = E.BufferedProcess_create(t2, t4, t5, this.env, new Z.ProcessRunner_execStreaming_closure(this), new Z.ProcessRunner_execStreaming_closure0(this), new Z.ProcessRunner_execStreaming_closure1(this));
        return this._exitCompleter.future;
      },
      kill$0: function() {
        $.$get$_logger6().fine$1("kill: " + H.S(this.command) + " ");
        this._process$_process.invoke$1("kill");
        P.Future_Future$delayed(P.Duration$(0, 0, 0, 50, 0, 0), new Z.ProcessRunner_kill_closure(this), null);
        return this._exitCompleter.future;
      }
    },
    ProcessRunner_execSimple_closure: {
      "^": "Closure:0;_captured_stdout_0",
      call$1: [function(str) {
        this._captured_stdout_0._contents += H.S(str);
        return;
      }, null, null, 2, 0, null, 10, "call"]
    },
    ProcessRunner_execSimple_closure0: {
      "^": "Closure:0;_captured_stderr_1",
      call$1: [function(str) {
        this._captured_stderr_1._contents += H.S(str);
        return;
      }, null, null, 2, 0, null, 10, "call"]
    },
    ProcessRunner_execSimple_closure1: {
      "^": "Closure:0;_captured_stdout_2,_captured_stderr_3",
      call$1: [function(code) {
        var t1, t2;
        t1 = this._captured_stdout_2._contents;
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
        t2 = this._captured_stderr_3._contents;
        return new Z.ProcessResult(code, t1, t2.charCodeAt(0) == 0 ? t2 : t2);
      }, null, null, 2, 0, null, 19, "call"]
    },
    ProcessRunner_execStreaming_closure1: {
      "^": "Closure:0;_process$_captured_this_0",
      call$1: [function(s) {
        var t1 = this._process$_captured_this_0._stdoutController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(s);
        return;
      }, null, null, 2, 0, null, 20, "call"]
    },
    ProcessRunner_execStreaming_closure0: {
      "^": "Closure:0;_process$_captured_this_1",
      call$1: [function(s) {
        var t1 = this._process$_captured_this_1._stderrController;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(s);
        return;
      }, null, null, 2, 0, null, 20, "call"]
    },
    ProcessRunner_execStreaming_closure: {
      "^": "Closure:0;_process$_captured_this_2",
      call$1: [function(code) {
        var t1 = this._process$_captured_this_2;
        $.$get$_logger6().fine$1("exit code: " + H.S(code) + " (" + H.S(t1.command) + ")");
        t1._exit = code;
        t1 = t1._exitCompleter;
        if (t1.future._state === 0)
          t1.complete$1(0, code);
      }, null, null, 2, 0, null, 19, "call"]
    },
    ProcessRunner_kill_closure: {
      "^": "Closure:1;_process$_captured_this_0",
      call$0: function() {
        var t1 = this._process$_captured_this_0._exitCompleter;
        if (t1.future._state === 0)
          t1.complete$1(0, 0);
      }
    },
    ProcessResult: {
      "^": "Object;exit<,stdout<,stderr<",
      toString$0: function(_) {
        return H.S(this.exit);
      }
    }
  }], ["atom.projects", "package:atom_dartlang/projects.dart",, L, {
    "^": "",
    ProjectManager: {
      "^": "Object;_projects$_controller,_projects$_sub,_directoryListeners,projects<",
      getProjectFor$1: function(path) {
        var t1, t2, _i, project, dir, t3;
        for (t1 = this.projects, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          project = t1[_i];
          dir = J.get$directory$x(project);
          t3 = J.getInterceptor$x(dir);
          if (J.$eq$(t3.get$path(dir), path) || t3.contains$1(dir, path) === true)
            return project;
        }
        return;
      },
      rescanForProjects$0: function() {
        return this._fullScanForProjects$0();
      },
      get$onChanged: function() {
        var t1 = this._projects$_controller;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      dispose$0: [function() {
        $.$get$_logger5().fine$1("dispose()");
        this._projects$_sub.cancel$0();
        var t1 = this._directoryListeners;
        t1.get$values(t1).forEach$1(0, new L.ProjectManager_dispose_closure());
      }, "call$0", "get$dispose", 0, 0, 2],
      _fullScanForProjects$0: function() {
        var t1, previousDirs, allDirs, t2, dir, changed, newDirs;
        t1 = this.projects;
        previousDirs = P.LinkedHashSet_LinkedHashSet$from(H.setRuntimeTypeInfo(new H.MappedListIterable(t1, new L.ProjectManager__fullScanForProjects_closure()), [null, null]), null);
        allDirs = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        for (t2 = J.get$iterator$ax($.$get$atom()._project.getDirectories$0()); t2.moveNext$0();) {
          dir = t2.__interceptors$_current;
          if (dir.existsSync$0() === true)
            allDirs.addAll$1(0, this._findDartProjects$2(dir, 2));
        }
        for (t2 = new P.LinkedHashSetIterator(previousDirs, previousDirs._collection$_modifications, null, null), t2._collection$_cell = previousDirs._collection$_first, changed = false; t2.moveNext$0();) {
          dir = t2._collection$_current;
          if (!allDirs.contains$1(0, dir)) {
            C.JSArray_methods._removeWhere$2(t1, new L.ProjectManager__fullScanForProjects_closure0(dir), true);
            $.$get$_logger5().info$1("removed project " + H.S(dir));
            changed = true;
          }
        }
        newDirs = allDirs.difference$1(previousDirs);
        if (newDirs._collection$_length !== 0) {
          newDirs.forEach$1(0, new L.ProjectManager__fullScanForProjects_closure1());
          changed = true;
        }
        C.JSArray_methods.addAll$1(t1, H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(newDirs, new L.ProjectManager__fullScanForProjects_closure2()), [H.getTypeArgumentByIndex(newDirs, 0), null]));
        if (changed) {
          $.$get$_logger5().fine$1(H.S(t1));
          t2 = this._projects$_controller;
          if (!t2.get$_mayAddEvent())
            H.throwExpression(t2._addEventError$0());
          t2._sendData$1(t1);
        }
      },
      _handleProjectPathsChanged$1: [function(allPaths) {
        this._updateChangeListeners$1(allPaths);
        this._fullScanForProjects$0();
      }, "call$1", "get$_handleProjectPathsChanged", 2, 0, 41, 57],
      _updateChangeListeners$1: function(allPaths) {
        var t1, previousPaths, currentPaths, removedPaths, addedPaths, t2, addedPath, dir;
        t1 = this._directoryListeners;
        previousPaths = P.LinkedHashSet_LinkedHashSet$from(t1.get$keys(), null);
        currentPaths = P.LinkedHashSet_LinkedHashSet$from(allPaths, null);
        removedPaths = previousPaths.difference$1(currentPaths);
        addedPaths = currentPaths.difference$1(previousPaths);
        for (t2 = new P.LinkedHashSetIterator(removedPaths, removedPaths._collection$_modifications, null, null), t2._collection$_cell = removedPaths._collection$_first; t2.moveNext$0();)
          t1.remove$1(0, t2._collection$_current).cancel$0();
        for (t2 = new P.LinkedHashSetIterator(addedPaths, addedPaths._collection$_modifications, null, null), t2._collection$_cell = addedPaths._collection$_first; t2.moveNext$0();) {
          addedPath = t2._collection$_current;
          dir = new E.Directory(E._create("Directory", addedPath, null));
          if (dir.invoke$1("existsSync") === true)
            t1.$indexSet(0, addedPath, dir.eventStream$1("onDidChange")._createSubscription$4(new L.ProjectManager__updateChangeListeners_closure(this, dir), null, null, false));
        }
      },
      _handleDirectoryChanged$1: function(dir) {
        if (C.JSArray_methods.any$1(this.projects, new L.ProjectManager__handleDirectoryChanged_closure(dir)) !== L.ProjectManager_isDartProject(dir))
          this._fullScanForProjects$0();
      },
      _findDartProjects$2: function(dir, recurse) {
        var found, t1, t2, entry;
        if (L.ProjectManager_isDartProject(dir))
          return [dir];
        else if (recurse > 0) {
          found = [];
          for (t1 = J.get$iterator$ax(dir.getEntriesSync$0()), t2 = recurse - 1; t1.moveNext$0();) {
            entry = t1.__interceptors$_current;
            if (entry.isDirectory$0() === true)
              C.JSArray_methods.addAll$1(found, this._findDartProjects$2(entry, t2));
          }
          return found;
        } else
          return [];
      },
      ProjectManager$0: function() {
        this._projects$_sub = $.$get$atom()._project.eventStream$1("onDidChangePaths").listen$1(this.get$_handleProjectPathsChanged());
        P.Timer_Timer(C.Duration_0, new L.ProjectManager_closure(this));
      },
      $isDisposable: 1,
      static: {ProjectManager_isDartProject: function(dir) {
          if (dir.getFile$1("pubspec.yaml").invoke$1("existsSync") === true)
            return true;
          if (dir.getFile$1(".packages").invoke$1("existsSync") === true)
            return true;
          return false;
        }, ProjectManager$: function() {
          var t1 = new L.ProjectManager(P.StreamController_StreamController$broadcast(null, null, false, null), null, P.LinkedHashMap__makeEmpty(), []);
          t1.ProjectManager$0();
          return t1;
        }}
    },
    ProjectManager_closure: {
      "^": "Closure:1;_projects$_captured_this_0",
      call$0: function() {
        var t1 = this._projects$_captured_this_0;
        t1._fullScanForProjects$0();
        t1._updateChangeListeners$1($.$get$atom()._project.invoke$1("getPaths"));
      }
    },
    ProjectManager_dispose_closure: {
      "^": "Closure:42;",
      call$1: function(sub) {
        return sub.cancel$0();
      }
    },
    ProjectManager__fullScanForProjects_closure: {
      "^": "Closure:0;",
      call$1: [function(p) {
        return J.get$directory$x(p);
      }, null, null, 2, 0, null, 35, "call"]
    },
    ProjectManager__fullScanForProjects_closure0: {
      "^": "Closure:0;_captured_dir_0",
      call$1: function(p) {
        return J.$eq$(J.get$directory$x(p), this._captured_dir_0);
      }
    },
    ProjectManager__fullScanForProjects_closure1: {
      "^": "Closure:0;",
      call$1: function(dir) {
        return $.$get$_logger5().info$1("added project " + H.S(dir));
      }
    },
    ProjectManager__fullScanForProjects_closure2: {
      "^": "Closure:0;",
      call$1: [function(dir) {
        return new L.DartProject(dir);
      }, null, null, 2, 0, null, 23, "call"]
    },
    ProjectManager__updateChangeListeners_closure: {
      "^": "Closure:0;_projects$_captured_this_0,_captured_dir_1",
      call$1: [function(_) {
        return this._projects$_captured_this_0._handleDirectoryChanged$1(this._captured_dir_1);
      }, null, null, 2, 0, null, 0, "call"]
    },
    ProjectManager__handleDirectoryChanged_closure: {
      "^": "Closure:43;_captured_dir_0",
      call$1: function(project) {
        return J.$eq$(J.get$directory$x(project), this._captured_dir_0);
      }
    },
    DartProject: {
      "^": "Object;directory>",
      get$path: function(_) {
        return J.get$path$x(this.directory);
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this.directory);
      },
      contains$1: function(_, path) {
        return J.contains$1$asx(this.directory, path);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof L.DartProject && J.$eq$(this.directory, other.directory);
      },
      toString$0: function(_) {
        return "[Project " + H.S(this.directory.getBaseName$0()) + "]";
      }
    },
    ProjectScanJob: {
      "^": "Job;name,schedulingRule",
      run$0: function() {
        X.Dependencies_instance().getDependency$1(C.Type_CvJ).rescanForProjects$0();
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 1), null, null);
      }
    }
  }], ["atom.pub", "package:atom_dartlang/impl/pub.dart",, R, {
    "^": "",
    _locatePubspecDir: function(path) {
      var t1, dir;
      if (path == null)
        return;
      t1 = E._create("Directory", path, null);
      dir = new E.Directory(t1);
      if (new E.File(E._create("File", S.join(path, "pubspec.yaml", null, null), null)).invoke$1("existsSync") === true)
        return J.$index$asx(t1, "path");
      while (true) {
        if (!(dir.invoke$1("isRoot") !== true && J.$gt$n(J.get$length$asx(J.$index$asx(dir.obj, "path")), 2) === true))
          break;
        if (new E.File(E._cvt(dir.invoke$2("getFile", "pubspec.yaml"))).invoke$1("existsSync") === true)
          return J.$index$asx(dir.obj, "path");
        dir = new E.Directory(dir.invoke$1("getParent"));
      }
      return;
    },
    PubManager: {
      "^": "Object;disposables",
      _addSdkCmd$3: function(target, command, callback) {
        this.disposables.Disposables__disposables.push($.$get$atom()._commands.add$3(0, target, command, new R.PubManager__addSdkCmd_closure(callback)));
      },
      _handleRun$1: function(editor) {
        var t1, path, dir;
        if (editor == null) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "This commands requires an open file editor.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
          return;
        }
        path = editor.invoke$1("getPath");
        if (editor.invoke$1("getPath") == null) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        dir = R._locatePubspecDir(path);
        if (dir == null) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "No pubspec.yaml file found for '" + H.S(path) + "'.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
          return;
        }
        S.promptUser("pub run: pub application to run (ex. sky:init).", J.$index$asx($.$get$state()._state$_map, "lastRunText"), true).then$1(new R.PubManager__handleRun_closure(dir));
      },
      _handleGlobalRun$1: function(editor) {
        var path, dir;
        path = editor == null ? null : editor.invoke$1("getPath");
        dir = path == null ? null : R._locatePubspecDir(path);
        S.promptUser("pub global run: pub application to run (ex. sky:init).", J.$index$asx($.$get$state()._state$_map, "lastGlobalRunText"), true).then$1(new R.PubManager__handleGlobalRun_closure(dir));
      },
      _handleGlobalActivate$0: function() {
        S.promptUser("pub global activate: pub package to activate.", null, false).then$1(new R.PubManager__handleGlobalActivate_closure());
      },
      dispose$0: [function() {
        return this.disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      PubManager$0: function() {
        this._addSdkCmd$3("atom-text-editor", "dartlang:pub-get", new R.PubManager_closure());
        this._addSdkCmd$3(".tree-view", "dartlang:pub-get", new R.PubManager_closure0());
        this._addSdkCmd$3("atom-text-editor", "dartlang:pub-upgrade", new R.PubManager_closure1());
        this._addSdkCmd$3(".tree-view", "dartlang:pub-upgrade", new R.PubManager_closure2());
        this._addSdkCmd$3("atom-workspace", "dartlang:pub-run", new R.PubManager_closure3(this));
        this._addSdkCmd$3("atom-workspace", "dartlang:pub-global-run", new R.PubManager_closure4(this));
        this._addSdkCmd$3("atom-workspace", "dartlang:pub-global-activate", new R.PubManager_closure5(this));
      },
      $isDisposable: 1,
      static: {PubManager$: function() {
          var t1 = new R.PubManager(new G.Disposables([]));
          t1.PubManager$0();
          return t1;
        }}
    },
    PubManager_closure: {
      "^": "Closure:0;",
      call$1: function($event) {
        var t1, t2;
        t1 = S.dirname($event.get$editor().invoke$1("getPath"));
        t2 = new R.PubJob(t1, "get", null, "Pub get", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        $.$get$jobs()._enqueue$1(t2);
      }
    },
    PubManager_closure0: {
      "^": "Closure:44;",
      call$1: function($event) {
        var t1, t2;
        t1 = S.dirname($event.get$selectedFilePath());
        t2 = new R.PubJob(t1, "get", null, "Pub get", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        $.$get$jobs()._enqueue$1(t2);
      }
    },
    PubManager_closure1: {
      "^": "Closure:0;",
      call$1: function($event) {
        var t1, t2;
        t1 = S.dirname($event.get$editor().invoke$1("getPath"));
        t2 = new R.PubJob(t1, "upgrade", null, "Pub upgrade", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        $.$get$jobs()._enqueue$1(t2);
      }
    },
    PubManager_closure2: {
      "^": "Closure:0;",
      call$1: function($event) {
        var t1, t2;
        t1 = S.dirname($event.get$selectedFilePath());
        t2 = new R.PubJob(t1, "upgrade", null, "Pub upgrade", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        $.$get$jobs()._enqueue$1(t2);
      }
    },
    PubManager_closure3: {
      "^": "Closure:0;_pub$_captured_this_0",
      call$1: function($event) {
        this._pub$_captured_this_0._handleRun$1($.$get$atom()._workspace.getActiveTextEditor$0());
      }
    },
    PubManager_closure4: {
      "^": "Closure:0;_pub$_captured_this_1",
      call$1: function($event) {
        this._pub$_captured_this_1._handleGlobalRun$1($.$get$atom()._workspace.getActiveTextEditor$0());
      }
    },
    PubManager_closure5: {
      "^": "Closure:0;_pub$_captured_this_2",
      call$1: function($event) {
        this._pub$_captured_this_2._handleGlobalActivate$0();
      }
    },
    PubManager__addSdkCmd_closure: {
      "^": "Closure:0;_pub$_captured_callback_0",
      call$1: function($event) {
        if (!X.Dependencies_instance().getDependency$1(C.Type_OHH).get$hasSdk())
          X.Dependencies_instance().getDependency$1(C.Type_OHH).showNoSdkMessage$0();
        else
          this._pub$_captured_callback_0.call$1($event);
      }
    },
    PubManager__handleRun_closure: {
      "^": "Closure:4;_pub$_captured_dir_0",
      call$1: [function(response) {
        var args, t1, t2;
        if (response == null)
          return;
        response = J.trim$0$s(response);
        J.$indexSet$ax($.$get$state()._state$_map, "lastRunText", response);
        args = response.split(" ");
        t1 = this._pub$_captured_dir_0;
        t2 = new R.PubRunJob(t1, args, false, null, "Pub run '" + H.S(C.JSArray_methods.get$first(args)) + "'", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        $.$get$jobs()._enqueue$1(t2);
      }, null, null, 2, 0, null, 18, "call"]
    },
    PubManager__handleGlobalRun_closure: {
      "^": "Closure:4;_pub$_captured_dir_0",
      call$1: [function(response) {
        var args, t1, t2;
        if (response == null)
          return;
        response = J.trim$0$s(response);
        J.$indexSet$ax($.$get$state()._state$_map, "lastGlobalRunText", response);
        args = response.split(" ");
        t1 = this._pub$_captured_dir_0;
        t2 = new R.PubRunJob(t1, args, true, null, "Pub global run '" + H.S(C.JSArray_methods.get$first(args)) + "'", null);
        t2._pubspecDir = R._locatePubspecDir(t1);
        $.$get$jobs()._enqueue$1(t2);
      }, null, null, 2, 0, null, 18, "call"]
    },
    PubManager__handleGlobalActivate_closure: {
      "^": "Closure:4;",
      call$1: [function(response) {
        var t1;
        if (response == null)
          return;
        response = J.trim$0$s(response);
        t1 = "Pub global activate '" + response + "'";
        $.$get$jobs()._enqueue$1(new R.PubGlobalActivate(response, t1, null));
      }, null, null, 2, 0, null, 18, "call"]
    },
    PubJob: {
      "^": "Job;path>,pubCommand,_pubspecDir,name,schedulingRule",
      get$pinResult: function() {
        return true;
      },
      get$schedulingRule: function() {
        return this._pubspecDir;
      },
      run$0: function() {
        return X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk().execBinSimple$3$cwd("pub", [this.pubCommand], this._pubspecDir).then$1(new R.PubJob_run_closure());
      }
    },
    PubJob_run_closure: {
      "^": "Closure:6;",
      call$1: [function(result) {
        if (!J.$eq$(result.get$exit(), 0))
          throw H.wrapException(result.get$stdout() + "\n" + result.get$stderr());
        return result.get$stdout();
      }, null, null, 2, 0, null, 1, "call"]
    },
    PubRunJob: {
      "^": "Job;path>,args,isGlobal,_pubspecDir,name,schedulingRule",
      get$pinResult: function() {
        return true;
      },
      get$schedulingRule: function() {
        return this._pubspecDir;
      },
      run$0: function() {
        var l = this.isGlobal ? ["global", "run"] : ["run"];
        C.JSArray_methods.addAll$1(l, this.args);
        return X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk().execBinSimple$3$cwd("pub", l, this._pubspecDir).then$1(new R.PubRunJob_run_closure());
      }
    },
    PubRunJob_run_closure: {
      "^": "Closure:6;",
      call$1: [function(result) {
        if (!J.$eq$(result.get$exit(), 0))
          throw H.wrapException(result.get$stdout() + "\n" + result.get$stderr());
        return result.get$stdout();
      }, null, null, 2, 0, null, 1, "call"]
    },
    PubGlobalActivate: {
      "^": "Job;packageName,name,schedulingRule",
      get$pinResult: function() {
        return true;
      },
      run$0: function() {
        return X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk().execBinSimple$2("pub", ["global", "activate", this.packageName]).then$1(new R.PubGlobalActivate_run_closure());
      }
    },
    PubGlobalActivate_run_closure: {
      "^": "Closure:6;",
      call$1: [function(result) {
        if (!J.$eq$(result.get$exit(), 0))
          throw H.wrapException(result.get$stdout() + "\n" + result.get$stderr());
        return result.get$stdout();
      }, null, null, 2, 0, null, 1, "call"]
    }
  }], ["atom.rebuild", "package:atom_dartlang/impl/rebuild.dart",, Z, {
    "^": "",
    RebuildJob: {
      "^": "Job;name,schedulingRule",
      run$0: function() {
        var t1, proj;
        if (!X.Dependencies_instance().getDependency$1(C.Type_OHH).get$hasSdk()) {
          X.Dependencies_instance().getDependency$1(C.Type_OHH).showNoSdkMessage$0();
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        t1 = $.$get$atom();
        proj = J.firstWhere$2$orElse$ax(t1._project.getDirectories$0(), new Z.RebuildJob_run_closure("dartlang"), new Z.RebuildJob_run_closure0());
        if (proj == null) {
          t1 = t1._notifications;
          t1.invoke$3("addWarning", "Unable to find project 'dartlang'.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        J.forEach$1$ax(t1._workspace.getTextEditors$0(), new Z.RebuildJob_run_closure1());
        return X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk().execBinSimple$3$cwd("dart2js", ["--csp", "-oweb/entry.dart.js", "web/entry.dart"], proj).then$1(new Z.RebuildJob_run_closure2(proj));
      }
    },
    RebuildJob_run_closure: {
      "^": "Closure:0;_captured_projName_0",
      call$1: function(d) {
        return J.endsWith$1$s(d.getBaseName$0(), this._captured_projName_0);
      }
    },
    RebuildJob_run_closure0: {
      "^": "Closure:1;",
      call$0: function() {
        return;
      }
    },
    RebuildJob_run_closure1: {
      "^": "Closure:0;",
      call$1: function(editor) {
        if (editor.isModified$0() === true)
          editor.save$0();
      }
    },
    RebuildJob_run_closure2: {
      "^": "Closure:6;_captured_proj_1",
      call$1: [function(result) {
        var t1, file;
        if (!J.$eq$(result.get$exit(), 0))
          throw H.wrapException(result.get$stdout() + "\n" + result.get$stderr());
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addSuccess", "Recompiled dart-tools! Restarting\u2026", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
        file = new E.File(E._cvt(this._captured_proj_1.getSubdirectory$1("web").invoke$2("getFile", "entry.dart.js")));
        return K.promiseToFuture(file.invoke$2("read", null)).then$1(new Z.RebuildJob_run__closure(file)).then$1(new Z.RebuildJob_run__closure0());
      }, null, null, 2, 0, null, 1, "call"]
    },
    RebuildJob_run__closure: {
      "^": "Closure:0;_captured_file_2",
      call$1: [function(contents) {
        var t1, index;
        t1 = J.getInterceptor$asx(contents);
        index = t1.lastIndexOf$1(contents, "if (true) { // document.currentScript");
        this._captured_file_2.invoke$2("writeSync", "var self = Object.create(this);\nself.require = require;\nself.module = module;\nself.window = window;\nself.atom = atom;\nself.exports = exports;\nself.Object = Object;\nself.Promise = Promise;\nself.setTimeout = function(f, millis) { return window.setTimeout(f, millis); };\nself.clearTimeout = function(id) { window.clearTimeout(id); };\nself.setInterval = function(f, millis) { return window.setInterval(f, millis); };\nself.clearInterval = function(id) { window.clearInterval(id); };\n\n// Work around interop issues.\nself.getTextEditorForElement = function(element) { return element.o.getModel(); };\n\n" + (t1.substring$2(contents, 0, index) + "if (true) { // document.currentScript" + t1.substring$1(contents, index + 29)));
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 1), null, null);
      }, null, null, 2, 0, null, 37, "call"]
    },
    RebuildJob_run__closure0: {
      "^": "Closure:0;",
      call$1: [function(_) {
        $.$get$atom().invoke$1("reload");
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["atom.refactor", "package:atom_dartlang/analysis/refactor.dart",, F, {
    "^": "",
    RefactoringHelper: {
      "^": "Object;_refactor$_commands",
      dispose$0: [function() {
        return this._refactor$_commands.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleRenameRefactor$1: function(editor) {
        var t1, path, t2, range, buffer, t3, offset, end, oldName;
        t1 = {};
        if (!X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive()) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        path = editor.invoke$1("getPath");
        if (X.Dependencies_instance().getDependency$1(C.Type_CvJ).getProjectFor$1(path) == null) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        t2 = editor.invoke$1("getSelectedBufferRange");
        range = t2 == null ? null : new E.Range(E._cvt(t2));
        buffer = new E.TextBuffer(E._cvt(editor.invoke$1("getBuffer")));
        t2 = range.obj;
        t3 = J.getInterceptor$asx(t2);
        offset = buffer.invoke$2("characterIndexForPosition", new E.Point(E._cvt(t3.$index(t2, "start"))));
        end = buffer.invoke$2("characterIndexForPosition", new E.Point(E._cvt(t3.$index(t2, "end"))));
        oldName = F.RefactoringHelper__findIdentifier(editor.invoke$1("getText"), offset);
        t1._captured_newName_0 = null;
        X.Dependencies_instance().getDependency$1(C.Type_bhC).getAvailableRefactorings$3(path, offset, J.$sub$n(end, offset)).then$1(new F.RefactoringHelper__handleRenameRefactor_closure(oldName)).then$1(new F.RefactoringHelper__handleRenameRefactor_closure0(t1, path, offset, end)).then$1(new F.RefactoringHelper__handleRenameRefactor_closure1(t1, this, oldName));
      },
      _apply$3: function(sourceFileEdits, oldName, newName) {
        P.Future_forEach(sourceFileEdits, new F.RefactoringHelper__apply_closure()).then$1(new F.RefactoringHelper__apply_closure0(sourceFileEdits, oldName, newName)).catchError$1(new F.RefactoringHelper__apply_closure1());
      },
      RefactoringHelper$0: function() {
        this._refactor$_commands.Disposables__disposables.push($.$get$atom()._commands.add$3(0, "atom-text-editor", "dartlang:refactor-rename", new F.RefactoringHelper_closure(this)));
      },
      $isDisposable: 1,
      static: {RefactoringHelper$: function() {
          var t1 = new F.RefactoringHelper(new G.Disposables([]));
          t1.RefactoringHelper$0();
          return t1;
        }, RefactoringHelper__findIdentifier: function(text, offset) {
          var t1, t2, t3, t4, buf, c;
          for (t1 = J.getInterceptor$asx(text); t2 = J.getInterceptor$n(offset), t2.$gt(offset, 0) === true;) {
            t3 = $.$get$_idRegex();
            t4 = t1.$index(text, t2.$sub(offset, 1));
            t3 = t3._nativeRegExp;
            if (typeof t4 !== "string")
              H.throwExpression(H.argumentErrorValue(t4));
            if (t3.test(t4))
              offset = t2.$sub(offset, 1);
            else
              break;
          }
          buf = new P.StringBuffer("");
          for (; t2 = J.getInterceptor$n(offset), t2.$lt(offset, t1.get$length(text)) === true;) {
            c = t1.$index(text, offset);
            t3 = $.$get$_idRegex()._nativeRegExp;
            if (typeof c !== "string")
              H.throwExpression(H.argumentErrorValue(c));
            if (t3.test(c)) {
              buf._contents += H.S(c);
              offset = t2.$add(offset, 1);
            } else
              break;
          }
          t1 = buf._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }}
    },
    RefactoringHelper_closure: {
      "^": "Closure:0;_refactor$_captured_this_0",
      call$1: function(e) {
        this._refactor$_captured_this_0._handleRenameRefactor$1(e.get$editor());
      }
    },
    RefactoringHelper__handleRenameRefactor_closure: {
      "^": "Closure:45;_captured_oldName_1",
      call$1: [function(result) {
        if (J.contains$1$asx(result.get$kinds(), "RENAME") !== true) {
          $.$get$atom().invoke$1("beep");
          return;
        }
        return S.promptUser("Rename refactor: enter the new name.", this._captured_oldName_1, true);
      }, null, null, 2, 0, null, 1, "call"]
    },
    RefactoringHelper__handleRenameRefactor_closure0: {
      "^": "Closure:0;_refactor$_box_0,_captured_path_2,_captured_offset_3,_captured_end_4",
      call$1: [function(_newName) {
        var t1;
        this._refactor$_box_0._captured_newName_0 = _newName;
        if (_newName != null) {
          t1 = this._captured_offset_3;
          return X.Dependencies_instance().getDependency$1(C.Type_bhC).getRefactoring$6$options("RENAME", this._captured_path_2, t1, J.$sub$n(this._captured_end_4, t1), false, new X.RenameRefactoringOptions(_newName));
        }
      }, null, null, 2, 0, null, 61, "call"]
    },
    RefactoringHelper__handleRenameRefactor_closure1: {
      "^": "Closure:28;_refactor$_box_0,_refactor$_captured_this_5,_captured_oldName_6",
      call$1: [function(result) {
        var t1, t2, sourceFileEdits, fileSummary, m;
        if (result != null)
          if (J.get$isNotEmpty$asx(result.get$initialProblems())) {
            t1 = $.$get$atom();
            t2 = t1._notifications;
            t2.invoke$3("addError", "Unable to Perform Rename", t2._options$4$description$detail$dismissable$icon(null, H.S(J.get$message$x(J.get$first$ax(result.get$initialProblems()))), null, null));
            t1.invoke$1("beep");
          } else if (result.get$change() == null) {
            t1 = $.$get$atom();
            t2 = t1._notifications;
            t2.invoke$3("addError", "Unable to Perform Rename", t2._options$4$description$detail$dismissable$icon(null, "No change information returned.", null, null));
            t1.invoke$1("beep");
          } else {
            sourceFileEdits = result.get$change().edits;
            t1 = J.getInterceptor$asx(sourceFileEdits);
            if (t1.get$length(sourceFileEdits) > 1) {
              fileSummary = t1.map$1(sourceFileEdits, new F.RefactoringHelper__handleRenameRefactor__closure()).join$1(0, "\n");
              t2 = $.$get$atom();
              t1 = "Confirm rename in " + t1.get$length(sourceFileEdits) + " files?";
              t2.toString;
              m = P.LinkedHashMap__makeLiteral(["message", t1]);
              m.$indexSet(0, "detailedMessage", fileSummary);
              m.$indexSet(0, "buttons", ["Rename", "Cancel"]);
              if (!J.$eq$(t2.invoke$2("confirm", m), 0))
                return;
            }
            this._refactor$_captured_this_5._apply$3(sourceFileEdits, this._captured_oldName_6, this._refactor$_box_0._captured_newName_0);
          }
      }, null, null, 2, 0, null, 1, "call"]
    },
    RefactoringHelper__handleRenameRefactor__closure: {
      "^": "Closure:0;",
      call$1: [function(edit) {
        return edit.get$file();
      }, null, null, 2, 0, null, 38, "call"]
    },
    RefactoringHelper__apply_closure: {
      "^": "Closure:18;",
      call$1: function(edit) {
        return $.$get$atom()._workspace.open$2$options(0, edit.get$file(), P.LinkedHashMap__makeLiteral(["searchAllPanes", true])).then$1(new F.RefactoringHelper__apply__closure0(edit));
      }
    },
    RefactoringHelper__apply__closure0: {
      "^": "Closure:22;_captured_edit_0",
      call$1: [function(editor) {
        F.applyEdits(editor, this._captured_edit_0.get$edits());
      }, null, null, 2, 0, null, 13, "call"]
    },
    RefactoringHelper__apply_closure0: {
      "^": "Closure:0;_captured_sourceFileEdits_1,_captured_oldName_2,_captured_newName_3",
      call$1: [function(_) {
        var t1, t2, fileSummary;
        t1 = this._captured_sourceFileEdits_1;
        t2 = J.getInterceptor$ax(t1);
        fileSummary = t2.map$1(t1, new F.RefactoringHelper__apply__closure()).join$1(0, "\n");
        if (t2.get$length(t1) === 1)
          fileSummary = null;
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addSuccess", "Renamed '" + this._captured_oldName_2 + "' to '" + H.S(this._captured_newName_3) + "'.", t1._options$4$description$detail$dismissable$icon(null, fileSummary, null, null));
      }, null, null, 2, 0, null, 0, "call"]
    },
    RefactoringHelper__apply__closure: {
      "^": "Closure:0;",
      call$1: [function(edit) {
        return edit.get$file();
      }, null, null, 2, 0, null, 38, "call"]
    },
    RefactoringHelper__apply_closure1: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addError", "Error Performing Rename", t1._options$4$description$detail$dismissable$icon(null, H.S(e), null, null));
      }, null, null, 2, 0, null, 2, "call"]
    }
  }], ["atom.references", "package:atom_dartlang/analysis/references.dart",, V, {
    "^": "",
    FindReferencesHelper: {
      "^": "Object;_command,_references$_view",
      dispose$0: [function() {
        this._command.invoke$1("dispose");
        var t1 = this._references$_view;
        if (t1 != null)
          t1._panel.invoke$1("destroy");
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleReferences$1: [function($event) {
        return this._handleReferencesEditor$1($event.get$editor());
      }, "call$1", "get$_handleReferences", 2, 0, 10],
      _handleReferencesEditor$1: function(editor) {
        var path, t1, range, offset;
        if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive()) {
          path = editor.invoke$1("getPath");
          t1 = editor.invoke$1("getSelectedBufferRange");
          range = t1 == null ? null : new E.Range(E._cvt(t1));
          offset = new E.TextBuffer(E._cvt(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", new E.Point(E._cvt(J.$index$asx(range.obj, "start"))));
          X.Dependencies_instance().getDependency$1(C.Type_bhC).findElementReferences$3(path, offset, false).then$1(new V.FindReferencesHelper__handleReferencesEditor_closure(this)).catchError$1(new V.FindReferencesHelper__handleReferencesEditor_closure0(this));
        } else
          $.$get$atom().invoke$1("beep");
      },
      $isDisposable: 1
    },
    FindReferencesHelper__handleReferencesEditor_closure: {
      "^": "Closure:47;_references$_captured_this_0",
      call$1: [function(result) {
        var t1, t2, t3, t4;
        if (J.get$id$x(result) == null)
          $.$get$atom().invoke$1("beep");
        else {
          t1 = this._references$_captured_this_0;
          t2 = t1._references$_view;
          if (t2 == null) {
            t2 = new V.FindReferencesView(null, null, null, new V._MatchParser(null, null), null, null, null);
            t2.AtomView$3$classes$prefName("References", "find-references", "References");
            t2.status = t2.content.add$1(0, K.CoreElement$("div", null, "search-summary", null));
            t3 = t2.content;
            t4 = t2.get$_references$_render();
            t4 = new K.ListTreeBuilder(P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), t4, null, P.LinkedHashMap__makeEmpty(), W._ElementFactoryProvider_createElement_tag("div", null));
            t4.CoreElement$4$attributes$classes$text("div", null, "list-tree has-collapsable-children", null);
            t4.flex$0(0);
            t4 = t3.add$1(0, t4);
            t2.treeBuilder = t4;
            t4.get$onSelected().listen$1(t2.get$_references$_jumpTo());
            J.get$onDoubleClick$x(t2.treeBuilder).listen$1(t2.get$_doubleClick());
            t1._references$_view = t2;
            t1 = t2;
          } else
            t1 = t2;
          t1._showView$1(result);
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    FindReferencesHelper__handleReferencesEditor_closure0: {
      "^": "Closure:0;_references$_captured_this_1",
      call$1: [function(_) {
        return $.$get$atom().invoke$1("beep");
      }, null, null, 2, 0, null, 0, "call"]
    },
    FindReferencesView: {
      "^": "AtomView;status,treeBuilder,sub,matchParser,_panel,title,content",
      _showView$1: function(findResult) {
        var t1;
        J.set$text$x(this.status, "Searching\u2026");
        this.status.clazz$1("searching");
        J.clear$0$ax(this.treeBuilder);
        X.Dependencies_instance().getDependency$1(C.Type_bhC).filterSearchResults$1(J.get$id$x(findResult)).toList$0(0).then$1(new V.FindReferencesView__showView_closure(this));
        this._panel.invoke$1("show");
        t1 = this.matchParser;
        t1.file = null;
        t1.lines = null;
      },
      _references$_render$2: [function(item, intoElement) {
        var t1, items, span, t2, line, t3, t4, match;
        t1 = J.getInterceptor$x(intoElement);
        if (typeof item === "string") {
          items = this._renderPath$1(item);
          span = document.createElement("span", null);
          span.textContent = C.JSArray_methods.join$1(items, " ");
          J.add$1$ax(t1.get$children(intoElement), span);
        } else {
          t1.get$classes(intoElement).add$1(0, "search-result");
          if (item.get$isPotential() === true)
            t1.get$classes(intoElement).add$1(0, "potential-match");
          t2 = J.getInterceptor$x(item);
          line = t2.get$location(item).get$startLine();
          t3 = t1.get$children(intoElement);
          t4 = document.createElement("span", null);
          t4.textContent = G.commas(line) + ": ";
          J.get$classes$x(t4).add$1(0, "result-line");
          J.add$1$ax(t3, t4);
          match = this.matchParser.parseMatch$1(t2.get$location(item));
          if (match != null) {
            t2 = t1.get$children(intoElement);
            t3 = document.createElement("span", null);
            t3.textContent = match[0];
            J.get$classes$x(t3).add$1(0, "text-subtle");
            J.add$1$ax(t2, t3);
            t3 = t1.get$children(intoElement);
            t2 = document.createElement("span", null);
            t2.textContent = match[1];
            J.get$classes$x(t2).add$1(0, "result-exact");
            J.add$1$ax(t3, t2);
            t1 = t1.get$children(intoElement);
            t2 = document.createElement("span", null);
            t2.textContent = match[2];
            J.get$classes$x(t2).add$1(0, "text-subtle");
            J.add$1$ax(t1, t2);
          }
        }
      }, "call$2", "get$_references$_render", 4, 0, 48],
      _references$_jumpTo$1: [function(node) {
        var t1, l;
        t1 = J.getInterceptor$x(node);
        if (t1.get$data(node) instanceof N.SearchResult) {
          l = H.interceptedTypeCast(t1.get$data(node), "$isSearchResult").location;
          X.Dependencies_instance().getDependency$1(C.Type_25m).jumpToLocation$4(l.file, J.$sub$n(l.startLine, 1), J.$sub$n(l.startColumn, 1), l.length);
        }
      }, "call$1", "get$_references$_jumpTo", 2, 0, 15, 21],
      _doubleClick$1: [function(node) {
        var t1, t2, path;
        t1 = J.getInterceptor$x(node);
        t2 = t1.get$data(node);
        if (typeof t2 === "string") {
          path = t1.get$data(node);
          $.$get$atom()._workspace.open$2$options(0, path, P.LinkedHashMap__makeLiteral(["searchAllPanes", true]));
        }
      }, "call$1", "get$_doubleClick", 2, 0, 15, 21],
      hide$0: function() {
        this.super$AtomView$hide();
      },
      _renderPath$1: function(originalPath) {
        var relPath, t1, base, t2, index, path, sdk, prefix;
        relPath = $.$get$atom()._project.invoke$2("relativizePath", originalPath);
        t1 = J.getInterceptor$asx(relPath);
        if (t1.$index(relPath, 0) != null) {
          base = t1.$index(relPath, 0);
          t2 = J.getInterceptor$asx(base);
          index = t2.lastIndexOf$1(base, $.$get$separator());
          if (index !== -1)
            base = t2.substring$1(base, index + 1);
          return [base, t1.$index(relPath, 1)];
        }
        t1 = $.$get$FindReferencesView__cachePrefix();
        if (C.JSString_methods.contains$1(originalPath, t1)) {
          path = C.JSString_methods.substring$1(originalPath, C.JSString_methods.indexOf$1(originalPath, t1) + t1.length);
          t1 = $.$get$FindReferencesView__pubPrefix();
          return ["Package", C.JSString_methods.startsWith$1(path, t1) ? C.JSString_methods.substring$1(path, t1.length) : path];
        }
        sdk = X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk();
        if (sdk != null) {
          prefix = J.$index$asx(sdk.directory.obj, "path");
          if (C.JSString_methods.startsWith$1(originalPath, prefix)) {
            path = C.JSString_methods.substring$1(originalPath, J.get$length$asx(prefix));
            t1 = $.$get$FindReferencesView__libPrefix();
            return ["SDK", C.JSString_methods.startsWith$1(path, t1) ? C.JSString_methods.substring$1(path, t1.length) : path];
          }
        }
        return [originalPath];
      }
    },
    FindReferencesView__showView_closure: {
      "^": "Closure:50;_references$_captured_this_0",
      call$1: [function(l) {
        var t1, t2, t3, t4, results, r, path, node;
        t1 = this._references$_captured_this_0;
        t2 = t1.status;
        t3 = J.getInterceptor$asx(l);
        t4 = G.commas(t3.get$length(l)) + " ";
        J.set$text$x(t2, t4 + (J.$eq$(t3.get$length(l), 1) ? "result" : "results") + " found.");
        t1.status.toggleClass$1("searching");
        results = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t2 = t3.get$iterator(l); t2.moveNext$0();) {
          r = t2.get$current();
          path = J.get$location$x(r).get$file();
          if (results.$index(0, path) == null)
            results.$indexSet(0, path, []);
          J.add$1$ax(results.$index(0, path), r);
        }
        for (t2 = results.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          path = t2.get$current();
          node = new K.Node0(path, true, []);
          J.forEach$1$ax(results.$index(0, path), new V.FindReferencesView__showView__closure(node));
          t1.treeBuilder.addNode$1(node);
        }
      }, null, null, 2, 0, null, 64, "call"]
    },
    FindReferencesView__showView__closure: {
      "^": "Closure:0;_references$_captured_node_1",
      call$1: [function(r) {
        return this._references$_captured_node_1.children.push(new K.Node0(r, false, []));
      }, null, null, 2, 0, null, 25, "call"]
    },
    _MatchParser: {
      "^": "Object;file<,lines",
      parseMatch$1: function(l) {
        var line, col, start, max, extract, end, llen, rlen, t1, t2, exception;
        if (!J.$eq$(this.file, l.get$file())) {
          this.file = null;
          this.lines = null;
          this._parse$1(l.get$file());
        }
        if (this.lines == null || J.$ge$n(l.get$startLine(), this.lines.length) === true)
          return;
        t1 = this.lines;
        t2 = J.$sub$n(l.get$startLine(), 1);
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        line = t1[t2];
        try {
          col = J.$sub$n(l.get$startColumn(), 1);
          col = P.min(col, J.get$length$asx(line));
          start = J.substring$2$s(line, 0, col);
          max = P.min(J.get$length$asx(l), J.$sub$n(J.get$length$asx(line), col));
          extract = J.substring$2$s(line, col, J.$add$ns(col, max));
          end = "";
          if (J.$lt$n(max, J.get$length$asx(line)))
            end = J.substring$1$s(line, J.$add$ns(col, max));
          start = J.trimLeft$0$s(start);
          end = J.trimRight$0$s(end);
          llen = 20;
          rlen = 30;
          if (J.$gt$n(J.get$length$asx(start), llen))
            start = "\u2026" + J.substring$1$s(start, J.$sub$n(J.get$length$asx(start), llen) + 2);
          if (J.$gt$n(J.get$length$asx(end), rlen))
            end = J.substring$2$s(end, 0, J.$sub$n(rlen, 2)) + "\u2026";
          return [start, extract, end];
        } catch (exception) {
          H.unwrapException(exception);
          if (J.$gt$n(J.get$length$asx(line), 60) === true)
            line = J.substring$2$s(line, 0, 60);
          return [line, "", ""];
        }
      },
      _parse$1: function(path) {
        var contents, t1, editor, exception;
        this.file = path;
        for (t1 = J.get$iterator$ax($.$get$atom()._workspace.getTextEditors$0()); t1.moveNext$0();) {
          editor = t1.__interceptors$_current;
          if (J.$eq$(editor.getPath$0(), path)) {
            this.lines = J.split$1$s(editor.getText$0(), "\n");
            return;
          }
        }
        try {
          contents = new E.File(E._create("File", path, null)).invoke$2("readSync", null);
          this.lines = contents == null ? [] : J.split$1$s(contents, "\n");
        } catch (exception) {
          H.unwrapException(exception);
          this.lines = [];
        }
      }
    }
  }], ["atom.sdk", "package:atom_dartlang/sdk.dart",, V, {
    "^": "",
    SdkManager: {
      "^": "Object;_sdk$_controller,_sdk,_prefObserve,_alreadyWarned",
      get$hasSdk: function() {
        return this._sdk != null;
      },
      get$sdk: function() {
        return this._sdk;
      },
      showNoSdkMessage$0: function() {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addInfo", "No Dart SDK found.", t1._options$4$description$detail$dismissable$icon(null, "You can configure your SDK location in Settings > Packages > dart-lang > Settings.", true, null));
      },
      tryToAutoConfigure$1$complainOnFailure: function(complainOnFailure) {
        new V.SdkDiscovery().discoverSdk$0().then$1(new V.SdkManager_tryToAutoConfigure_closure(complainOnFailure));
      },
      get$onSdkChange: function() {
        var t1 = this._sdk$_controller;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      _setSdkPath$2$verbose: function(path, verbose) {
        var t1, dir, t2;
        t1 = path != null;
        dir = !t1 || J.get$isEmpty$asx(path) === true ? null : new E.Directory(E._create("Directory", path, null));
        if (dir != null)
          if (dir.invoke$1("existsSync") !== true)
            dir = null;
          else if (!new V.Sdk(dir).get$isValidSdk())
            dir = null;
        if (dir == null) {
          if (this._sdk != null) {
            this._sdk = null;
            t2 = this._sdk$_controller;
            if (!t2.get$_mayAddEvent())
              H.throwExpression(t2._addEventError$0());
            t2._sendData$1(null);
            if (verbose)
              if (!t1 || J.get$isEmpty$asx(path) === true) {
                t1 = $.$get$atom()._notifications;
                t1.invoke$3("addInfo", "No Dart SDK configured.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
              } else {
                t1 = $.$get$atom()._notifications;
                t1.invoke$3("addInfo", "No Dart SDK configured.", t1._options$4$description$detail$dismissable$icon(null, "SDK not found at " + H.S(path) + ".", null, null));
              }
          }
        } else {
          t1 = this._sdk;
          if (t1 != null) {
            t1 = t1.directory;
            t1 = !J.$eq$(J.$index$asx(dir.obj, "path"), J.$index$asx(t1.obj, "path"));
          } else
            t1 = true;
          if (t1) {
            t1 = new V.Sdk(dir);
            this._sdk = t1;
            t2 = this._sdk$_controller;
            if (!t2.get$_mayAddEvent())
              H.throwExpression(t2._addEventError$0());
            t2._sendData$1(t1);
            if (verbose) {
              t1 = $.$get$atom()._notifications;
              t1.invoke$3("addSuccess", "Dart SDK found at " + H.S(path) + ".", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
            }
            this._verifyMinVersion$2(this._sdk, verbose);
          }
        }
      },
      _setSdkPath$1: function(path) {
        return this._setSdkPath$2$verbose(path, false);
      },
      dispose$0: [function() {
        return this._prefObserve.invoke$1("dispose");
      }, "call$0", "get$dispose", 0, 0, 2],
      _verifyMinVersion$2: function(sdk, verbose) {
        sdk.getVersion$0().then$1(new V.SdkManager__verifyMinVersion_closure(this, verbose));
      },
      SdkManager$0: function() {
        var t1 = $.$get$atom();
        this._setSdkPath$1(t1._config.getValue$1("dartlang.sdkLocation"));
        if (this._sdk == null)
          this.tryToAutoConfigure$1$complainOnFailure(false);
        this._prefObserve = t1._config.observe$3("dartlang.sdkLocation", null, new V.SdkManager_closure(this));
      },
      $isDisposable: 1,
      static: {SdkManager$: function() {
          var t1 = new V.SdkManager(P.StreamController_StreamController$broadcast(null, null, true, null), null, null, false);
          t1.SdkManager$0();
          return t1;
        }}
    },
    SdkManager_closure: {
      "^": "Closure:0;_sdk$_captured_this_0",
      call$1: [function(value) {
        this._sdk$_captured_this_0._setSdkPath$2$verbose(value, true);
      }, null, null, 2, 0, null, 8, "call"]
    },
    SdkManager_tryToAutoConfigure_closure: {
      "^": "Closure:4;_captured_complainOnFailure_0",
      call$1: [function(sdkPath) {
        var t1;
        if (sdkPath != null)
          $.$get$atom()._config.invoke$3("set", "dartlang.sdkLocation", sdkPath);
        else if (this._captured_complainOnFailure_0) {
          t1 = $.$get$atom()._notifications;
          t1.invoke$3("addWarning", "Unable to auto-locate a Dart SDK.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
        }
      }, null, null, 2, 0, null, 65, "call"]
    },
    SdkManager__verifyMinVersion_closure: {
      "^": "Closure:4;_sdk$_captured_this_0,_captured_verbose_1",
      call$1: [function(version) {
        var ver, compare, t1, t2, exception;
        if (version == null)
          return;
        try {
          ver = T.Version_Version$parse(version);
          compare = ver.get$preRelease().length !== 0 ? ver.get$nextPatch() : ver;
          t1 = $.$get$_minSdkVersion();
          if (J.compareTo$1$ns(compare, t1) < 0) {
            t2 = this._sdk$_captured_this_0;
            if (!t2._alreadyWarned || this._captured_verbose_1) {
              t2._alreadyWarned = true;
              t2 = $.$get$atom()._notifications;
              t2.invoke$3("addWarning", "SDK version " + H.S(ver) + " is older than the required verison of " + H.S(t1) + ". Please visit www.dartlang.org to download a recent SDK.", t2._options$4$description$detail$dismissable$icon(null, null, true, null));
            }
          }
        } catch (exception) {
          H.unwrapException(exception);
        }
      }, null, null, 2, 0, null, 66, "call"]
    },
    Sdk: {
      "^": "Object;directory>",
      get$isValidSdk: function() {
        var t1 = this.directory;
        return new E.File(E._cvt(t1.invoke$2("getFile", "version"))).invoke$1("existsSync") === true && new E.Directory(t1.invoke$2("getSubdirectory", "bin")).invoke$1("existsSync") === true;
      },
      get$path: function(_) {
        return J.$index$asx(this.directory.obj, "path");
      },
      getVersion$0: function() {
        var file, t1;
        file = new E.File(E._cvt(this.directory.invoke$2("getFile", "version")));
        if (file.invoke$1("existsSync") === true)
          return K.promiseToFuture(file.invoke$2("read", null)).then$1(new V.Sdk_getVersion_closure());
        else {
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
      },
      get$dartVm: function() {
        var t1 = this.directory;
        if ($.$get$isWindows() === true)
          return new E.File(E._create("File", S.join(t1, "bin", "dart.exe", null), null));
        else
          return new E.File(E._create("File", S.join(t1, "bin", "dart", null), null));
      },
      execBinSimple$3$cwd: function(binName, args, cwd) {
        var t1, command, arg;
        if (cwd instanceof E.Directory)
          cwd = J.$index$asx(cwd.obj, "path");
        t1 = $.$get$isWindows() === true ? binName + ".bat" : binName;
        command = S.join(this.directory, "bin", t1, null);
        if ($.$get$isMac() === true) {
          arg = C.JSArray_methods.join$1(args, " ");
          return new Z.ProcessRunner("/bin/bash", ["-l", "-c", command + " " + arg], cwd, null, null, H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]), null, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null)).execSimple$0();
        } else
          return new Z.ProcessRunner(command, args, cwd, null, null, H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]), null, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null)).execSimple$0();
      },
      execBinSimple$2: function(binName, args) {
        return this.execBinSimple$3$cwd(binName, args, null);
      },
      toString$0: function(_) {
        return this.directory.invoke$1("getPath");
      }
    },
    Sdk_getVersion_closure: {
      "^": "Closure:0;",
      call$1: [function(data) {
        return J.trim$0$s(data);
      }, null, null, 2, 0, null, 9, "call"]
    },
    SdkDiscovery: {
      "^": "Object;",
      discoverSdk$0: function() {
        if ($.$get$isMac() === true)
          return Z.exec("/bin/bash", ["-l", "-c", "which dart"]).then$1(new V.SdkDiscovery_discoverSdk_closure(this)).catchError$1(new V.SdkDiscovery_discoverSdk_closure0());
        else if ($.$get$isWindows() === true)
          return Z.exec("where", ["dart.exe"]).then$1(new V.SdkDiscovery_discoverSdk_closure1(this)).catchError$1(new V.SdkDiscovery_discoverSdk_closure2());
        else
          return Z.exec("which", ["dart"]).then$1(new V.SdkDiscovery_discoverSdk_closure3(this)).catchError$1(new V.SdkDiscovery_discoverSdk_closure4());
      },
      _resolveSdkFromVm$1: function(vmPath) {
        if (vmPath == null)
          return;
        return J.$index$asx(new E.Directory(new E.File(E._create("File", new E.File(E._create("File", J.trim$0$s(vmPath), null)).invoke$1("getRealPathSync"), null)).invoke$1("getParent")).invoke$1("getParent"), "path");
      }
    },
    SdkDiscovery_discoverSdk_closure: {
      "^": "Closure:0;_sdk$_captured_this_0",
      call$1: [function(result) {
        var t1, index;
        result = this._sdk$_captured_this_0._resolveSdkFromVm$1(result);
        if (result != null) {
          t1 = J.getInterceptor$asx(result);
          index = t1.indexOf$1(result, "/Cellar/dart/");
          if (index !== -1 && t1.endsWith$1(result, "/libexec"))
            result = t1.substring$2(result, 0, index) + "/opt/dart/libexec";
        }
        return result;
      }, null, null, 2, 0, null, 1, "call"]
    },
    SdkDiscovery_discoverSdk_closure0: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 2, "call"]
    },
    SdkDiscovery_discoverSdk_closure1: {
      "^": "Closure:0;_sdk$_captured_this_1",
      call$1: [function(result) {
        var t1;
        if (result != null && J.get$isEmpty$asx(result) !== true) {
          t1 = J.getInterceptor$asx(result);
          if (t1.contains$1(result, "\n") === true)
            result = J.trim$0$s(C.JSArray_methods.get$first(t1.split$1(result, "\n")));
          return this._sdk$_captured_this_1._resolveSdkFromVm$1(result);
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    SdkDiscovery_discoverSdk_closure2: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 2, "call"]
    },
    SdkDiscovery_discoverSdk_closure3: {
      "^": "Closure:4;_sdk$_captured_this_2",
      call$1: [function(result) {
        return this._sdk$_captured_this_2._resolveSdkFromVm$1(result);
      }, null, null, 2, 0, null, 1, "call"]
    },
    SdkDiscovery_discoverSdk_closure4: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return;
      }, null, null, 2, 0, null, 2, "call"]
    },
    SdkLocationJob: {
      "^": "Job;sdkManager,name,schedulingRule",
      run$0: function() {
        this.sdkManager.tryToAutoConfigure$1$complainOnFailure(true);
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 1), null, null);
      }
    }
  }], ["atom.smoketest", "package:atom_dartlang/impl/smoketest.dart",, E, {
    "^": "",
    smokeTest: function() {
      var t1, element, t2, t3, panel, dirs, dir, children, childFile, childDir, sdk, vm, projects;
      t1 = {};
      element = document.createElement("div", null);
      element.textContent = "Hello world.";
      t2 = $.$get$atom();
      t3 = t2._workspace;
      panel = new E.Panel(t3.invoke$2("addTopPanel", t3._panelOptions$3(element, true, null)));
      panel.get$onDidDestroy()._createSubscription$4(new E.smokeTest_closure(), null, null, false);
      dirs = t2._project.getDirectories$0();
      P.print("project directories = " + H.S(dirs));
      P.print("project.getPaths() = " + H.S(t2._project.invoke$1("getPaths")));
      dir = J.get$first$ax(dirs);
      E._printEntry(dir);
      E._printEntry(dir.getParent$0());
      children = dir.getEntriesSync$0();
      t3 = J.getInterceptor$ax(children);
      childFile = t3.firstWhere$1(children, new E.smokeTest_closure0());
      E._printFile(childFile);
      E._printFile(dir.getFile$1(childFile.getBaseName$0()));
      childFile.read$0().then$1(new E.smokeTest_closure1(childFile));
      childDir = t3.firstWhere$1(children, new E.smokeTest_closure2());
      E._printEntry(childDir);
      E._printEntry(dir.getSubdirectory$1(childDir.getBaseName$0()));
      P.Future_Future(new E.smokeTest_closure3(), null);
      P.Future_Future$microtask(new E.smokeTest_closure4(), null);
      P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 2), new E.smokeTest_closure5(panel), null);
      t3 = t2._notifications;
      t3.invoke$3("addSuccess", "Hello world from dart-lang!", t3._options$4$description$detail$dismissable$icon(null, null, null, null));
      t3 = t2._notifications;
      t3.invoke$3("addInfo", "Hello world from dart-lang!", t3._options$4$description$detail$dismissable$icon(null, "Foo bar.", null, null));
      t2 = t2._notifications;
      t2.invoke$3("addWarning", "Hello world from dart-lang!", t2._options$4$description$detail$dismissable$icon(null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", null, null));
      E.BufferedProcess_create("pwd", null, null, null, new E.smokeTest_closure6(), new E.smokeTest_closure7(), new E.smokeTest_closure8());
      Z.exec("date", null).then$1(new E.smokeTest_closure9());
      sdk = X.Dependencies_instance().getDependency$1(C.Type_OHH).get$sdk();
      P.print("dart sdk: " + H.S(sdk));
      if (sdk != null) {
        P.print("sdk isValidSdk() = " + sdk.get$isValidSdk());
        sdk.getVersion$0().then$1(new E.smokeTest_closure10());
        vm = sdk.get$dartVm();
        P.print("vm is " + H.S(vm) + ", exists = " + H.S(vm.invoke$1("existsSync")));
      }
      new V.SdkDiscovery().discoverSdk$0().then$1(new E.smokeTest_closure11());
      projects = X.Dependencies_instance().getDependency$1(C.Type_CvJ).get$projects();
      P.print("" + projects.length + " dart projects");
      C.JSArray_methods.forEach$1(projects, P.core__print$closure());
      t2 = $.$get$jobs();
      t2._enqueue$1(new E._TestJob(1, null, "Lorem ipsum dolor", C.Type_chs));
      t2._enqueue$1(new E._TestJob(2, null, "Sit amet consectetur", C.Type_chs));
      t2._enqueue$1(new E._TestJob(3, new E.smokeTest_closure12(), "Adipiscing elit sed", C.Type_chs));
      t2._enqueue$1(new E._TestJob(4, null, "Do eiusmod tempor", C.Type_chs));
      P.print("platform: '" + H.S($.$get$platform()) + "'");
      P.print("isWindows: " + H.S($.$get$isWindows()));
      P.print("isMac: " + H.S($.$get$isMac()));
      P.print("isLinux: " + H.S($.$get$isLinux()));
      t1._captured_timerCount_0 = 0;
      P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 0, 0, 1), new E.smokeTest_closure13(t1));
    },
    _printEntry: function(entry) {
      P.print(H.S(entry) + ":");
      P.print("  entry.isFile() = " + H.S(entry.isFile$0()));
      P.print("  entry.isDirectory() = " + H.S(entry.isDirectory$0()));
      P.print("  entry.existsSync() = " + H.S(entry.existsSync$0()));
      P.print("  entry.getBaseName() = " + H.S(entry.getBaseName$0()));
      P.print("  entry.getPath() = " + H.S(entry.getPath$0()));
      P.print("  entry.getRealPathSync() = " + H.S(entry.getRealPathSync$0()));
    },
    _printFile: function(file) {
      E._printEntry(file);
      P.print("  file.getDigestSync() = " + H.S(file.getDigestSync$0()));
      P.print("  file.getEncoding() = " + H.S(file.getEncoding$0()));
    },
    smokeTest_closure: {
      "^": "Closure:0;",
      call$1: [function(p) {
        return P.print("panel was destroyed");
      }, null, null, 2, 0, null, 35, "call"]
    },
    smokeTest_closure0: {
      "^": "Closure:0;",
      call$1: function(e) {
        return e instanceof E.File;
      }
    },
    smokeTest_closure1: {
      "^": "Closure:0;_captured_childFile_1",
      call$1: [function(contents) {
        return P.print("read " + H.S(this._captured_childFile_1) + " contents");
      }, null, null, 2, 0, null, 37, "call"]
    },
    smokeTest_closure2: {
      "^": "Closure:0;",
      call$1: function(e) {
        return e instanceof E.Directory;
      }
    },
    smokeTest_closure3: {
      "^": "Closure:1;",
      call$0: function() {
        return P.print("futures work ctor");
      }
    },
    smokeTest_closure4: {
      "^": "Closure:1;",
      call$0: function() {
        return P.print("futures work microtask");
      }
    },
    smokeTest_closure5: {
      "^": "Closure:1;_captured_panel_2",
      call$0: function() {
        P.print("futures delayed");
        this._captured_panel_2.invoke$1("destroy");
      }
    },
    smokeTest_closure8: {
      "^": "Closure:0;",
      call$1: [function(str) {
        return P.print("stdout: " + H.S(str));
      }, null, null, 2, 0, null, 10, "call"]
    },
    smokeTest_closure7: {
      "^": "Closure:0;",
      call$1: [function(str) {
        return P.print("stderr: " + H.S(str));
      }, null, null, 2, 0, null, 10, "call"]
    },
    smokeTest_closure6: {
      "^": "Closure:0;",
      call$1: [function(code) {
        return P.print("exit code: " + H.S(code));
      }, null, null, 2, 0, null, 19, "call"]
    },
    smokeTest_closure9: {
      "^": "Closure:0;",
      call$1: [function(str) {
        return P.print("exec date: " + H.S(str));
      }, null, null, 2, 0, null, 10, "call"]
    },
    smokeTest_closure10: {
      "^": "Closure:0;",
      call$1: [function(ver) {
        return P.print("sdk version " + H.S(ver));
      }, null, null, 2, 0, null, 102, "call"]
    },
    smokeTest_closure11: {
      "^": "Closure:4;",
      call$1: [function(foundSdk) {
        P.print("discoverSdk: " + H.S(foundSdk));
      }, null, null, 2, 0, null, 69, "call"]
    },
    smokeTest_closure12: {
      "^": "Closure:1;",
      call$0: function() {
        var t1 = $.$get$atom()._notifications;
        t1.invoke$3("addSuccess", "Hello world from dart-lang!", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
      }
    },
    smokeTest_closure13: {
      "^": "Closure:23;_smoketest$_box_0",
      call$1: function(timer) {
        var t1 = this._smoketest$_box_0;
        P.print("timer " + t1._captured_timerCount_0++);
        if (t1._captured_timerCount_0 >= 3)
          timer.cancel$0();
      }
    },
    _TestJob: {
      "^": "Job;seconds,_smoketest$_infoAction,name,schedulingRule",
      get$infoAction: function() {
        return this._smoketest$_infoAction;
      },
      run$0: function() {
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, this.seconds), null, null);
      }
    }
  }], ["atom.state", "package:atom_dartlang/state.dart",, K, {
    "^": "",
    State: {
      "^": "Object;_state$_map",
      $index: function(_, key) {
        return J.$index$asx(this._state$_map, key);
      },
      $indexSet: function(_, key, value) {
        J.$indexSet$ax(this._state$_map, key, value);
      },
      toMap$0: function() {
        return this._state$_map;
      }
    }
  }], ["atom.status", "package:atom_dartlang/impl/status_display.dart",, E, {
    "^": "",
    StatusDisplay: {
      "^": "Object;_status$_disposables,_status$_subscription,dialog,_statusbarTile,_timer",
      dispose$0: [function() {
        this._status$_subscription.cancel$0();
        this._statusbarTile.invoke$1("destroy");
        this._status$_disposables.dispose$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _showJobsDialog$0: [function() {
        var t1, t2, t3, t4;
        if (this.dialog == null) {
          t1 = new E.JobsDialog(null, null);
          t2 = K.TitledModelDialog$("", "jobs-dialog");
          t1.dialog = t2;
          t2 = t2.content;
          t3 = K.CoreElement$("div", null, "select-list", null);
          t4 = K.CoreElement$("ol", null, "list-group", null);
          t1._listGroup = t4;
          t3.add$1(0, [t4]);
          t2.add$1(0, [t3]);
          this.dialog = t1;
          this._status$_disposables.Disposables__disposables.push(t1);
        }
        this.dialog.dialog._panel.invoke$1("show");
        this.dialog.updateJobsDialog$0();
      }, "call$0", "get$_showJobsDialog", 0, 0, 2],
      StatusDisplay$1: function(statusBar, _box_0) {
        var statusElement, spinner, textLabel, m, t1;
        _box_0._captured_spinner_0 = null;
        _box_0._captured_textLabel_1 = null;
        statusElement = K.CoreElement$("div", null, "job-status-bar", null);
        statusElement.clazz$1("inline-block");
        statusElement.click$1(0, this.get$_showJobsDialog());
        spinner = K.CoreElement$("img", null, null, null);
        spinner.clazz$1("inline-block-tight");
        spinner.clazz$1("status-spinner");
        J.setAttribute$2$x(spinner.element, "src", "atom://dartlang/images/gear.svg");
        _box_0._captured_spinner_0 = spinner;
        textLabel = K.CoreElement$("div", null, "text-label text-highlight", null);
        textLabel.clazz$1("inline-block-tight");
        _box_0._captured_textLabel_1 = textLabel;
        statusElement.add$1(0, [spinner, textLabel]);
        m = P.LinkedHashMap__makeLiteral(["item", statusElement.element]);
        m.$indexSet(0, "priority", 1000);
        this._statusbarTile = new T.Tile(statusBar.invoke$2("addRightTile", m));
        t1 = $.$get$jobs()._jobs$_controller;
        this._status$_subscription = H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(new E.StatusDisplay_closure(_box_0, this, statusElement));
        this._status$_disposables.Disposables__disposables.push($.$get$atom()._commands.add$3(0, "atom-workspace", "dartlang:show-jobs", new E.StatusDisplay_closure0(this)));
      },
      $isDisposable: 1,
      static: {StatusDisplay$: function(statusBar) {
          var t1 = new E.StatusDisplay(new G.Disposables([]), null, null, null, null);
          t1.StatusDisplay$1(statusBar, {});
          return t1;
        }}
    },
    StatusDisplay_closure: {
      "^": "Closure:0;_status$_box_0,_status$_captured_this_1,_captured_statusElement_2",
      call$1: [function(_) {
        var job, showing, t1, t2, t3, t4, t5;
        job = $.$get$jobs().get$activeJob();
        showing = job != null;
        t1 = this._status$_captured_this_1;
        t2 = t1._timer;
        if (t2 != null) {
          t2.cancel$0();
          t1._timer = null;
        }
        t2 = this._status$_box_0;
        t3 = this._captured_statusElement_2;
        if (showing) {
          t4 = t2._captured_textLabel_1;
          t5 = job.get$name(job) + "\u2026";
          J.set$text$x(t4.element, t5);
          J.get$classes$x(t3.element).toggle$2(0, "showing", true);
        } else
          t1._timer = P.Timer_Timer(C.Duration_400000, new E.StatusDisplay__closure(t2, t3));
        J.get$classes$x(t2._captured_textLabel_1.element).toggle$2(0, "showing", showing);
        J.get$classes$x(t2._captured_spinner_0.element).toggle$2(0, "showing", showing);
        t1 = t1.dialog;
        if (t1 != null)
          t1.updateJobsDialog$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    StatusDisplay__closure: {
      "^": "Closure:1;_status$_box_0,_captured_statusElement_3",
      call$0: function() {
        J.set$text$x(this._status$_box_0._captured_textLabel_1.element, "");
        J.get$classes$x(this._captured_statusElement_3.element).toggle$2(0, "showing", false);
      }
    },
    StatusDisplay_closure0: {
      "^": "Closure:0;_status$_captured_this_4",
      call$1: function(_) {
        return this._status$_captured_this_4._showJobsDialog$0();
      }
    },
    JobsDialog: {
      "^": "Object;dialog,_listGroup",
      updateJobsDialog$0: function() {
        var t1, t2, t3, _i, jobInstance, job, item, t4, t5;
        t1 = this.dialog.title;
        t2 = $.$get$jobs()._jobs;
        if (H.setRuntimeTypeInfo(t2.slice(), [H.getTypeArgumentByIndex(t2, 0)]).length === 0)
          t3 = "No running jobs.";
        else {
          t3 = "" + H.setRuntimeTypeInfo(t2.slice(), [H.getTypeArgumentByIndex(t2, 0)]).length + " running ";
          t3 += H.setRuntimeTypeInfo(t2.slice(), [H.getTypeArgumentByIndex(t2, 0)]).length === 1 ? "job" : "jobs";
        }
        J.set$text$x(t1.element, t3);
        J.clear$0$ax(J.get$children$x(this._listGroup.element));
        t1 = H.setRuntimeTypeInfo(t2.slice(), [H.getTypeArgumentByIndex(t2, 0)]);
        t2 = t1.length;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          jobInstance = t1[_i];
          job = jobInstance.get$job();
          item = K.CoreElement$("li", null, "job-container", null);
          t3 = item.element;
          t4 = J.getInterceptor$x(t3);
          t4.setAttribute$2(t3, "layout", "");
          t4.setAttribute$2(t3, "horizontal", "");
          t3 = K.CoreElement$("div", null, null, null);
          if (C.JSString_methods.contains$1("inline-block", " "))
            H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
          t4 = t3.element;
          t5 = J.getInterceptor$x(t4);
          t5.get$classes(t4).add$1(0, "inline-block");
          t3.flex$0(0);
          t5.set$text(t4, jobInstance.get$isRunning() ? job.get$name(job) + "\u2026" : job.get$name(job));
          item.add$1(0, [t3]);
          if (job.get$infoAction() != null) {
            t3 = K.CoreElement$("div", null, "info", null);
            if (C.JSString_methods.contains$1("inline-block", " "))
              H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
            t4 = t3.element;
            t5 = J.getInterceptor$x(t4);
            t5.get$classes(t4).add$1(0, "inline-block");
            t5.get$classes(t4).addAll$1(0, ["icon", "icon-question"]);
            t3.click$1(0, job.get$infoAction());
            item.add$1(0, [t3]);
          }
          if (jobInstance.get$isRunning()) {
            t3 = K.CoreElement$("div", null, "jobs-progress", null);
            if (C.JSString_methods.contains$1("inline-block", " "))
              H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
            J.get$classes$x(t3.element).add$1(0, "inline-block");
            t4 = W._ElementFactoryProvider_createElement_tag("div", null);
            t5 = new K.ProgressElement(null, t4);
            t5.CoreElement$4$attributes$classes$text("div", null, null, null);
            if (C.JSString_methods.contains$1("block", " "))
              H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
            J.get$classes$x(t4).add$1(0, "block");
            t4 = K.CoreElement$("progress", null, null, null);
            if (C.JSString_methods.contains$1("inline-block", " "))
              H.throwExpression(P.ArgumentError$("spaces not allowed in class names"));
            J.get$classes$x(t4.element).add$1(0, "inline-block");
            t5._progress = t5.add$1(0, t4);
            t3.add$1(0, [t5]);
            item.add$1(0, [t3]);
          }
          this._listGroup.add$1(0, item);
        }
      },
      dispose$0: [function() {
        var t1 = this.dialog;
        t1._panel.invoke$1("destroy");
        t1._cancelCommand.invoke$1("dispose");
        return;
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    }
  }], ["atom.statusbar", "package:atom_dartlang/atom_statusbar.dart",, T, {
    "^": "",
    StatusBar: {
      "^": "ProxyHolder;obj"
    },
    Tile: {
      "^": "ProxyHolder;obj"
    }
  }], ["atom.toolbar", "package:atom_dartlang/sky/toolbar.dart",, D, {
    "^": "",
    ToolbarContribution: {
      "^": "Object;_tile",
      dispose$0: [function() {
        return this._tile.invoke$1("destroy");
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    Toolbar: {
      "^": "ProxyHolder;obj",
      addRightTile$2$item$priority: function(item, priority) {
        var m = P.LinkedHashMap__makeLiteral(["item", item]);
        return new D.ToolbarTile(this.invoke$2("addRightTile", m));
      },
      addRightTile$1$item: function(item) {
        return this.addRightTile$2$item$priority(item, null);
      }
    },
    ToolbarTile: {
      "^": "ProxyHolder;obj"
    }
  }], ["atom.type_hierarchy", "package:atom_dartlang/analysis/type_hierarchy.dart",, E, {
    "^": "",
    TypeHierarchyHelper: {
      "^": "Object;_type_hierarchy$_command,_view",
      dispose$0: [function() {
        this._type_hierarchy$_command.invoke$1("dispose");
        var t1 = this._view;
        if (t1 != null)
          t1._panel.invoke$1("destroy");
      }, "call$0", "get$dispose", 0, 0, 2],
      _handleHierarchy$1: [function($event) {
        return this._handleHierarchyEditor$1($event.get$editor());
      }, "call$1", "get$_handleHierarchy", 2, 0, 10],
      _handleHierarchyEditor$1: function(editor) {
        var path, t1, range, offset;
        if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive()) {
          path = editor.invoke$1("getPath");
          t1 = editor.invoke$1("getSelectedBufferRange");
          range = t1 == null ? null : new E.Range(E._cvt(t1));
          offset = new E.TextBuffer(E._cvt(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", new E.Point(E._cvt(J.$index$asx(range.obj, "start"))));
          X.Dependencies_instance().getDependency$1(C.Type_bhC).getTypeHierarchy$2(path, offset).then$1(new E.TypeHierarchyHelper__handleHierarchyEditor_closure(this)).catchError$1(new E.TypeHierarchyHelper__handleHierarchyEditor_closure0(this));
        } else
          $.$get$atom().invoke$1("beep");
      },
      $isDisposable: 1
    },
    TypeHierarchyHelper__handleHierarchyEditor_closure: {
      "^": "Closure:104;_type_hierarchy$_captured_this_0",
      call$1: [function(result) {
        var t1, t2, t3, t4;
        if (result.get$hierarchyItems() == null)
          $.$get$atom().invoke$1("beep");
        else {
          t1 = this._type_hierarchy$_captured_this_0;
          t2 = t1._view;
          if (t2 == null) {
            t2 = new E.TypeHierarchyView(null, null, null, null, null);
            t2.AtomView$3$classes$prefName("Type Hierarchy", "type-hierarchy", "TypeHierarchyView");
            t3 = t2.content;
            t4 = t2.get$_render();
            t4 = new K.ListTreeBuilder(P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), t4, null, P.LinkedHashMap__makeEmpty(), W._ElementFactoryProvider_createElement_tag("div", null));
            t4.CoreElement$4$attributes$classes$text("div", null, "list-tree has-collapsable-children", null);
            t4.flex$0(0);
            t4 = t3.add$1(0, t4);
            t2.treeBuilder = t4;
            J.get$onDoubleClick$x(t4).listen$1(t2.get$_jumpTo());
            t1._view = t2;
            t1 = t2;
          } else
            t1 = t2;
          t1.showHierarchy$1(result);
        }
      }, null, null, 2, 0, null, 1, "call"]
    },
    TypeHierarchyHelper__handleHierarchyEditor_closure0: {
      "^": "Closure:0;_type_hierarchy$_captured_this_1",
      call$1: [function(_) {
        return $.$get$atom().invoke$1("beep");
      }, null, null, 2, 0, null, 0, "call"]
    },
    TypeHierarchyView: {
      "^": "AtomView;treeBuilder,_items,_panel,title,content",
      showHierarchy$1: function(result) {
        var items, t1, item, t2, t3, node, node0, superItem, superNode;
        J.clear$0$ax(this.treeBuilder);
        items = result.get$hierarchyItems();
        this._items = items;
        t1 = J.getInterceptor$ax(items);
        item = t1.get$first(items);
        t2 = item.get$subclasses() != null && J.$gt$n(J.get$length$asx(item.get$subclasses()), 0) === true;
        t3 = [];
        node = new K.Node0(item, t2, t3);
        if (t2)
          for (t2 = J.get$iterator$ax(item.get$subclasses()); t2.moveNext$0();)
            t3.push(this._createChild$2(items, t1.$index(items, t2.get$current())));
        for (node0 = node; item.get$superclass() != null; node0 = superNode, item = superItem) {
          superItem = t1.$index(items, item.get$superclass());
          if (superItem.get$superclass() == null && J.get$isNotEmpty$asx(item.get$interfaces()) === true)
            superItem = t1.$index(items, J.get$first$ax(item.get$interfaces()));
          t2 = [];
          superNode = new K.Node0(superItem, true, t2);
          t2.push(node0);
        }
        this.treeBuilder.addNode$1(node0);
        J.selectNode$1$x(this.treeBuilder, node);
        this._panel.invoke$1("show");
      },
      _createChild$2: function(items, item) {
        var t1, t2, t3, t4, ref;
        t1 = item.get$subclasses() != null && J.$gt$n(J.get$length$asx(item.get$subclasses()), 0) === true;
        t2 = [];
        if (t1)
          for (t3 = J.get$iterator$ax(item.get$subclasses()), t4 = J.getInterceptor$asx(items); t3.moveNext$0();) {
            ref = t3.get$current();
            if (!J.$eq$(t4.$index(items, ref), item))
              t2.push(this._createChild$2(items, t4.$index(items, ref)));
          }
        return new K.Node0(item, t1, t2);
      },
      _jumpTo$1: [function(node) {
        var $location = H.interceptedTypeCast(J.get$data$x(node), "$isTypeHierarchyItem").classElement.location;
        if ($location != null)
          X.Dependencies_instance().getDependency$1(C.Type_25m).jumpToLocation$4($location.file, J.$sub$n($location.startLine, 1), J.$sub$n($location.startColumn, 1), $location.length);
        else
          $.$get$atom().invoke$1("beep");
      }, "call$1", "get$_jumpTo", 2, 0, 15, 21],
      _render$2: [function(item, intoElement) {
        var t1, t2, span;
        t1 = J.$and$n(item.get$classElement().flags, 1);
        t2 = J.$and$n(item.get$classElement().flags, 32);
        span = document.createElement("span", null);
        span.textContent = item.get$displayName() != null ? item.get$displayName() : item.get$classElement().name;
        if (t1 !== 0)
          J.get$classes$x(span).add$1(0, "hierarchy-abstract");
        if (t2 !== 0)
          J.get$classes$x(span).add$1(0, "hierarchy-deprecated");
        t1 = J.getInterceptor$x(intoElement);
        J.add$1$ax(t1.get$children(intoElement), span);
        if (J.get$isNotEmpty$asx(item.get$mixins()) === true || J.get$isNotEmpty$asx(item.get$interfaces()) === true) {
          t2 = J.get$isNotEmpty$asx(item.get$interfaces()) === true ? " " + H.S(J.join$1$ax(J.map$1$ax(item.get$interfaces(), new E.TypeHierarchyView__render_closure(this)), ", ")) : "";
          if (J.get$isNotEmpty$asx(item.get$mixins()) === true)
            t2 = (t2.length !== 0 ? t2 + ", " : t2) + "with " + H.S(J.join$1$ax(J.map$1$ax(item.get$mixins(), new E.TypeHierarchyView__render_closure0(this)), ", "));
          span = document.createElement("span", null);
          span.textContent = t2.charCodeAt(0) == 0 ? t2 : t2;
          J.get$classes$x(span).add$1(0, "hierarchy-muted");
          J.add$1$ax(t1.get$children(intoElement), span);
        }
      }, "call$2", "get$_render", 4, 0, 53]
    },
    TypeHierarchyView__render_closure: {
      "^": "Closure:0;_type_hierarchy$_captured_this_0",
      call$1: [function(i) {
        return J.$index$asx(this._type_hierarchy$_captured_this_0._items, i).get$classElement().name;
      }, null, null, 2, 0, null, 39, "call"]
    },
    TypeHierarchyView__render_closure0: {
      "^": "Closure:0;_type_hierarchy$_captured_this_1",
      call$1: [function(i) {
        return J.$index$asx(this._type_hierarchy$_captured_this_1._items, i).get$classElement().name;
      }, null, null, 2, 0, null, 39, "call"]
    }
  }], ["atom.utils", "package:atom_dartlang/utils.dart",, G, {
    "^": "",
    toStartingLowerCase: function(str) {
      var t1;
      if (str == null)
        return;
      t1 = J.getInterceptor$asx(str);
      if (t1.get$isEmpty(str) === true)
        return str;
      return t1.substring$2(str, 0, 1).toLowerCase() + t1.substring$1(str, 1);
    },
    commas: function(n) {
      var str, len, pos;
      str = H.S(n);
      len = str.length;
      if (len > 3) {
        pos = len - 3;
        return C.JSString_methods.substring$2(str, 0, pos) + "," + C.JSString_methods.substring$1(str, pos);
      } else
        return str;
    },
    listIdentical: function(a, b) {
      var t1, t2, i, _a, _b, t3;
      t1 = J.getInterceptor$asx(a);
      t2 = J.getInterceptor$asx(b);
      if (t1.get$length(a) !== t2.get$length(b))
        return false;
      for (i = 0; i < t1.get$length(a); ++i) {
        _a = t1.$index(a, i);
        _b = t2.$index(b, i);
        t3 = _a == null;
        if (t3 && _b != null)
          return false;
        if (!t3 && _b == null)
          return false;
        if (!J.$eq$(_a, _b))
          return false;
      }
      return true;
    },
    Disposable: {
      "^": "Object;"
    },
    Disposables: {
      "^": "Object;Disposables__disposables",
      add$1: function(_, disposable) {
        return this.Disposables__disposables.push(disposable);
      },
      dispose$0: ["super$Disposables$dispose", function() {
        var t1, t2, _i;
        for (t1 = this.Disposables__disposables, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].dispose$0();
        C.JSArray_methods.set$length(t1, 0);
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    StreamSubscriptions: {
      "^": "Object;_subscriptions",
      add$1: function(_, subscription) {
        return this._subscriptions.push(subscription);
      },
      cancel$0: [function() {
        var t1, t2, _i;
        for (t1 = this._subscriptions, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].cancel$0();
        C.JSArray_methods.set$length(t1, 0);
      }, "call$0", "get$cancel", 0, 0, 2],
      dispose$0: [function() {
        return this.cancel$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    }
  }], ["autocomplete", "package:atom_dartlang/autocomplete.dart",, D, {
    "^": "",
    DartAutocompleteProvider: {
      "^": "AutocompleteProvider;selector,disableForSelector,inclusionPriority,excludeLowerPriority,filterSuggestions",
      getSuggestions$1: function(options) {
        var t1, server, editor, path, text, offset, prefix, m;
        if (!X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive()) {
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1([]);
          return t1;
        }
        server = X.Dependencies_instance().getDependency$1(C.Type_bhC).get$server();
        editor = options.editor;
        path = editor.invoke$1("getPath");
        text = editor.invoke$1("getText");
        offset = new E.TextBuffer(E._cvt(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", options.bufferPosition);
        prefix = options.prefix;
        t1 = J.getInterceptor(prefix);
        if (t1.$eq(prefix, ";")) {
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1([]);
          return t1;
        }
        if (t1.$eq(prefix, "{") || t1.$eq(prefix, "}")) {
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1([]);
          return t1;
        }
        t1 = server.get$completion();
        t1.toString;
        m = P.LinkedHashMap__makeLiteral(["file", path, "offset", offset]);
        return t1.server._call$2("completion.getSuggestions", m).then$1(N.analysis_server_gen_SuggestionsResult_parse$closure()).then$1(new D.DartAutocompleteProvider_getSuggestions_closure(this, server, text, offset, prefix));
      },
      onDidInsertSuggestion$3: function(editor, triggerPosition, suggestion) {
        var requiredImport = J.$index$asx(suggestion, "requiredImport");
        if (requiredImport != null)
          $.$get$_logger11().info$1("TODO: add an import for " + H.S(requiredImport));
      },
      _handleCompletionResults$4: function(fileText, offset, prefix, cr) {
        var results, replacementOffset, t1;
        results = J.get$results$x(cr);
        replacementOffset = cr.get$replacementOffset();
        t1 = J.where$1$ax(results, new D.DartAutocompleteProvider__handleCompletionResults_closure());
        results = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        C.JSArray_methods.sort$1(results, D.autocomplete_DartAutocompleteProvider__compareSuggestions$closure());
        return C.JSArray_methods.map$1(results, new D.DartAutocompleteProvider__handleCompletionResults_closure0(this, fileText, offset, prefix, replacementOffset)).toList$0(0);
      },
      _sanitizeReturnType$1: function(cs) {
        if (cs.get$element() != null && J.$eq$(J.get$kind$x(cs.get$element()), "CONSTRUCTOR"))
          return;
        if (cs.get$parameterType() != null)
          return cs.get$parameterType();
        return cs.get$returnType();
      },
      _mapType$1: function(cs) {
        var t1, t2, elementKind;
        t1 = $.$get$DartAutocompleteProvider__suggestionKindMap();
        t2 = J.getInterceptor$x(cs);
        if (t1.$index(0, t2.get$kind(cs)) != null)
          return t1.$index(0, t2.get$kind(cs));
        if (cs.get$element() == null)
          return;
        elementKind = J.get$kind$x(cs.get$element());
        t1 = $.$get$DartAutocompleteProvider__elementKindMap();
        if (t1.$index(0, elementKind) != null)
          return t1.$index(0, elementKind);
        return;
      },
      _describe$1: function(cs) {
        var element, str;
        if (cs.get$importUri() != null)
          return "Requires '" + H.S(cs.get$importUri()) + "'";
        element = cs.get$element();
        if (element != null && element.get$parameters() != null) {
          str = H.S(J.get$name$x(element)) + H.S(element.get$parameters());
          return element.get$returnType() != null ? str + " \u2192 " + H.S(element.get$returnType()) : str;
        }
        if (cs.get$docSummary() != null)
          return cs.get$docSummary();
        return cs.get$completion();
      },
      _rightLabel$1: function(str) {
        var t1, t2;
        if ($.$get$DartAutocompleteProvider__rightLabelMap().$index(0, str) != null)
          return $.$get$DartAutocompleteProvider__rightLabelMap().$index(0, str);
        t1 = $.$get$DartAutocompleteProvider__rightLabelMap();
        t2 = J.toLowerCase$0$s(str);
        H.checkString(" ");
        t1.$indexSet(0, str, H.stringReplaceAllUnchecked(t2, "_", " "));
        return $.$get$DartAutocompleteProvider__rightLabelMap().$index(0, str);
      },
      static: {DartAutocompleteProvider__compareSuggestions: [function(a, b) {
          if (!J.$eq$(a.get$relevance(), b.get$relevance()))
            return J.$sub$n(b.get$relevance(), a.get$relevance());
          return C.JSString_methods.compareTo$1(J.toLowerCase$0$s(a.get$completion()), J.toLowerCase$0$s(b.get$completion()));
        }, "call$2", "autocomplete_DartAutocompleteProvider__compareSuggestions$closure", 4, 0, 98]}
    },
    DartAutocompleteProvider_getSuggestions_closure: {
      "^": "Closure:0;_autocomplete$_captured_this_0,_captured_server_1,_captured_text_2,_autocomplete$_captured_offset_3,_captured_prefix_4",
      call$1: [function(result) {
        var t1 = this._captured_server_1.get$completion()._listen$2("completion.results", N.analysis_server_gen_CompletionResults_parse$closure());
        t1.toString;
        t1 = H.setRuntimeTypeInfo(new P._WhereStream(new D.DartAutocompleteProvider_getSuggestions__closure(result), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0)]);
        t1 = H.setRuntimeTypeInfo(new P._WhereStream(new D.DartAutocompleteProvider_getSuggestions__closure0(), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0)]);
        return t1.get$first(t1).then$1(new D.DartAutocompleteProvider_getSuggestions__closure1(this._autocomplete$_captured_this_0, this._captured_text_2, this._autocomplete$_captured_offset_3, this._captured_prefix_4));
      }, null, null, 2, 0, null, 1, "call"]
    },
    DartAutocompleteProvider_getSuggestions__closure: {
      "^": "Closure:0;_autocomplete$_captured_result_5",
      call$1: [function(cr) {
        return J.$eq$(J.get$id$x(cr), J.get$id$x(this._autocomplete$_captured_result_5));
      }, null, null, 2, 0, null, 40, "call"]
    },
    DartAutocompleteProvider_getSuggestions__closure0: {
      "^": "Closure:0;",
      call$1: [function(cr) {
        return cr.get$isLast();
      }, null, null, 2, 0, null, 40, "call"]
    },
    DartAutocompleteProvider_getSuggestions__closure1: {
      "^": "Closure:0;_autocomplete$_captured_this_6,_captured_text_7,_captured_offset_8,_captured_prefix_9",
      call$1: [function(r) {
        return this._autocomplete$_captured_this_6._handleCompletionResults$4(this._captured_text_7, this._captured_offset_8, this._captured_prefix_9, r);
      }, null, null, 2, 0, null, 25, "call"]
    },
    DartAutocompleteProvider__handleCompletionResults_closure: {
      "^": "Closure:0;",
      call$1: function(result) {
        return J.$gt$n(result.get$relevance(), 500);
      }
    },
    DartAutocompleteProvider__handleCompletionResults_closure0: {
      "^": "Closure:54;_autocomplete$_captured_this_1,_captured_fileText_2,_autocomplete$_captured_offset_3,_captured_prefix_4,_captured_replacementOffset_5",
      call$1: [function(cs) {
        var t1, text, snippet, names, _prefix, t2, potential, t3, t4, t5;
        t1 = {};
        text = cs.get$completion();
        if (cs.get$parameterNames() != null)
          if (J.get$isEmpty$asx(cs.get$parameterNames()) === true) {
            text = J.$add$ns(text, "()");
            snippet = null;
          } else {
            if (cs.get$requiredParameterCount() != null && J.$gt$n(cs.get$requiredParameterCount(), 0) === true) {
              t1._captured_count_0 = 0;
              names = J.join$1$ax(J.map$1$ax(J.take$1$ax(cs.get$parameterNames(), cs.get$requiredParameterCount()), new D.DartAutocompleteProvider__handleCompletionResults__closure(t1)), ", ");
              snippet = H.S(cs.get$completion()) + "(" + H.S(names) + ")$" + ++t1._captured_count_0;
            } else
              snippet = H.S(cs.get$completion()) + "($1)$2";
            text = null;
          }
        else
          snippet = null;
        _prefix = this._captured_prefix_4;
        t1 = this._captured_replacementOffset_5;
        t2 = this._autocomplete$_captured_offset_3;
        if (J.$lt$n(t1, t2) === true)
          _prefix = J.substring$2$s(this._captured_fileText_2, t1, t2);
        potential = cs.get$isPotential() === true || cs.get$importUri() != null;
        t1 = this._autocomplete$_captured_this_1;
        t2 = t1._mapType$1(cs);
        t3 = t1._sanitizeReturnType$1(cs);
        t4 = t1._rightLabel$1(cs.get$element() != null ? J.get$kind$x(cs.get$element()) : J.get$kind$x(cs));
        if (cs.get$isDeprecated() === true)
          t5 = "suggestion-deprecated";
        else
          t5 = potential ? "suggestion-potential" : null;
        return new X.Suggestion(text, snippet, null, _prefix, t2, t3, null, t4, null, t5, null, t1._describe$1(cs), null, cs.get$importUri());
      }, null, null, 2, 0, null, 72, "call"]
    },
    DartAutocompleteProvider__handleCompletionResults__closure: {
      "^": "Closure:0;_autocomplete$_box_0",
      call$1: [function($name) {
        return "${" + ++this._autocomplete$_box_0._captured_count_0 + ":" + H.S($name) + "}";
      }, null, null, 2, 0, null, 41, "call"]
    }
  }], ["buffer.observer", "package:atom_dartlang/buffer/buffer_observer.dart",, N, {
    "^": "",
    BufferObserverManager: {
      "^": "Object;observers",
      _newEditor$1: [function(editor) {
        var t1, t2, t3, t4, t5;
        t1 = this.observers;
        t2 = [];
        t3 = new N.BufferUpdater(new G.StreamSubscriptions(t2), null, editor, this, []);
        t2.push(X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActiveProperty().listen$1(t3.get$serverActive()));
        t4 = editor.get$onDidChange();
        t5 = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t5._frappe$_controller = t5._createControllerForStream$1(t4);
        t5 = t5.super$Stream$transform(t5, new K.Debounce(P.Duration$(0, 0, 0, 10, 0, 0)));
        t4 = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t4._frappe$_controller = t4._createControllerForStream$1(t5);
        t5 = t3.get$_didChange();
        t4 = t4._frappe$_controller;
        t2.push(t4.get$stream(t4).listen$4$cancelOnError$onDone$onError(t5, null, null, null));
        t2.push(editor.get$onDidDestroy().listen$1(t3.get$_didDestroy()));
        t3.addOverlay$0();
        t1.push(t3);
        t1.push(N.BufferFormatter$(this, editor));
      }, "call$1", "get$_newEditor", 2, 0, 8, 13],
      dispose$0: [function() {
        var t1, t2;
        t1 = this.observers;
        t2 = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        C.JSArray_methods.forEach$1(t2, new N.BufferObserverManager_dispose_closure());
        C.JSArray_methods.set$length(t1, 0);
      }, "call$0", "get$dispose", 0, 0, 2],
      $isDisposable: 1
    },
    BufferObserverManager_dispose_closure: {
      "^": "Closure:0;",
      call$1: function(obs) {
        return obs.dispose$0();
      }
    },
    BufferObserver: {
      "^": "Disposables;",
      $isDisposable: 1
    },
    BufferFormatter: {
      "^": "BufferObserver;_subs,isFormatting,editor,manager,Disposables__disposables",
      dispose$0: [function() {
        this._subs.cancel$0();
        C.JSArray_methods.remove$1(this.manager.observers, this);
      }, "call$0", "get$dispose", 0, 0, 2],
      BufferFormatter$2: function(manager, editor) {
        var t1, t2;
        t1 = this.editor;
        t2 = this._subs._subscriptions;
        t2.push(t1.get$onDidSave().listen$1(new N.BufferFormatter_closure(this, editor)));
        t2.push(t1.get$onDidDestroy().listen$1(new N.BufferFormatter_closure0(this)));
      },
      static: {BufferFormatter$: function(manager, editor) {
          var t1 = new N.BufferFormatter(new G.StreamSubscriptions([]), false, editor, manager, []);
          t1.BufferFormatter$2(manager, editor);
          return t1;
        }}
    },
    BufferFormatter_closure: {
      "^": "Closure:0;_observer$_captured_this_0,_captured_editor_1",
      call$1: [function(_) {
        var t1, t2;
        t1 = this._observer$_captured_this_0;
        if (t1.isFormatting)
          return;
        if ($.$get$atom()._config.getValue$1("dartlang.formatOnSave") !== true)
          return;
        if (!X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive())
          return;
        if (X.Dependencies_instance().getDependency$1(C.Type_CvJ).getProjectFor$1(t1.editor.getPath$0()) == null)
          return;
        t1.isFormatting = true;
        t2 = this._captured_editor_1;
        F.FormattingHelper_formatEditor(t2).then$1(new N.BufferFormatter__closure(t1, t2));
      }, null, null, 2, 0, null, 0, "call"]
    },
    BufferFormatter__closure: {
      "^": "Closure:0;_observer$_captured_this_2,_captured_editor_3",
      call$1: [function(didFormat) {
        if (didFormat === true)
          this._captured_editor_3.save$0();
        P.Timer_Timer(P.Duration$(0, 0, 0, 10, 0, 0), new N.BufferFormatter___closure(this._observer$_captured_this_2));
      }, null, null, 2, 0, null, 74, "call"]
    },
    BufferFormatter___closure: {
      "^": "Closure:1;_captured_this_4",
      call$0: function() {
        this._captured_this_4.isFormatting = false;
        return false;
      }
    },
    BufferFormatter_closure0: {
      "^": "Closure:0;_captured_this_5",
      call$1: [function(_) {
        var t1 = this._captured_this_5;
        t1._subs.cancel$0();
        C.JSArray_methods.remove$1(t1.manager.observers, t1);
      }, null, null, 2, 0, null, 0, "call"]
    },
    BufferUpdater: {
      "^": "BufferObserver;_subs,lastSent,editor,manager,Disposables__disposables",
      get$server: function() {
        return X.Dependencies_instance().getDependency$1(C.Type_bhC).get$server();
      },
      serverActive$1: [function(active) {
        if (active === true)
          this.addOverlay$0();
        else
          this.lastSent = null;
      }, "call$1", "get$serverActive", 2, 0, 55, 75],
      _didChange$1: [function(_) {
        var t1, contents, t2, t3;
        if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive() && X.Dependencies_instance().getDependency$1(C.Type_CvJ).getProjectFor$1(this.editor.getPath$0()) != null)
          if (this.lastSent == null)
            this.addOverlay$0();
          else {
            t1 = this.editor;
            contents = t1.getText$0();
            t2 = X.Dependencies_instance().getDependency$1(C.Type_bhC).get$server().get$analysis();
            t3 = P.LinkedHashMap__makeLiteral([t1.getPath$0(), new N.RemoveContentOverlay("remove")]);
            t2.toString;
            t3 = P.LinkedHashMap__makeLiteral(["files", t3]);
            t2.server._call$2("analysis.updateContent", t3);
            t3 = X.Dependencies_instance().getDependency$1(C.Type_bhC).get$server().get$analysis();
            t1 = P.LinkedHashMap__makeLiteral([t1.getPath$0(), new N.AddContentOverlay("add", contents)]);
            t3.toString;
            t1 = P.LinkedHashMap__makeLiteral(["files", t1]);
            t3.server._call$2("analysis.updateContent", t1);
            this.lastSent = contents;
          }
      }, function() {
        return this._didChange$1(null);
      }, "_didChange$0", "call$1", "call$0", "get$_didChange", 0, 2, 14, 4, 0],
      _didDestroy$1: [function(_) {
        this.dispose$0();
      }, function() {
        return this._didDestroy$1(null);
      }, "_didDestroy$0", "call$1", "call$0", "get$_didDestroy", 0, 2, 14, 4, 0],
      addOverlay$0: function() {
        var t1, t2, t3;
        if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive() && X.Dependencies_instance().getDependency$1(C.Type_CvJ).getProjectFor$1(this.editor.getPath$0()) != null) {
          t1 = this.editor;
          this.lastSent = t1.getText$0();
          t2 = X.Dependencies_instance().getDependency$1(C.Type_bhC).get$server().get$analysis();
          t3 = this.lastSent;
          t3 = P.LinkedHashMap__makeLiteral([t1.getPath$0(), new N.AddContentOverlay("add", t3)]);
          t2.toString;
          t3 = P.LinkedHashMap__makeLiteral(["files", t3]);
          t2.server._call$2("analysis.updateContent", t3);
        }
      },
      dispose$0: [function() {
        var t1, t2;
        if (X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive() && X.Dependencies_instance().getDependency$1(C.Type_CvJ).getProjectFor$1(this.editor.getPath$0()) != null) {
          t1 = X.Dependencies_instance().getDependency$1(C.Type_bhC).get$server().get$analysis();
          t2 = P.LinkedHashMap__makeLiteral([this.editor.getPath$0(), new N.RemoveContentOverlay("remove")]);
          t1.toString;
          t2 = P.LinkedHashMap__makeLiteral(["files", t2]);
          t1.server._call$2("analysis.updateContent", t2);
        }
        this.lastSent = null;
        this.super$Disposables$dispose();
        this._subs.cancel$0();
        C.JSArray_methods.remove$1(this.manager.observers, this);
      }, "call$0", "get$dispose", 0, 0, 1]
    }
  }], ["core.dependencies", "package:atom_dartlang/dependencies.dart",, X, {
    "^": "",
    Dependencies: {
      "^": "Object;_instances",
      get$parent: function(_) {
        return this._calcParent$1($.Zone__current);
      },
      getDependency$1: function(type) {
        var t1, $parent;
        t1 = this._instances;
        if (t1.containsKey$1(type))
          return t1.$index(0, type);
        $parent = this._calcParent$1($.Zone__current);
        return $parent != null ? $parent.getDependency$1(type) : null;
      },
      $index: function(_, type) {
        return this.getDependency$1(type);
      },
      $indexSet: function(_, type, instance) {
        this._instances.$indexSet(0, type, instance);
        return;
      },
      _calcParent$1: function(zone) {
        var t1 = $.Dependencies__global;
        if (this === t1)
          return;
        zone.toString;
        return t1;
      },
      static: {Dependencies_instance: function() {
          $.Zone__current.toString;
          return $.Dependencies__global;
        }}
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort__doSort: function(a, left, right, compare) {
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare);
    },
    Sort__insertionSort: function(a, left, right, compare) {
      var i, t1, el, j, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0) === true))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0) === true) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0) === true) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0) === true) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0) === true) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0) === true) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          t2 = J.getInterceptor(comp);
          if (t2.$eq(comp, 0))
            continue;
          if (t2.$lt(comp, 0) === true) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              t2 = J.getInterceptor$n(comp);
              if (t2.$gt(comp, 0) === true) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (t2.$lt(comp, 0) === true) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (J.$lt$n(compare.call$2(ak, el2), 0) === true) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (J.$gt$n(compare.call$2(ak, el4), 0) === true)
            for (; true;)
              if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0) === true) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0) === true) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare);
      H.Sort__doSort(a, great + 2, right, compare);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (J.$eq$(compare.call$2(ak, el2), 0)) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (J.$eq$(compare.call$2(ak, el4), 0))
            for (; true;)
              if (J.$eq$(compare.call$2(t1.$index(a, great), el4), 0)) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0) === true) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare);
      } else
        H.Sort__doSort(a, less, great, compare);
    },
    ListIterable: {
      "^": "Iterable;",
      get$iterator: function(_) {
        return new H.ListIterator(this, this.get$length(this), 0, null);
      },
      forEach$1: function(_, action) {
        var $length, i;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          action.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return J.$eq$(this.get$length(this), 0);
      },
      get$first: function(_) {
        if (J.$eq$(this.get$length(this), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.elementAt$1(0, 0);
      },
      get$last: function(_) {
        if (J.$eq$(this.get$length(this), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.elementAt$1(0, J.$sub$n(this.get$length(this), 1));
      },
      contains$1: function(_, element) {
        var $length, i;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          if (J.$eq$(this.elementAt$1(0, i), element))
            return true;
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return false;
      },
      join$1: function(_, separator) {
        var $length, t1, first, buffer, i;
        $length = this.get$length(this);
        if (separator.length !== 0) {
          t1 = J.getInterceptor($length);
          if (t1.$eq($length, 0))
            return "";
          first = H.S(this.elementAt$1(0, 0));
          if (!t1.$eq($length, this.get$length(this)))
            throw H.wrapException(new P.ConcurrentModificationError(this));
          buffer = new P.StringBuffer(first);
          if (typeof $length !== "number")
            return H.iae($length);
          i = 1;
          for (; i < $length; ++i) {
            buffer._contents += separator;
            buffer._contents += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(new P.ConcurrentModificationError(this));
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else {
          buffer = new P.StringBuffer("");
          if (typeof $length !== "number")
            return H.iae($length);
          i = 0;
          for (; i < $length; ++i) {
            buffer._contents += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(new P.ConcurrentModificationError(this));
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      },
      where$1: function(_, test) {
        return this.super$Iterable$where(this, test);
      },
      map$1: function(_, f) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
      },
      take$1: function(_, count) {
        return H.SubListIterable$(this, 0, count, H.getRuntimeTypeArgument(this, "ListIterable", 0));
      },
      toList$1$growable: function(_, growable) {
        var result, t1, i;
        if (growable) {
          result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
          C.JSArray_methods.set$length(result, this.get$length(this));
        } else {
          t1 = this.get$length(this);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = Array(t1);
          t1.fixed$length = Array;
          result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        }
        i = 0;
        while (true) {
          t1 = this.get$length(this);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.elementAt$1(0, i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
          ++i;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      $isEfficientLength: 1
    },
    SubListIterable: {
      "^": "ListIterable;_iterable,__internal$_start,_endOrLength",
      get$_endIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._endOrLength;
        if (t1 == null || J.$gt$n(t1, $length) === true)
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this.__internal$_start;
        if (typeof $length !== "number")
          return H.iae($length);
        if (t1 > $length)
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2;
        $length = J.get$length$asx(this._iterable);
        t1 = this.__internal$_start;
        if (typeof $length !== "number")
          return H.iae($length);
        if (t1 >= $length)
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || J.$ge$n(t2, $length) === true)
          return $length - t1;
        return J.$sub$n(t2, t1);
      },
      elementAt$1: function(_, index) {
        var realIndex = J.$add$ns(this.get$_startIndex(), index);
        if (J.$lt$n(index, 0) === true || J.$ge$n(realIndex, this.get$_endIndex()) === true)
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return J.elementAt$1$ax(this._iterable, realIndex);
      },
      take$1: function(_, count) {
        var t1, t2, newEnd;
        if (J.$lt$n(count, 0) === true)
          H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
        t1 = this._endOrLength;
        t2 = this.__internal$_start;
        if (t1 == null) {
          if (typeof count !== "number")
            return H.iae(count);
          return H.SubListIterable$(this._iterable, t2, t2 + count, H.getTypeArgumentByIndex(this, 0));
        } else {
          if (typeof count !== "number")
            return H.iae(count);
          newEnd = t2 + count;
          if (J.$lt$n(t1, newEnd) === true)
            return this;
          return H.SubListIterable$(this._iterable, t2, newEnd, H.getTypeArgumentByIndex(this, 0));
        }
      },
      toList$1$growable: function(_, growable) {
        var start, t1, t2, end, end0, $length, result, t3, i;
        start = this.__internal$_start;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        end = t2.get$length(t1);
        end0 = this._endOrLength;
        if (end0 != null && J.$lt$n(end0, end) === true)
          end = end0;
        $length = J.$sub$n(end, start);
        if (J.$lt$n($length, 0) === true)
          $length = 0;
        if (growable) {
          result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
          C.JSArray_methods.set$length(result, $length);
        } else {
          if (typeof $length !== "number")
            return H.iae($length);
          t3 = Array($length);
          t3.fixed$length = Array;
          result = H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(this, 0)]);
        }
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          t3 = t2.elementAt$1(t1, start + i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t3;
          if (J.$lt$n(t2.get$length(t1), end) === true)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
        var t1, t2;
        t1 = this.__internal$_start;
        if (t1 < 0)
          H.throwExpression(P.RangeError$range(t1, 0, null, "start", null));
        t2 = this._endOrLength;
        if (t2 != null) {
          if (J.$lt$n(t2, 0) === true)
            H.throwExpression(P.RangeError$range(t2, 0, null, "end", null));
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 > t2)
            throw H.wrapException(P.RangeError$range(t1, 0, t2, "start", null));
        }
      },
      static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
          t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
          return t1;
        }}
    },
    ListIterator: {
      "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (!J.$eq$(this.__internal$_length, $length))
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t3 = this._index;
        if (typeof $length !== "number")
          return H.iae($length);
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this._index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this._iterable);
      },
      get$first: function(_) {
        return this._f$1(J.get$first$ax(this._iterable));
      },
      get$last: function(_) {
        return this._f$1(J.get$last$ax(this._iterable));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          if (!!J.getInterceptor(iterable).$isEfficientLength)
            return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
          return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
        }}
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f",
      $isEfficientLength: 1
    },
    MappedIterator: {
      "^": "Iterator;__internal$_current,_iterator,_f",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f$1(J.elementAt$1$ax(this._source, index));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      $isEfficientLength: 1
    },
    WhereIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f",
      moveNext$0: function() {
        for (var t1 = this._iterator; t1.moveNext$0();)
          if (this._f$1(t1.get$current()) === true)
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      }
    },
    ExpandIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        return new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
      },
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    ExpandIterator: {
      "^": "Object;_iterator,_f,_currentExpansion,__internal$_current",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2;
        t1 = this._currentExpansion;
        if (t1 == null)
          return false;
        for (t2 = this._iterator; !t1.moveNext$0();) {
          this.__internal$_current = null;
          if (t2.moveNext$0()) {
            this._currentExpansion = null;
            t1 = J.get$iterator$ax(this._f$1(t2.get$current()));
            this._currentExpansion = t1;
          } else
            return false;
        }
        this.__internal$_current = this._currentExpansion.get$current();
        return true;
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      }
    },
    TakeIterable: {
      "^": "Iterable;_iterable,_takeCount",
      get$iterator: function(_) {
        var t1 = new H.TakeIterator(J.get$iterator$ax(this._iterable), this._takeCount);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      static: {TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
          if (typeof takeCount !== "number" || Math.floor(takeCount) !== takeCount || takeCount < 0)
            throw H.wrapException(P.ArgumentError$(takeCount));
          if (!!J.getInterceptor(iterable).$isEfficientLength)
            return H.setRuntimeTypeInfo(new H.EfficientLengthTakeIterable(iterable, takeCount), [$E]);
          return H.setRuntimeTypeInfo(new H.TakeIterable(iterable, takeCount), [$E]);
        }}
    },
    EfficientLengthTakeIterable: {
      "^": "TakeIterable;_iterable,_takeCount",
      get$length: function(_) {
        var iterableLength, t1;
        iterableLength = J.get$length$asx(this._iterable);
        t1 = this._takeCount;
        if (J.$gt$n(iterableLength, t1) === true)
          return t1;
        return iterableLength;
      },
      $isEfficientLength: 1
    },
    TakeIterator: {
      "^": "Iterator;_iterator,_remaining",
      moveNext$0: function() {
        var t1 = J.$sub$n(this._remaining, 1);
        this._remaining = t1;
        if (J.$ge$n(t1, 0) === true)
          return this._iterator.moveNext$0();
        this._remaining = -1;
        return false;
      },
      get$current: function() {
        if (J.$lt$n(this._remaining, 0) === true)
          return;
        return this._iterator.get$current();
      }
    },
    TakeWhileIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.TakeWhileIterator(J.get$iterator$ax(this._iterable), this._f, false);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
    },
    TakeWhileIterator: {
      "^": "Iterator;_iterator,_f,_isFinished",
      moveNext$0: function() {
        if (this._isFinished)
          return false;
        var t1 = this._iterator;
        if (!t1.moveNext$0() || this._f$1(t1.get$current()) !== true) {
          this._isFinished = true;
          return false;
        }
        return true;
      },
      get$current: function() {
        if (this._isFinished)
          return;
        return this._iterator.get$current();
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      }
    },
    SkipIterable: {
      "^": "Iterable;_iterable,_skipCount",
      get$iterator: function(_) {
        var t1 = new H.SkipIterator(J.get$iterator$ax(this._iterable), this._skipCount);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      SkipIterable$_$2: function(_iterable, _skipCount, $E) {
        var t1 = this._skipCount;
        if (t1 < 0)
          H.throwExpression(P.RangeError$range(t1, 0, null, "count", null));
      },
      static: {SkipIterable_SkipIterable: function(iterable, count, $E) {
          var t1;
          if (!!J.getInterceptor(iterable).$isEfficientLength) {
            t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, count), [$E]);
            t1.SkipIterable$_$2(iterable, count, $E);
            return t1;
          }
          return H.SkipIterable$_(iterable, count, $E);
        }, SkipIterable$_: function(_iterable, _skipCount, $E) {
          var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
          t1.SkipIterable$_$2(_iterable, _skipCount, $E);
          return t1;
        }}
    },
    EfficientLengthSkipIterable: {
      "^": "SkipIterable;_iterable,_skipCount",
      get$length: function(_) {
        var $length = J.$sub$n(J.get$length$asx(this._iterable), this._skipCount);
        if (J.$ge$n($length, 0) === true)
          return $length;
        return 0;
      },
      $isEfficientLength: 1
    },
    SkipIterator: {
      "^": "Iterator;_iterator,_skipCount",
      moveNext$0: function() {
        var t1, i;
        for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
          t1.moveNext$0();
        this._skipCount = 0;
        return t1.moveNext$0();
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    SkipWhileIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.SkipWhileIterator(J.get$iterator$ax(this._iterable), this._f, false);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
    },
    SkipWhileIterator: {
      "^": "Iterator;_iterator,_f,_hasSkipped",
      moveNext$0: function() {
        if (!this._hasSkipped) {
          this._hasSkipped = true;
          for (var t1 = this._iterator; t1.moveNext$0();)
            if (this._f$1(t1.get$current()) !== true)
              return true;
        }
        return this._iterator.moveNext$0();
      },
      get$current: function() {
        return this._iterator.get$current();
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      }
    },
    EmptyIterator: {
      "^": "Object;",
      moveNext$0: function() {
        return false;
      },
      get$current: function() {
        return;
      }
    },
    FixedLengthListMixin: {
      "^": "Object;",
      set$length: function(receiver, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of a fixed-length list"));
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      remove$1: function(receiver, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      },
      clear$0: function(receiver) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear a fixed-length list"));
      }
    },
    Symbol0: {
      "^": "Object;__internal$_name<",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.Symbol0 && J.$eq$(this.__internal$_name, other.__internal$_name);
      },
      get$hashCode: function(_) {
        var t1 = J.get$hashCode$(this.__internal$_name);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return 536870911 & 664597 * t1;
      },
      toString$0: function(_) {
        return "Symbol(\"" + H.S(this.__internal$_name) + "\")";
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
      t1.fixed$length = Array;
      return t1;
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1._captured_storedCallback_0 = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 11],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 11],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 11],
    _registerErrorHandler: function(errorHandler, zone) {
      var t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
      if (t1) {
        zone.toString;
        return errorHandler;
      } else {
        zone.toString;
        return errorHandler;
      }
    },
    Future_Future: function(computation, $T) {
      var result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T]);
      P.Timer_Timer(C.Duration_0, new P.Future_Future_closure(computation, result));
      return result;
    },
    Future_Future$microtask: function(computation, $T) {
      var result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T]);
      P.scheduleMicrotask(new P.Future_Future$microtask_closure(computation, result));
      return result;
    },
    Future_Future$sync: function(computation, $T) {
      var result, error, stackTrace, t1, exception;
      try {
        result = computation.call$0();
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [$T];
        t1._asyncComplete$1(result);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        error = t1;
        stackTrace = H.getTraceFromException(exception);
        return P.Future_Future$error(error, stackTrace, $T);
      }
    },
    Future_Future$value: function(value, $T) {
      var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T]);
      t1._asyncComplete$1(value);
      return t1;
    },
    Future_Future$error: function(error, stackTrace, $T) {
      var t1;
      error = error != null ? error : new P.NullThrownError();
      t1 = $.Zone__current;
      if (t1 !== C.C__RootZone)
        t1.toString;
      t1 = H.setRuntimeTypeInfo(new P._Future(0, t1, null), [$T]);
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_Future$delayed: function(duration, computation, $T) {
      var result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T]);
      P.Timer_Timer(duration, new P.Future_Future$delayed_closure(computation, result));
      return result;
    },
    Future_wait: function(futures, cleanUp, eagerError) {
      var t1, result, t2, t3, t4, values;
      t1 = {};
      result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.List]);
      t1._captured_values_0 = null;
      t1._captured_remaining_1 = 0;
      t1._captured_error_2 = null;
      t1._captured_stackTrace_3 = null;
      t2 = new P.Future_wait_handleError(t1, eagerError, cleanUp, result);
      for (t3 = H.setRuntimeTypeInfo(new H.WhereIterator(J.get$iterator$ax(futures._iterable), futures._f), [H.getTypeArgumentByIndex(futures, 0)]), t4 = t3._iterator; t3.moveNext$0();)
        t4.get$current().then$2$onError(new P.Future_wait_closure(t1, eagerError, cleanUp, result, t1._captured_remaining_1++), t2);
      t2 = t1._captured_remaining_1;
      if (t2 === 0) {
        t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1._asyncComplete$1(C.List_empty);
        return t1;
      }
      values = Array(t2);
      values.fixed$length = Array;
      t1._captured_values_0 = values;
      return result;
    },
    Future_forEach: function(input, f) {
      return P.Future_doWhile(new P.Future_forEach_closure(f, J.get$iterator$ax(input)));
    },
    Future_doWhile: function(f) {
      var t1, doneSignal, nextIteration;
      t1 = {};
      doneSignal = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._captured_nextIteration_0 = null;
      nextIteration = $.Zone__current.bindUnaryCallback$2$runGuarded(new P.Future_doWhile_closure(t1, f, doneSignal), true);
      t1._captured_nextIteration_0 = nextIteration;
      nextIteration.call$1(true);
      return doneSignal;
    },
    Completer_Completer: function($T) {
      return H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T])), [$T]);
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      $.Zone__current.toString;
      result._completeError$2(error, stackTrace);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.get$next();
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        $.Zone__current = t1.get$zone();
        t1.callback$0();
      }
    },
    _microtaskLoopEntry: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $.Zone__current = C.C__RootZone;
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun_scheduleImmediateClosure().call$1(P.async___microtaskLoopEntry$closure());
      }
    }, "call$0", "async___microtaskLoopEntry$closure", 0, 0, 2],
    _scheduleAsyncCallback: function(newEntry) {
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun_scheduleImmediateClosure().call$1(P.async___microtaskLoopEntry$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone, t1;
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      if (C.C__RootZone.get$errorZone() === currentZone) {
        P._rootScheduleMicrotask(null, null, currentZone, callback);
        return;
      }
      t1 = $.Zone__current;
      P._rootScheduleMicrotask(null, null, t1, t1.bindCallback$2$runGuarded(callback, true));
    },
    Stream_Stream$fromIterable: function(data, $T) {
      return H.setRuntimeTypeInfo(new P._GeneratedStreamImpl(new P.Stream_Stream$fromIterable_closure($T, data), false), [$T]);
    },
    Stream_Stream$periodic: function(period, computation, $T) {
      var t1, watch, t2, t3, controller;
      t1 = {};
      t1._captured_computation_0 = computation;
      t1._captured_timer_1 = null;
      t1._captured_computationCount_2 = 0;
      t1._captured_controller_3 = null;
      watch = new P.Stopwatch(null, null);
      H.Primitives_initTicker();
      $.Stopwatch__frequency = $.Primitives_timerFrequency;
      t2 = new P.Stream_Stream$periodic_sendEvent(t1, watch);
      t3 = new P.Stream_Stream$periodic_startPeriodicTimer(t1, period, t2);
      controller = P.StreamController_StreamController(new P.Stream_Stream$periodic_closure(t1), new P.Stream_Stream$periodic_closure0(watch, t3), new P.Stream_Stream$periodic_closure1(t1, watch), new P.Stream_Stream$periodic_closure2(t1, period, watch, t2, t3), true, $T);
      t1._captured_controller_3 = controller;
      return H.setRuntimeTypeInfo(new P._ControllerStream(controller), [H.getTypeArgumentByIndex(controller, 0)]);
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      var t1, t2, t3;
      t1 = H.setRuntimeTypeInfo(new P._StreamIteratorImpl(null, null, null, 0), [$T]);
      t2 = t1.get$_async$_onData();
      t3 = t1.get$_onError();
      t1._subscription = stream.listen$4$cancelOnError$onDone$onError(t2, true, t1.get$_onDone(), t3);
      return t1;
    },
    StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
      return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(null, 0, null, onListen, onPause, onResume, onCancel), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(null, 0, null, onListen, onPause, onResume, onCancel), [$T]);
    },
    StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
      var t1;
      if (sync) {
        t1 = H.setRuntimeTypeInfo(new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
        t1._async$_previous = t1;
        t1._async$_next = t1;
      } else {
        t1 = H.setRuntimeTypeInfo(new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
        t1._async$_previous = t1;
        t1._async$_next = t1;
      }
      return t1;
    },
    _runGuarded: function(notificationHandler) {
      var result, e, s, exception, t1;
      if (notificationHandler == null)
        return;
      try {
        result = notificationHandler.call$0();
        if (!!J.getInterceptor(result).$isFuture)
          return result;
        return;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        t1 = $.Zone__current;
        t1.toString;
        P._rootHandleUncaughtError(null, null, t1, e, s);
      }
    },
    _AddStreamState_makeErrorHandler: function(controller) {
      return new P._AddStreamState_makeErrorHandler_closure(controller);
    },
    _nullErrorHandler: [function(error, stackTrace) {
      var t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
    }, function(error) {
      return P._nullErrorHandler(error, null);
    }, "call$2", "call$1", "async___nullErrorHandler$closure", 2, 2, 25, 4, 5, 6],
    _nullDoneHandler: [function() {
    }, "call$0", "async___nullDoneHandler$closure", 0, 0, 2],
    _runUserCode: function(userCode, onSuccess, onError) {
      var e, s, replacement, error, stackTrace, exception, t1;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          t1 = J.get$error$x(replacement);
          error = t1;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorWithReplacement: function(subscription, future, error, stackTrace) {
      $.Zone__current.toString;
      P._cancelAndError(subscription, future, error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      $.Zone__current.toString;
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone) {
        t1.toString;
        return P.Timer__createTimer(duration, callback);
      }
      return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
    },
    Timer_Timer$periodic: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone) {
        t1.toString;
        return P.Timer__createPeriodicTimer(duration, callback);
      }
      return P.Timer__createPeriodicTimer(duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer: function(duration, callback) {
      var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Zone__enter: function(zone) {
      var previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var entry, t1, t2;
      entry = new P._AsyncCallbackEntry(new P._rootHandleUncaughtError_closure(error, stackTrace), C.C__RootZone, null);
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(entry);
        $._lastPriorityCallback = $._lastCallback;
      } else {
        t2 = $._lastPriorityCallback;
        if (t2 == null) {
          entry.next = t1;
          $._lastPriorityCallback = entry;
          $._nextCallback = entry;
        } else {
          entry.next = t2.next;
          t2.next = entry;
          $._lastPriorityCallback = entry;
          if (entry.next == null)
            $._lastCallback = entry;
        }
      }
    },
    _rootRun: function($self, $parent, zone, f) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
      var old, t1;
      if ($.Zone__current === zone)
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1 = C.C__RootZone !== zone;
      if (t1) {
        f = zone.bindCallback$2$runGuarded(f, !(!t1 || C.C__RootZone.get$errorZone() === zone));
        zone = C.C__RootZone;
      }
      P._scheduleAsyncCallback(new P._AsyncCallbackEntry(f, zone, null));
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:0;_async$_box_0",
      call$1: [function(_) {
        var t1, f;
        H.leaveJsAsync();
        t1 = this._async$_box_0;
        f = t1._captured_storedCallback_0;
        t1._captured_storedCallback_0 = null;
        f.call$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:56;_async$_box_0,_captured_div_1,_captured_span_2",
      call$1: function(callback) {
        var t1, t2;
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._async$_box_0._captured_storedCallback_0 = callback;
        t1 = this._captured_div_1;
        t2 = this._captured_span_2;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:1;_captured_callback_0",
      call$0: [function() {
        H.leaveJsAsync();
        this._captured_callback_0.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:1;_captured_callback_0",
      call$0: [function() {
        H.leaveJsAsync();
        this._captured_callback_0.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _UncaughtAsyncError: {
      "^": "AsyncError;error,stackTrace",
      toString$0: function(_) {
        var result, t1;
        result = "Uncaught Error: " + H.S(this.error);
        t1 = this.stackTrace;
        return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
      },
      static: {_UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
          if (stackTrace != null)
            return stackTrace;
          if (!!J.getInterceptor(error).$isError)
            return error.get$stackTrace();
          return;
        }}
    },
    _BroadcastStream: {
      "^": "_ControllerStream;_async$_controller",
      get$isBroadcast: function() {
        return true;
      }
    },
    _BroadcastSubscription: {
      "^": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      get$_async$_controller: function() {
        return this._async$_controller;
      },
      _expectsEvent$1: function(eventId) {
        var t1 = this._eventState;
        if (typeof t1 !== "number")
          return t1.$and();
        return (t1 & 1) === eventId;
      },
      _toggleEventId$0: function() {
        var t1 = this._eventState;
        if (typeof t1 !== "number")
          return t1.$xor();
        this._eventState = t1 ^ 1;
      },
      get$_isFiring: function() {
        var t1 = this._eventState;
        if (typeof t1 !== "number")
          return t1.$and();
        return (t1 & 2) !== 0;
      },
      _setRemoveAfterFiring$0: function() {
        var t1 = this._eventState;
        if (typeof t1 !== "number")
          return t1.$or();
        this._eventState = t1 | 4;
      },
      get$_removeAfterFiring: function() {
        var t1 = this._eventState;
        if (typeof t1 !== "number")
          return t1.$and();
        return (t1 & 4) !== 0;
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 2],
      $is_EventSink: 1,
      $isStreamSubscription: 1
    },
    _BroadcastStreamController: {
      "^": "Object;_async$_next@,_async$_previous@",
      get$stream: function(_) {
        var t1 = new P._BroadcastStream(this);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$isPaused: function() {
        return false;
      },
      get$_mayAddEvent: function() {
        return this._state < 4;
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        this._doneFuture = t1;
        return t1;
      },
      _removeListener$1: function(subscription) {
        var previous, next;
        previous = subscription.get$_async$_previous();
        next = subscription.get$_async$_next();
        previous.set$_async$_next(next);
        next.set$_async$_previous(previous);
        subscription.set$_async$_previous(subscription);
        subscription.set$_async$_next(subscription);
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription;
        if ((this._state & 4) !== 0) {
          if (onDone == null)
            onDone = P.async___nullDoneHandler$closure();
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
          t1._schedule$0();
          return t1;
        }
        t1 = $.Zone__current;
        subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
        subscription.$builtinTypeInfo = this.$builtinTypeInfo;
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
        subscription._async$_previous = subscription;
        subscription._async$_next = subscription;
        t1 = this._async$_previous;
        subscription._async$_previous = t1;
        subscription._async$_next = this;
        t1.set$_async$_next(subscription);
        this._async$_previous = subscription;
        subscription._eventState = this._state & 1;
        if (this._async$_next === subscription)
          P._runGuarded(this._onListen);
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        if (subscription.get$_async$_next() === subscription)
          return;
        if (subscription.get$_isFiring())
          subscription._setRemoveAfterFiring$0();
        else {
          this._removeListener$1(subscription);
          if ((this._state & 2) === 0 && this._async$_next === this)
            this._callOnCancel$0();
        }
        return;
      },
      _recordPause$1: function(subscription) {
      },
      _recordResume$1: function(subscription) {
      },
      _addEventError$0: ["super$_BroadcastStreamController$_addEventError", function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add new events after calling close");
        return new P.StateError("Cannot add new events while doing an addStream");
      }],
      add$1: ["super$_BroadcastStreamController$add", function(_, data) {
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._sendData$1(data);
      }, "call$1", "get$add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_BroadcastStreamController");
      }, 9],
      addError$2: [function(error, stackTrace) {
        error = error != null ? error : new P.NullThrownError();
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        $.Zone__current.toString;
        this._sendError$2(error, stackTrace);
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 9, 4, 5, 6],
      close$0: ["super$_BroadcastStreamController$close", function(_) {
        var doneFuture;
        if ((this._state & 4) !== 0)
          return this._doneFuture;
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._state |= 4;
        doneFuture = this._ensureDoneFuture$0();
        this._sendDone$0();
        return doneFuture;
      }, "call$0", "get$close", 0, 0, 5],
      get$done: function() {
        return this._ensureDoneFuture$0();
      },
      _async$_add$1: [function(data) {
        this._sendData$1(data);
      }, null, "get$_async$_add", 2, 0, null, 9],
      _addError$2: [function(error, stackTrace) {
        this._sendError$2(error, stackTrace);
      }, null, "get$_addError", 4, 0, null, 5, 6],
      _close$0: [function() {
        var addState = this._addStreamState;
        this._addStreamState = null;
        this._state &= 4294967287;
        addState.addStreamFuture._asyncComplete$1(null);
      }, null, "get$_close", 0, 0, null],
      _forEachListener$1: function(action) {
        var t1, link, id, link0;
        t1 = this._state;
        if ((t1 & 2) !== 0)
          throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
        link = this._async$_next;
        if (link === this)
          return;
        id = t1 & 1;
        this._state = t1 ^ 3;
        for (; link !== this;)
          if (link._expectsEvent$1(id)) {
            t1 = link.get$_eventState();
            if (typeof t1 !== "number")
              return t1.$or();
            link.set$_eventState(t1 | 2);
            action.call$1(link);
            link._toggleEventId$0();
            link0 = link.get$_async$_next();
            if (link.get$_removeAfterFiring())
              this._removeListener$1(link);
            t1 = link.get$_eventState();
            if (typeof t1 !== "number")
              return t1.$and();
            link.set$_eventState(t1 & 4294967293);
            link = link0;
          } else
            link = link.get$_async$_next();
        this._state &= 4294967293;
        if (this._async$_next === this)
          this._callOnCancel$0();
      },
      _callOnCancel$0: ["super$_BroadcastStreamController$_callOnCancel", function() {
        if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
          this._doneFuture._asyncComplete$1(null);
        P._runGuarded(this._onCancel);
      }]
    },
    _SyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      get$_mayAddEvent: function() {
        return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
      },
      _addEventError$0: function() {
        if ((this._state & 2) !== 0)
          return new P.StateError("Cannot fire new event. Controller is already firing an event");
        return this.super$_BroadcastStreamController$_addEventError();
      },
      _sendData$1: function(data) {
        var t1 = this._async$_next;
        if (t1 === this)
          return;
        if (t1.get$_async$_next() === this) {
          this._state |= 2;
          this._async$_next._async$_add$1(data);
          this._state &= 4294967293;
          if (this._async$_next === this)
            this._callOnCancel$0();
          return;
        }
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
      },
      _sendError$2: function(error, stackTrace) {
        if (this._async$_next === this)
          return;
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
      },
      _sendDone$0: function() {
        if (this._async$_next !== this)
          this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _SyncBroadcastStreamController__sendData_closure: {
      "^": "Closure;_async$_captured_this_0,_captured_data_1",
      call$1: function(subscription) {
        subscription._async$_add$1(this._captured_data_1);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendError_closure: {
      "^": "Closure;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$1: function(subscription) {
        subscription._addError$2(this._captured_error_1, this._captured_stackTrace_2);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendDone_closure: {
      "^": "Closure;_async$_captured_this_0",
      call$1: function(subscription) {
        subscription._close$0();
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BroadcastSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _AsyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      _sendData$1: function(data) {
        var link;
        for (link = this._async$_next; link !== this; link = link.get$_async$_next())
          link._addPending$1(new P._DelayedData(data, null));
      },
      _sendError$2: function(error, stackTrace) {
        var link;
        for (link = this._async$_next; link !== this; link = link.get$_async$_next())
          link._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        var link = this._async$_next;
        if (link !== this)
          for (; link !== this; link = link.get$_async$_next())
            link._addPending$1(C.C__DelayedDone);
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _AsBroadcastStreamController: {
      "^": "_SyncBroadcastStreamController;_pending,_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      _addPendingEvent$1: function($event) {
        var t1 = this._pending;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._pending = t1;
        }
        t1.add$1(0, $event);
      },
      add$1: [function(_, data) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          this._addPendingEvent$1(new P._DelayedData(data, null));
          return;
        }
        this.super$_BroadcastStreamController$add(this, data);
        while (true) {
          t1 = this._pending;
          if (!(t1 != null && t1.lastPendingEvent != null))
            break;
          t1.handleNext$1(this);
        }
      }, "call$1", "get$add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_AsBroadcastStreamController");
      }, 9],
      addError$2: [function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          this._addPendingEvent$1(new P._DelayedError(error, stackTrace, null));
          return;
        }
        if (!(P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0))
          throw H.wrapException(this._addEventError$0());
        this._sendError$2(error, stackTrace);
        while (true) {
          t1 = this._pending;
          if (!(t1 != null && t1.lastPendingEvent != null))
            break;
          t1.handleNext$1(this);
        }
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 9, 4, 5, 6],
      close$0: [function(_) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          this._addPendingEvent$1(C.C__DelayedDone);
          this._state |= 4;
          return P._BroadcastStreamController.prototype.get$done.call(this);
        }
        return this.super$_BroadcastStreamController$close(this);
      }, "call$0", "get$close", 0, 0, 5],
      _callOnCancel$0: function() {
        var t1 = this._pending;
        if (t1 != null && t1.lastPendingEvent != null) {
          if (t1._state === 1)
            t1._state = 3;
          t1.lastPendingEvent = null;
          t1.firstPendingEvent = null;
          this._pending = null;
        }
        this.super$_BroadcastStreamController$_callOnCancel();
      }
    },
    Future: {
      "^": "Object;"
    },
    Future_Future_closure: {
      "^": "Closure:1;_captured_computation_0,_async$_captured_result_1",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this._async$_captured_result_1._complete$1(this._captured_computation_0.call$0());
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }
    },
    Future_Future$microtask_closure: {
      "^": "Closure:1;_captured_computation_0,_async$_captured_result_1",
      call$0: [function() {
        var e, s, exception, t1;
        try {
          this._async$_captured_result_1._complete$1(this._captured_computation_0.call$0());
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Future_Future$delayed_closure: {
      "^": "Closure:1;_captured_computation_0,_async$_captured_result_1",
      call$0: function() {
        var e, s, t1, exception;
        try {
          t1 = this._captured_computation_0;
          t1 = t1 == null ? null : t1.call$0();
          this._async$_captured_result_1._complete$1(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }
    },
    Future_wait_handleError: {
      "^": "Closure:59;_async$_box_0,_captured_eagerError_1,_captured_cleanUp_2,_captured_result_3",
      call$2: [function(theError, theStackTrace) {
        var t1, t2;
        t1 = this._async$_box_0;
        t2 = --t1._captured_remaining_1;
        if (t1._captured_values_0 != null) {
          t1._captured_values_0 = null;
          if (t1._captured_remaining_1 === 0 || this._captured_eagerError_1)
            this._captured_result_3._completeError$2(theError, theStackTrace);
          else {
            t1._captured_error_2 = theError;
            t1._captured_stackTrace_3 = theStackTrace;
          }
        } else if (t2 === 0 && !this._captured_eagerError_1)
          this._captured_result_3._completeError$2(t1._captured_error_2, t1._captured_stackTrace_3);
      }, null, null, 4, 0, null, 76, 77, "call"]
    },
    Future_wait_closure: {
      "^": "Closure:21;_async$_box_0,_captured_eagerError_6,_captured_cleanUp_7,_captured_result_8,_captured_pos_9",
      call$1: [function(value) {
        var t1, t2, t3;
        t1 = this._async$_box_0;
        t2 = --t1._captured_remaining_1;
        t3 = t1._captured_values_0;
        if (t3 != null) {
          t1 = this._captured_pos_9;
          if (t1 < 0 || t1 >= t3.length)
            return H.ioore(t3, t1);
          t3[t1] = value;
          if (t2 === 0)
            this._captured_result_8._completeWithValue$1(t3);
        } else if (t1._captured_remaining_1 === 0 && !this._captured_eagerError_6)
          this._captured_result_8._completeError$2(t1._captured_error_2, t1._captured_stackTrace_3);
      }, null, null, 2, 0, null, 8, "call"]
    },
    Future_forEach_closure: {
      "^": "Closure:1;_captured_f_0,_captured_iterator_1",
      call$0: function() {
        var t1 = this._captured_iterator_1;
        if (!t1.moveNext$0())
          return false;
        return P.Future_Future$sync(new P.Future_forEach__closure(this._captured_f_0, t1), null).then$1(new P.Future_forEach__closure0());
      }
    },
    Future_forEach__closure: {
      "^": "Closure:1;_captured_f_2,_captured_iterator_3",
      call$0: function() {
        return this._captured_f_2.call$1(this._captured_iterator_3.__interceptors$_current);
      }
    },
    Future_forEach__closure0: {
      "^": "Closure:0;",
      call$1: [function(_) {
        return true;
      }, null, null, 2, 0, null, 0, "call"]
    },
    Future_doWhile_closure: {
      "^": "Closure:24;_async$_box_0,_async$_captured_f_1,_captured_doneSignal_2",
      call$1: function(keepGoing) {
        var t1 = this._captured_doneSignal_2;
        if (keepGoing === true)
          P.Future_Future$sync(this._async$_captured_f_1, null).then$2$onError(this._async$_box_0._captured_nextIteration_0, t1.get$_completeError());
        else
          t1._complete$1(null);
      }
    },
    _Completer: {
      "^": "Object;future<",
      completeError$2: [function(error, stackTrace) {
        error = error != null ? error : new P.NullThrownError();
        if (this.future._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        $.Zone__current.toString;
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 9, 4, 5, 6]
    },
    _AsyncCompleter: {
      "^": "_Completer;future",
      complete$1: function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._asyncComplete$1(value);
      },
      complete$0: function($receiver) {
        return this.complete$1($receiver, null);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._asyncCompleteError$2(error, stackTrace);
      }
    },
    _FutureListener: {
      "^": "Object;_nextListener@,result>,state,callback,errorCallback",
      get$_zone: function() {
        return this.result.get$_zone();
      },
      get$handlesValue: function() {
        return (this.state & 1) !== 0;
      },
      get$hasErrorTest: function() {
        return this.state === 6;
      },
      get$handlesComplete: function() {
        return this.state === 8;
      },
      get$_onValue: function() {
        return this.callback;
      },
      get$_onError: function() {
        return this.errorCallback;
      },
      get$_errorTest: function() {
        return this.callback;
      },
      get$_whenCompleteAction: function() {
        return this.callback;
      },
      callback$0: function() {
        return this.callback.call$0();
      }
    },
    _Future: {
      "^": "Object;_state,_zone<,_resultOrListeners",
      get$_hasError: function() {
        return this._state === 8;
      },
      set$_isChained: function(value) {
        if (value)
          this._state = 2;
        else
          this._state = 0;
      },
      then$2$onError: function(f, onError) {
        var result, t1;
        result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1 = result._zone;
        if (t1 !== C.C__RootZone) {
          t1.toString;
          if (onError != null)
            onError = P._registerErrorHandler(onError, t1);
        }
        this._addListener$1(new P._FutureListener(null, result, onError == null ? 1 : 3, f, onError));
        return result;
      },
      then$1: function(f) {
        return this.then$2$onError(f, null);
      },
      catchError$2$test: function(onError, test) {
        var result, t1;
        result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1 = result._zone;
        if (t1 !== C.C__RootZone)
          onError = P._registerErrorHandler(onError, t1);
        this._addListener$1(new P._FutureListener(null, result, 2, test, onError));
        return result;
      },
      catchError$1: function(onError) {
        return this.catchError$2$test(onError, null);
      },
      whenComplete$1: function(action) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = this.$builtinTypeInfo;
        if (t1 !== C.C__RootZone)
          t1.toString;
        this._addListener$1(new P._FutureListener(null, result, 8, action, null));
        return result;
      },
      _markPendingCompletion$0: function() {
        if (this._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        this._state = 1;
      },
      get$_value: function() {
        return this._resultOrListeners;
      },
      get$_error: function() {
        return this._resultOrListeners;
      },
      _setValue$1: function(value) {
        this._state = 4;
        this._resultOrListeners = value;
      },
      _setErrorObject$1: function(error) {
        this._state = 8;
        this._resultOrListeners = error;
      },
      _setError$2: function(error, stackTrace) {
        this._setErrorObject$1(new P.AsyncError(error, stackTrace));
      },
      _addListener$1: function(listener) {
        var t1;
        if (this._state >= 4) {
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
        } else {
          listener._nextListener = this._resultOrListeners;
          this._resultOrListeners = listener;
        }
      },
      _removeListeners$0: function() {
        var current, prev, next;
        current = this._resultOrListeners;
        this._resultOrListeners = null;
        for (prev = null; current != null; prev = current, current = next) {
          next = current.get$_nextListener();
          current.set$_nextListener(prev);
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, listeners;
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture)
          if (!!t1.$is_Future)
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          this._setValue$1(value);
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeWithValue$1: function(value) {
        var listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners = this._removeListeners$0();
        this._setErrorObject$1(new P.AsyncError(error, stackTrace));
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 25, 4, 5, 6],
      _asyncComplete$1: function(value) {
        var t1;
        if (value == null)
          ;
        else {
          t1 = J.getInterceptor(value);
          if (!!t1.$isFuture) {
            if (!!t1.$is_Future) {
              t1 = value._state;
              if (t1 >= 4 && t1 === 8) {
                this._markPendingCompletion$0();
                t1 = this._zone;
                t1.toString;
                P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
              } else
                P._Future__chainCoreFuture(value, this);
            } else
              P._Future__chainForeignFuture(value, this);
            return;
          }
        }
        this._markPendingCompletion$0();
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
      },
      _asyncCompleteError$2: function(error, stackTrace) {
        var t1;
        this._markPendingCompletion$0();
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
      },
      $isFuture: 1,
      static: {_Future__chainForeignFuture: function(source, target) {
          var e, s, exception, t1;
          target.set$_isChained(true);
          try {
            source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        }, _Future__chainCoreFuture: function(source, target) {
          var listener;
          target.set$_isChained(true);
          listener = new P._FutureListener(null, target, 0, null, null);
          if (source._state >= 4)
            P._Future__propagateToListeners(source, listener);
          else
            source._addListener$1(listener);
        }, _Future__propagateToListeners: function(source, listeners) {
          var t1, t2, t3, hasError, asyncError, t4, listeners0, sourceValue, zone, oldZone, chainSource, result;
          t1 = {};
          t1._captured_source_4 = source;
          for (t2 = source; true;) {
            t3 = {};
            hasError = t2.get$_hasError();
            if (listeners == null) {
              if (hasError) {
                asyncError = t1._captured_source_4.get$_error();
                t2 = t1._captured_source_4.get$_zone();
                t3 = J.get$error$x(asyncError);
                t4 = asyncError.get$stackTrace();
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t4);
              }
              return;
            }
            for (; listeners.get$_nextListener() != null; listeners = listeners0) {
              listeners0 = listeners.get$_nextListener();
              listeners.set$_nextListener(null);
              P._Future__propagateToListeners(t1._captured_source_4, listeners);
            }
            t3._captured_listenerHasValue_1 = true;
            sourceValue = hasError ? null : t1._captured_source_4.get$_value();
            t3._captured_listenerValueOrError_2 = sourceValue;
            t3._captured_isPropagationAborted_3 = false;
            t2 = !hasError;
            if (!t2 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
              zone = listeners.get$_zone();
              if (hasError) {
                t4 = t1._captured_source_4.get$_zone();
                t4.toString;
                if (t4 == null ? zone != null : t4 !== zone) {
                  t4 = t4.get$errorZone();
                  zone.toString;
                  t4 = t4 === zone;
                } else
                  t4 = true;
                t4 = !t4;
              } else
                t4 = false;
              if (t4) {
                asyncError = t1._captured_source_4.get$_error();
                t2 = t1._captured_source_4.get$_zone();
                t3 = J.get$error$x(asyncError);
                t4 = asyncError.get$stackTrace();
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t4);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              if (t2) {
                if (listeners.get$handlesValue())
                  t3._captured_listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
              } else
                new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
              if (listeners.get$handlesComplete())
                new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              if (t3._captured_isPropagationAborted_3)
                return;
              if (t3._captured_listenerHasValue_1 === true) {
                t2 = t3._captured_listenerValueOrError_2;
                t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
              } else
                t2 = false;
              if (t2) {
                chainSource = t3._captured_listenerValueOrError_2;
                result = J.get$result$x(listeners);
                if (chainSource instanceof P._Future)
                  if (chainSource._state >= 4) {
                    result.set$_isChained(true);
                    t1._captured_source_4 = chainSource;
                    listeners = new P._FutureListener(null, result, 0, null, null);
                    t2 = chainSource;
                    continue;
                  } else
                    P._Future__chainCoreFuture(chainSource, result);
                else
                  P._Future__chainForeignFuture(chainSource, result);
                return;
              }
            }
            result = J.get$result$x(listeners);
            listeners = result._removeListeners$0();
            t2 = t3._captured_listenerHasValue_1;
            t3 = t3._captured_listenerValueOrError_2;
            if (t2 === true)
              result._setValue$1(t3);
            else
              result._setErrorObject$1(t3);
            t1._captured_source_4 = result;
            t2 = result;
          }
        }}
    },
    _Future__addListener_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_listener_1",
      call$0: function() {
        P._Future__propagateToListeners(this._async$_captured_this_0, this._captured_listener_1);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:0;_captured_target_0",
      call$1: [function(value) {
        this._captured_target_0._completeWithValue$1(value);
      }, null, null, 2, 0, null, 8, "call"]
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:26;_captured_target_1",
      call$2: [function(error, stackTrace) {
        this._captured_target_1._completeError$2(error, stackTrace);
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 4, 5, 6, "call"]
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:1;_captured_target_2,_captured_e_3,_captured_s_4",
      call$0: [function() {
        this._captured_target_2._completeError$2(this._captured_e_3, this._captured_s_4);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncComplete_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_coreFuture_1",
      call$0: function() {
        P._Future__chainCoreFuture(this._captured_coreFuture_1, this._async$_captured_this_0);
      }
    },
    _Future__asyncComplete_closure0: {
      "^": "Closure:1;_async$_captured_this_2,_captured_value_3",
      call$0: function() {
        this._async$_captured_this_2._completeWithValue$1(this._captured_value_3);
      }
    },
    _Future__asyncCompleteError_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$0: function() {
        this._async$_captured_this_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:7;_box_1,_captured_listener_3,_captured_sourceValue_4,_captured_zone_5",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this._box_1._captured_listenerValueOrError_2 = this._captured_zone_5.runUnary$2(this._captured_listener_3.get$_onValue(), this._captured_sourceValue_4);
          return true;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this._box_1._captured_listenerValueOrError_2 = new P.AsyncError(e, s);
          return false;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:2;_box_2,_box_1,_captured_listener_6,_captured_zone_7",
      call$0: function() {
        var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
        asyncError = this._box_2._captured_source_4.get$_error();
        matchesTest = true;
        t1 = this._captured_listener_6;
        if (t1.get$hasErrorTest()) {
          test = t1.get$_errorTest();
          try {
            matchesTest = this._captured_zone_7.runUnary$2(test, J.get$error$x(asyncError));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = listenerValueOrError;
            t1._captured_listenerHasValue_1 = false;
            return;
          }
        }
        errorCallback = t1.get$_onError();
        if (matchesTest === true && errorCallback != null) {
          try {
            t1 = errorCallback;
            t2 = H.getDynamicRuntimeType();
            t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
            t3 = this._captured_zone_7;
            t4 = this._box_1;
            if (t2)
              t4._captured_listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            else
              t4._captured_listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e0 = t1;
            s0 = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e0;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = listenerValueOrError;
            t1._captured_listenerHasValue_1 = false;
            return;
          }
          this._box_1._captured_listenerHasValue_1 = true;
        } else {
          t1 = this._box_1;
          t1._captured_listenerValueOrError_2 = asyncError;
          t1._captured_listenerHasValue_1 = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:2;_box_2,_box_1,_captured_hasError_8,_captured_listener_9,_captured_zone_10",
      call$0: function() {
        var t1, e, s, completeResult, t2, exception, result;
        t1 = {};
        t1._captured_completeResult_0 = null;
        try {
          completeResult = this._captured_zone_10.run$1(this._captured_listener_9.get$_whenCompleteAction());
          t1._captured_completeResult_0 = completeResult;
          t2 = completeResult;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if (this._captured_hasError_8) {
            t1 = J.get$error$x(this._box_2._captured_source_4.get$_error());
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_1;
          if (t1)
            t2._captured_listenerValueOrError_2 = this._box_2._captured_source_4.get$_error();
          else
            t2._captured_listenerValueOrError_2 = new P.AsyncError(e, s);
          t2._captured_listenerHasValue_1 = false;
          return;
        }
        if (!!J.getInterceptor(t2).$isFuture) {
          result = J.get$result$x(this._captured_listener_9);
          result.set$_isChained(true);
          this._box_1._captured_isPropagationAborted_3 = true;
          t2.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this._box_2, result), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, result));
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:0;_box_2,_captured_result_11",
      call$1: [function(ignored) {
        P._Future__propagateToListeners(this._box_2._captured_source_4, new P._FutureListener(null, this._captured_result_11, 0, null, null));
      }, null, null, 2, 0, null, 78, "call"]
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
      "^": "Closure:26;_async$_box_0,_captured_result_12",
      call$2: [function(error, stackTrace) {
        var t1, completeResult;
        t1 = this._async$_box_0;
        if (!(t1._captured_completeResult_0 instanceof P._Future)) {
          completeResult = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._captured_completeResult_0 = completeResult;
          completeResult._setError$2(error, stackTrace);
        }
        P._Future__propagateToListeners(t1._captured_completeResult_0, new P._FutureListener(null, this._captured_result_12, 0, null, null));
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 4, 5, 6, "call"]
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,zone<,next@",
      callback$0: function() {
        return this.callback.call$0();
      }
    },
    Stream: {
      "^": "Object;",
      get$isBroadcast: function() {
        return false;
      },
      asBroadcastStream$2$onCancel$onListen: ["super$Stream$asBroadcastStream", function(onCancel, onListen) {
        var t1, t2;
        t1 = H.getRuntimeTypeArgument(this, "Stream", 0);
        t2 = $.Zone__current;
        t2.toString;
        t2 = H.setRuntimeTypeInfo(new P._AsBroadcastStream(this, onListen, onCancel, t2, null, null), [t1]);
        t1 = H.setRuntimeTypeInfo(new P._AsBroadcastStreamController(null, t2.get$_onListen(), t2.get$_onCancel(), 0, null, null, null, null), [t1]);
        t1._async$_previous = t1;
        t1._async$_next = t1;
        t2._async$_controller = t1;
        return t2;
      }, function(onCancel) {
        return this.asBroadcastStream$2$onCancel$onListen(onCancel, null);
      }, "asBroadcastStream$1$onCancel", null, null, "get$asBroadcastStream", 0, 5, null, 4, 4],
      where$1: ["super$Stream$where", function(_, test) {
        return H.setRuntimeTypeInfo(new P._WhereStream(test, this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      }],
      map$1: ["super$Stream$map", function(_, convert) {
        return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
      }],
      transform$1: ["super$Stream$transform", function(_, streamTransformer) {
        return streamTransformer.bind$1(this);
      }],
      join$1: function(_, separator) {
        var t1, result, buffer;
        t1 = {};
        result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.String]);
        buffer = new P.StringBuffer("");
        t1._captured_subscription_0 = null;
        t1._captured_first_1 = true;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_join_closure(t1, this, separator, result, buffer), true, new P.Stream_join_closure0(result, buffer), new P.Stream_join_closure1(result));
        return result;
      },
      contains$1: function(_, needle) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
        return future;
      },
      forEach$1: function(_, action) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.$int]);
        t1._captured_count_0 = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$isEmpty: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
        return future;
      },
      toList$0: function(_) {
        var result, future;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [[P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]]);
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
        return future;
      },
      take$1: ["super$Stream$take", function(_, count) {
        return P._TakeStream$(this, count, null);
      }],
      get$first: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
        return future;
      },
      get$last: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1._captured_result_0 = null;
        t1._captured_foundResult_1 = false;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
        return future;
      }
    },
    Stream_Stream$fromIterable_closure: {
      "^": "Closure:1;_captured_T_0,_captured_data_1",
      call$0: [function() {
        var t1 = this._captured_data_1;
        return new P._IterablePendingEvents(new H.ListIterator(t1, t1.get$length(t1), 0, null), 0);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_Stream$periodic_sendEvent: {
      "^": "Closure:2;_async$_box_0,_captured_watch_1",
      call$0: function() {
        var t1, data;
        this._captured_watch_1.reset$0(0);
        t1 = this._async$_box_0;
        data = t1._captured_computation_0.call$1(t1._captured_computationCount_2++);
        t1 = t1._captured_controller_3;
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(data);
      }
    },
    Stream_Stream$periodic_startPeriodicTimer: {
      "^": "Closure:2;_async$_box_0,_captured_period_2,_captured_sendEvent_3",
      call$0: function() {
        this._async$_box_0._captured_timer_1 = P.Timer_Timer$periodic(this._captured_period_2, new P.Stream_Stream$periodic_startPeriodicTimer_closure(this._captured_sendEvent_3));
      }
    },
    Stream_Stream$periodic_startPeriodicTimer_closure: {
      "^": "Closure:23;_captured_sendEvent_4",
      call$1: function(timer) {
        this._captured_sendEvent_4.call$0();
      }
    },
    Stream_Stream$periodic_closure0: {
      "^": "Closure:1;_captured_watch_5,_captured_startPeriodicTimer_6",
      call$0: function() {
        this._captured_watch_5.start$0(0);
        this._captured_startPeriodicTimer_6.call$0();
      }
    },
    Stream_Stream$periodic_closure1: {
      "^": "Closure:1;_async$_box_0,_captured_watch_7",
      call$0: function() {
        var t1 = this._async$_box_0;
        t1._captured_timer_1.cancel$0();
        t1._captured_timer_1 = null;
        this._captured_watch_7.stop$0(0);
      }
    },
    Stream_Stream$periodic_closure2: {
      "^": "Closure:1;_async$_box_0,_captured_period_8,_captured_watch_9,_captured_sendEvent_10,_captured_startPeriodicTimer_11",
      call$0: function() {
        var t1, elapsed;
        t1 = this._captured_watch_9;
        elapsed = P.Duration$(0, 0, J.$tdiv$n(J.$mul$ns(t1.get$elapsedTicks(), 1000000), $.Stopwatch__frequency), 0, 0, 0);
        t1.start$0(0);
        t1 = this._async$_box_0;
        t1._captured_timer_1 = P.Timer_Timer(new P.Duration(this._captured_period_8._duration - elapsed._duration), new P.Stream_Stream$periodic__closure(t1, this._captured_sendEvent_10, this._captured_startPeriodicTimer_11));
      }
    },
    Stream_Stream$periodic__closure: {
      "^": "Closure:1;_async$_box_0,_captured_sendEvent_12,_captured_startPeriodicTimer_13",
      call$0: function() {
        this._async$_box_0._captured_timer_1 = null;
        this._captured_startPeriodicTimer_13.call$0();
        this._captured_sendEvent_12.call$0();
      }
    },
    Stream_Stream$periodic_closure: {
      "^": "Closure:1;_async$_box_0",
      call$0: [function() {
        var t1, t2;
        t1 = this._async$_box_0;
        t2 = t1._captured_timer_1;
        if (t2 != null)
          t2.cancel$0();
        t1._captured_timer_1 = null;
      }, null, null, 0, 0, null, "call"]
    },
    Stream_join_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_separator_2,_captured_result_3,_captured_buffer_4",
      call$1: [function(element) {
        var e, s, t1, exception, t2;
        t1 = this._async$_box_0;
        if (!t1._captured_first_1)
          this._captured_buffer_4._contents += this._captured_separator_2;
        t1._captured_first_1 = false;
        try {
          this._captured_buffer_4._contents += H.S(element);
        } catch (exception) {
          t2 = H.unwrapException(exception);
          e = t2;
          s = H.getTraceFromException(exception);
          P._cancelAndErrorWithReplacement(t1._captured_subscription_0, this._captured_result_3, e, s);
        }
      }, null, null, 2, 0, null, 15, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_join_closure1: {
      "^": "Closure:0;_captured_result_5",
      call$1: [function(e) {
        this._captured_result_5._completeError$1(e);
      }, null, null, 2, 0, null, 2, "call"]
    },
    Stream_join_closure0: {
      "^": "Closure:1;_captured_result_6,_captured_buffer_7",
      call$0: [function() {
        var t1 = this._captured_buffer_7._contents;
        this._captured_result_6._complete$1(t1.charCodeAt(0) == 0 ? t1 : t1);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_contains_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_needle_2,_captured_future_3",
      call$1: [function(element) {
        var t1, t2;
        t1 = this._async$_box_0;
        t2 = this._captured_future_3;
        P._runUserCode(new P.Stream_contains__closure(this._captured_needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1._captured_subscription_0, t2));
      }, null, null, 2, 0, null, 15, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_contains__closure: {
      "^": "Closure:1;_captured_needle_4,_captured_element_5",
      call$0: function() {
        return J.$eq$(this._captured_element_5, this._captured_needle_4);
      }
    },
    Stream_contains__closure0: {
      "^": "Closure:24;_async$_box_0,_captured_future_6",
      call$1: function(isMatch) {
        if (isMatch === true)
          P._cancelAndValue(this._async$_box_0._captured_subscription_0, this._captured_future_6, true);
      }
    },
    Stream_contains_closure0: {
      "^": "Closure:1;_captured_future_7",
      call$0: [function() {
        this._captured_future_7._complete$1(false);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_forEach_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_action_2,_captured_future_3",
      call$1: [function(element) {
        P._runUserCode(new P.Stream_forEach__closure(this._captured_action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._async$_box_0._captured_subscription_0, this._captured_future_3));
      }, null, null, 2, 0, null, 15, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_forEach__closure: {
      "^": "Closure:1;_captured_action_4,_captured_element_5",
      call$0: function() {
        return this._captured_action_4.call$1(this._captured_element_5);
      }
    },
    Stream_forEach__closure0: {
      "^": "Closure:0;",
      call$1: function(_) {
      }
    },
    Stream_forEach_closure0: {
      "^": "Closure:1;_captured_future_6",
      call$0: [function() {
        this._captured_future_6._complete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_length_closure: {
      "^": "Closure:0;_async$_box_0",
      call$1: [function(_) {
        ++this._async$_box_0._captured_count_0;
      }, null, null, 2, 0, null, 0, "call"]
    },
    Stream_length_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_future_1",
      call$0: [function() {
        this._captured_future_1._complete$1(this._async$_box_0._captured_count_0);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_isEmpty_closure: {
      "^": "Closure:0;_async$_box_0,_captured_future_1",
      call$1: [function(_) {
        P._cancelAndValue(this._async$_box_0._captured_subscription_0, this._captured_future_1, false);
      }, null, null, 2, 0, null, 0, "call"]
    },
    Stream_isEmpty_closure0: {
      "^": "Closure:1;_captured_future_2",
      call$0: [function() {
        this._captured_future_2._complete$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_toList_closure: {
      "^": "Closure;_async$_captured_this_0,_async$_captured_result_1",
      call$1: [function(data) {
        this._async$_captured_result_1.push(data);
      }, null, null, 2, 0, null, 9, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_0, "Stream");
      }
    },
    Stream_toList_closure0: {
      "^": "Closure:1;_captured_result_2,_captured_future_3",
      call$0: [function() {
        this._captured_future_3._complete$1(this._captured_result_2);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_first_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_future_2",
      call$1: [function(value) {
        P._cancelAndValue(this._async$_box_0._captured_subscription_0, this._captured_future_2, value);
      }, null, null, 2, 0, null, 8, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_first_closure0: {
      "^": "Closure:1;_captured_future_3",
      call$0: [function() {
        var e, s, t1, exception;
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._captured_future_3, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Stream_last_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1",
      call$1: [function(value) {
        var t1 = this._async$_box_0;
        t1._captured_foundResult_1 = true;
        t1._captured_result_0 = value;
      }, null, null, 2, 0, null, 8, "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_last_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_future_2",
      call$0: [function() {
        var e, s, t1, exception;
        t1 = this._async$_box_0;
        if (t1._captured_foundResult_1) {
          this._captured_future_2._complete$1(t1._captured_result_0);
          return;
        }
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._captured_future_2, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    StreamSubscription: {
      "^": "Object;"
    },
    EventSink: {
      "^": "Object;"
    },
    _StreamController: {
      "^": "Object;",
      get$stream: function(_) {
        var t1 = new P._ControllerStream(this);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$isPaused: function() {
        var t1 = this._state;
        return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
      },
      get$_mayAddEvent: function() {
        return this._state < 4;
      },
      get$_pendingEvents: function() {
        if ((this._state & 8) === 0)
          return this._varData;
        return this._varData.get$varData();
      },
      _ensurePendingEvents$0: function() {
        var t1, state;
        if ((this._state & 8) === 0) {
          t1 = this._varData;
          if (t1 == null) {
            t1 = new P._StreamImplEvents(null, null, 0);
            this._varData = t1;
          }
          return t1;
        }
        state = this._varData;
        if (state.get$varData() == null)
          state.set$varData(new P._StreamImplEvents(null, null, 0));
        return state.get$varData();
      },
      get$_subscription: function() {
        if ((this._state & 8) !== 0)
          return this._varData.get$varData();
        return this._varData;
      },
      _badEventState$0: function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add event after closing");
        return new P.StateError("Cannot add event while adding a stream");
      },
      addStream$2$cancelOnError: function(source, cancelOnError) {
        var t1, t2, t3, t4, addState;
        t1 = this._state;
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        if ((t1 & 2) !== 0) {
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1(null);
          return t1;
        }
        t1 = this._varData;
        t2 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t3 = this.get$_async$_add();
        t4 = cancelOnError ? P._AddStreamState_makeErrorHandler(this) : this.get$_addError();
        addState = H.setRuntimeTypeInfo(new P._StreamControllerAddStreamState(t1, t2, source.listen$4$cancelOnError$onDone$onError(t3, cancelOnError, this.get$_close(), t4)), [null]);
        t1 = this._state;
        if ((t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0)
          addState.addSubscription.pause$0(0);
        this._varData = addState;
        this._state |= 8;
        return addState.addStreamFuture;
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 == null) {
          t1 = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          this._doneFuture = t1;
        }
        return t1;
      },
      add$1: [function(_, value) {
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        this._async$_add$1(value);
      }, "call$1", "get$add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_StreamController");
      }, 8],
      addError$2: [function(error, stackTrace) {
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        error = error != null ? error : new P.NullThrownError();
        $.Zone__current.toString;
        this._addError$2(error, stackTrace);
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 9, 4, 5, 6],
      close$0: [function(_) {
        var t1 = this._state;
        if ((t1 & 4) !== 0)
          return this._ensureDoneFuture$0();
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        t1 |= 4;
        this._state = t1;
        if ((t1 & 1) !== 0)
          this._sendDone$0();
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
        return this._ensureDoneFuture$0();
      }, "call$0", "get$close", 0, 0, 5],
      _async$_add$1: [function(value) {
        var t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendData$1(value);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
      }, "call$1", "get$_async$_add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_StreamController");
      }, 8],
      _addError$2: [function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendError$2(error, stackTrace);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace, null));
      }, "call$2", "get$_addError", 4, 0, 64, 5, 6],
      _close$0: [function() {
        var addState = this._varData;
        this._varData = addState.get$varData();
        this._state &= 4294967287;
        addState.complete$0(0);
      }, "call$0", "get$_close", 0, 0, 2],
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription, pendingEvents, addState;
        if ((this._state & 3) !== 0)
          throw H.wrapException(new P.StateError("Stream has already been listened to."));
        t1 = $.Zone__current;
        subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, cancelOnError ? 1 : 0, null, null), [null]);
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, null);
        pendingEvents = this.get$_pendingEvents();
        t1 = this._state |= 1;
        if ((t1 & 8) !== 0) {
          addState = this._varData;
          addState.set$varData(subscription);
          addState.resume$0();
        } else
          this._varData = subscription;
        subscription._setPendingEvents$1(pendingEvents);
        subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        var result, e, s, t1, exception, result0;
        result = null;
        if ((this._state & 8) !== 0)
          result = this._varData.cancel$0();
        this._varData = null;
        this._state = this._state & 4294967286 | 2;
        t1 = this._onCancel;
        if (t1 != null)
          if (result == null)
            try {
              result = this._onCancel$0();
            } catch (exception) {
              t1 = H.unwrapException(exception);
              e = t1;
              s = H.getTraceFromException(exception);
              result0 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
              result0._asyncCompleteError$2(e, s);
              result = result0;
            }
          else
            result = result.whenComplete$1(t1);
        t1 = new P._StreamController__recordCancel_complete(this);
        if (result != null)
          result = result.whenComplete$1(t1);
        else
          t1.call$0();
        return result;
      },
      _recordPause$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.pause$0(0);
        P._runGuarded(this._onPause);
      },
      _recordResume$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.resume$0();
        P._runGuarded(this._onResume);
      },
      _onCancel$0: function() {
        return this._onCancel.call$0();
      }
    },
    _StreamController__subscribe_closure: {
      "^": "Closure:1;_async$_captured_this_0",
      call$0: function() {
        P._runGuarded(this._async$_captured_this_0._onListen);
      }
    },
    _StreamController__recordCancel_complete: {
      "^": "Closure:2;_async$_captured_this_0",
      call$0: [function() {
        var t1 = this._async$_captured_this_0._doneFuture;
        if (t1 != null && t1._state === 0)
          t1._asyncComplete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    _SyncStreamControllerDispatch: {
      "^": "Object;",
      _sendData$1: function(data) {
        this.get$_subscription()._async$_add$1(data);
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addError$2(error, stackTrace);
      },
      _sendDone$0: function() {
        this.get$_subscription()._close$0();
      }
    },
    _AsyncStreamControllerDispatch: {
      "^": "Object;",
      _sendData$1: function(data) {
        this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        this.get$_subscription()._addPending$1(C.C__DelayedDone);
      }
    },
    _AsyncStreamController: {
      "^": "_StreamController+_AsyncStreamControllerDispatch;_varData,_state,_doneFuture,_onListen,_onPause,_onResume,_onCancel"
    },
    _SyncStreamController: {
      "^": "_StreamController+_SyncStreamControllerDispatch;_varData,_state,_doneFuture,_onListen,_onPause,_onResume,_onCancel"
    },
    _ControllerStream: {
      "^": "_StreamImpl;_async$_controller",
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return this._async$_controller._subscribe$4(onData, onError, onDone, cancelOnError);
      },
      get$hashCode: function(_) {
        return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof P._ControllerStream))
          return false;
        return other._async$_controller === this._async$_controller;
      }
    },
    _ControllerSubscription: {
      "^": "_BufferingStreamSubscription;_async$_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _onCancel$0: function() {
        return this.get$_async$_controller()._recordCancel$1(this);
      },
      _onPause$0: [function() {
        this.get$_async$_controller()._recordPause$1(this);
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
        this.get$_async$_controller()._recordResume$1(this);
      }, "call$0", "get$_onResume", 0, 0, 2]
    },
    _AddStreamState: {
      "^": "Object;",
      pause$0: function(_) {
        this.addSubscription.pause$0(0);
      },
      resume$0: function() {
        this.addSubscription.resume$0();
      },
      cancel$0: [function() {
        var cancel = this.addSubscription.cancel$0();
        if (cancel == null) {
          this.addStreamFuture._asyncComplete$1(null);
          return;
        }
        return cancel.whenComplete$1(new P._AddStreamState_cancel_closure(this));
      }, "call$0", "get$cancel", 0, 0, 5],
      complete$0: function(_) {
        this.addStreamFuture._asyncComplete$1(null);
      }
    },
    _AddStreamState_makeErrorHandler_closure: {
      "^": "Closure:12;_async$_captured_controller_0",
      call$2: [function(e, s) {
        var t1 = this._async$_captured_controller_0;
        t1._addError$2(e, s);
        t1._close$0();
      }, null, null, 4, 0, null, 2, 20, "call"]
    },
    _AddStreamState_cancel_closure: {
      "^": "Closure:1;_async$_captured_this_0",
      call$0: [function() {
        this._async$_captured_this_0.addStreamFuture._asyncComplete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    _StreamControllerAddStreamState: {
      "^": "_AddStreamState;varData@,addStreamFuture,addSubscription"
    },
    _EventSink: {
      "^": "Object;"
    },
    _BufferingStreamSubscription: {
      "^": "Object;_async$_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
      _setPendingEvents$1: function(pendingEvents) {
        if (pendingEvents == null)
          return;
        this._pending = pendingEvents;
        if (J.get$isEmpty$asx(pendingEvents) !== true) {
          this._state = (this._state | 64) >>> 0;
          this._pending.schedule$1(this);
        }
      },
      pause$1: function(_, resumeSignal) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        this._state = (t1 + 128 | 4) >>> 0;
        if (t1 < 128 && this._pending != null)
          this._pending.cancelSchedule$0();
        if ((t1 & 4) === 0 && (this._state & 32) === 0)
          this._guardCallback$1(this.get$_onPause());
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 >= 128) {
          t1 -= 128;
          this._state = t1;
          if (t1 < 128)
            if ((t1 & 64) !== 0 && J.get$isEmpty$asx(this._pending) !== true)
              this._pending.schedule$1(this);
            else {
              t1 = (this._state & 4294967291) >>> 0;
              this._state = t1;
              if ((t1 & 32) === 0)
                this._guardCallback$1(this.get$_onResume());
            }
        }
      },
      cancel$0: [function() {
        var t1 = (this._state & 4294967279) >>> 0;
        this._state = t1;
        if ((t1 & 8) !== 0)
          return this._cancelFuture;
        this._cancel$0();
        return this._cancelFuture;
      }, "call$0", "get$cancel", 0, 0, 5],
      get$_isInputPaused: function() {
        return (this._state & 4) !== 0;
      },
      get$isPaused: function() {
        return this._state >= 128;
      },
      _cancel$0: function() {
        var t1 = (this._state | 8) >>> 0;
        this._state = t1;
        if ((t1 & 64) !== 0)
          this._pending.cancelSchedule$0();
        if ((this._state & 32) === 0)
          this._pending = null;
        this._cancelFuture = this._onCancel$0();
      },
      _async$_add$1: ["super$_BufferingStreamSubscription$_add", function(data) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendData$1(data);
        else
          this._addPending$1(new P._DelayedData(data, null));
      }],
      _addError$2: ["super$_BufferingStreamSubscription$_addError", function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendError$2(error, stackTrace);
        else
          this._addPending$1(new P._DelayedError(error, stackTrace, null));
      }],
      _close$0: ["super$_BufferingStreamSubscription$_close", function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t1 = (t1 | 2) >>> 0;
        this._state = t1;
        if (t1 < 32)
          this._sendDone$0();
        else
          this._addPending$1(C.C__DelayedDone);
      }],
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 2],
      _onCancel$0: function() {
        return;
      },
      _addPending$1: function($event) {
        var pending, t1;
        pending = this._pending;
        if (pending == null) {
          pending = new P._StreamImplEvents(null, null, 0);
          this._pending = pending;
        }
        J.add$1$ax(pending, $event);
        t1 = this._state;
        if ((t1 & 64) === 0) {
          t1 = (t1 | 64) >>> 0;
          this._state = t1;
          if (t1 < 128)
            this._pending.schedule$1(this);
        }
      },
      _sendData$1: function(data) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        this._zone.runUnaryGuarded$2(this._async$_onData, data);
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _sendError$2: function(error, stackTrace) {
        var t1, t2;
        t1 = this._state;
        t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
        if ((t1 & 1) !== 0) {
          this._state = (t1 | 16) >>> 0;
          this._cancel$0();
          t1 = this._cancelFuture;
          if (!!J.getInterceptor(t1).$isFuture)
            t1.whenComplete$1(t2);
          else
            t2.call$0();
        } else {
          t2.call$0();
          this._checkState$1((t1 & 4) !== 0);
        }
      },
      _sendDone$0: function() {
        var t1, t2;
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
        this._cancel$0();
        this._state = (this._state | 16) >>> 0;
        t2 = this._cancelFuture;
        if (!!J.getInterceptor(t2).$isFuture)
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      },
      _guardCallback$1: function(callback) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        callback.call$0();
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _checkState$1: function(wasInputPaused) {
        var t1, isInputPaused;
        if ((this._state & 64) !== 0 && J.get$isEmpty$asx(this._pending) === true) {
          t1 = (this._state & 4294967231) >>> 0;
          this._state = t1;
          if ((t1 & 4) !== 0)
            if (t1 < 128) {
              t1 = this._pending;
              t1 = t1 == null || J.get$isEmpty$asx(t1) === true;
            } else
              t1 = false;
          else
            t1 = false;
          if (t1)
            this._state = (this._state & 4294967291) >>> 0;
        }
        for (; true; wasInputPaused = isInputPaused) {
          t1 = this._state;
          if ((t1 & 8) !== 0) {
            this._pending = null;
            return;
          }
          isInputPaused = (t1 & 4) !== 0;
          if (wasInputPaused === isInputPaused)
            break;
          this._state = (t1 ^ 32) >>> 0;
          if (isInputPaused)
            this._onPause$0();
          else
            this._onResume$0();
          this._state = (this._state & 4294967263) >>> 0;
        }
        t1 = this._state;
        if ((t1 & 64) !== 0 && t1 < 128)
          this._pending.schedule$1(this);
      },
      _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
        var t1 = this._zone;
        t1.toString;
        this._async$_onData = onData;
        this._onError = P._registerErrorHandler(onError == null ? P.async___nullErrorHandler$closure() : onError, t1);
        this._onDone = onDone == null ? P.async___nullDoneHandler$closure() : onDone;
      },
      $is_EventSink: 1,
      $isStreamSubscription: 1,
      static: {_BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
          var t1 = $.Zone__current;
          t1 = H.setRuntimeTypeInfo(new P._BufferingStreamSubscription(null, null, null, t1, cancelOnError ? 1 : 0, null, null), [$T]);
          t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          return t1;
        }}
    },
    _BufferingStreamSubscription__sendError_sendError: {
      "^": "Closure:2;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$0: [function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = this._async$_captured_this_0;
        t2 = t1._state;
        if ((t2 & 8) !== 0 && (t2 & 16) === 0)
          return;
        t1._state = (t2 | 32) >>> 0;
        t2 = t1._onError;
        t3 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
        t4 = t1._zone;
        t5 = this._captured_error_1;
        t6 = t1._onError;
        if (t3)
          t4.runBinaryGuarded$3(t6, t5, this._captured_stackTrace_2);
        else
          t4.runUnaryGuarded$2(t6, t5);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _BufferingStreamSubscription__sendDone_sendDone: {
      "^": "Closure:2;_async$_captured_this_0",
      call$0: [function() {
        var t1, t2;
        t1 = this._async$_captured_this_0;
        t2 = t1._state;
        if ((t2 & 16) === 0)
          return;
        t1._state = (t2 | 42) >>> 0;
        t1._zone.runGuarded$1(t1._onDone);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImpl: {
      "^": "Stream;",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
      }
    },
    _GeneratedStreamImpl: {
      "^": "_StreamImpl;_pending,_isUsed",
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        var t1;
        if (this._isUsed)
          throw H.wrapException(new P.StateError("Stream has already been listened to."));
        this._isUsed = true;
        t1 = P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, null);
        t1._setPendingEvents$1(this._pending$0());
        return t1;
      },
      _pending$0: function() {
        return this._pending.call$0();
      }
    },
    _IterablePendingEvents: {
      "^": "_PendingEvents;_async$_iterator,_state",
      get$isEmpty: function(_) {
        return this._async$_iterator == null;
      },
      handleNext$1: function(dispatch) {
        var isDone, e, s, t1, exception;
        t1 = this._async$_iterator;
        if (t1 == null)
          throw H.wrapException(new P.StateError("No events pending."));
        isDone = null;
        try {
          isDone = !t1.moveNext$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this._async$_iterator = null;
          dispatch._sendError$2(e, s);
          return;
        }
        if (isDone !== true)
          dispatch._sendData$1(this._async$_iterator.__internal$_current);
        else {
          this._async$_iterator = null;
          dispatch._sendDone$0();
        }
      }
    },
    _DelayedEvent: {
      "^": "Object;next@"
    },
    _DelayedData: {
      "^": "_DelayedEvent;value>,next",
      perform$1: function(dispatch) {
        dispatch._sendData$1(this.value);
      }
    },
    _DelayedError: {
      "^": "_DelayedEvent;error>,stackTrace<,next",
      perform$1: function(dispatch) {
        dispatch._sendError$2(this.error, this.stackTrace);
      }
    },
    _DelayedDone: {
      "^": "Object;",
      perform$1: function(dispatch) {
        dispatch._sendDone$0();
      },
      get$next: function() {
        return;
      },
      set$next: function(_) {
        throw H.wrapException(new P.StateError("No events after a done."));
      }
    },
    _PendingEvents: {
      "^": "Object;",
      schedule$1: function(dispatch) {
        var t1 = this._state;
        if (t1 === 1)
          return;
        if (t1 >= 1) {
          this._state = 1;
          return;
        }
        P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
        this._state = 1;
      },
      cancelSchedule$0: function() {
        if (this._state === 1)
          this._state = 3;
      }
    },
    _PendingEvents_schedule_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_dispatch_1",
      call$0: [function() {
        var t1, oldState;
        t1 = this._async$_captured_this_0;
        oldState = t1._state;
        t1._state = 0;
        if (oldState === 3)
          return;
        t1.handleNext$1(this._captured_dispatch_1);
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
      get$isEmpty: function(_) {
        return this.lastPendingEvent == null;
      },
      add$1: function(_, $event) {
        var t1 = this.lastPendingEvent;
        if (t1 == null) {
          this.lastPendingEvent = $event;
          this.firstPendingEvent = $event;
        } else {
          t1.set$next($event);
          this.lastPendingEvent = $event;
        }
      },
      handleNext$1: function(dispatch) {
        var $event, t1;
        $event = this.firstPendingEvent;
        t1 = $event.get$next();
        this.firstPendingEvent = t1;
        if (t1 == null)
          this.lastPendingEvent = null;
        $event.perform$1(dispatch);
      }
    },
    _DoneStreamSubscription: {
      "^": "Object;_zone<,_state,_onDone",
      get$isPaused: function() {
        return this._state >= 4;
      },
      _schedule$0: function() {
        var t1, t2;
        if ((this._state & 2) !== 0)
          return;
        t1 = this._zone;
        t2 = this.get$_sendDone();
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, t2);
        this._state = (this._state | 2) >>> 0;
      },
      pause$1: function(_, resumeSignal) {
        this._state += 4;
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        var t1 = this._state;
        if (t1 >= 4) {
          t1 -= 4;
          this._state = t1;
          if (t1 < 4 && (t1 & 1) === 0)
            this._schedule$0();
        }
      },
      cancel$0: [function() {
        return;
      }, "call$0", "get$cancel", 0, 0, 5],
      _sendDone$0: [function() {
        var t1 = (this._state & 4294967293) >>> 0;
        this._state = t1;
        if (t1 >= 4)
          return;
        this._state = (t1 | 1) >>> 0;
        this._zone.runGuarded$1(this._onDone);
      }, "call$0", "get$_sendDone", 0, 0, 2]
    },
    _AsBroadcastStream: {
      "^": "Stream;_async$_source,_onListenHandler,_onCancelHandler,_zone<,_async$_controller,_subscription",
      get$isBroadcast: function() {
        return true;
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, t2, t3;
        t1 = this._async$_controller;
        if (t1 == null || (t1._state & 4) !== 0) {
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
          t1._schedule$0();
          return t1;
        }
        if (this._subscription == null) {
          t1 = t1.get$add(t1);
          t2 = this._async$_controller.get$addError();
          t3 = this._async$_controller;
          this._subscription = this._async$_source.listen$3$onDone$onError(t1, t3.get$close(t3), t2);
        }
        return this._async$_controller._subscribe$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      _onCancel$0: [function() {
        var t1, shutdown;
        t1 = this._async$_controller;
        shutdown = t1 == null || (t1._state & 4) !== 0;
        t1 = this._onCancelHandler;
        if (t1 != null)
          this._zone.runUnary$2(t1, new P._BroadcastSubscriptionWrapper(this));
        if (shutdown) {
          t1 = this._subscription;
          if (t1 != null) {
            t1.cancel$0();
            this._subscription = null;
          }
        }
      }, "call$0", "get$_onCancel", 0, 0, 2],
      _onListen$0: [function() {
        var t1 = this._onListenHandler;
        if (t1 != null)
          this._zone.runUnary$2(t1, new P._BroadcastSubscriptionWrapper(this));
      }, "call$0", "get$_onListen", 0, 0, 2],
      _cancelSubscription$0: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        this._subscription = null;
        this._async$_controller = null;
        t1.cancel$0();
      },
      _pauseSubscription$1: function(resumeSignal) {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$1(0, resumeSignal);
      },
      _resumeSubscription$0: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0();
      },
      get$_isSubscriptionPaused: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return false;
        return t1.get$isPaused();
      }
    },
    _BroadcastSubscriptionWrapper: {
      "^": "Object;_stream",
      pause$1: function(_, resumeSignal) {
        this._stream._pauseSubscription$1(resumeSignal);
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        this._stream._resumeSubscription$0();
      },
      cancel$0: [function() {
        this._stream._cancelSubscription$0();
        return;
      }, "call$0", "get$cancel", 0, 0, 5],
      get$isPaused: function() {
        return this._stream.get$_isSubscriptionPaused();
      }
    },
    _StreamIteratorImpl: {
      "^": "Object;_subscription,_async$_current,_futureOrPrefetch,_state",
      _clear$0: function(_) {
        this._subscription = null;
        this._futureOrPrefetch = null;
        this._async$_current = null;
        this._state = 1;
      },
      cancel$0: [function() {
        var subscription, hasNext;
        subscription = this._subscription;
        if (subscription == null)
          return;
        if (this._state === 2) {
          hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._complete$1(false);
        } else
          this._clear$0(0);
        return subscription.cancel$0();
      }, "call$0", "get$cancel", 0, 0, 5],
      _async$_onData$1: [function(data) {
        var hasNext;
        if (this._state === 2) {
          this._async$_current = data;
          hasNext = this._futureOrPrefetch;
          this._futureOrPrefetch = null;
          this._state = 0;
          hasNext._complete$1(true);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = data;
        this._state = 3;
      }, "call$1", "get$_async$_onData", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_StreamIteratorImpl");
      }, 9],
      _onError$2: [function(error, stackTrace) {
        var hasNext;
        if (this._state === 2) {
          hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._completeError$2(error, stackTrace);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = new P.AsyncError(error, stackTrace);
        this._state = 4;
      }, function(error) {
        return this._onError$2(error, null);
      }, "_onError$1", "call$2", "call$1", "get$_onError", 2, 2, 9, 4, 5, 6],
      _onDone$0: [function() {
        if (this._state === 2) {
          var hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._complete$1(false);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = null;
        this._state = 5;
      }, "call$0", "get$_onDone", 0, 0, 2]
    },
    _cancelAndError_closure: {
      "^": "Closure:1;_captured_future_0,_captured_error_1,_captured_stackTrace_2",
      call$0: [function() {
        return this._captured_future_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
      }, null, null, 0, 0, null, "call"]
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:12;_captured_subscription_0,_captured_future_1",
      call$2: function(error, stackTrace) {
        return P._cancelAndError(this._captured_subscription_0, this._captured_future_1, error, stackTrace);
      }
    },
    _cancelAndValue_closure: {
      "^": "Closure:1;_captured_future_0,_captured_value_1",
      call$0: [function() {
        return this._captured_future_0._complete$1(this._captured_value_1);
      }, null, null, 0, 0, null, "call"]
    },
    _ForwardingStream: {
      "^": "Stream;",
      get$isBroadcast: function() {
        return this._async$_source.get$isBroadcast();
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return P._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
      },
      _handleData$2: function(data, sink) {
        sink._async$_add$1(data);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _ForwardingStreamSubscription: {
      "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _async$_add$1: function(data) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_add(data);
      },
      _addError$2: function(error, stackTrace) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0();
      }, "call$0", "get$_onResume", 0, 0, 2],
      _onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this._subscription = null;
          t1.cancel$0();
        }
        return;
      },
      _handleData$1: [function(data) {
        this._stream._handleData$2(data, this);
      }, "call$1", "get$_handleData", 2, 0, function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, void: true, args: [S]};
        }, this.$receiver, "_ForwardingStreamSubscription");
      }, 9],
      _handleError$2: [function(error, stackTrace) {
        this._addError$2(error, stackTrace);
      }, "call$2", "get$_handleError", 4, 0, 65, 5, 6],
      _handleDone$0: [function() {
        this._close$0();
      }, "call$0", "get$_handleDone", 0, 0, 2],
      _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
        var t1, t2;
        t1 = this.get$_handleData();
        t2 = this.get$_handleError();
        this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      },
      static: {_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
          var t1 = $.Zone__current;
          t1 = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, cancelOnError ? 1 : 0, null, null), [$S, $T]);
          t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
          return t1;
        }}
    },
    _WhereStream: {
      "^": "_ForwardingStream;_test,_async$_source",
      _handleData$2: function(inputEvent, sink) {
        var satisfies, e, s, exception, t1;
        satisfies = null;
        try {
          satisfies = this._test$1(inputEvent);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        if (satisfies === true)
          sink._async$_add$1(inputEvent);
      },
      _test$1: function(arg0) {
        return this._test.call$1(arg0);
      },
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      },
      $asStream: null
    },
    _MapStream: {
      "^": "_ForwardingStream;_transform,_async$_source",
      _handleData$2: function(inputEvent, sink) {
        var outputEvent, e, s, exception, t1;
        outputEvent = null;
        try {
          outputEvent = this._transform$1(inputEvent);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        sink._async$_add$1(outputEvent);
      },
      _transform$1: function(arg0) {
        return this._transform.call$1(arg0);
      }
    },
    _TakeStream: {
      "^": "_ForwardingStream;_count,_async$_source",
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        var t1, t2, t3;
        t1 = H.getTypeArgumentByIndex(this, 0);
        t2 = $.Zone__current;
        t3 = cancelOnError ? 1 : 0;
        t3 = new P._StateStreamSubscription(this._count, this, null, null, null, null, t2, t3, null, null);
        t3.$builtinTypeInfo = this.$builtinTypeInfo;
        t3._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
        t3._ForwardingStreamSubscription$5(this, onData, onError, onDone, cancelOnError, t1, t1);
        return t3;
      },
      _handleData$2: function(inputEvent, sink) {
        var count, t1;
        count = sink.get$_count();
        t1 = J.getInterceptor$n(count);
        if (t1.$gt(count, 0) === true) {
          sink._async$_add$1(inputEvent);
          count = t1.$sub(count, 1);
          sink.set$_count(count);
          if (J.$eq$(count, 0))
            sink._close$0();
        }
      },
      _TakeStream$2: function(source, count, $T) {
        if (typeof count !== "number" || Math.floor(count) !== count)
          throw H.wrapException(P.ArgumentError$(count));
      },
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      },
      $asStream: null,
      static: {_TakeStream$: function(source, count, $T) {
          var t1 = H.setRuntimeTypeInfo(new P._TakeStream(count, source), [$T]);
          t1._TakeStream$2(source, count, $T);
          return t1;
        }}
    },
    _StateStreamSubscription: {
      "^": "_ForwardingStreamSubscription;_sharedState,_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      get$_count: function() {
        return this._sharedState;
      },
      set$_count: function(count) {
        this._sharedState = count;
      },
      $as_ForwardingStreamSubscription: function($T) {
        return [$T, $T];
      },
      $as_BufferingStreamSubscription: null
    },
    _EventSinkWrapper: {
      "^": "Object;_async$_sink",
      add$1: function(_, data) {
        var t1 = this._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_add(data);
      },
      addError$2: [function(error, stackTrace) {
        var t1 = this._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      }, null, "get$addError", 2, 2, null, 4, 5, 6],
      close$0: [function(_) {
        this._async$_sink._close$0();
      }, null, "get$close", 0, 0, null]
    },
    _SinkTransformerStreamSubscription: {
      "^": "_BufferingStreamSubscription;_transformerSink,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _async$_add$1: function(data) {
        if ((this._state & 2) !== 0)
          throw H.wrapException(new P.StateError("Stream is already closed"));
        this.super$_BufferingStreamSubscription$_add(data);
      },
      _close$0: function() {
        if ((this._state & 2) !== 0)
          throw H.wrapException(new P.StateError("Stream is already closed"));
        this.super$_BufferingStreamSubscription$_close();
      },
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 != null)
          t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 2],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 != null)
          t1.resume$0();
      }, "call$0", "get$_onResume", 0, 0, 2],
      _onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this._subscription = null;
          t1.cancel$0();
        }
        return;
      },
      _handleData$1: [function(data) {
        var e, s, exception, t1;
        try {
          J.add$1$ax(this._transformerSink, data);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if ((this._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          this.super$_BufferingStreamSubscription$_addError(e, s);
        }
      }, "call$1", "get$_handleData", 2, 0, function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, void: true, args: [S]};
        }, this.$receiver, "_SinkTransformerStreamSubscription");
      }, 9],
      _handleError$2: [function(error, stackTrace) {
        var e, s, exception, t1, t2;
        try {
          this._transformerSink.addError$2(error, stackTrace);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = e;
          t2 = error;
          if (t1 == null ? t2 == null : t1 === t2) {
            if ((this._state & 2) !== 0)
              H.throwExpression(new P.StateError("Stream is already closed"));
            this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
          } else {
            if ((this._state & 2) !== 0)
              H.throwExpression(new P.StateError("Stream is already closed"));
            this.super$_BufferingStreamSubscription$_addError(e, s);
          }
        }
      }, function(error) {
        return this._handleError$2(error, null);
      }, "_handleError$1", "call$2", "call$1", "get$_handleError", 2, 2, 66, 4, 5, 6],
      _handleDone$0: [function() {
        var e, s, exception, t1;
        try {
          this._subscription = null;
          J.close$0$x(this._transformerSink);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if ((this._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          this.super$_BufferingStreamSubscription$_addError(e, s);
        }
      }, "call$0", "get$_handleDone", 0, 0, 2],
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      }
    },
    _BoundSinkStream: {
      "^": "Stream;_sinkMapper,_stream",
      get$isBroadcast: function() {
        return this._stream.get$isBroadcast();
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, subscription, t2;
        cancelOnError = true === cancelOnError;
        t1 = $.Zone__current;
        subscription = H.setRuntimeTypeInfo(new P._SinkTransformerStreamSubscription(null, null, null, null, null, t1, cancelOnError ? 1 : 0, null, null), [null, null]);
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, null);
        subscription._transformerSink = this._sinkMapper.call$1(H.setRuntimeTypeInfo(new P._EventSinkWrapper(subscription), [null]));
        t1 = subscription.get$_handleData();
        t2 = subscription.get$_handleError();
        subscription._subscription = this._stream.listen$3$onDone$onError(t1, subscription.get$_handleDone(), t2);
        return subscription;
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    Timer: {
      "^": "Object;"
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;"
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:1;_captured_error_0,_captured_stackTrace_1",
      call$0: function() {
        var t1 = this._captured_error_0;
        throw H.wrapException(new P._UncaughtAsyncError(t1, P._UncaughtAsyncError__getBestStackTrace(t1, this._captured_stackTrace_1)));
      }
    },
    _RootZone: {
      "^": "_Zone;",
      get$parent: function(_) {
        return;
      },
      get$errorZone: function() {
        return this;
      },
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$0();
            return t1;
          }
          t1 = P._rootRun(null, null, this, f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$1(arg);
            return t1;
          }
          t1 = P._rootRunUnary(null, null, this, f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$2(arg1, arg2);
            return t1;
          }
          t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindCallback_closure(this, f);
        else
          return new P._RootZone_bindCallback_closure0(this, f);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindUnaryCallback_closure(this, f);
        else
          return new P._RootZone_bindUnaryCallback_closure0(this, f);
      },
      $index: function(_, key) {
        return;
      },
      run$1: function(f) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f);
      },
      runUnary$2: function(f, arg) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg);
      },
      runBinary$3: function(f, arg1, arg2) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2);
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure:1;_async$_captured_this_0,_async$_captured_f_1",
      call$0: function() {
        return this._async$_captured_this_0.runGuarded$1(this._async$_captured_f_1);
      }
    },
    _RootZone_bindCallback_closure0: {
      "^": "Closure:1;_async$_captured_this_2,_captured_f_3",
      call$0: function() {
        return this._async$_captured_this_2.run$1(this._captured_f_3);
      }
    },
    _RootZone_bindUnaryCallback_closure: {
      "^": "Closure:0;_async$_captured_this_0,_async$_captured_f_1",
      call$1: [function(arg) {
        return this._async$_captured_this_0.runUnaryGuarded$2(this._async$_captured_f_1, arg);
      }, null, null, 2, 0, null, 17, "call"]
    },
    _RootZone_bindUnaryCallback_closure0: {
      "^": "Closure:0;_async$_captured_this_2,_captured_f_3",
      call$1: [function(arg) {
        return this._async$_captured_this_2.runUnary$2(this._captured_f_3, arg);
      }, null, null, 2, 0, null, 17, "call"]
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable: function() {
      var table = Object.create(null);
      P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]));
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        t2 = buffer;
        t2.set$_contents(P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", "));
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
      }
      t1 = buffer;
      t1.set$_contents(t1.get$_contents() + rightDelimiter);
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, 0);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, 0);
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
      return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$identity: function($K, $V) {
      return P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6($K, $V);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      J.forEach$1$ax(other, new P.LinkedHashMap_LinkedHashMap$from_closure(result));
      return result;
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var result, t1;
      result = P.LinkedHashSet_LinkedHashSet(null, null, null, $E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, t1.get$current());
      return result;
    },
    Maps_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        $.$get$_toStringVisiting().push(m);
        t2 = result;
        t2.set$_contents(t2.get$_contents() + "{");
        t1._captured_first_0 = true;
        J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
        t1 = result;
        t1.set$_contents(t1.get$_contents() + "}");
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _HashMap: {
      "^": "Object;",
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      get$keys: function() {
        return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
      },
      containsKey$1: function(key) {
        var strings, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          return strings == null ? false : strings[key] != null;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          return nums == null ? false : nums[key] != null;
        } else
          return this._containsKey$1(key);
      },
      _containsKey$1: function(key) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      },
      $index: function(_, key) {
        var strings, t1, entry, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            t1 = null;
          else {
            entry = strings[key];
            t1 = entry === strings ? null : entry;
          }
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null)
            t1 = null;
          else {
            entry = nums[key];
            t1 = entry === nums ? null : entry;
          }
          return t1;
        } else
          return this._get$1(key);
      },
      _get$1: function(key) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      },
      $indexSet: function(_, key, value) {
        var strings, nums, rest, hash, bucket, index;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            strings = P._HashMap__newHashTable();
            this._collection$_strings = strings;
          }
          this._collection$_addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._HashMap__newHashTable();
            this._collection$_nums = nums;
          }
          this._collection$_addHashTableEntry$3(nums, key, value);
        } else {
          rest = this._collection$_rest;
          if (rest == null) {
            rest = P._HashMap__newHashTable();
            this._collection$_rest = rest;
          }
          hash = this._computeHashCode$1(key);
          bucket = rest[hash];
          if (bucket == null) {
            P._HashMap__setTableEntry(rest, hash, [key, value]);
            ++this._collection$_length;
            this._collection$_keys = null;
          } else {
            index = this._findBucketIndex$2(bucket, key);
            if (index >= 0)
              bucket[index + 1] = value;
            else {
              bucket.push(key, value);
              ++this._collection$_length;
              this._collection$_keys = null;
            }
          }
        }
      },
      forEach$1: function(_, action) {
        var keys, $length, i, key;
        keys = this._computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          key = keys[i];
          action.call$2(key, this.$index(0, key));
          if (keys !== this._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      _computeKeys$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._collection$_keys;
        if (t1 != null)
          return t1;
        result = Array(this._collection$_length);
        result.fixed$length = Array;
        strings = this._collection$_strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._collection$_nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._collection$_rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; i0 += 2) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._collection$_keys = result;
        return result;
      },
      _collection$_addHashTableEntry$3: function(table, key, value) {
        if (table[key] == null) {
          ++this._collection$_length;
          this._collection$_keys = null;
        }
        P._HashMap__setTableEntry(table, key, value);
      },
      _computeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2)
          if (J.$eq$(bucket[i], key))
            return i;
        return -1;
      },
      $isMap: 1
    },
    _IdentityHashMap: {
      "^": "_HashMap;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_keys",
      _computeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2) {
          t1 = bucket[i];
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      }
    },
    HashMapKeyIterable: {
      "^": "Iterable;_map",
      get$length: function(_) {
        return this._map._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._map._collection$_length === 0;
      },
      get$iterator: function(_) {
        var t1 = this._map;
        return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
      },
      contains$1: function(_, element) {
        return this._map.containsKey$1(element);
      },
      forEach$1: function(_, f) {
        var t1, keys, $length, i;
        t1 = this._map;
        keys = t1._computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          f.call$1(keys[i]);
          if (keys !== t1._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
        }
      },
      $isEfficientLength: 1
    },
    HashMapKeyIterator: {
      "^": "Object;_map,_collection$_keys,_offset,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var keys, offset, t1;
        keys = this._collection$_keys;
        offset = this._offset;
        t1 = this._map;
        if (keys !== t1._collection$_keys)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else if (offset >= keys.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = keys[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      internalComputeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i) {
          t1 = bucket[i].get$hashMapCellKey();
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      },
      static: {_LinkedIdentityHashMap__LinkedIdentityHashMap$es6: function($K, $V) {
          return H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [$K, $V]);
        }}
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications",
      _newSet$0: function() {
        var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$iterator: function(_) {
        var t1 = new P.LinkedHashSetIterator(this, this._collection$_modifications, null, null);
        t1._collection$_cell = this._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1;
        if (!(typeof object === "string" && object !== "__proto__"))
          t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        else
          t1 = true;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        else
          return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_element();
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._collection$_first;
        modifications = this._collection$_modifications;
        for (; cell != null;) {
          action.call$1(cell.get$_element());
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell.get$_collection$_next();
        }
      },
      get$first: function(_) {
        var t1 = this._collection$_first;
        if (t1 == null)
          throw H.wrapException(new P.StateError("No elements"));
        return t1.get$_element();
      },
      get$last: function(_) {
        var t1 = this._collection$_last;
        if (t1 == null)
          throw H.wrapException(new P.StateError("No elements"));
        return t1._element;
      },
      add$1: function(_, element) {
        var strings, table, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_strings = table;
            strings = table;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_nums = table;
            nums = table;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_last = null;
          this._collection$_first = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
          this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        }
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = table[element];
        if (cell == null)
          return false;
        this._unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P.LinkedHashSetCell(element, null, null);
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_collection$_previous();
        next = cell.get$_collection$_next();
        if (previous == null)
          this._collection$_first = next;
        else
          previous._collection$_next = next;
        if (next == null)
          this._collection$_last = previous;
        else
          next.set$_collection$_previous(previous);
        --this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$_element(), element))
            return i;
        return -1;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {_LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }}
    },
    LinkedHashSetCell: {
      "^": "Object;_element<,_collection$_next<,_collection$_previous@"
    },
    LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,_collection$_cell,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._collection$_cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = t1.get$_element();
            this._collection$_cell = this._collection$_cell.get$_collection$_next();
            return true;
          }
        }
      }
    },
    _HashSetBase: {
      "^": "SetBase;",
      difference$1: function(other) {
        var result, t1, element;
        result = this._newSet$0();
        for (t1 = this.get$iterator(this); t1.moveNext$0();) {
          element = t1._collection$_current;
          if (!other.contains$1(0, element))
            result.add$1(0, element);
        }
        return result;
      }
    },
    IterableBase: {
      "^": "Iterable;"
    },
    LinkedHashMap_LinkedHashMap$from_closure: {
      "^": "Closure:3;_captured_result_0",
      call$2: [function(k, v) {
        this._captured_result_0.$indexSet(0, k, v);
      }, null, null, 4, 0, null, 80, 30, "call"]
    },
    ListBase: {
      "^": "Object_ListMixin;"
    },
    Object_ListMixin: {
      "^": "Object+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    ListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      forEach$1: function(receiver, action) {
        var $length, i;
        $length = this.get$length(receiver);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      get$isEmpty: function(receiver) {
        return this.get$length(receiver) === 0;
      },
      get$isNotEmpty: function(receiver) {
        return !this.get$isEmpty(receiver);
      },
      get$first: function(receiver) {
        if (this.get$length(receiver) === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, 0);
      },
      get$last: function(receiver) {
        if (this.get$length(receiver) === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, this.get$length(receiver) - 1);
      },
      contains$1: function(receiver, element) {
        var $length, i;
        $length = this.get$length(receiver);
        for (i = 0; i < this.get$length(receiver); ++i) {
          if (J.$eq$(this.$index(receiver, i), element))
            return true;
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return false;
      },
      join$1: function(receiver, separator) {
        var t1;
        if (this.get$length(receiver) === 0)
          return "";
        t1 = P.StringBuffer__writeAll("", receiver, separator);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      where$1: function(receiver, test) {
        return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      },
      map$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
      },
      skip$1: function(receiver, count) {
        return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      },
      take$1: function(receiver, count) {
        return H.SubListIterable$(receiver, 0, count, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      },
      toList$1$growable: function(receiver, growable) {
        var result, t1, i;
        if (growable) {
          result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
          C.JSArray_methods.set$length(result, this.get$length(receiver));
        } else {
          t1 = Array(this.get$length(receiver));
          t1.fixed$length = Array;
          result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        }
        for (i = 0; i < this.get$length(receiver); ++i) {
          t1 = this.$index(receiver, i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(receiver, element) {
        var t1 = this.get$length(receiver);
        this.set$length(receiver, t1 + 1);
        this.$indexSet(receiver, t1, element);
      },
      remove$1: function(receiver, element) {
        var i;
        for (i = 0; i < this.get$length(receiver); ++i)
          if (J.$eq$(this.$index(receiver, i), element)) {
            this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
            this.set$length(receiver, this.get$length(receiver) - 1);
            return true;
          }
        return false;
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      setRange$4: ["super$ListMixin$setRange", function(receiver, start, end, iterable, skipCount) {
        var $length, t1, otherStart, otherList, i;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        t1 = J.getInterceptor(iterable);
        if (!!t1.$isList) {
          otherStart = skipCount;
          otherList = iterable;
        } else {
          otherList = t1.skip$1(iterable, skipCount).toList$1$growable(0, false);
          otherStart = 0;
        }
        t1 = J.getInterceptor$asx(otherList);
        if (otherStart + $length > t1.get$length(otherList))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (otherStart < start)
          for (i = $length - 1; i >= 0; --i)
            this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
        else
          for (i = 0; i < $length; ++i)
            this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      }],
      indexOf$2: function(receiver, element, startIndex) {
        var i;
        if (startIndex >= this.get$length(receiver))
          return -1;
        for (i = startIndex; i < this.get$length(receiver); ++i)
          if (J.$eq$(this.$index(receiver, i), element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      lastIndexOf$2: function(receiver, element, startIndex) {
        var i;
        startIndex = this.get$length(receiver) - 1;
        for (i = startIndex; i >= 0; --i)
          if (J.$eq$(this.$index(receiver, i), element))
            return i;
        return -1;
      },
      lastIndexOf$1: function($receiver, element) {
        return this.lastIndexOf$2($receiver, element, null);
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _UnmodifiableMapMixin: {
      "^": "Object;",
      $indexSet: function(_, key, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      remove$1: function(_, key) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      $isMap: 1
    },
    MapView: {
      "^": "Object;",
      $index: function(_, key) {
        return this._map.$index(0, key);
      },
      $indexSet: function(_, key, value) {
        this._map.$indexSet(0, key, value);
      },
      forEach$1: function(_, action) {
        this._map.forEach$1(0, action);
      },
      get$isEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isEmpty(t1);
      },
      get$isNotEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isNotEmpty(t1);
      },
      get$length: function(_) {
        var t1 = this._map;
        return t1.get$length(t1);
      },
      get$keys: function() {
        return this._map.get$keys();
      },
      toString$0: function(_) {
        return this._map.toString$0(0);
      },
      $isMap: 1
    },
    UnmodifiableMapView: {
      "^": "MapView+_UnmodifiableMapMixin;_map",
      $isMap: 1
    },
    Maps_mapToString_closure: {
      "^": "Closure:3;_collection$_box_0,_captured_result_1",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._collection$_box_0;
        if (!t1._captured_first_0)
          this._captured_result_1._contents += ", ";
        t1._captured_first_0 = false;
        t1 = this._captured_result_1;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    ListQueue: {
      "^": "Iterable;_table,_head,_tail,_modificationCount",
      get$iterator: function(_) {
        return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
      },
      forEach$1: function(_, action) {
        var modificationCount, i, t1;
        modificationCount = this._modificationCount;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          t1 = this._table;
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          action.call$1(t1[i]);
          if (modificationCount !== this._modificationCount)
            H.throwExpression(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._table.length - 1) >>> 0;
      },
      get$first: function(_) {
        var t1, t2;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        t2 = this._table;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        return t2[t1];
      },
      get$last: function(_) {
        var t1, t2, t3;
        t1 = this._head;
        t2 = this._tail;
        if (t1 === t2)
          throw H.wrapException(H.IterableElementError_noElement());
        t1 = this._table;
        t3 = t1.length;
        t2 = (t2 - 1 & t3 - 1) >>> 0;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(t1, t2);
        return t1[t2];
      },
      toList$1$growable: function(_, growable) {
        var list, t1;
        if (growable) {
          list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
          C.JSArray_methods.set$length(list, this.get$length(this));
        } else {
          t1 = Array(this.get$length(this));
          t1.fixed$length = Array;
          list = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
        }
        this._writeToList$1(list);
        return list;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(_, value) {
        this._add$1(value);
      },
      clear$0: function(_) {
        var i, t1, t2, t3, t4;
        i = this._head;
        t1 = this._tail;
        if (i !== t1) {
          for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
            if (i < 0 || i >= t3)
              return H.ioore(t2, i);
            t2[i] = null;
          }
          this._tail = 0;
          this._head = 0;
          ++this._modificationCount;
        }
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      removeFirst$0: function() {
        var t1, t2, t3, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._table;
        t3 = t2.length;
        if (t1 >= t3)
          return H.ioore(t2, t1);
        result = t2[t1];
        t2[t1] = null;
        this._head = (t1 + 1 & t3 - 1) >>> 0;
        return result;
      },
      _add$1: function(element) {
        var t1, t2, t3;
        t1 = this._table;
        t2 = this._tail;
        t3 = t1.length;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(t1, t2);
        t1[t2] = element;
        t3 = (t2 + 1 & t3 - 1) >>> 0;
        this._tail = t3;
        if (this._head === t3)
          this._grow$0();
        ++this._modificationCount;
      },
      _grow$0: function() {
        var t1, newTable, t2, split;
        t1 = Array(this._table.length * 2);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
        this._head = 0;
        this._tail = this._table.length;
        this._table = newTable;
      },
      _writeToList$1: function(target) {
        var t1, t2, t3, $length, firstPartSize;
        t1 = this._head;
        t2 = this._tail;
        t3 = this._table;
        if (t1 <= t2) {
          $length = t2 - t1;
          C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
          return $length;
        } else {
          firstPartSize = t3.length - t1;
          C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
          C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
          return this._tail + firstPartSize;
        }
      },
      ListQueue$1: function(initialCapacity, $E) {
        var t1 = Array(8);
        t1.fixed$length = Array;
        this._table = H.setRuntimeTypeInfo(t1, [$E]);
      },
      $isEfficientLength: 1,
      $asIterable: null,
      static: {ListQueue$: function(initialCapacity, $E) {
          var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
          t1.ListQueue$1(initialCapacity, $E);
          return t1;
        }}
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(new P.ConcurrentModificationError(t1));
        t2 = this._collection$_position;
        if (t2 === this._end) {
          this._collection$_current = null;
          return false;
        }
        t1 = t1._table;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        this._collection$_current = t1[t2];
        this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
        return true;
      }
    },
    SetMixin: {
      "^": "Object;",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      addAll$1: function(_, elements) {
        var t1;
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      toList$1$growable: function(_, growable) {
        var result, t1, i, element, i0;
        if (growable) {
          result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
          C.JSArray_methods.set$length(result, this.get$length(this));
        } else {
          t1 = Array(this.get$length(this));
          t1.fixed$length = Array;
          result = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
        }
        for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
          element = t1._collection$_current;
          i0 = i + 1;
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = element;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      map$1: function(_, f) {
        return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(this, f), [H.getTypeArgumentByIndex(this, 0), null]);
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1._collection$_current);
      },
      join$1: function(_, separator) {
        var iterator, buffer, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        buffer = new P.StringBuffer("");
        if (separator === "") {
          do
            buffer._contents += H.S(iterator._collection$_current);
          while (iterator.moveNext$0());
        } else {
          buffer._contents = H.S(iterator._collection$_current);
          for (; iterator.moveNext$0();) {
            buffer._contents += separator;
            buffer._contents += H.S(iterator._collection$_current);
          }
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      take$1: function(_, n) {
        return H.TakeIterable_TakeIterable(this, n, H.getTypeArgumentByIndex(this, 0));
      },
      get$first: function(_) {
        var it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        return it._collection$_current;
      },
      get$last: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        do
          result = it._collection$_current;
        while (it.moveNext$0());
        return result;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    SetBase: {
      "^": "SetMixin;"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null), null);
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _parseJson: function(source, reviver) {
      var parsed, e, t1, exception;
      t1 = source;
      if (typeof t1 !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(new P.FormatException(String(e), null, null));
      }
      return P._convertJsonToDartLazy(parsed);
    },
    _defaultToEncodable: [function(object) {
      return object.toJson$0();
    }, "call$1", "convert___defaultToEncodable$closure", 2, 0, 17, 22],
    _JsonMap: {
      "^": "Object;_original,_processed,_data",
      $index: function(_, key) {
        var t1, result;
        t1 = this._processed;
        if (t1 == null)
          return this._data.$index(0, key);
        else if (typeof key !== "string")
          return;
        else {
          result = t1[key];
          return typeof result == "undefined" ? this._process$1(key) : result;
        }
      },
      get$length: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._convert$_computeKeys$0().length;
        return t1;
      },
      get$isEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._convert$_computeKeys$0().length;
        return t1 === 0;
      },
      get$isNotEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._convert$_computeKeys$0().length;
        return t1 > 0;
      },
      get$keys: function() {
        if (this._processed == null)
          return this._data.get$keys();
        return new P._JsonMapKeyIterable(this);
      },
      get$values: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          return t1.get$values(t1);
        }
        return H.MappedIterable_MappedIterable(this._convert$_computeKeys$0(), new P._JsonMap_values_closure(this), null, null);
      },
      $indexSet: function(_, key, value) {
        var processed, original;
        if (this._processed == null)
          this._data.$indexSet(0, key, value);
        else if (this.containsKey$1(key)) {
          processed = this._processed;
          processed[key] = value;
          original = this._original;
          if (original == null ? processed != null : original !== processed)
            original[key] = null;
        } else
          this._upgrade$0().$indexSet(0, key, value);
      },
      containsKey$1: function(key) {
        if (this._processed == null)
          return this._data.containsKey$1(key);
        if (typeof key !== "string")
          return false;
        return Object.prototype.hasOwnProperty.call(this._original, key);
      },
      putIfAbsent$2: function(key, ifAbsent) {
        var value;
        if (this.containsKey$1(key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: [function(_, key) {
        if (this._processed != null && !this.containsKey$1(key))
          return;
        return this._upgrade$0().remove$1(0, key);
      }, "call$1", "get$remove", 2, 0, 21, 46],
      clear$0: function(_) {
        var t1;
        if (this._processed == null)
          this._data.clear$0(0);
        else {
          t1 = this._data;
          if (t1 != null)
            J.clear$0$ax(t1);
          this._processed = null;
          this._original = null;
          this._data = P.LinkedHashMap__makeEmpty();
        }
      },
      forEach$1: function(_, f) {
        var keys, i, key, value;
        if (this._processed == null)
          return this._data.forEach$1(0, f);
        keys = this._convert$_computeKeys$0();
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          value = this._processed[key];
          if (typeof value == "undefined") {
            value = P._convertJsonToDartLazy(this._original[key]);
            this._processed[key] = value;
          }
          f.call$2(key, value);
          if (keys !== this._data)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _convert$_computeKeys$0: function() {
        var keys = this._data;
        if (keys == null) {
          keys = Object.keys(this._original);
          this._data = keys;
        }
        return keys;
      },
      _upgrade$0: function() {
        var result, keys, i, t1, key;
        if (this._processed == null)
          return this._data;
        result = P.LinkedHashMap__makeEmpty();
        keys = this._convert$_computeKeys$0();
        for (i = 0; t1 = keys.length, i < t1; ++i) {
          key = keys[i];
          result.$indexSet(0, key, this.$index(0, key));
        }
        if (t1 === 0)
          keys.push(null);
        else
          C.JSArray_methods.set$length(keys, 0);
        this._processed = null;
        this._original = null;
        this._data = result;
        return result;
      },
      _process$1: function(key) {
        var result;
        if (!Object.prototype.hasOwnProperty.call(this._original, key))
          return;
        result = P._convertJsonToDartLazy(this._original[key]);
        return this._processed[key] = result;
      },
      $isMap: 1,
      $asMap: Isolate.functionThatReturnsNull
    },
    _JsonMap_values_closure: {
      "^": "Closure:0;_convert$_captured_this_0",
      call$1: [function(each) {
        return this._convert$_captured_this_0.$index(0, each);
      }, null, null, 2, 0, null, 31, "call"]
    },
    _JsonMapKeyIterable: {
      "^": "ListIterable;_parent",
      get$length: function(_) {
        var t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1._data;
          t1 = t1.get$length(t1);
        } else
          t1 = t1._convert$_computeKeys$0().length;
        return t1;
      },
      elementAt$1: function(_, index) {
        var t1 = this._parent;
        if (t1._processed == null)
          t1 = t1.get$keys().elementAt$1(0, index);
        else {
          t1 = t1._convert$_computeKeys$0();
          if (index >>> 0 !== index || index >= t1.length)
            return H.ioore(t1, index);
          t1 = t1[index];
        }
        return t1;
      },
      get$iterator: function(_) {
        var t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1.get$keys();
          t1 = t1.get$iterator(t1);
        } else {
          t1 = t1._convert$_computeKeys$0();
          t1 = new J.ArrayIterator(t1, t1.length, 0, null);
        }
        return t1;
      },
      contains$1: function(_, key) {
        return this._parent.containsKey$1(key);
      },
      $asListIterable: Isolate.functionThatReturnsNull,
      $asIterable: Isolate.functionThatReturnsNull
    },
    _JsonDecoderSink: {
      "^": "_StringSinkConversionSink;_reviver,_sink,_stringSink",
      close$0: [function(_) {
        var buffer, t1, accumulated, decoded;
        this.super$_StringSinkConversionSink$close(this);
        buffer = this._stringSink;
        t1 = buffer._contents;
        accumulated = t1.charCodeAt(0) == 0 ? t1 : t1;
        buffer._contents = "";
        decoded = P._parseJson(accumulated, this._reviver);
        t1 = this._sink._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_add(decoded);
        t1._close$0();
      }, null, "get$close", 0, 0, null]
    },
    ChunkedConversionSink: {
      "^": "Object;"
    },
    _ConverterStreamEventSink: {
      "^": "Object;_eventSink,_chunkedSink",
      add$1: function(_, o) {
        return this._chunkedSink.add$1(0, o);
      },
      addError$2: [function(error, stackTrace) {
        var t1 = this._eventSink._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      }, null, "get$addError", 2, 2, null, 4, 5, 6],
      close$0: [function(_) {
        return this._chunkedSink.close$0(0);
      }, null, "get$close", 0, 0, null]
    },
    Codec: {
      "^": "Object;"
    },
    Converter: {
      "^": "Object;",
      startChunkedConversion$1: function(sink) {
        throw H.wrapException(new P.UnsupportedError("This converter does not support chunked conversions: " + this.toString$0(0)));
      },
      bind$1: ["super$Converter$bind", function(stream) {
        return H.setRuntimeTypeInfo(new P._BoundSinkStream(new P.Converter_bind_closure(this), stream), [null, null]);
      }]
    },
    Converter_bind_closure: {
      "^": "Closure:67;_convert$_captured_this_0",
      call$1: function(sink) {
        return H.setRuntimeTypeInfo(new P._ConverterStreamEventSink(sink, this._convert$_captured_this_0.startChunkedConversion$1(sink)), [null, null]);
      }
    },
    JsonUnsupportedObjectError: {
      "^": "Error;unsupportedObject,cause",
      toString$0: function(_) {
        if (this.cause != null)
          return "Converting object to an encodable object failed.";
        else
          return "Converting object did not return an encodable object.";
      }
    },
    JsonCyclicError: {
      "^": "JsonUnsupportedObjectError;unsupportedObject,cause",
      toString$0: function(_) {
        return "Cyclic error in JSON stringify";
      }
    },
    JsonCodec: {
      "^": "Codec;_reviver,_toEncodable",
      decode$2$reviver: function(source, reviver) {
        return P._parseJson(source, this.get$decoder()._reviver);
      },
      decode$1: function(source) {
        return this.decode$2$reviver(source, null);
      },
      encode$2$toEncodable: function(value, toEncodable) {
        var t1;
        toEncodable = this._toEncodable;
        if (toEncodable == null) {
          t1 = this.get$encoder();
          return P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
        }
        return P._JsonStringStringifier_stringify(value, toEncodable, null);
      },
      encode$1: function(value) {
        return this.encode$2$toEncodable(value, null);
      },
      get$encoder: function() {
        var t1 = this._toEncodable;
        if (t1 == null)
          return C.JsonEncoder_null_null;
        return new P.JsonEncoder(null, t1);
      },
      get$decoder: function() {
        return C.JsonDecoder_null;
      }
    },
    JsonEncoder: {
      "^": "Converter;indent,_toEncodable",
      startChunkedConversion$1: function(sink) {
        sink = new P._StringAdapterSink(sink);
        return new P._JsonEncoderSink(this.indent, this._toEncodable, sink, false);
      },
      bind$1: function(stream) {
        return this.super$Converter$bind(stream);
      }
    },
    _JsonEncoderSink: {
      "^": "ChunkedConversionSink;_indent,_toEncodable,_sink,_isDone",
      add$1: function(_, o) {
        var t1, t2, stringSink;
        if (this._isDone)
          throw H.wrapException(new P.StateError("Only one call to add allowed"));
        this._isDone = true;
        t1 = this._sink;
        t2 = new P.StringBuffer("");
        stringSink = new P._StringConversionSinkAsStringSinkAdapter(t2, t1);
        P._JsonStringStringifier_printOn(o, stringSink, this._toEncodable, this._indent);
        if (t2._contents.length !== 0)
          stringSink._flush$0();
        t1.close$0(0);
      },
      close$0: [function(_) {
      }, null, "get$close", 0, 0, null],
      $asChunkedConversionSink: function() {
        return [P.Object];
      }
    },
    JsonDecoder: {
      "^": "Converter;_reviver",
      startChunkedConversion$1: function(sink) {
        return new P._JsonDecoderSink(this._reviver, sink, new P.StringBuffer(""));
      },
      bind$1: function(stream) {
        return this.super$Converter$bind(stream);
      }
    },
    _JsonStringifier: {
      "^": "Object;",
      writeStringContent$1: function(s) {
        var t1, $length, offset, i, charCode, t2;
        t1 = J.getInterceptor$asx(s);
        $length = t1.get$length(s);
        if (typeof $length !== "number")
          return H.iae($length);
        offset = 0;
        i = 0;
        for (; i < $length; ++i) {
          charCode = t1.codeUnitAt$1(s, i);
          if (charCode > 92)
            continue;
          if (charCode < 32) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            switch (charCode) {
              case 8:
                this.writeCharCode$1(98);
                break;
              case 9:
                this.writeCharCode$1(116);
                break;
              case 10:
                this.writeCharCode$1(110);
                break;
              case 12:
                this.writeCharCode$1(102);
                break;
              case 13:
                this.writeCharCode$1(114);
                break;
              default:
                this.writeCharCode$1(117);
                this.writeCharCode$1(48);
                this.writeCharCode$1(48);
                t2 = charCode >>> 4 & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                t2 = charCode & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                break;
            }
          } else if (charCode === 34 || charCode === 92) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            this.writeCharCode$1(charCode);
          }
        }
        if (offset === 0)
          this.writeString$1(s);
        else if (offset < $length)
          this.writeStringSlice$3(s, offset, $length);
      },
      _checkCycle$1: function(object) {
        var t1, t2, i, t3;
        for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
          t3 = t1[i];
          if (object == null ? t3 == null : object === t3)
            throw H.wrapException(new P.JsonCyclicError(object, null));
        }
        t1.push(object);
      },
      _removeSeen$1: function(object) {
        var t1 = this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
      },
      writeObject$1: function(object) {
        var customJson, e, t1, exception;
        if (this.writeJsonValue$1(object))
          return;
        this._checkCycle$1(object);
        try {
          customJson = this._toEncodable$1(object);
          if (!this.writeJsonValue$1(customJson))
            throw H.wrapException(new P.JsonUnsupportedObjectError(object, null));
          t1 = this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1.pop();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          throw H.wrapException(new P.JsonUnsupportedObjectError(object, e));
        }
      },
      writeJsonValue$1: function(object) {
        var t1, success;
        if (typeof object === "number") {
          if (!C.JSNumber_methods.get$isFinite(object))
            return false;
          this.writeNumber$1(object);
          return true;
        } else if (object === true) {
          this.writeString$1("true");
          return true;
        } else if (object === false) {
          this.writeString$1("false");
          return true;
        } else if (object == null) {
          this.writeString$1("null");
          return true;
        } else if (typeof object === "string") {
          this.writeString$1("\"");
          this.writeStringContent$1(object);
          this.writeString$1("\"");
          return true;
        } else {
          t1 = J.getInterceptor(object);
          if (!!t1.$isList) {
            this._checkCycle$1(object);
            this.writeList$1(object);
            this._removeSeen$1(object);
            return true;
          } else if (!!t1.$isMap) {
            this._checkCycle$1(object);
            success = this.writeMap$1(object);
            this._removeSeen$1(object);
            return success;
          } else
            return false;
        }
      },
      writeList$1: function(list) {
        var t1, i;
        this.writeString$1("[");
        t1 = J.getInterceptor$asx(list);
        if (t1.get$length(list) > 0) {
          this.writeObject$1(t1.$index(list, 0));
          for (i = 1; i < t1.get$length(list); ++i) {
            this.writeString$1(",");
            this.writeObject$1(t1.$index(list, i));
          }
        }
        this.writeString$1("]");
      },
      writeMap$1: function(map) {
        var t1, t2, keyValueList, separator, i;
        t1 = {};
        if (map.get$isEmpty(map)) {
          this.writeString$1("{}");
          return true;
        }
        t2 = J.$mul$ns(map.get$length(map), 2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        keyValueList = Array(t2);
        t1._captured_i_0 = 0;
        t1._captured_allStringKeys_1 = true;
        map.forEach$1(0, new P._JsonStringifier_writeMap_closure(t1, keyValueList));
        if (!t1._captured_allStringKeys_1)
          return false;
        this.writeString$1("{");
        for (t1 = keyValueList.length, separator = "\"", i = 0; i < t1; i += 2, separator = ",\"") {
          this.writeString$1(separator);
          this.writeStringContent$1(keyValueList[i]);
          this.writeString$1("\":");
          t2 = i + 1;
          if (t2 >= t1)
            return H.ioore(keyValueList, t2);
          this.writeObject$1(keyValueList[t2]);
        }
        this.writeString$1("}");
        return true;
      },
      _toEncodable$1: function(arg0) {
        return this._toEncodable.call$1(arg0);
      }
    },
    _JsonStringifier_writeMap_closure: {
      "^": "Closure:3;_convert$_box_0,_captured_keyValueList_1",
      call$2: function(key, value) {
        var t1, t2, t3, i, t4;
        if (typeof key !== "string")
          this._convert$_box_0._captured_allStringKeys_1 = false;
        t1 = this._captured_keyValueList_1;
        t2 = this._convert$_box_0;
        t3 = t2._captured_i_0;
        i = t3 + 1;
        t2._captured_i_0 = i;
        t4 = t1.length;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = key;
        t2._captured_i_0 = i + 1;
        if (i >= t4)
          return H.ioore(t1, i);
        t1[i] = value;
      }
    },
    _JsonStringStringifier: {
      "^": "_JsonStringifier;_sink,_seen,_toEncodable",
      writeNumber$1: function(number) {
        this._sink.write$1(C.JSNumber_methods.toString$0(number));
      },
      writeString$1: function(string) {
        this._sink.write$1(string);
      },
      writeStringSlice$3: function(string, start, end) {
        this._sink.write$1(J.substring$2$s(string, start, end));
      },
      writeCharCode$1: function(charCode) {
        this._sink.writeCharCode$1(charCode);
      },
      static: {_JsonStringStringifier_stringify: function(object, toEncodable, indent) {
          var output, t1;
          output = new P.StringBuffer("");
          P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
          t1 = output._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
          var t1, stringifier;
          t1 = toEncodable != null ? toEncodable : P.convert___defaultToEncodable$closure();
          stringifier = new P._JsonStringStringifier(output, [], t1);
          stringifier.writeObject$1(object);
        }}
    },
    _StringConversionSinkAsStringSinkAdapter: {
      "^": "Object;_buffer,_chunkedSink",
      close$0: [function(_) {
        if (this._buffer._contents.length !== 0)
          this._flush$0();
        this._chunkedSink.close$0(0);
      }, null, "get$close", 0, 0, null],
      writeCharCode$1: function(charCode) {
        var t1 = this._buffer._contents += H.Primitives_stringFromCharCode(charCode);
        if (t1.length > 16)
          this._flush$0();
      },
      write$1: function(o) {
        var t1, t2, accumulated;
        t1 = this._buffer;
        t2 = t1._contents;
        if (t2.length !== 0) {
          accumulated = t2.charCodeAt(0) == 0 ? t2 : t2;
          t1._contents = "";
          this._chunkedSink.add$1(0, accumulated);
        }
        this._chunkedSink.add$1(0, J.toString$0$(o));
      },
      _flush$0: function() {
        var t1, t2, accumulated;
        t1 = this._buffer;
        t2 = t1._contents;
        accumulated = t2.charCodeAt(0) == 0 ? t2 : t2;
        t1._contents = "";
        this._chunkedSink.add$1(0, accumulated);
      }
    },
    StringConversionSinkBase: {
      "^": "StringConversionSinkMixin;"
    },
    StringConversionSinkMixin: {
      "^": "Object;",
      add$1: function(_, str) {
        return this.addSlice$4(str, 0, J.get$length$asx(str), false);
      }
    },
    _StringSinkConversionSink: {
      "^": "StringConversionSinkBase;",
      close$0: ["super$_StringSinkConversionSink$close", function(_) {
      }, null, "get$close", 0, 0, null],
      addSlice$4: function(str, start, end, isLast) {
        var t1, t2, i;
        if (start !== 0 || !J.$eq$(end, J.get$length$asx(str))) {
          if (typeof end !== "number")
            return H.iae(end);
          t1 = this._stringSink;
          t2 = J.getInterceptor$s(str);
          i = start;
          for (; i < end; ++i)
            t1._contents += H.Primitives_stringFromCharCode(t2.codeUnitAt$1(str, i));
        } else
          this._stringSink._contents += H.S(str);
        if (isLast)
          this.close$0(0);
      },
      add$1: function(_, str) {
        this._stringSink._contents += H.S(str);
        return;
      }
    },
    _StringAdapterSink: {
      "^": "StringConversionSinkBase;_sink",
      add$1: function(_, str) {
        var t1 = this._sink._async$_sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_add(str);
        return;
      },
      addSlice$4: function(str, start, end, isLast) {
        var t1, t2;
        t1 = start === 0 && J.$eq$(end, J.get$length$asx(str));
        t2 = this._sink;
        if (t1) {
          t1 = t2._async$_sink;
          if ((t1._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          t1.super$_BufferingStreamSubscription$_add(str);
        } else {
          t1 = J.substring$2$s(str, start, end);
          t2 = t2._async$_sink;
          if ((t2._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          t2.super$_BufferingStreamSubscription$_add(t1);
          t1 = t2;
        }
        if (isLast)
          t1._close$0();
      },
      close$0: [function(_) {
        this._sink._async$_sink._close$0();
        return;
      }, null, "get$close", 0, 0, null]
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    Comparable_compare: [function(a, b) {
      return J.compareTo$1$ns(a, b);
    }, "call$2", "core_Comparable_compare$closure", 4, 0, 101],
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      if (growable)
        return list;
      list.fixed$length = Array;
      return list;
    },
    num_parse: function(input, onError) {
      var source, result;
      source = C.JSString_methods.trim$0(input);
      result = H.Primitives_parseInt(source, null, P.core_num__returnNull$closure());
      if (result != null)
        return result;
      result = H.Primitives_parseDouble(source, P.core_num__returnNull$closure());
      if (result != null)
        return result;
      throw H.wrapException(new P.FormatException(input, null, null));
    },
    num__returnNull: [function(_) {
      return;
    }, "call$1", "core_num__returnNull$closure", 2, 0, 0],
    print: [function(object) {
      var line = H.S(object);
      H.printString(line);
    }, "call$1", "core__print$closure", 2, 0, 102, 22],
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false), null, null);
    },
    NoSuchMethodError_toString_closure: {
      "^": "Closure:68;_box_0,_captured_sb_1",
      call$2: function(key, value) {
        var t1, t2, t3;
        t1 = this._captured_sb_1;
        t2 = this._box_0;
        t1._contents += t2._captured_comma_0;
        t3 = t1._contents += H.S(key.get$__internal$_name());
        t1._contents = t3 + ": ";
        t1._contents += H.S(P.Error_safeToString(value));
        t2._captured_comma_0 = ", ";
      }
    },
    bool: {
      "^": "Object;"
    },
    "+bool": 0,
    Comparable: {
      "^": "Object;"
    },
    DateTime: {
      "^": "Object;millisecondsSinceEpoch<,isUtc",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
      },
      compareTo$1: function(_, other) {
        return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
      },
      get$hashCode: function(_) {
        return this.millisecondsSinceEpoch;
      },
      toString$0: function(_) {
        var t1, y, m, d, h, min, sec, ms;
        t1 = this.isUtc;
        y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
        m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
        d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
        h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
        min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
        sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
        ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
        if (t1)
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      },
      add$1: function(_, duration) {
        return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
      },
      DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
        if (Math.abs(millisecondsSinceEpoch) > 864e13)
          throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
      },
      $isComparable: 1,
      $asComparable: Isolate.functionThatReturnsNull,
      static: {DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
          var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
          t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
          return t1;
        }, DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + H.S(absN);
          if (absN >= 10)
            return sign + "00" + H.S(absN);
          return sign + "000" + H.S(absN);
        }, DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        }, DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }}
    },
    $double: {
      "^": "num;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration<",
      $add: function(_, other) {
        return new P.Duration(this._duration + other.get$_duration());
      },
      $sub: function(_, other) {
        return new P.Duration(this._duration - other.get$_duration());
      },
      $mul: function(_, factor) {
        if (typeof factor !== "number")
          return H.iae(factor);
        return new P.Duration(C.JSNumber_methods.round$0(this._duration * factor));
      },
      $tdiv: function(_, quotient) {
        if (quotient === 0)
          throw H.wrapException(new P.IntegerDivisionByZeroException());
        if (typeof quotient !== "number")
          return H.iae(quotient);
        return new P.Duration(C.JSNumber_methods.$tdiv(this._duration, quotient));
      },
      $lt: function(_, other) {
        return this._duration < other.get$_duration();
      },
      $gt: function(_, other) {
        return this._duration > other.get$_duration();
      },
      $le: function(_, other) {
        return this._duration <= other.get$_duration();
      },
      $ge: function(_, other) {
        return this._duration >= other.get$_duration();
      },
      get$inMilliseconds: function() {
        return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      compareTo$1: function(_, other) {
        return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(-t2).toString$0(0);
        twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
        twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
        return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.Duration];
      },
      static: {Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
          if (typeof microseconds !== "number")
            return H.iae(microseconds);
          return new P.Duration(864e8 * days + 3600000000 * hours + 60000000 * minutes + 1000000 * seconds + 1000 * milliseconds + microseconds);
        }}
    },
    Duration_toString_sixDigits: {
      "^": "Closure:16;",
      call$1: function(n) {
        if (n >= 100000)
          return H.S(n);
        if (n >= 10000)
          return "0" + H.S(n);
        if (n >= 1000)
          return "00" + H.S(n);
        if (n >= 100)
          return "000" + H.S(n);
        if (n >= 10)
          return "0000" + H.S(n);
        return "00000" + H.S(n);
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:16;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name>,message>",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        }, ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        }, ArgumentError$notNull: function($name) {
          return new P.ArgumentError(true, null, $name, "Must not be null");
        }}
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2, t3;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else {
            t3 = J.getInterceptor$n(t2);
            if (t3.$gt(t2, t1) === true)
              explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
            else
              explanation = t3.$lt(t2, t1) === true ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
          }
        }
        return explanation;
      },
      start$0: function($receiver) {
        return this.start.call$0();
      },
      static: {RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        }, RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        }, RangeError_checkValueInInterval: function(value, minValue, maxValue, $name, message) {
          if (value < minValue || value > maxValue)
            throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, message));
        }, RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (start > end || end > $length)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }}
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$start: function(_) {
        return 0;
      },
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        P.Error_safeToString(this.indexable);
        var explanation = ": index should be less than " + H.S(this.length);
        return J.$lt$n(this.invalidValue, 0) === true ? ": index must not be negative" : explanation;
      },
      start$0: function($receiver) {
        return this.get$start(this).call$0();
      },
      static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = $length != null ? $length : J.get$length$asx(indexable);
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }}
    },
    NoSuchMethodError: {
      "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
      toString$0: function(_) {
        var t1, sb, t2, t3, _i, argument, memberName, receiverText, actualParameters;
        t1 = {};
        sb = new P.StringBuffer("");
        t1._captured_comma_0 = "";
        for (t2 = this._core$_arguments, t3 = t2.length, _i = 0; _i < t3; ++_i) {
          argument = t2[_i];
          sb._contents += t1._captured_comma_0;
          sb._contents += H.S(P.Error_safeToString(argument));
          t1._captured_comma_0 = ", ";
        }
        this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1, sb));
        memberName = this._memberName.get$__internal$_name();
        receiverText = P.Error_safeToString(this._core$_receiver);
        actualParameters = H.S(sb);
        return "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
      },
      static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
          return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
        }}
    },
    UnsupportedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        return "Reading static variable '" + this.variableName + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message>",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      }
    },
    FormatException: {
      "^": "Object;message>,source>,offset>",
      toString$0: function(_) {
        var t1, report, source;
        t1 = this.message;
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
        source = this.source;
        if (typeof source !== "string")
          return report;
        if (source.length > 78)
          source = J.substring$2$s(source, 0, 75) + "...";
        return report + "\n" + H.S(source);
      }
    },
    IntegerDivisionByZeroException: {
      "^": "Object;",
      toString$0: function(_) {
        return "IntegerDivisionByZeroException";
      }
    },
    Expando: {
      "^": "Object;name>",
      toString$0: function(_) {
        return "Expando:" + H.S(this.name);
      },
      $index: function(_, object) {
        var values = H.Primitives_getProperty(object, "expando$values");
        return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
      },
      $indexSet: function(_, object, value) {
        var values = H.Primitives_getProperty(object, "expando$values");
        if (values == null) {
          values = new P.Object();
          H.Primitives_setProperty(object, "expando$values", values);
        }
        H.Primitives_setProperty(values, this._getKey$0(), value);
      },
      _getKey$0: function() {
        var key, t1;
        key = H.Primitives_getProperty(this, "expando$key");
        if (key == null) {
          t1 = $.Expando__keyCount;
          $.Expando__keyCount = t1 + 1;
          key = "expando$key$" + t1;
          H.Primitives_setProperty(this, "expando$key", key);
        }
        return key;
      }
    },
    Function: {
      "^": "Object;"
    },
    $int: {
      "^": "num;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+int": 0,
    Iterable: {
      "^": "Object;",
      map$1: function(_, f) {
        return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "Iterable", 0), null);
      },
      where$1: ["super$Iterable$where", function(_, f) {
        return H.setRuntimeTypeInfo(new H.WhereIterable(this, f), [H.getRuntimeTypeArgument(this, "Iterable", 0)]);
      }],
      contains$1: function(_, element) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (J.$eq$(t1.get$current(), element))
            return true;
        return false;
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      join$1: function(_, separator) {
        var iterator, buffer, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        buffer = new P.StringBuffer("");
        if (separator === "") {
          do
            buffer._contents += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          buffer._contents = H.S(iterator.get$current());
          for (; iterator.moveNext$0();) {
            buffer._contents += separator;
            buffer._contents += H.S(iterator.get$current());
          }
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      toList$1$growable: function(_, growable) {
        return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$isNotEmpty: function(_) {
        return this.get$isEmpty(this) !== true;
      },
      take$1: function(_, n) {
        return H.TakeIterable_TakeIterable(this, n, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      get$first: function(_) {
        var it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        return it.get$current();
      },
      get$last: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        do
          result = it.get$current();
        while (it.moveNext$0());
        return result;
      },
      get$single: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        result = it.get$current();
        if (it.moveNext$0())
          throw H.wrapException(H.IterableElementError_tooMany());
        return result;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      },
      $asIterable: null
    },
    Iterator: {
      "^": "Object;"
    },
    List: {
      "^": "Object;",
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    "+List": 0,
    Map: {
      "^": "Object;"
    },
    Null: {
      "^": "Object;",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: ["super$Object$toString", function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      }],
      noSuchMethod$1: function(_, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }
    },
    Match: {
      "^": "Object;"
    },
    RegExp: {
      "^": "Object;"
    },
    StackTrace: {
      "^": "Object;"
    },
    Stopwatch: {
      "^": "Object;_start,_stop",
      start$0: [function(_) {
        var t1, t2;
        t1 = this._start == null;
        if (!t1 && this._stop == null)
          return;
        t2 = $.Primitives_timerTicks;
        if (t1)
          this._start = t2.call$0();
        else {
          this._start = J.$sub$n(t2.call$0(), J.$sub$n(this._stop, this._start));
          this._stop = null;
        }
      }, null, "get$start", 0, 0, null],
      stop$0: function(_) {
        if (!(this._start != null && this._stop == null))
          return;
        this._stop = $.Primitives_timerTicks.call$0();
      },
      reset$0: function(_) {
        var t1;
        if (this._start == null)
          return;
        t1 = $.Primitives_timerTicks.call$0();
        this._start = t1;
        if (this._stop != null)
          this._stop = t1;
      },
      get$elapsedTicks: function() {
        var t1, t2;
        t1 = this._start;
        if (t1 == null)
          return 0;
        t2 = this._stop;
        return t2 == null ? J.$sub$n($.Primitives_timerTicks.call$0(), this._start) : J.$sub$n(t2, t1);
      },
      get$isRunning: function() {
        return this._start != null && this._stop == null;
      }
    },
    String: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      }
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents@",
      get$length: function(_) {
        return this._contents.length;
      },
      get$isEmpty: function(_) {
        return this._contents.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._contents.length !== 0;
      },
      write$1: function(obj) {
        this._contents += H.S(obj);
      },
      writeCharCode$1: function(charCode) {
        this._contents += H.Primitives_stringFromCharCode(charCode);
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }}
    },
    Symbol: {
      "^": "Object;"
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    CssStyleDeclaration__camelCase: function(hyphenated) {
      return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
    },
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1, fragment;
      t1 = document.body;
      fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      t1 = t1.where$1(t1, new W.Element_Element$html_closure());
      return t1.get$single(t1);
    },
    _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
      return document.createElement(tag);
    },
    HttpRequest_getString: function(url, onProgress, withCredentials) {
      return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
    },
    HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
      var completer, xhr, t1;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [W.HttpRequest])), [W.HttpRequest]);
      xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "load", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "error", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      xhr.send();
      return completer.future;
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    _convertNativeToDart_Window: function(win) {
      if (win == null)
        return;
      return W._DOMWindowCrossFrame__createSafe(win);
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if (e == null)
        return;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        if (!!J.getInterceptor($window).$isEventTarget)
          return $window;
        return;
      } else
        return e;
    },
    _wrapZone: function(callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallback$2$runGuarded(callback, true);
    },
    HtmlElement: {
      "^": "Element;",
      $isHtmlElement: 1,
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      "%": "HTMLAppletElement|HTMLBRElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;type=,hostname=,href},port=,protocol=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "HTMLAnchorElement"
    },
    ApplicationCacheErrorEvent: {
      "^": "Event;message=",
      "%": "ApplicationCacheErrorEvent"
    },
    AreaElement: {
      "^": "HtmlElement;hostname=,href},port=,protocol=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "HTMLAreaElement"
    },
    BaseElement: {
      "^": "HtmlElement;href}",
      "%": "HTMLBaseElement"
    },
    Blob: {
      "^": "Interceptor;type=",
      close$0: [function(receiver) {
        return receiver.close();
      }, null, "get$close", 0, 0, null],
      $isBlob: 1,
      "%": ";Blob"
    },
    BodyElement: {
      "^": "HtmlElement;",
      $isBodyElement: 1,
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;name=,type=,value=",
      "%": "HTMLButtonElement"
    },
    CharacterData: {
      "^": "Node;data=,length=",
      $isInterceptor: 1,
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    CompositionEvent: {
      "^": "UIEvent;data=",
      "%": "CompositionEvent"
    },
    CssStyleDeclaration: {
      "^": "Interceptor_CssStyleDeclarationBase;length=",
      getPropertyValue$1: function(receiver, propertyName) {
        var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
        return propValue != null ? propValue : "";
      },
      _getPropertyValueHelper$1: function(receiver, propertyName) {
        if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
          return receiver.getPropertyValue(propertyName);
        else
          return receiver.getPropertyValue(P.Device_cssPrefix() + propertyName);
      },
      "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
    },
    Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor+CssStyleDeclarationBase;"
    },
    CssStyleDeclarationBase: {
      "^": "Object;",
      get$transform: function(receiver) {
        return this.getPropertyValue$1(receiver, "transform");
      },
      transform$1: function($receiver, arg0) {
        return this.get$transform($receiver).call$1(arg0);
      }
    },
    DeviceLightEvent: {
      "^": "Event;value=",
      "%": "DeviceLightEvent"
    },
    DivElement: {
      "^": "HtmlElement;",
      "%": ";HTMLDivElement"
    },
    Document0: {
      "^": "Node;",
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [null]);
      },
      get$onClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "click", false), [null]);
      },
      get$onDoubleClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "dblclick", false), [null]);
      },
      get$onMouseDown: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "mousedown", false), [null]);
      },
      "%": "Document|HTMLDocument|XMLDocument"
    },
    DocumentFragment: {
      "^": "Node;",
      get$children: function(receiver) {
        if (receiver._docChildren == null)
          receiver._docChildren = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
        return receiver._docChildren;
      },
      set$innerHtml: function(receiver, value) {
        this.setInnerHtml$1(receiver, value);
      },
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var t1;
        this._clearChildren$0(receiver);
        t1 = document.body;
        receiver.appendChild((t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator));
      },
      setInnerHtml$2$validator: function($receiver, html, validator) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      $isInterceptor: 1,
      "%": ";DocumentFragment"
    },
    DomError: {
      "^": "Interceptor;message=,name=",
      "%": "DOMError|FileError"
    },
    DomException: {
      "^": "Interceptor;message=",
      get$name: function(receiver) {
        var errorName = receiver.name;
        if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
          return "SecurityError";
        if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
          return "SyntaxError";
        return errorName;
      },
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomRectReadOnly: {
      "^": "Interceptor;bottom=,height=,left=,right=,top=,width=,x=,y=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$width(receiver);
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = this.get$height(receiver);
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(this.get$width(receiver));
        t4 = J.get$hashCode$(this.get$height(receiver));
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      get$topLeft: function(receiver) {
        return H.setRuntimeTypeInfo(new P.Point0(receiver.left, receiver.top), [null]);
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      "%": ";DOMRectReadOnly"
    },
    DomSettableTokenList: {
      "^": "DomTokenList;value=",
      "%": "DOMSettableTokenList"
    },
    DomTokenList: {
      "^": "Interceptor;length=",
      add$1: function(receiver, tokens) {
        return receiver.add(tokens);
      },
      contains$1: function(receiver, token) {
        return receiver.contains(token);
      },
      "%": ";DOMTokenList"
    },
    _ChildrenElementList: {
      "^": "ListBase;_html$_element<,_childElements",
      contains$1: function(_, element) {
        return J.contains$1$asx(this._childElements, element);
      },
      get$isEmpty: function(_) {
        return this._html$_element.firstElementChild == null;
      },
      get$length: function(_) {
        return this._childElements.length;
      },
      $index: function(_, index) {
        var t1 = this._childElements;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $indexSet: function(_, index, value) {
        var t1 = this._childElements;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        this._html$_element.replaceChild(value, t1[index]);
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize element lists"));
      },
      add$1: function(_, value) {
        this._html$_element.appendChild(value);
        return value;
      },
      get$iterator: function(_) {
        var t1 = this.toList$0(this);
        return new J.ArrayIterator(t1, t1.length, 0, null);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      remove$1: function(_, object) {
        var t1;
        if (!!J.getInterceptor(object).$isElement) {
          t1 = this._html$_element;
          if (object.parentNode === t1) {
            t1.removeChild(object);
            return true;
          }
        }
        return false;
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._html$_element);
      },
      get$first: function(_) {
        var result = this._html$_element.firstElementChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$last: function(_) {
        var result = this._html$_element.lastElementChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    Element: {
      "^": "Node;id=,style=,tagName=",
      get$attributes: function(receiver) {
        return new W._ElementAttributeMap(receiver);
      },
      get$children: function(receiver) {
        return new W._ChildrenElementList(receiver, receiver.children);
      },
      get$classes: function(receiver) {
        return new W._ElementCssClassSet(receiver);
      },
      getComputedStyle$1: function(receiver, pseudoElement) {
        return window.getComputedStyle(receiver, "");
      },
      getComputedStyle$0: function($receiver) {
        return this.getComputedStyle$1($receiver, null);
      },
      get$client: function(receiver) {
        return P.Rectangle$(C.JSNumber_methods.round$0(receiver.clientLeft), C.JSNumber_methods.round$0(receiver.clientTop), C.JSNumber_methods.round$0(receiver.clientWidth), C.JSNumber_methods.round$0(receiver.clientHeight), null);
      },
      get$offset: function(receiver) {
        return P.Rectangle$(C.JSNumber_methods.round$0(receiver.offsetLeft), C.JSNumber_methods.round$0(receiver.offsetTop), C.JSNumber_methods.round$0(receiver.offsetWidth), C.JSNumber_methods.round$0(receiver.offsetHeight), null);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      get$marginEdge: function(receiver) {
        return new W._MarginCssRect(receiver, 0, 0, 0, 0);
      },
      createFragment$3$treeSanitizer$validator: ["super$Element$createFragment", function(receiver, html, treeSanitizer, validator) {
        var t1, t2, base, contextElement, fragment;
        if (treeSanitizer == null) {
          if (validator == null) {
            t1 = $.Element__defaultValidator;
            if (t1 == null) {
              t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
              t2 = new W.NodeValidatorBuilder(t1);
              t1.push(W._Html5NodeValidator$(null));
              t1.push(W._TemplatingNodeValidator$());
              $.Element__defaultValidator = t2;
              validator = t2;
            } else
              validator = t1;
          }
          t1 = $.Element__defaultSanitizer;
          if (t1 == null) {
            t1 = new W._ValidatingTreeSanitizer(validator);
            $.Element__defaultSanitizer = t1;
            treeSanitizer = t1;
          } else {
            t1.validator = validator;
            treeSanitizer = t1;
          }
        } else if (validator != null)
          throw H.wrapException(P.ArgumentError$("validator can only be passed if treeSanitizer is null"));
        if ($.Element__parseDocument == null) {
          t1 = document.implementation.createHTMLDocument("");
          $.Element__parseDocument = t1;
          $.Element__parseRange = t1.createRange();
          base = $.Element__parseDocument.createElement("base", null);
          J.set$href$x(base, document.baseURI);
          $.Element__parseDocument.head.appendChild(base);
        }
        t1 = $.Element__parseDocument;
        if (!!this.$isBodyElement)
          contextElement = t1.body;
        else {
          contextElement = t1.createElement(receiver.tagName, null);
          $.Element__parseDocument.body.appendChild(contextElement);
        }
        if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
          $.Element__parseRange.selectNodeContents(contextElement);
          fragment = $.Element__parseRange.createContextualFragment(html);
        } else {
          contextElement.innerHTML = html;
          fragment = $.Element__parseDocument.createDocumentFragment();
          for (; t1 = contextElement.firstChild, t1 != null;)
            fragment.appendChild(t1);
        }
        t1 = $.Element__parseDocument.body;
        if (contextElement == null ? t1 != null : contextElement !== t1)
          J.remove$0$ax(contextElement);
        treeSanitizer.sanitizeTree$1(fragment);
        document.adoptNode(fragment);
        return fragment;
      }, function($receiver, html, treeSanitizer) {
        return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      }, "createFragment$2$treeSanitizer", null, null, "get$createFragment", 2, 5, null, 4, 4],
      set$innerHtml: function(receiver, html) {
        this.setInnerHtml$1(receiver, html);
      },
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        receiver.textContent = null;
        receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
      },
      setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      },
      setInnerHtml$2$validator: function($receiver, html, validator) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      getBoundingClientRect$0: function(receiver) {
        return receiver.getBoundingClientRect();
      },
      setAttribute$2: function(receiver, $name, value) {
        return receiver.setAttribute($name, value);
      },
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "change", false), [null]);
      },
      get$onClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "click", false), [null]);
      },
      get$onDoubleClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "dblclick", false), [null]);
      },
      get$onMouseDown: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousedown", false), [null]);
      },
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      "%": ";Element"
    },
    Element_Element$html_closure: {
      "^": "Closure:0;",
      call$1: function(e) {
        return !!J.getInterceptor(e).$isElement;
      }
    },
    EmbedElement: {
      "^": "HtmlElement;name=,type=",
      "%": "HTMLEmbedElement"
    },
    ErrorEvent: {
      "^": "Event;error=,message=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;path=,type=",
      preventDefault$0: function(receiver) {
        return receiver.preventDefault();
      },
      $isEvent: 1,
      "%": "AnimationPlayerEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ExtendableEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MediaKeyNeededEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;ClipboardEvent|Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      _addEventListener$3: function(receiver, type, listener, useCapture) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
      },
      _removeEventListener$3: function(receiver, type, listener, useCapture) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
      },
      $isEventTarget: 1,
      "%": ";EventTarget"
    },
    FieldSetElement: {
      "^": "HtmlElement;name=,type=",
      "%": "HTMLFieldSetElement"
    },
    File0: {
      "^": "Blob;name=",
      $isObject: 1,
      "%": "File"
    },
    FileList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.File0];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.File0];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "FileList"
    },
    Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.File0];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.File0];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin: {
      "^": "Interceptor_ListMixin+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.File0];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.File0];
      }
    },
    FormElement: {
      "^": "HtmlElement;length=,name=",
      "%": "HTMLFormElement"
    },
    HtmlCollection: {
      "^": "Interceptor_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    Interceptor_ListMixin0: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin0: {
      "^": "Interceptor_ListMixin0+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    HttpRequest: {
      "^": "HttpRequestEventTarget;responseText=",
      open$5$async$password$user: function(receiver, method, url, async, password, user) {
        return receiver.open(method, url, async, user, password);
      },
      open$3$async: function($receiver, method, url, async) {
        return $receiver.open(method, url, async);
      },
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      $isHttpRequest: 1,
      $isObject: 1,
      "%": "XMLHttpRequest"
    },
    HttpRequest_getString_closure: {
      "^": "Closure:70;",
      call$1: [function(xhr) {
        return J.get$responseText$x(xhr);
      }, null, null, 2, 0, null, 83, "call"]
    },
    HttpRequest_request_closure: {
      "^": "Closure:0;_captured_completer_1,_captured_xhr_2",
      call$1: [function(e) {
        var t1, t2, accepted, unknownRedirect, t3;
        t1 = this._captured_xhr_2;
        t2 = t1.status;
        if (typeof t2 !== "number")
          return t2.$ge();
        accepted = t2 >= 200 && t2 < 300;
        unknownRedirect = t2 > 307 && t2 < 400;
        t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
        t3 = this._captured_completer_1;
        if (t2)
          t3.complete$1(0, t1);
        else
          t3.completeError$1(e);
      }, null, null, 2, 0, null, 2, "call"]
    },
    HttpRequestEventTarget: {
      "^": "EventTarget;",
      "%": ";XMLHttpRequestEventTarget"
    },
    IFrameElement: {
      "^": "HtmlElement;name=",
      "%": "HTMLIFrameElement"
    },
    ImageData: {
      "^": "Interceptor;data=",
      $isImageData: 1,
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;",
      complete$1: function($receiver, arg0) {
        return $receiver.complete.call$1(arg0);
      },
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;files=,name=,type=,value=,directory:webkitdirectory=",
      accept$1: function($receiver, arg0) {
        return $receiver.accept.call$1(arg0);
      },
      $isElement: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      $isNode: 1,
      "%": "HTMLInputElement"
    },
    KeyboardEvent: {
      "^": "UIEvent;location=",
      "%": "KeyboardEvent"
    },
    KeygenElement: {
      "^": "HtmlElement;name=,type=",
      "%": "HTMLKeygenElement"
    },
    LIElement: {
      "^": "HtmlElement;value=",
      "%": "HTMLLIElement"
    },
    LinkElement: {
      "^": "HtmlElement;href},type=",
      "%": "HTMLLinkElement"
    },
    Location0: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "Location"
    },
    MapElement: {
      "^": "HtmlElement;name=",
      "%": "HTMLMapElement"
    },
    MediaElement: {
      "^": "HtmlElement;error=",
      pause$0: function(receiver) {
        return receiver.pause();
      },
      "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
    },
    MediaKeyEvent: {
      "^": "Event;message=",
      "%": "MediaKeyEvent"
    },
    MediaKeyMessageEvent: {
      "^": "Event;message=",
      "%": "MediaKeyMessageEvent"
    },
    MediaStream: {
      "^": "EventTarget;id=",
      "%": "MediaStream"
    },
    MenuElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLMenuElement"
    },
    MenuItemElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLMenuItemElement"
    },
    MessageEvent: {
      "^": "Event;",
      get$data: function(receiver) {
        return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
      },
      get$source: function(receiver) {
        return W._convertNativeToDart_EventTarget(receiver.source);
      },
      "%": "MessageEvent"
    },
    MetaElement: {
      "^": "HtmlElement;name=",
      "%": "HTMLMetaElement"
    },
    MeterElement: {
      "^": "HtmlElement;value=",
      "%": "HTMLMeterElement"
    },
    MidiMessageEvent: {
      "^": "Event;data=",
      "%": "MIDIMessageEvent"
    },
    MidiOutput: {
      "^": "MidiPort;",
      send$2: function(receiver, data, timestamp) {
        return receiver.send(data, timestamp);
      },
      send$1: function($receiver, data) {
        return $receiver.send(data);
      },
      "%": "MIDIOutput"
    },
    MidiPort: {
      "^": "EventTarget;id=,name=,type=,version=",
      "%": "MIDIInput;MIDIPort"
    },
    MouseEvent: {
      "^": "UIEvent;",
      get$client: function(receiver) {
        return H.setRuntimeTypeInfo(new P.Point0(receiver.clientX, receiver.clientY), [null]);
      },
      get$offset: function(receiver) {
        var target, point;
        if (!!receiver.offsetX)
          return H.setRuntimeTypeInfo(new P.Point0(receiver.offsetX, receiver.offsetY), [null]);
        else {
          if (!J.getInterceptor(W._convertNativeToDart_EventTarget(receiver.target)).$isElement)
            throw H.wrapException(new P.UnsupportedError("offsetX is only supported on elements"));
          target = W._convertNativeToDart_EventTarget(receiver.target);
          point = H.setRuntimeTypeInfo(new P.Point0(receiver.clientX, receiver.clientY), [null]).$sub(0, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
          return H.setRuntimeTypeInfo(new P.Point0(J.toInt$0$n(point.x), J.toInt$0$n(point.y)), [null]);
        }
      },
      $isMouseEvent: 1,
      $isObject: 1,
      "%": "DragEvent|MSPointerEvent|MouseEvent|PointerEvent|WheelEvent"
    },
    Navigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "Navigator"
    },
    NavigatorUserMediaError: {
      "^": "Interceptor;message=,name=",
      "%": "NavigatorUserMediaError"
    },
    _ChildNodeListLazy: {
      "^": "ListBase;_this",
      get$first: function(_) {
        var result = this._this.firstChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$last: function(_) {
        var result = this._this.lastChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$single: function(_) {
        var t1, l;
        t1 = this._this;
        l = t1.childNodes.length;
        if (l === 0)
          throw H.wrapException(new P.StateError("No elements"));
        if (l > 1)
          throw H.wrapException(new P.StateError("More than one element"));
        return t1.firstChild;
      },
      add$1: function(_, value) {
        this._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2, len, i;
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      },
      remove$1: function(_, object) {
        var t1;
        if (!J.getInterceptor(object).$isNode)
          return false;
        t1 = this._this;
        if (t1 !== object.parentNode)
          return false;
        t1.removeChild(object);
        return true;
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._this);
      },
      $indexSet: function(_, index, value) {
        var t1, t2;
        t1 = this._this;
        t2 = t1.childNodes;
        if (index >>> 0 !== index || index >= t2.length)
          return H.ioore(t2, index);
        t1.replaceChild(value, t2[index]);
      },
      get$iterator: function(_) {
        return C.NodeList_methods.get$iterator(this._this.childNodes);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on Node list"));
      },
      get$length: function(_) {
        return this._this.childNodes.length;
      },
      set$length: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot set length on immutable List."));
      },
      $index: function(_, index) {
        var t1 = this._this.childNodes;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $asListBase: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;parent:parentElement=,text:textContent%",
      get$nodes: function(receiver) {
        return new W._ChildNodeListLazy(receiver);
      },
      remove$0: function(receiver) {
        var t1 = receiver.parentNode;
        if (t1 != null)
          t1.removeChild(receiver);
      },
      replaceWith$1: function(receiver, otherNode) {
        var $parent, exception;
        try {
          $parent = receiver.parentNode;
          J._replaceChild$2$x($parent, otherNode, receiver);
        } catch (exception) {
          H.unwrapException(exception);
        }
        return receiver;
      },
      _clearChildren$0: function(receiver) {
        var t1;
        for (; t1 = receiver.firstChild, t1 != null;)
          receiver.removeChild(t1);
      },
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      append$1: function(receiver, newChild) {
        return receiver.appendChild(newChild);
      },
      contains$1: function(receiver, other) {
        return receiver.contains(other);
      },
      _replaceChild$2: function(receiver, newChild, oldChild) {
        return receiver.replaceChild(newChild, oldChild);
      },
      $isNode: 1,
      $isObject: 1,
      "%": ";Node"
    },
    NodeList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin1;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "NodeList|RadioNodeList"
    },
    Interceptor_ListMixin1: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin1: {
      "^": "Interceptor_ListMixin1+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    OListElement: {
      "^": "HtmlElement;start},type=",
      start$0: function($receiver) {
        return $receiver.start.call$0();
      },
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;data=,name=,type=",
      "%": "HTMLObjectElement"
    },
    OptionElement: {
      "^": "HtmlElement;value=",
      "%": "HTMLOptionElement"
    },
    OutputElement: {
      "^": "HtmlElement;name=,type=,value=",
      "%": "HTMLOutputElement"
    },
    ParamElement: {
      "^": "HtmlElement;name=,value=",
      "%": "HTMLParamElement"
    },
    PluginPlaceholderElement: {
      "^": "DivElement;message=",
      "%": "PluginPlaceholderElement"
    },
    PositionError: {
      "^": "Interceptor;message=",
      "%": "PositionError"
    },
    ProgressElement0: {
      "^": "HtmlElement;value=",
      "%": "HTMLProgressElement"
    },
    PushEvent: {
      "^": "Event;data=",
      "%": "PushEvent"
    },
    Range0: {
      "^": "Interceptor;",
      getBoundingClientRect$0: function(receiver) {
        return receiver.getBoundingClientRect();
      },
      "%": "Range"
    },
    ScriptElement0: {
      "^": "HtmlElement;type=",
      "%": "HTMLScriptElement"
    },
    SelectElement: {
      "^": "HtmlElement;length=,name=,type=,value=",
      "%": "HTMLSelectElement"
    },
    ShadowRoot: {
      "^": "DocumentFragment;innerHtml:innerHTML}",
      "%": "ShadowRoot"
    },
    SourceElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLSourceElement"
    },
    SpeechRecognitionError: {
      "^": "Event;error=,message=",
      "%": "SpeechRecognitionError"
    },
    SpeechRecognitionEvent: {
      "^": "Event;results=",
      "%": "SpeechRecognitionEvent"
    },
    SpeechRecognitionResult: {
      "^": "Interceptor;length=",
      $isObject: 1,
      "%": "SpeechRecognitionResult"
    },
    SpeechSynthesisEvent: {
      "^": "Event;name=",
      "%": "SpeechSynthesisEvent"
    },
    StyleElement: {
      "^": "HtmlElement;type=",
      "%": "HTMLStyleElement"
    },
    TableElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var table, fragment;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        fragment.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, J.get$nodes$x(table));
        return fragment;
      },
      "%": "HTMLTableElement"
    },
    TableRowElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment, t1, section, row;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        section.toString;
        t1 = new W._ChildNodeListLazy(section);
        row = t1.get$single(t1);
        fragment.toString;
        row.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
        return fragment;
      },
      "%": "HTMLTableRowElement"
    },
    TableSectionElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment, t1, section;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        fragment.toString;
        section.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
        return fragment;
      },
      "%": "HTMLTableSectionElement"
    },
    TemplateElement: {
      "^": "HtmlElement;",
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment;
        receiver.textContent = null;
        fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
        receiver.content.appendChild(fragment);
      },
      setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      },
      setInnerHtml$2$validator: function($receiver, html, validator) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      $isTemplateElement: 1,
      "%": "HTMLTemplateElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;name=,type=,value=",
      "%": "HTMLTextAreaElement"
    },
    TextEvent: {
      "^": "UIEvent;data=",
      "%": "TextEvent"
    },
    TrackElement: {
      "^": "HtmlElement;kind=",
      "%": "HTMLTrackElement"
    },
    UIEvent: {
      "^": "Event;which=",
      get$view: function(receiver) {
        return W._convertNativeToDart_Window(receiver.view);
      },
      "%": "FocusEvent|SVGZoomEvent|TouchEvent;UIEvent"
    },
    Window: {
      "^": "EventTarget;name=",
      get$document: function(receiver) {
        return receiver.document;
      },
      get$location: function(receiver) {
        return receiver.location;
      },
      get$parent: function(receiver) {
        return W._convertNativeToDart_Window(receiver.parent);
      },
      close$0: [function(receiver) {
        return receiver.close();
      }, null, "get$close", 0, 0, null],
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [null]);
      },
      get$onClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "click", false), [null]);
      },
      get$onDoubleClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "dblclick", false), [null]);
      },
      get$onMouseDown: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "mousedown", false), [null]);
      },
      $isWindow: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      "%": "DOMWindow|Window"
    },
    _Attr: {
      "^": "Node;name=,value=",
      get$text: function(receiver) {
        return receiver.textContent;
      },
      set$text: function(receiver, value) {
        receiver.textContent = value;
      },
      "%": "Attr"
    },
    _ClientRect: {
      "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.width;
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = receiver.height;
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(receiver.width);
        t4 = J.get$hashCode$(receiver.height);
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      get$topLeft: function(receiver) {
        return H.setRuntimeTypeInfo(new P.Point0(receiver.left, receiver.top), [null]);
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      "%": "ClientRect"
    },
    _DocumentType: {
      "^": "Node;",
      $isInterceptor: 1,
      "%": "DocumentType"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      "%": "DOMRect"
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "HTMLFrameSetElement"
    },
    _NamedNodeMap: {
      "^": "Interceptor_ListMixin_ImmutableListMixin2;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    Interceptor_ListMixin2: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin2: {
      "^": "Interceptor_ListMixin2+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    _SpeechRecognitionResultList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin3;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "SpeechRecognitionResultList"
    },
    Interceptor_ListMixin3: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin3: {
      "^": "Interceptor_ListMixin3+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      }
    },
    _AttributeMap: {
      "^": "Object;_html$_element<",
      forEach$1: function(_, f) {
        var t1, t2, _i, key;
        for (t1 = this.get$keys(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, this.$index(0, key));
        }
      },
      get$keys: function() {
        var attributes, keys, len, i;
        attributes = this._html$_element.attributes;
        keys = H.setRuntimeTypeInfo([], [P.String]);
        for (len = attributes.length, i = 0; i < len; ++i) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          if (this._matches$1(attributes[i])) {
            if (i >= attributes.length)
              return H.ioore(attributes, i);
            keys.push(J.get$name$x(attributes[i]));
          }
        }
        return keys;
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_html$_element",
      containsKey$1: function(key) {
        return this._html$_element.hasAttribute(key);
      },
      $index: function(_, key) {
        return this._html$_element.getAttribute(key);
      },
      $indexSet: function(_, key, value) {
        this._html$_element.setAttribute(key, value);
      },
      remove$1: function(_, key) {
        var t1, value;
        t1 = this._html$_element;
        value = t1.getAttribute(key);
        t1.removeAttribute(key);
        return value;
      },
      get$length: function(_) {
        return this.get$keys().length;
      },
      _matches$1: function(node) {
        return node.namespaceURI == null;
      }
    },
    _MarginCssRect: {
      "^": "CssRect;_html$_element,left,top,_width,_height",
      get$height: function(_) {
        return C.JSNumber_methods.round$0(this._html$_element.offsetHeight) + this._addOrSubtractToBoxModel$2($.$get$_HEIGHT(), "margin");
      },
      get$width: function(_) {
        return C.JSNumber_methods.round$0(this._html$_element.offsetWidth) + this._addOrSubtractToBoxModel$2($.$get$_WIDTH(), "margin");
      },
      get$left: function(_) {
        var t1, t2;
        t1 = J.get$left$x(this._html$_element.getBoundingClientRect());
        t2 = this._addOrSubtractToBoxModel$2(["left"], "margin");
        if (typeof t1 !== "number")
          return t1.$sub();
        return t1 - t2;
      },
      get$top: function(_) {
        var t1, t2;
        t1 = J.get$top$x(this._html$_element.getBoundingClientRect());
        t2 = this._addOrSubtractToBoxModel$2(["top"], "margin");
        if (typeof t1 !== "number")
          return t1.$sub();
        return t1 - t2;
      }
    },
    CssRect: {
      "^": "MutableRectangle;_html$_element<",
      _addOrSubtractToBoxModel$2: function(dimensions, augmentingMeasurement) {
        var styles, t1, t2, t3, t4, t5, val, _i, measurement, propValue, t6;
        styles = J.getComputedStyle$0$x(this._html$_element);
        for (t1 = dimensions.length, t2 = augmentingMeasurement === "margin", t3 = !t2, t4 = augmentingMeasurement === "content", t5 = styles && C.CssStyleDeclaration_methods, val = 0, _i = 0; _i < dimensions.length; dimensions.length === t1 || (0, H.throwConcurrentModificationError)(dimensions), ++_i) {
          measurement = dimensions[_i];
          if (t2) {
            propValue = t5._getPropertyValueHelper$1(styles, augmentingMeasurement + "-" + measurement);
            t6 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
            if (typeof t6 !== "number")
              return H.iae(t6);
            val += t6;
          }
          if (t4) {
            propValue = t5._getPropertyValueHelper$1(styles, "padding-" + measurement);
            t6 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
            if (typeof t6 !== "number")
              return H.iae(t6);
            val -= t6;
          }
          if (t3) {
            propValue = t5._getPropertyValueHelper$1(styles, "border-" + measurement + "-width");
            t6 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
            if (typeof t6 !== "number")
              return H.iae(t6);
            val -= t6;
          }
        }
        return val;
      },
      $asMutableRectangle: function() {
        return [P.num];
      },
      $as_RectangleBase: function() {
        return [P.num];
      },
      $asRectangle: function() {
        return [P.num];
      }
    },
    _ElementCssClassSet: {
      "^": "CssClassSetImpl;_html$_element<",
      readClasses$0: function() {
        var s, t1, t2, _i, trimmed;
        s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        for (t1 = this._html$_element.className.split(" "), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          trimmed = J.trim$0$s(t1[_i]);
          if (trimmed.length !== 0)
            s.add$1(0, trimmed);
        }
        return s;
      },
      writeClasses$1: function(s) {
        this._html$_element.className = s.join$1(0, " ");
      },
      get$length: function(_) {
        return this._html$_element.classList.length;
      },
      get$isEmpty: function(_) {
        return this._html$_element.classList.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._html$_element.classList.length !== 0;
      },
      contains$1: function(_, value) {
        return typeof value === "string" && this._html$_element.classList.contains(value);
      },
      add$1: function(_, value) {
        var list, t1;
        list = this._html$_element.classList;
        t1 = list.contains(value);
        list.add(value);
        return !t1;
      },
      toggle$2: function(_, value, shouldAdd) {
        var t1 = this._html$_element;
        return shouldAdd == null ? t1.classList.toggle(value) : W._ElementCssClassSet__toggleOnOff(t1, value, shouldAdd);
      },
      addAll$1: function(_, iterable) {
        W._ElementCssClassSet__addAll(this._html$_element, iterable);
      },
      static: {_ElementCssClassSet__toggleOnOff: function(_element, value, shouldAdd) {
          var list = _element.classList;
          if (shouldAdd) {
            list.add(value);
            return true;
          } else {
            list.remove(value);
            return false;
          }
        }, _ElementCssClassSet__addAll: function(_element, iterable) {
          var list, t1, _i;
          list = _element.classList;
          for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i)
            list.add(iterable[_i]);
        }}
    },
    Dimension: {
      "^": "Object;_html$_value,_unit",
      toString$0: function(_) {
        return H.S(this._html$_value) + H.S(this._unit);
      },
      get$value: function(_) {
        return this._html$_value;
      },
      Dimension$css$1: function(cssValue) {
        var t1, t2, t3;
        if (cssValue === "")
          cssValue = "0px";
        if (C.JSString_methods.endsWith$1(cssValue, "%"))
          this._unit = "%";
        else
          this._unit = C.JSString_methods.substring$1(cssValue, cssValue.length - 2);
        t1 = C.JSString_methods.contains$1(cssValue, ".");
        t2 = cssValue.length;
        t3 = this._unit;
        if (t1)
          this._html$_value = H.Primitives_parseDouble(C.JSString_methods.substring$2(cssValue, 0, t2 - t3.length), null);
        else
          this._html$_value = H.Primitives_parseInt(C.JSString_methods.substring$2(cssValue, 0, t2 - t3.length), null, null);
      },
      static: {Dimension$css: function(cssValue) {
          var t1 = new W.Dimension(null, null);
          t1.Dimension$css$1(cssValue);
          return t1;
        }}
    },
    _EventStream: {
      "^": "Stream;_html$_target,_eventType,_useCapture",
      asBroadcastStream$2$onCancel$onListen: function(onCancel, onListen) {
        return this;
      },
      asBroadcastStream$1$onCancel: function(onCancel) {
        return this.asBroadcastStream$2$onCancel$onListen(onCancel, null);
      },
      get$isBroadcast: function() {
        return true;
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        t1._tryResume$0();
        return t1;
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture"
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture",
      cancel$0: [function() {
        if (this._html$_target == null)
          return;
        this._unlisten$0();
        this._html$_target = null;
        this._onData = null;
        return;
      }, "call$0", "get$cancel", 0, 0, 5],
      pause$1: function(_, resumeSignal) {
        if (this._html$_target == null)
          return;
        ++this._pauseCount;
        this._unlisten$0();
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      get$isPaused: function() {
        return this._pauseCount > 0;
      },
      resume$0: function() {
        if (this._html$_target == null || this._pauseCount <= 0)
          return;
        --this._pauseCount;
        this._tryResume$0();
      },
      _tryResume$0: function() {
        var t1, t2, t3;
        t1 = this._onData;
        t2 = t1 != null;
        if (t2 && this._pauseCount <= 0) {
          t3 = this._html$_target;
          t3.toString;
          if (t2)
            J._addEventListener$3$x(t3, this._eventType, t1, this._useCapture);
        }
      },
      _unlisten$0: function() {
        var t1, t2, t3;
        t1 = this._onData;
        t2 = t1 != null;
        if (t2) {
          t3 = this._html$_target;
          t3.toString;
          if (t2)
            J._removeEventListener$3$x(t3, this._eventType, t1, this._useCapture);
        }
      }
    },
    _Html5NodeValidator: {
      "^": "Object;uriPolicy<",
      allowsElement$1: function(element) {
        return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, J.get$tagName$x(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        var tagName, t1, validator;
        tagName = J.get$tagName$x(element);
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
        if (validator == null)
          validator = t1.$index(0, "*::" + attributeName);
        if (validator == null)
          return false;
        return validator.call$4(element, attributeName, value, this);
      },
      _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
        var t1, _i;
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        if (t1.get$isEmpty(t1)) {
          for (_i = 0; _i < 261; ++_i)
            t1.$indexSet(0, C.List_1GN[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
          for (_i = 0; _i < 12; ++_i)
            t1.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
        }
      },
      $isNodeValidator: 1,
      static: {_Html5NodeValidator$: function(uriPolicy) {
          var e, t1;
          e = document.createElement("a", null);
          t1 = new W._SameOriginUriPolicy(e, window.location);
          t1 = new W._Html5NodeValidator(t1);
          t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
          return t1;
        }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
          return true;
        }, "call$4", "html__Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 27, 15, 42, 8, 43], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
          var t1, t2, t3, t4, t5;
          t1 = context.get$uriPolicy();
          t2 = t1._hiddenAnchor;
          t3 = J.getInterceptor$x(t2);
          t3.set$href(t2, value);
          t4 = t3.get$hostname(t2);
          t1 = t1._loc;
          t5 = t1.hostname;
          if (t4 == null ? t5 == null : t4 === t5) {
            t4 = t3.get$port(t2);
            t5 = t1.port;
            if (t4 == null ? t5 == null : t4 === t5) {
              t4 = t3.get$protocol(t2);
              t1 = t1.protocol;
              t1 = t4 == null ? t1 == null : t4 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
          if (!t1)
            if (t3.get$hostname(t2) === "")
              if (t3.get$port(t2) === "")
                t1 = t3.get$protocol(t2) === ":" || t3.get$protocol(t2) === "";
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = true;
          return t1;
        }, "call$4", "html__Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 27, 15, 42, 8, 43]}
    },
    ImmutableListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      remove$1: function(receiver, object) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on immutable List."));
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    NodeValidatorBuilder: {
      "^": "Object;_validators",
      add$1: function(_, validator) {
        this._validators.push(validator);
      },
      allowsElement$1: function(element) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
      }
    },
    NodeValidatorBuilder_allowsElement_closure: {
      "^": "Closure:0;_captured_element_0",
      call$1: function(v) {
        return v.allowsElement$1(this._captured_element_0);
      }
    },
    NodeValidatorBuilder_allowsAttribute_closure: {
      "^": "Closure:0;_captured_element_0,_captured_attributeName_1,_captured_value_2",
      call$1: function(v) {
        return v.allowsAttribute$3(this._captured_element_0, this._captured_attributeName_1, this._captured_value_2);
      }
    },
    _SimpleNodeValidator: {
      "^": "Object;uriPolicy<",
      allowsElement$1: function(element) {
        return this.allowedElements.contains$1(0, J.get$tagName$x(element));
      },
      allowsAttribute$3: ["super$_SimpleNodeValidator$allowsAttribute", function(element, attributeName, value) {
        var tagName, t1;
        tagName = J.get$tagName$x(element);
        t1 = this.allowedUriAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else if (t1.contains$1(0, "*::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else {
          t1 = this.allowedAttributes;
          if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
            return true;
          else if (t1.contains$1(0, "*::" + attributeName))
            return true;
          else if (t1.contains$1(0, H.S(tagName) + "::*"))
            return true;
          else if (t1.contains$1(0, "*::*"))
            return true;
        }
        return false;
      }],
      _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
        var legalAttributes, extraUriAttributes, t1;
        this.allowedElements.addAll$1(0, allowedElements);
        legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
        extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
        this.allowedAttributes.addAll$1(0, legalAttributes);
        t1 = this.allowedUriAttributes;
        t1.addAll$1(0, C.List_empty);
        t1.addAll$1(0, extraUriAttributes);
      }
    },
    _SimpleNodeValidator_closure: {
      "^": "Closure:0;",
      call$1: function(x) {
        return !C.JSArray_methods.contains$1(C.List_yrN, x);
      }
    },
    _SimpleNodeValidator_closure0: {
      "^": "Closure:0;",
      call$1: function(x) {
        return C.JSArray_methods.contains$1(C.List_yrN, x);
      }
    },
    _TemplatingNodeValidator: {
      "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
      allowsAttribute$3: function(element, attributeName, value) {
        if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
          return true;
        if (attributeName === "template" && value === "")
          return true;
        if (J.get$attributes$x(element)._html$_element.getAttribute("template") === "")
          return this._templateAttrs.contains$1(0, attributeName);
        return false;
      },
      static: {_TemplatingNodeValidator$: function() {
          var t1, t2, t3, t4;
          t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
          t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
          t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
          t4 = new W._TemplatingNodeValidator(P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, P.String), t2, t3, t4, null);
          t4._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, t1, ["TEMPLATE"], null);
          return t4;
        }}
    },
    _TemplatingNodeValidator_closure: {
      "^": "Closure:0;",
      call$1: [function(attr) {
        return "TEMPLATE::" + H.S(attr);
      }, null, null, 2, 0, null, 84, "call"]
    },
    _SvgNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        var t1 = J.getInterceptor(element);
        if (!!t1.$isScriptElement)
          return false;
        t1 = !!t1.$isSvgElement;
        if (t1 && element.tagName === "foreignObject")
          return false;
        if (t1)
          return true;
        return false;
      },
      allowsAttribute$3: function(element, attributeName, value) {
        if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
          return false;
        return this.allowsElement$1(element);
      }
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_length,_position,_current",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._length;
        if (nextPosition < t1) {
          this._current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._current;
      }
    },
    _DOMWindowCrossFrame: {
      "^": "Object;_window",
      get$location: function(_) {
        return W._LocationCrossFrame__createSafe(this._window.location);
      },
      get$parent: function(_) {
        return W._DOMWindowCrossFrame__createSafe(this._window.parent);
      },
      close$0: [function(_) {
        return this._window.close();
      }, null, "get$close", 0, 0, null],
      $isEventTarget: 1,
      $isInterceptor: 1,
      static: {_DOMWindowCrossFrame__createSafe: function(w) {
          if (w === window)
            return w;
          else
            return new W._DOMWindowCrossFrame(w);
        }}
    },
    _LocationCrossFrame: {
      "^": "Object;_location",
      static: {_LocationCrossFrame__createSafe: function($location) {
          if ($location === window.location)
            return $location;
          else
            return new W._LocationCrossFrame($location);
        }}
    },
    NodeValidator: {
      "^": "Object;"
    },
    _SameOriginUriPolicy: {
      "^": "Object;_hiddenAnchor,_loc"
    },
    _ValidatingTreeSanitizer: {
      "^": "Object;validator",
      sanitizeTree$1: function(node) {
        new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
      },
      _removeNode$2: function(node, $parent) {
        if ($parent == null)
          J.remove$0$ax(node);
        else
          $parent.removeChild(node);
      },
      _sanitizeUntrustedElement$2: function(element, $parent) {
        var corrupted, attrs, isAttr, elementText, elementTagName, exception;
        corrupted = true;
        attrs = null;
        isAttr = null;
        try {
          attrs = J.get$attributes$x(element);
          isAttr = attrs.get$_html$_element().getAttribute("is");
          corrupted = function(element) {
            if (!(element.attributes instanceof NamedNodeMap))
              return true;
            var childNodes = element.childNodes;
            if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
              return true;
            if (element.children)
              if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
                return true;
            return false;
          }(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        elementText = "element unprintable";
        try {
          elementText = J.toString$0$(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        elementTagName = "element tag unavailable";
        try {
          elementTagName = J.get$tagName$x(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        this._sanitizeElement$7(element, $parent, corrupted, elementText, elementTagName, attrs, isAttr);
      },
      _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
        var t1, keys, i, $name, t2;
        if (corrupted) {
          window;
          t1 = "Removing element due to corrupted attributes on <" + text + ">";
          if (typeof console != "undefined")
            console.warn(t1);
          this._removeNode$2(element, $parent);
          return;
        }
        if (!this.validator.allowsElement$1(element)) {
          window;
          t1 = "Removing disallowed element <" + H.S(tag) + ">";
          if (typeof console != "undefined")
            console.warn(t1);
          this._removeNode$2(element, $parent);
          return;
        }
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(element, "is", isAttr)) {
            window;
            t1 = "Removing disallowed type extension <" + H.S(tag) + " is=\"" + isAttr + "\">";
            if (typeof console != "undefined")
              console.warn(t1);
            this._removeNode$2(element, $parent);
            return;
          }
        t1 = attrs.get$keys();
        keys = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        for (i = attrs.get$keys().length - 1, t1 = attrs._html$_element; i >= 0; --i) {
          if (i >= keys.length)
            return H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(element, J.toLowerCase$0$s($name), t1.getAttribute($name))) {
            window;
            t2 = "Removing disallowed attribute <" + H.S(tag) + " " + H.S($name) + "=\"" + H.S(t1.getAttribute($name)) + "\">";
            if (typeof console != "undefined")
              console.warn(t2);
            t1.getAttribute($name);
            t1.removeAttribute($name);
          }
        }
        if (!!J.getInterceptor(element).$isTemplateElement)
          this.sanitizeTree$1(element.content);
      }
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: {
      "^": "Closure:71;_html$_captured_this_0",
      call$2: function(node, $parent) {
        var t1, child, nextChild;
        t1 = this._html$_captured_this_0;
        switch (node.nodeType) {
          case 1:
            t1._sanitizeUntrustedElement$2(node, $parent);
            break;
          case 8:
          case 11:
          case 3:
          case 4:
            break;
          default:
            t1._removeNode$2(node, $parent);
        }
        child = node.lastChild;
        for (; child != null; child = nextChild) {
          nextChild = child.previousSibling;
          this.call$2(child, node);
        }
      }
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    KeyRange: {
      "^": "Interceptor;",
      $isKeyRange: 1,
      "%": "IDBKeyRange"
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    AElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGAElement"
    },
    AltGlyphElement: {
      "^": "TextPositioningElement;",
      format$4$lineLength: function($receiver, arg0, arg1, arg2, arg3) {
        return $receiver.format.call$4$lineLength(arg0, arg1, arg2, arg3);
      },
      $isInterceptor: 1,
      "%": "SVGAltGlyphElement"
    },
    AnimationElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
    },
    FEBlendElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;type=,result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFEOffsetElement"
    },
    FEPointLightElement: {
      "^": "SvgElement;x=,y=",
      "%": "SVGFEPointLightElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFESpecularLightingElement"
    },
    FESpotLightElement: {
      "^": "SvgElement;x=,y=",
      "%": "SVGFESpotLightElement"
    },
    FETileElement: {
      "^": "SvgElement;result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;type=,result=,x=,y=",
      $isInterceptor: 1,
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;x=,y=",
      $isInterceptor: 1,
      "%": "SVGFilterElement"
    },
    ForeignObjectElement: {
      "^": "GraphicsElement;x=,y=",
      "%": "SVGForeignObjectElement"
    },
    GeometryElement: {
      "^": "GraphicsElement;",
      "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      transform$1: function($receiver, arg0) {
        return $receiver.transform.call$1(arg0);
      },
      $isInterceptor: 1,
      "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;x=,y=",
      $isInterceptor: 1,
      "%": "SVGImageElement"
    },
    MarkerElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMarkerElement"
    },
    MaskElement: {
      "^": "SvgElement;x=,y=",
      $isInterceptor: 1,
      "%": "SVGMaskElement"
    },
    PatternElement: {
      "^": "SvgElement;x=,y=",
      $isInterceptor: 1,
      "%": "SVGPatternElement"
    },
    RectElement: {
      "^": "GeometryElement;x=,y=",
      "%": "SVGRectElement"
    },
    ScriptElement: {
      "^": "SvgElement;type=",
      $isScriptElement: 1,
      $isInterceptor: 1,
      "%": "SVGScriptElement"
    },
    StyleElement0: {
      "^": "SvgElement;type=",
      "%": "SVGStyleElement"
    },
    _AttributeClassSet: {
      "^": "CssClassSetImpl;_svg$_element",
      readClasses$0: function() {
        var classname, s, t1, t2, _i, trimmed;
        classname = this._svg$_element.getAttribute("class");
        s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        if (classname == null)
          return s;
        for (t1 = classname.split(" "), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          trimmed = J.trim$0$s(t1[_i]);
          if (trimmed.length !== 0)
            s.add$1(0, trimmed);
        }
        return s;
      },
      writeClasses$1: function(s) {
        this._svg$_element.setAttribute("class", s.join$1(0, " "));
      }
    },
    SvgElement: {
      "^": "Element;",
      get$classes: function(receiver) {
        return new P._AttributeClassSet(receiver);
      },
      get$children: function(receiver) {
        return new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      },
      set$innerHtml: function(receiver, value) {
        this.setInnerHtml$1(receiver, value);
      },
      createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
        var t1, html, fragment, svgFragment, root;
        if (treeSanitizer == null) {
          if (validator == null) {
            t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
            validator = new W.NodeValidatorBuilder(t1);
            t1.push(W._Html5NodeValidator$(null));
            t1.push(W._TemplatingNodeValidator$());
            t1.push(new W._SvgNodeValidator());
          }
          treeSanitizer = new W._ValidatingTreeSanitizer(validator);
        }
        html = "<svg version=\"1.1\">" + svg + "</svg>";
        t1 = document.body;
        fragment = (t1 && C.BodyElement_methods).createFragment$2$treeSanitizer(t1, html, treeSanitizer);
        svgFragment = document.createDocumentFragment();
        fragment.toString;
        t1 = new W._ChildNodeListLazy(fragment);
        root = t1.get$single(t1);
        for (; t1 = root.firstChild, t1 != null;)
          svgFragment.appendChild(t1);
        return svgFragment;
      },
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "change", false), [null]);
      },
      get$onClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "click", false), [null]);
      },
      get$onDoubleClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "dblclick", false), [null]);
      },
      get$onMouseDown: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousedown", false), [null]);
      },
      $isSvgElement: 1,
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGTitleElement|SVGVKernElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;x=,y=",
      $isInterceptor: 1,
      "%": "SVGSVGElement"
    },
    SymbolElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGSymbolElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": ";SVGTextContentElement"
    },
    TextPathElement: {
      "^": "TextContentElement;",
      $isInterceptor: 1,
      "%": "SVGTextPathElement"
    },
    TextPositioningElement: {
      "^": "TextContentElement;x=,y=",
      "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
    },
    UseElement: {
      "^": "GraphicsElement;x=,y=",
      $isInterceptor: 1,
      "%": "SVGUseElement"
    },
    ViewElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGViewElement"
    },
    _GradientElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
    },
    _SVGCursorElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGCursorElement"
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEDropShadowElement"
    },
    _SVGGlyphRefElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGGlyphRefElement"
    },
    _SVGMPathElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMPathElement"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": ""
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": ""
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlError: {
      "^": "Interceptor;message=",
      "%": "SQLError"
    }
  }], ["dart.isolate", "dart:isolate",, P, {
    "^": "",
    Capability: {
      "^": "Object;"
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    _convertDartFunction: function(f, captureThis) {
      return function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, f, captureThis);
    },
    _callDartFunction: [function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      if (captureThis === true) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$ax($arguments, P.js___convertToDart$closure()), true, null);
      return P._convertToJS(H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs));
    }, null, null, 8, 0, null, 85, 86, 87, 88],
    _defineProperty: function(o, $name, value) {
      var exception;
      if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name))
        try {
          Object.defineProperty(o, $name, {value: value});
          return true;
        } catch (exception) {
          H.unwrapException(exception);
        }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: [function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor(o);
      if (!!t1.$isJsObject)
        return o._jsObject;
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    }, "call$1", "js___convertToJS$closure", 2, 0, 0, 24],
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: [function(o) {
      var t1;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else {
        if (o instanceof Object) {
          t1 = J.getInterceptor(o);
          t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
        } else
          t1 = false;
        if (t1)
          return o;
        else if (o instanceof Date)
          return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
        else if (o.constructor === $.$get$_dartProxyCtor())
          return o.o;
        else
          return P._wrapToDart(o);
      }
    }, "call$1", "js___convertToDart$closure", 2, 0, 17, 24],
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: {
      "^": "Object;_jsObject",
      $index: ["super$JsObject$$index", function(_, property) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return P._convertToDart(this._jsObject[property]);
      }],
      $indexSet: ["super$JsObject$$indexSet", function(_, property, value) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        this._jsObject[property] = P._convertToJS(value);
      }],
      get$hashCode: function(_) {
        return 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof P.JsObject && this._jsObject === other._jsObject;
      },
      toString$0: function(_) {
        var t1, exception;
        try {
          t1 = String(this._jsObject);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
          return this.super$Object$toString(this);
        }
      },
      callMethod$2: function(method, args) {
        var t1, t2;
        t1 = this._jsObject;
        t2 = args == null ? null : P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P.js___convertToJS$closure()), [null, null]), true, null);
        return P._convertToDart(t1[method].apply(t1, t2));
      },
      callMethod$1: function(method) {
        return this.callMethod$2(method, null);
      },
      static: {JsObject_JsObject: function($constructor, $arguments) {
          var constr, args, factoryFunction;
          constr = P._convertToJS($constructor);
          if ($arguments instanceof Array)
            switch ($arguments.length) {
              case 0:
                return P._wrapToDart(new constr());
              case 1:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0])));
              case 2:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1])));
              case 3:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2])));
              case 4:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2]), P._convertToJS($arguments[3])));
            }
          args = [null];
          C.JSArray_methods.addAll$1(args, H.setRuntimeTypeInfo(new H.MappedListIterable($arguments, P.js___convertToJS$closure()), [null, null]));
          factoryFunction = constr.bind.apply(constr, args);
          String(factoryFunction);
          return P._wrapToDart(new factoryFunction());
        }, JsObject_JsObject$fromBrowserObject: function(object) {
          if (typeof object === "number" || typeof object === "string" || typeof object === "boolean" || object == null)
            throw H.wrapException(P.ArgumentError$("object cannot be a num, string, bool, or null"));
          return P._wrapToDart(P._convertToJS(object));
        }, JsObject__convertDataTree: function(data) {
          return new P.JsObject__convertDataTree__convert(H.setRuntimeTypeInfo(new P._IdentityHashMap(0, null, null, null, null), [null, null])).call$1(data);
        }}
    },
    JsObject__convertDataTree__convert: {
      "^": "Closure:0;_captured__convertedObjects_0",
      call$1: [function(o) {
        var t1, t2, convertedMap, key, convertedList;
        t1 = this._captured__convertedObjects_0;
        if (t1.containsKey$1(o))
          return t1.$index(0, o);
        t2 = J.getInterceptor(o);
        if (!!t2.$isMap) {
          convertedMap = {};
          t1.$indexSet(0, o, convertedMap);
          for (t1 = J.get$iterator$ax(o.get$keys()); t1.moveNext$0();) {
            key = t1.get$current();
            convertedMap[key] = this.call$1(t2.$index(o, key));
          }
          return convertedMap;
        } else if (!!t2.$isIterable) {
          convertedList = [];
          t1.$indexSet(0, o, convertedList);
          C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
          return convertedList;
        } else
          return P._convertToJS(o);
      }, null, null, 2, 0, null, 24, "call"]
    },
    JsFunction: {
      "^": "JsObject;_jsObject",
      apply$2$thisArg: function(args, thisArg) {
        var t1, t2;
        t1 = P._convertToJS(thisArg);
        t2 = P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P.js___convertToJS$closure()), [null, null]), true, null);
        return P._convertToDart(this._jsObject.apply(t1, t2));
      },
      apply$1: function(args) {
        return this.apply$2$thisArg(args, null);
      }
    },
    JsArray: {
      "^": "JsObject_ListMixin;_jsObject",
      $index: function(_, index) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        return this.super$JsObject$$index(this, index);
      },
      $indexSet: function(_, index, value) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        this.super$JsObject$$indexSet(this, index, value);
      },
      get$length: function(_) {
        var len = this._jsObject.length;
        if (typeof len === "number" && len >>> 0 === len)
          return len;
        throw H.wrapException(new P.StateError("Bad JsArray length"));
      },
      set$length: function(_, $length) {
        this.super$JsObject$$indexSet(this, "length", $length);
      },
      add$1: function(_, value) {
        this.callMethod$2("push", [value]);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        var $length, args;
        P.JsArray__checkRange(start, end, this.get$length(this));
        $length = end - start;
        if ($length === 0)
          return;
        args = [start, $length];
        C.JSArray_methods.addAll$1(args, J.skip$1$ax(iterable, skipCount).take$1(0, $length));
        this.callMethod$2("splice", args);
      },
      static: {JsArray__checkRange: function(start, end, $length) {
          if (start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, null, null));
          if (end < start || end > $length)
            throw H.wrapException(P.RangeError$range(end, start, $length, null, null));
        }}
    },
    JsObject_ListMixin: {
      "^": "JsObject+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _convertToJS_closure: {
      "^": "Closure:0;",
      call$1: function(o) {
        var jsFunction = P._convertDartFunction(o, false);
        P._defineProperty(jsFunction, $.$get$_DART_CLOSURE_PROPERTY_NAME(), o);
        return jsFunction;
      }
    },
    _convertToJS_closure0: {
      "^": "Closure:0;_captured_ctor_0",
      call$1: function(o) {
        return new this._captured_ctor_0(o);
      }
    },
    _wrapToDart_closure: {
      "^": "Closure:0;",
      call$1: function(o) {
        return new P.JsFunction(o);
      }
    },
    _wrapToDart_closure0: {
      "^": "Closure:0;",
      call$1: function(o) {
        return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
      }
    },
    _wrapToDart_closure1: {
      "^": "Closure:0;",
      call$1: function(o) {
        return new P.JsObject(o);
      }
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish0: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    min: function(a, b) {
      if (typeof a !== "number")
        throw H.wrapException(P.ArgumentError$(a));
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    },
    max: function(a, b) {
      if (typeof a !== "number")
        throw H.wrapException(P.ArgumentError$(a));
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if (C.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && C.JSNumber_methods.get$isNegative(a))
        return b;
      return a;
    },
    Point0: {
      "^": "Object;x>,y>",
      toString$0: function(_) {
        return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (!(other instanceof P.Point0))
          return false;
        t1 = this.x;
        t2 = other.x;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this.y;
          t2 = other.y;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = J.get$hashCode$(this.x);
        t2 = J.get$hashCode$(this.y);
        return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
      },
      $add: function(_, other) {
        var t1, t2, t3, t4;
        t1 = this.x;
        t2 = J.getInterceptor$x(other);
        t3 = t2.get$x(other);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = this.y;
        t2 = t2.get$y(other);
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new P.Point0(t1 + t3, t4 + t2);
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        return t2;
      },
      $sub: function(_, other) {
        var t1, t2, t3, t4;
        t1 = this.x;
        t2 = J.getInterceptor$x(other);
        t3 = t2.get$x(other);
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = this.y;
        t2 = t2.get$y(other);
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new P.Point0(t1 - t3, t4 - t2);
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        return t2;
      },
      $mul: function(_, factor) {
        var t1, t2;
        t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof factor !== "number")
          return H.iae(factor);
        t2 = this.y;
        if (typeof t2 !== "number")
          return t2.$mul();
        t2 = new P.Point0(t1 * factor, t2 * factor);
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        return t2;
      }
    },
    _RectangleBase: {
      "^": "Object;",
      get$right: function(_) {
        return this.get$left(this) + this.get$width(this);
      },
      get$bottom: function(_) {
        return this.get$top(this) + this.get$height(this);
      },
      toString$0: function(_) {
        return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.get$top(this)) + ") " + H.S(this.get$width(this)) + " x " + H.S(this.get$height(this));
      },
      $eq: function(_, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        if (this.get$left(this) === t1.get$left(other)) {
          t2 = this.get$top(this);
          t3 = t1.get$top(other);
          t1 = (t2 == null ? t3 == null : t2 === t3) && this.get$left(this) + this.get$width(this) === t1.get$right(other) && this.get$top(this) + this.get$height(this) === t1.get$bottom(other);
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.get$left(this);
        t2 = this.get$top(this);
        t3 = this.get$left(this);
        t4 = this.get$width(this);
        t5 = this.get$top(this);
        t6 = this.get$height(this);
        return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1 & 0x1FFFFFFF), t2 & 0x1FFFFFFF), t3 + t4 & 0x1FFFFFFF), t5 + t6 & 0x1FFFFFFF));
      },
      get$topLeft: function(_) {
        return H.setRuntimeTypeInfo(new P.Point0(this.get$left(this), this.get$top(this)), [H.getRuntimeTypeArgument(this, "_RectangleBase", 0)]);
      }
    },
    Rectangle: {
      "^": "_RectangleBase;left>,top>,width>,height>",
      $asRectangle: null,
      static: {Rectangle$: function(left, $top, width, height, $T) {
          var t1 = width < 0 ? -width * 0 : width;
          return H.setRuntimeTypeInfo(new P.Rectangle(left, $top, t1, height < 0 ? -height * 0 : height), [$T]);
        }}
    },
    MutableRectangle: {
      "^": "_RectangleBase;left>,top>",
      get$width: function(_) {
        return this._width;
      },
      get$height: function(_) {
        return this._height;
      },
      $isRectangle: 1,
      $asRectangle: null
    }
  }], ["dart.pkg.collection.equality", "package:collection/equality.dart",, Z, {
    "^": "",
    DefaultEquality: {
      "^": "Object;"
    },
    IterableEquality: {
      "^": "Object;_elementEquality",
      equals$2: function(elements1, elements2) {
        var it1, it2, hasNext;
        if (elements1 === elements2)
          return true;
        it1 = new J.ArrayIterator(elements1, elements1.length, 0, null);
        it2 = new J.ArrayIterator(elements2, elements2.length, 0, null);
        for (; true;) {
          hasNext = it1.moveNext$0();
          if (hasNext !== it2.moveNext$0())
            return false;
          if (!hasNext)
            return true;
          if (!J.$eq$(it1.__interceptors$_current, it2.__interceptors$_current))
            return false;
        }
      },
      hash$1: function(_, elements) {
        var t1, hash, _i, c;
        for (t1 = elements.length, hash = 0, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i) {
          c = J.get$hashCode$(elements[_i]);
          if (typeof c !== "number")
            return H.iae(c);
          hash = hash + c & 2147483647;
          hash = hash + (hash << 10 >>> 0) & 2147483647;
          hash ^= hash >>> 6;
        }
        hash = hash + (hash << 3 >>> 0) & 2147483647;
        hash ^= hash >>> 11;
        return hash + (hash << 15 >>> 0) & 2147483647;
      }
    }
  }], ["dart.typed_data", "dart:typed_data",, P, {
    "^": "",
    Uint8List: {
      "^": "Object;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isTypedData: 1,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    NativeByteBuffer: {
      "^": "Interceptor;",
      $isNativeByteBuffer: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;",
      _invalidPosition$2: function(receiver, position, $length) {
        throw H.wrapException(P.RangeError$range(position, 0, $length, null, null));
      },
      _checkPosition$2: function(receiver, position, $length) {
        if (position >>> 0 !== position || position > $length)
          this._invalidPosition$2(receiver, position, $length);
      },
      $isNativeTypedData: 1,
      $isTypedData: 1,
      "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
    },
    NativeByteData: {
      "^": "NativeTypedData;",
      $isTypedData: 1,
      "%": "DataView"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      _setRangeFast$4: function(receiver, start, end, source, skipCount) {
        var targetLength, count, sourceLength;
        targetLength = receiver.length;
        this._checkPosition$2(receiver, start, targetLength);
        this._checkPosition$2(receiver, end, targetLength);
        if (start > end)
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        count = end - start;
        sourceLength = source.length;
        if (sourceLength - skipCount < count)
          throw H.wrapException(new P.StateError("Not enough elements"));
        if (skipCount !== 0 || sourceLength !== count)
          source = source.subarray(skipCount, skipCount + count);
        receiver.set(source, start);
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      }
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    NativeTypedArrayOfInt: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin0: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin0: {
      "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;",
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float32Array"
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float64Array"
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": ";Uint8Array"
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["", "package:atom_dartlang/analysis/dartdoc.dart",, B, {
    "^": "",
    DartdocHelper: {
      "^": "Object;_disposables,_control",
      dispose$0: [function() {
        this._disposables.dispose$0();
        this._hideControl$0();
      }, "call$0", "get$dispose", 0, 0, 2],
      _activateEditor$1: [function(editor) {
        this._hideControl$0();
      }, "call$1", "get$_activateEditor", 2, 0, 8, 13],
      _hideControl$0: function() {
        var t1 = this._control;
        if (t1 != null) {
          t1._sub.cancel$0();
          t1._cmdDispose.invoke$1("dispose");
          t1.super$CoreElement$dispose();
        }
        this._control = null;
      },
      _handleDartdoc$1: function($event) {
        var editor, t1, range, offset;
        if (!X.Dependencies_instance().getDependency$1(C.Type_bhC).get$isActive()) {
          this._hideControl$0();
          $.$get$atom().invoke$1("beep");
          return;
        }
        editor = $event.get$editor();
        t1 = editor.invoke$1("getSelectedBufferRange");
        range = t1 == null ? null : new E.Range(E._cvt(t1));
        offset = new E.TextBuffer(E._cvt(editor.invoke$1("getBuffer"))).invoke$2("characterIndexForPosition", new E.Point(E._cvt(J.$index$asx(range.obj, "start"))));
        X.Dependencies_instance().getDependency$1(C.Type_bhC).getHover$2(editor.invoke$1("getPath"), offset).then$1(new B.DartdocHelper__handleDartdoc_closure(this, true, editor));
      },
      DartdocHelper$0: function() {
        this._disposables.Disposables__disposables.push($.$get$atom()._commands.add$3(0, "atom-text-editor", "dartlang:show-dartdoc", new B.DartdocHelper_closure(this)));
        var t1 = X.Dependencies_instance().getDependency$1(C.Type_25m).get$dartProjectEditors()._activeEditorController;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(this.get$_activateEditor());
      },
      $isDisposable: 1,
      static: {DartdocHelper$: function() {
          var t1 = new B.DartdocHelper(new G.Disposables([]), null);
          t1.DartdocHelper$0();
          return t1;
        }, DartdocHelper__title: function(hover) {
          if (hover.get$elementDescription() != null)
            return hover.get$elementDescription();
          if (hover.get$staticType() != null)
            return hover.get$staticType();
          if (hover.get$propagatedType() != null)
            return hover.get$propagatedType();
          return "Dartdoc";
        }, DartdocHelper__render: function(hover) {
          var buf, t1;
          buf = new P.StringBuffer("");
          new B.DartdocHelper__render_writeTitle(buf).call$2("propagated type", hover.get$propagatedType());
          if (hover.get$dartdoc() != null) {
            t1 = buf._contents;
            if (t1.length !== 0)
              buf._contents = t1 + "<br>";
            buf._contents += "\n" + B.markdownToHtml(hover.get$dartdoc(), null, false, null, new B.DartdocHelper__render_closure()) + "\n";
          }
          t1 = buf._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, DartdocHelper__getLibraryName: function(hover) {
          var $name, t1, index;
          $name = hover.get$containingLibraryName();
          if ($name != null && J.get$isNotEmpty$asx($name) === true)
            return $name;
          $name = hover.get$containingLibraryPath();
          if ($name == null || J.get$isEmpty$asx($name) === true)
            return;
          t1 = J.getInterceptor$asx($name);
          index = t1.lastIndexOf$1($name, "/");
          if (index !== -1)
            $name = t1.substring$1($name, index + 1);
          t1 = J.getInterceptor$asx($name);
          index = t1.lastIndexOf$1($name, "\\");
          return index !== -1 ? t1.substring$1($name, index + 1) : $name;
        }}
    },
    DartdocHelper_closure: {
      "^": "Closure:0;_dartdoc$_captured_this_0",
      call$1: function($event) {
        this._dartdoc$_captured_this_0._handleDartdoc$1($event);
      }
    },
    DartdocHelper__handleDartdoc_closure: {
      "^": "Closure:72;_dartdoc$_captured_this_0,_captured_explicit_1,_dartdoc$_captured_editor_2",
      call$1: [function(result) {
        var t1, hover, t2, t3, t4;
        t1 = this._dartdoc$_captured_this_0;
        t1._hideControl$0();
        if (J.get$isEmpty$asx(result.get$hovers())) {
          if (this._captured_explicit_1)
            $.$get$atom().invoke$1("beep");
          return;
        }
        hover = J.get$first$ax(result.get$hovers());
        t2 = B.DartdocControl$(this._dartdoc$_captured_editor_2);
        t1._control = t2;
        t3 = B.DartdocHelper__title(hover);
        J.clear$0$ax(J.get$children$x(t2._titleDiv.get$element()));
        J.add$1$ax(t2._titleDiv, K.CoreElement$("div", null, "inline-block text-highlight", t3));
        t3 = t1._control;
        t2 = B.DartdocHelper__render(hover);
        t3.toString;
        if (t2.length !== 0)
          J.setInnerHtml$2$validator$x(t3._bodyDiv.get$element(), t2, new S.PermissiveNodeValidator());
        else
          J.add$1$ax(t3._bodyDiv, K.CoreElement$("p", null, "text-subtle", "No documentation."));
        t1 = t1._control;
        t2 = hover.get$containingClassDescription();
        t3 = hover.get$elementKind();
        t4 = B.DartdocHelper__getLibraryName(hover);
        J.clear$0$ax(J.get$children$x(t1._footerDiv.get$element()));
        if (t2 != null)
          J.add$1$ax(t1._footerDiv, K.CoreElement$("div", null, "inline-block highlight-success", t2));
        if (t3 != null)
          J.add$1$ax(t1._footerDiv, K.CoreElement$("div", null, "inline-block highlight-success", t3));
        t2 = t1._footerDiv;
        t3 = K.CoreElement$("span", null, null, null);
        J.set$innerHtml$x(t3.element, "&nbsp;");
        J.add$1$ax(t2, t3);
        if (t4 != null)
          J.add$1$ax(t1._footerDiv, K.CoreElement$("div", null, "inline-block highlight-info pull-right", t4));
      }, null, null, 2, 0, null, 1, "call"]
    },
    DartdocHelper__render_writeTitle: {
      "^": "Closure:73;_captured_buf_0",
      call$2: function(title, desc) {
        if (desc != null && J.get$isNotEmpty$asx(desc) === true)
          this._captured_buf_0._contents += "<span class='inline-block highlight'>" + title + "</span> " + H.S(desc) + "<br>\n";
      }
    },
    DartdocHelper__render_closure: {
      "^": "Closure:4;",
      call$1: [function($name) {
        return new Y.Element1("code", [new Y.Text($name)], P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String));
      }, null, null, 2, 0, null, 41, "call"]
    },
    DartdocControl: {
      "^": "CoreElement;_cmdDispose,_sub,_titleDiv,_bodyDiv,_footerDiv,element",
      dispose$0: function() {
        this._sub.cancel$0();
        this._cmdDispose.invoke$1("dispose");
        this.super$CoreElement$dispose();
      },
      DartdocControl$1: function(editor) {
        var t1, t2;
        t1 = this.element;
        J.setAttribute$2$x(t1, "id", "dartdoc-tooltip");
        t2 = $.$get$atom();
        this._cmdDispose = t2._commands.add$3(0, "atom-workspace", "core:cancel", new B.DartdocControl_closure(this));
        this._sub = editor.eventStream$1("onDidDestroy").listen$1(new B.DartdocControl_closure0(this));
        this._titleDiv = this.add$1(0, K.CoreElement$("div", null, "dartdoc-title", null));
        this._bodyDiv = this.add$1(0, K.CoreElement$("div", null, "dartdoc-body", null));
        this._footerDiv = this.add$1(0, K.CoreElement$("div", null, "dartdoc-footer", null));
        J.append$1$x(J.$index$asx(t2._views.invoke$2("getView", editor.obj), "parentElement"), t1);
      },
      static: {DartdocControl$: function(editor) {
          var t1 = new B.DartdocControl(null, null, null, null, null, W._ElementFactoryProvider_createElement_tag("div", null));
          t1.CoreElement$4$attributes$classes$text("div", null, "dartdoc-tooltip select-list popover-list", null);
          t1.DartdocControl$1(editor);
          return t1;
        }}
    },
    DartdocControl_closure: {
      "^": "Closure:0;_dartdoc$_captured_this_0",
      call$1: function(_) {
        var t1 = this._dartdoc$_captured_this_0;
        t1._sub.cancel$0();
        t1._cmdDispose.invoke$1("dispose");
        t1.super$CoreElement$dispose();
        return;
      }
    },
    DartdocControl_closure0: {
      "^": "Closure:0;_dartdoc$_captured_this_1",
      call$1: [function(_) {
        var t1 = this._dartdoc$_captured_this_1;
        t1._sub.cancel$0();
        t1._cmdDispose.invoke$1("dispose");
        t1.super$CoreElement$dispose();
        return;
      }, null, null, 2, 0, null, 0, "call"]
    }
  }], ["frappe", "package:frappe/frappe.dart",, Z, {
    "^": "",
    EventStream: {
      "^": "Reactable;_frappe$_controller",
      get$isBroadcast: function() {
        var t1 = this._frappe$_controller;
        return t1.get$stream(t1).get$isBroadcast();
      },
      _createControllerForStream$1: function(stream) {
        var t1, t2;
        t1 = {};
        t1._captured_subscription_0 = null;
        t2 = new Z.EventStream__createControllerForStream_onListen(t1, this, stream);
        t1 = new Z.EventStream__createControllerForStream_onCancel(t1);
        return stream.get$isBroadcast() ? P.StreamController_StreamController$broadcast(t1, t2, true, null) : P.StreamController_StreamController(t1, t2, null, null, true, null);
      },
      asBroadcastStream$2$onCancel$onListen: function(onCancel, onListen) {
        var t1, t2;
        t1 = this.super$Stream$asBroadcastStream(onCancel, onListen);
        t2 = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      asBroadcastStream$1$onCancel: function(onCancel) {
        return this.asBroadcastStream$2$onCancel$onListen(onCancel, null);
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = this._frappe$_controller;
        return t1.get$stream(t1).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      map$1: function(_, convert) {
        var t1, t2;
        t1 = this.super$Stream$map(this, convert);
        t2 = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      take$1: function(_, count) {
        var t1, t2;
        t1 = this.super$Stream$take(this, count);
        t2 = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      transform$1: function(_, streamTransformer) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, streamTransformer);
        t2 = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      where$1: function(_, test) {
        var t1, t2;
        t1 = this.super$Stream$where(this, test);
        t2 = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      }
    },
    EventStream__createControllerForStream_onListen: {
      "^": "Closure:2;_frappe$_box_0,_frappe$_captured_this_1,_frappe$_captured_stream_2",
      call$0: function() {
        var t1, t2, t3;
        t1 = this._frappe$_captured_this_1;
        t2 = t1._frappe$_controller;
        t2 = t2.get$add(t2);
        t3 = t1._frappe$_controller;
        this._frappe$_box_0._captured_subscription_0 = this._frappe$_captured_stream_2.listen$3$onDone$onError(t2, t3.get$close(t3), t1._frappe$_controller.get$addError());
      }
    },
    EventStream__createControllerForStream_onCancel: {
      "^": "Closure:2;_frappe$_box_0",
      call$0: [function() {
        this._frappe$_box_0._captured_subscription_0.cancel$0();
      }, null, null, 0, 0, null, "call"]
    },
    Property: {
      "^": "Reactable;_frappe$_controller,_hasCurrentValue,_currentValue",
      get$isBroadcast: function() {
        var t1 = this._frappe$_controller;
        t1.toString;
        H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
        return true;
      },
      _createControllerForStream$1: function(stream) {
        var t1, input;
        t1 = {};
        input = stream.asBroadcastStream$1$onCancel(new Z.Property__createControllerForStream_closure());
        t1._captured_subscription_0 = null;
        return P.StreamController_StreamController$broadcast(new Z.Property__createControllerForStream_onCancel(t1), new Z.Property__createControllerForStream_onListen(t1, this, input), true, null);
      },
      asBroadcastStream$2$onCancel$onListen: function(onCancel, onListen) {
        var t1, t2;
        t1 = this.super$Stream$asBroadcastStream(onCancel, onListen);
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      asBroadcastStream$1$onCancel: function(onCancel) {
        return this.asBroadcastStream$2$onCancel$onListen(onCancel, null);
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var controller, t1;
        controller = P.StreamController_StreamController(null, null, null, null, true, null);
        if (this._hasCurrentValue) {
          t1 = this._currentValue;
          if (controller._state >= 4)
            H.throwExpression(controller._badEventState$0());
          controller._async$_add$1(t1);
        }
        t1 = this._frappe$_controller;
        t1.toString;
        controller.addStream$2$cancelOnError(H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]), false).then$1(new Z.Property_listen_closure(controller));
        return H.setRuntimeTypeInfo(new P._ControllerStream(controller), [H.getTypeArgumentByIndex(controller, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      map$1: function(_, convert) {
        var t1, t2;
        t1 = this.super$Stream$map(this, convert);
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      take$1: function(_, count) {
        var t1, t2;
        t1 = this.super$Stream$take(this, count);
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      transform$1: function(_, streamTransformer) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, streamTransformer);
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      where$1: function(_, test) {
        var t1, t2;
        t1 = this.super$Stream$where(this, test);
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      $gt: function(_, other) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, H.setRuntimeTypeInfo(new K.Combine(other, new Z.Property_operator$gt_closure()), [null, null, null]));
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      $ge: function(_, other) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, H.setRuntimeTypeInfo(new K.Combine(other, new Z.Property_operator$ge_closure()), [null, null, null]));
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      $lt: function(_, other) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, H.setRuntimeTypeInfo(new K.Combine(other, new Z.Property_operator$lt_closure()), [null, null, null]));
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      $le: function(_, other) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, H.setRuntimeTypeInfo(new K.Combine(other, new Z.Property_operator$le_closure()), [null, null, null]));
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      $add: function(_, other) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, H.setRuntimeTypeInfo(new K.Combine(other, new Z.Property_operator$add_closure()), [null, null, null]));
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      $sub: function(_, other) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, H.setRuntimeTypeInfo(new K.Combine(other, new Z.Property_operator$sub_closure()), [null, null, null]));
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      },
      $mul: function(_, other) {
        var t1, t2;
        t1 = this.super$Stream$transform(this, H.setRuntimeTypeInfo(new K.Combine(other, new Z.Property_operator$mul_closure()), [null, null, null]));
        t2 = H.setRuntimeTypeInfo(new Z.Property(null, false, null), [null]);
        t2._hasCurrentValue = false;
        t2._currentValue = null;
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        return t2;
      }
    },
    Property__createControllerForStream_closure: {
      "^": "Closure:0;",
      call$1: [function(subscription) {
        return subscription.cancel$0();
      }, null, null, 2, 0, null, 44, "call"]
    },
    Property__createControllerForStream_onListen: {
      "^": "Closure:2;_frappe$_box_0,_frappe$_captured_this_1,_frappe$_captured_input_2",
      call$0: function() {
        var t1, t2;
        t1 = this._frappe$_box_0;
        if (t1._captured_subscription_0 == null) {
          t2 = this._frappe$_captured_this_1;
          t1._captured_subscription_0 = this._frappe$_captured_input_2.listen$3$onDone$onError(new Z.Property__createControllerForStream_onListen_closure(t2), new Z.Property__createControllerForStream_onListen_closure0(t2), t2._frappe$_controller.get$addError());
        }
      }
    },
    Property__createControllerForStream_onListen_closure: {
      "^": "Closure:0;_frappe$_captured_this_3",
      call$1: [function(value) {
        var t1 = this._frappe$_captured_this_3;
        t1._currentValue = value;
        t1._hasCurrentValue = true;
        t1 = t1._frappe$_controller;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(value);
      }, null, null, 2, 0, null, 8, "call"]
    },
    Property__createControllerForStream_onListen_closure0: {
      "^": "Closure:1;_frappe$_captured_this_4",
      call$0: [function() {
        this._frappe$_captured_this_4._frappe$_controller.close$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    Property__createControllerForStream_onCancel: {
      "^": "Closure:2;_frappe$_box_0",
      call$0: function() {
        var t1 = this._frappe$_box_0;
        t1._captured_subscription_0.cancel$0();
        t1._captured_subscription_0 = null;
      }
    },
    Property_listen_closure: {
      "^": "Closure:0;_captured_controller_0",
      call$1: [function(_) {
        return this._captured_controller_0.close$0(0);
      }, null, null, 2, 0, null, 0, "call"]
    },
    Property_operator$gt_closure: {
      "^": "Closure:3;",
      call$2: [function(a, b) {
        return J.$gt$n(a, b);
      }, null, null, 4, 0, null, 12, 11, "call"]
    },
    Property_operator$ge_closure: {
      "^": "Closure:3;",
      call$2: [function(a, b) {
        return J.$ge$n(a, b);
      }, null, null, 4, 0, null, 12, 11, "call"]
    },
    Property_operator$lt_closure: {
      "^": "Closure:3;",
      call$2: [function(a, b) {
        return J.$lt$n(a, b);
      }, null, null, 4, 0, null, 12, 11, "call"]
    },
    Property_operator$le_closure: {
      "^": "Closure:3;",
      call$2: [function(a, b) {
        return J.$le$n(a, b);
      }, null, null, 4, 0, null, 12, 11, "call"]
    },
    Property_operator$add_closure: {
      "^": "Closure:3;",
      call$2: [function(a, b) {
        return J.$add$ns(a, b);
      }, null, null, 4, 0, null, 12, 11, "call"]
    },
    Property_operator$sub_closure: {
      "^": "Closure:3;",
      call$2: [function(a, b) {
        return J.$sub$n(a, b);
      }, null, null, 4, 0, null, 12, 11, "call"]
    },
    Property_operator$mul_closure: {
      "^": "Closure:3;",
      call$2: [function(a, b) {
        return J.$mul$ns(a, b);
      }, null, null, 4, 0, null, 12, 11, "call"]
    },
    Reactable: {
      "^": "Stream;"
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
      var copies = [];
      return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      return t1;
    },
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null) {
        t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
        $.Device__isWebKit = t1;
      }
      return t1;
    },
    Device_cssPrefix: function() {
      var prefix, t1;
      prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1 === true)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1 === true)
          prefix = "-ms-";
        else
          prefix = P.Device_isOpera() === true ? "-o-" : "-webkit-";
      }
      $.Device__cachedCssPrefix = prefix;
      return prefix;
    },
    convertNativeToDart_AcceptStructuredClone_findSlot: {
      "^": "Closure:103;_captured_values_0,_captured_copies_1",
      call$1: function(value) {
        var t1, $length, i, t2;
        t1 = this._captured_values_0;
        $length = t1.length;
        for (i = 0; i < $length; ++i) {
          t2 = t1[i];
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        t1.push(value);
        this._captured_copies_1.push(null);
        return $length;
      }
    },
    convertNativeToDart_AcceptStructuredClone_readSlot: {
      "^": "Closure:19;_captured_copies_2",
      call$1: function(i) {
        var t1 = this._captured_copies_2;
        if (i >= t1.length)
          return H.ioore(t1, i);
        return t1[i];
      }
    },
    convertNativeToDart_AcceptStructuredClone_writeSlot: {
      "^": "Closure:75;_captured_copies_3",
      call$2: function(i, x) {
        var t1 = this._captured_copies_3;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = x;
      }
    },
    convertNativeToDart_AcceptStructuredClone_walk: {
      "^": "Closure:0;_captured_mustCopy_4,_captured_findSlot_5,_captured_readSlot_6,_captured_writeSlot_7",
      call$1: function(e) {
        var proto, slot, copy, t1, t2, _i, key, $length, i;
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
        if (e instanceof RegExp)
          throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
        proto = Object.getPrototypeOf(e);
        if (proto === Object.prototype || proto === null) {
          slot = this._captured_findSlot_5.call$1(e);
          copy = this._captured_readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = P.LinkedHashMap__makeEmpty();
          this._captured_writeSlot_7.call$2(slot, copy);
          for (t1 = Object.keys(e), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            key = t1[_i];
            copy.$indexSet(0, key, this.call$1(e[key]));
          }
          return copy;
        }
        if (e instanceof Array) {
          slot = this._captured_findSlot_5.call$1(e);
          copy = this._captured_readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          t1 = J.getInterceptor$asx(e);
          $length = t1.get$length(e);
          copy = this._captured_mustCopy_4 ? new Array($length) : e;
          this._captured_writeSlot_7.call$2(slot, copy);
          if (typeof $length !== "number")
            return H.iae($length);
          t2 = J.getInterceptor$ax(copy);
          i = 0;
          for (; i < $length; ++i)
            t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
          return copy;
        }
        return e;
      }
    },
    CssClassSetImpl: {
      "^": "Object;",
      _validateToken$1: [function(value) {
        if ($.$get$CssClassSetImpl__validTokenRE()._nativeRegExp.test(H.checkString(value)))
          return value;
        throw H.wrapException(P.ArgumentError$value(value, "value", "Not a valid class token"));
      }, "call$1", "get$_validateToken", 2, 0, 76, 8],
      toString$0: function(_) {
        return this.readClasses$0().join$1(0, " ");
      },
      toggle$2: function(_, value, shouldAdd) {
        var s, result;
        this._validateToken$1(value);
        s = this.readClasses$0();
        if ((shouldAdd == null ? !s.contains$1(0, value) : shouldAdd) === true) {
          s.add$1(0, value);
          result = true;
        } else {
          s.remove$1(0, value);
          result = false;
        }
        this.writeClasses$1(s);
        return result;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.readClasses$0();
        t2 = new P.LinkedHashSetIterator(t1, t1._collection$_modifications, null, null);
        t2._collection$_cell = t1._collection$_first;
        return t2;
      },
      forEach$1: function(_, f) {
        this.readClasses$0().forEach$1(0, f);
      },
      join$1: function(_, separator) {
        return this.readClasses$0().join$1(0, separator);
      },
      map$1: function(_, f) {
        var t1 = this.readClasses$0();
        return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(t1, f), [H.getTypeArgumentByIndex(t1, 0), null]);
      },
      get$isEmpty: function(_) {
        return this.readClasses$0()._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.readClasses$0()._collection$_length !== 0;
      },
      get$length: function(_) {
        return this.readClasses$0()._collection$_length;
      },
      contains$1: function(_, value) {
        if (typeof value !== "string")
          return false;
        this._validateToken$1(value);
        return this.readClasses$0().contains$1(0, value);
      },
      lookup$1: function(value) {
        return this.contains$1(0, value) ? value : null;
      },
      add$1: function(_, value) {
        this._validateToken$1(value);
        return this.modify$1(new P.CssClassSetImpl_add_closure(value));
      },
      addAll$1: function(_, iterable) {
        this.modify$1(new P.CssClassSetImpl_addAll_closure(this, iterable));
      },
      get$first: function(_) {
        var t1 = this.readClasses$0();
        return t1.get$first(t1);
      },
      get$last: function(_) {
        var t1 = this.readClasses$0();
        return t1.get$last(t1);
      },
      toList$1$growable: function(_, growable) {
        return this.readClasses$0().toList$1$growable(0, growable);
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      take$1: function(_, n) {
        var t1 = this.readClasses$0();
        return H.TakeIterable_TakeIterable(t1, n, H.getTypeArgumentByIndex(t1, 0));
      },
      modify$1: function(f) {
        var s, ret;
        s = this.readClasses$0();
        ret = f.call$1(s);
        this.writeClasses$1(s);
        return ret;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      }
    },
    CssClassSetImpl_add_closure: {
      "^": "Closure:0;_captured_value_0",
      call$1: function(s) {
        return s.add$1(0, this._captured_value_0);
      }
    },
    CssClassSetImpl_addAll_closure: {
      "^": "Closure:0;_html_common$_captured_this_0,_captured_iterable_1",
      call$1: function(s) {
        return s.addAll$1(0, H.setRuntimeTypeInfo(new H.MappedListIterable(this._captured_iterable_1, this._html_common$_captured_this_0.get$_validateToken()), [null, null]));
      }
    },
    FilteredElementList: {
      "^": "ListBase;_node,_childNodes",
      get$_html_common$_iterable: function() {
        return H.setRuntimeTypeInfo(new H.WhereIterable(this._childNodes, new P.FilteredElementList__iterable_closure()), [null]);
      },
      forEach$1: function(_, f) {
        C.JSArray_methods.forEach$1(P.List_List$from(this.get$_html_common$_iterable(), false, W.Element), f);
      },
      $indexSet: function(_, index, value) {
        J.replaceWith$1$x(this.get$_html_common$_iterable().elementAt$1(0, index), value);
      },
      set$length: function(_, newLength) {
        var t1, len;
        t1 = this.get$_html_common$_iterable();
        len = t1.get$length(t1);
        if (newLength >= len)
          return;
        else if (newLength < 0)
          throw H.wrapException(P.ArgumentError$("Invalid list length"));
        this.removeRange$2(0, newLength, len);
      },
      add$1: function(_, value) {
        this._childNodes._this.appendChild(value);
      },
      contains$1: function(_, needle) {
        if (!J.getInterceptor(needle).$isElement)
          return false;
        return needle.parentNode === this._node;
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on filtered list"));
      },
      removeRange$2: function(_, start, end) {
        var t1 = this.get$_html_common$_iterable();
        t1 = H.SkipIterable_SkipIterable(t1, start, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        C.JSArray_methods.forEach$1(P.List_List$from(H.TakeIterable_TakeIterable(t1, end - start, H.getRuntimeTypeArgument(t1, "Iterable", 0)), true, null), new P.FilteredElementList_removeRange_closure());
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._childNodes._this);
      },
      remove$1: function(_, element) {
        var t1 = J.getInterceptor(element);
        if (!t1.$isElement)
          return false;
        if (this.contains$1(0, element)) {
          t1.remove$0(element);
          return true;
        } else
          return false;
      },
      get$length: function(_) {
        var t1 = this.get$_html_common$_iterable();
        return t1.get$length(t1);
      },
      $index: function(_, index) {
        return this.get$_html_common$_iterable().elementAt$1(0, index);
      },
      get$iterator: function(_) {
        var t1 = P.List_List$from(this.get$_html_common$_iterable(), false, W.Element);
        return new J.ArrayIterator(t1, t1.length, 0, null);
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    FilteredElementList__iterable_closure: {
      "^": "Closure:0;",
      call$1: function(n) {
        return !!J.getInterceptor(n).$isElement;
      }
    },
    FilteredElementList_removeRange_closure: {
      "^": "Closure:0;",
      call$1: function(el) {
        return J.remove$0$ax(el);
      }
    }
  }], ["linter", "package:atom_dartlang/linter.dart",, T, {
    "^": "",
    _errorComparer: [function(a, b) {
      var aloc, bloc;
      if (!J.$eq$(a.get$severity(), b.get$severity()))
        return T._sev(b.get$severity()) - T._sev(a.get$severity());
      aloc = J.get$location$x(a);
      bloc = J.get$location$x(b);
      if (!J.$eq$(aloc.get$file(), bloc.get$file()))
        return J.compareTo$1$ns(aloc.get$file(), bloc.get$file());
      return J.$sub$n(J.get$offset$x(aloc), J.get$offset$x(bloc));
    }, "call$2", "linter___errorComparer$closure", 4, 0, 69],
    _sev: function(sev) {
      var t1 = J.getInterceptor(sev);
      if (t1.$eq(sev, "ERROR"))
        return 3;
      if (t1.$eq(sev, "WARNING"))
        return 2;
      if (t1.$eq(sev, "INFO"))
        return 1;
      return 0;
    },
    DartLinterConsumer: {
      "^": "LinterConsumer_Disposables;_errorRepository,_reportingDelay,_provider,_service,_oldIssues,_displayedWarning,Disposables__disposables",
      consume$1: function(service) {
        var t1, t2, errorStream;
        this._service = service;
        t1 = J.get$onChange$x(this._errorRepository);
        t2 = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t2._frappe$_controller = t2._createControllerForStream$1(t1);
        t2 = t2.super$Stream$transform(t2, new K.Debounce(this._reportingDelay));
        errorStream = H.setRuntimeTypeInfo(new Z.EventStream(null), [null]);
        t2 = errorStream._createControllerForStream$1(t2);
        errorStream._frappe$_controller = t2;
        t2.get$stream(t2).listen$4$cancelOnError$onDone$onError(new T.DartLinterConsumer_consume_closure(this), null, null, null);
      },
      _regenErrors$0: function() {
        var t1, issuesMap, t2, allIssues;
        t1 = {};
        if (this._service == null)
          return;
        issuesMap = this._errorRepository.get$knownErrors();
        t1._captured_allIssues_0 = [];
        issuesMap.forEach$1(0, new T.DartLinterConsumer__regenErrors_closure(t1, this));
        C.JSArray_methods.sort$1(t1._captured_allIssues_0, T.linter___errorComparer$closure());
        t2 = t1._captured_allIssues_0;
        if (t2.length > 500) {
          this._warnMaxCap$1(t2);
          allIssues = C.JSArray_methods.sublist$2(t1._captured_allIssues_0, 0, 500);
          t1._captured_allIssues_0 = allIssues;
          t1 = allIssues;
        } else
          t1 = t2;
        this._emit$1(t1);
      },
      _filter$1: function(issues) {
        var t1 = $.$get$atom();
        t1 = J.where$1$ax(issues, new T.DartLinterConsumer__filter_closure(t1._config.getValue$1($._infosPrefPath), t1._config.getValue$1($._todosPrefPath), t1._config.getValue$1($._filterUnnamedLibraryWarningsPath), t1._config.getValue$1($._filterCompiledToJSWarningsPath)));
        return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      },
      _warnMaxCap$1: function(issues) {
        var t1;
        if (this._displayedWarning)
          return;
        this._displayedWarning = true;
        t1 = $.$get$atom()._notifications;
        t1.invoke$3("addWarning", "Warning: displaying 500 issues of " + issues.length + " total.", t1._options$4$description$detail$dismissable$icon(null, null, null, null));
      },
      _emit$1: function(newIssues) {
        var t1;
        if (this._service == null)
          return;
        if (!G.listIdentical(this._oldIssues, newIssues)) {
          this._oldIssues = newIssues;
          t1 = this._provider;
          this._service.deleteMessages$1(t1);
          this._service.setMessages$2(t1, H.setRuntimeTypeInfo(new H.MappedListIterable(newIssues, new T.DartLinterConsumer__emit_closure()), [null, null]).toList$0(0));
        }
      },
      DartLinterConsumer$1: function(_errorRepository) {
        var regen, t1;
        regen = new T.DartLinterConsumer_closure(this);
        t1 = $.$get$atom();
        this.add$1(0, t1._config.observe$3($._infosPrefPath, null, regen));
        this.add$1(0, t1._config.observe$3($._todosPrefPath, null, regen));
        this.add$1(0, t1._config.observe$3($._filterUnnamedLibraryWarningsPath, null, regen));
        this.add$1(0, t1._config.observe$3($._filterCompiledToJSWarningsPath, null, regen));
      },
      static: {DartLinterConsumer$: function(_errorRepository) {
          var t1 = new T.DartLinterConsumer(_errorRepository, P.Duration$(0, 0, 0, 750, 0, 0), new T.DartLinterProvider(["source.dart"], "project", false, K.jsify(P.LinkedHashMap__makeLiteral(["scope", "project"]))), null, [], false, []);
          t1.DartLinterConsumer$1(_errorRepository);
          return t1;
        }}
    },
    LinterConsumer_Disposables: {
      "^": "LinterConsumer+Disposables;",
      $isDisposable: 1
    },
    DartLinterConsumer_closure: {
      "^": "Closure:0;_linter$_captured_this_0",
      call$1: [function(_) {
        return this._linter$_captured_this_0._regenErrors$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    DartLinterConsumer_consume_closure: {
      "^": "Closure:0;_linter$_captured_this_0",
      call$1: [function(_) {
        return this._linter$_captured_this_0._regenErrors$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    DartLinterConsumer__regenErrors_closure: {
      "^": "Closure:77;_linter$_box_0,_linter$_captured_this_1",
      call$2: function(path, issues) {
        var first, t1, t2, t3, t4;
        issues = J.toList$0$ax(issues);
        J.sort$1$ax(issues, T.linter___errorComparer$closure());
        issues = this._linter$_captured_this_1._filter$1(issues);
        if (issues.length > 200) {
          first = C.JSArray_methods.get$first(issues);
          t1 = first.get$severity();
          t2 = J.getInterceptor$x(first);
          t3 = t2.get$type(first);
          t2 = t2.get$location(first).get$file();
          t4 = "" + (issues.length - 200 + 1) + " additional issues not shown";
          issues = C.JSArray_methods.sublist$2(issues, 0, 199);
          C.JSArray_methods.checkGrowable$1(issues, "insert");
          issues.splice(0, 0, new N.AnalysisError(t1, t3, new N.Location(t2, 0, 1, 1, 1), t4, null));
        }
        C.JSArray_methods.addAll$1(this._linter$_box_0._captured_allIssues_0, issues);
      }
    },
    DartLinterConsumer__filter_closure: {
      "^": "Closure:78;_captured_showInfos_0,_captured_showTodos_1,_captured_filterUnnamed_2,_captured_filterJavaScript_3",
      call$1: function(issue) {
        if (this._captured_showInfos_0 !== true && J.$eq$(issue.get$severity(), "INFO"))
          return false;
        if (this._captured_showTodos_1 !== true && J.$eq$(J.get$type$x(issue), "TODO"))
          return false;
        if (this._captured_filterUnnamed_2 === true && J.contains$1$asx(J.get$message$x(issue), "cannot both be unnamed") === true)
          return false;
        if (this._captured_filterJavaScript_3 === true && J.contains$1$asx(J.get$message$x(issue), "When compiled to JS") === true)
          return false;
        return true;
      }
    },
    DartLinterConsumer__emit_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        var t1, t2, t3, t4;
        t1 = J.getInterceptor$x(e);
        t2 = t1.get$location(e).get$file();
        t3 = $.$get$_severityMap().$index(0, e.get$severity());
        t4 = t1.get$message(e);
        t1 = t1.get$location(e);
        return new E.LintMessage(t3, t4, null, t2, new E.Rn(new E.Pt(J.$sub$n(t1.get$startLine(), 1), J.$sub$n(t1.get$startColumn(), 1)), new E.Pt(J.$sub$n(t1.get$startLine(), 1), J.$add$ns(J.$sub$n(t1.get$startColumn(), 1), J.get$length$asx(t1)))));
      }, null, null, 2, 0, null, 2, "call"]
    },
    DartLinterProvider: {
      "^": "LinterProvider;grammarScopes,scope,lintOnFly,_key"
    }
  }], ["logging", "package:logging/logging.dart",, N, {
    "^": "",
    Logger: {
      "^": "Object;name>,parent>,_level,_children>,children>,_controller",
      get$fullName: function() {
        var t1, t2, t3;
        t1 = this.parent;
        t2 = t1 == null || J.$eq$(J.get$name$x(t1), "");
        t3 = this.name;
        return t2 ? t3 : t1.get$fullName() + "." + t3;
      },
      get$level: function() {
        if ($.hierarchicalLoggingEnabled) {
          var t1 = this._level;
          if (t1 != null)
            return t1;
          t1 = this.parent;
          if (t1 != null)
            return t1.get$level();
        }
        return $._rootLevel;
      },
      set$level: function(value) {
        if ($.hierarchicalLoggingEnabled && this.parent != null)
          this._level = value;
        else {
          if (this.parent != null)
            throw H.wrapException(new P.UnsupportedError("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
          $._rootLevel = value;
        }
      },
      get$onRecord: function() {
        return this._getStream$0();
      },
      log$5: function(logLevel, message, error, stackTrace, zone) {
        var t, t1, exception, t2, t3, record, target;
        t1 = this.get$level();
        if (J.$ge$n(J.get$value$x(logLevel), J.get$value$x(t1))) {
          if (!!J.getInterceptor(message).$isFunction)
            message = message.call$0();
          t1 = message;
          if (typeof t1 !== "string")
            message = J.toString$0$(message);
          if (stackTrace == null) {
            t1 = $.recordStackTraceAtLevel;
            t1 = J.get$value$x(logLevel) >= t1.value;
          } else
            t1 = false;
          if (t1)
            try {
              t1 = "autogenerated stack trace for " + H.S(logLevel) + " " + H.S(message);
              throw H.wrapException(t1);
            } catch (exception) {
              H.unwrapException(exception);
              t = H.getTraceFromException(exception);
              stackTrace = t;
            }
          zone = $.Zone__current;
          t1 = this.get$fullName();
          t2 = Date.now();
          t3 = $.LogRecord__nextNumber;
          $.LogRecord__nextNumber = t3 + 1;
          record = new N.LogRecord(logLevel, message, t1, new P.DateTime(t2, false), t3, error, stackTrace, zone);
          if ($.hierarchicalLoggingEnabled)
            for (target = this; target != null;) {
              target._publish$1(record);
              target = J.get$parent$x(target);
            }
          else
            N.Logger_Logger("")._publish$1(record);
        }
      },
      log$4: function(logLevel, message, error, stackTrace) {
        return this.log$5(logLevel, message, error, stackTrace, null);
      },
      finer$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_FINER_400, message, error, stackTrace);
      },
      finer$1: function(message) {
        return this.finer$3(message, null, null);
      },
      fine$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_FINE_500, message, error, stackTrace);
      },
      fine$1: function(message) {
        return this.fine$3(message, null, null);
      },
      info$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_INFO_800, message, error, stackTrace);
      },
      info$1: function(message) {
        return this.info$3(message, null, null);
      },
      warning$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
      },
      warning$1: function(message) {
        return this.warning$3(message, null, null);
      },
      warning$2: function(message, error) {
        return this.warning$3(message, error, null);
      },
      severe$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_SEVERE_1000, message, error, stackTrace);
      },
      severe$1: function(message) {
        return this.severe$3(message, null, null);
      },
      _getStream$0: function() {
        if ($.hierarchicalLoggingEnabled || this.parent == null) {
          var t1 = this._controller;
          if (t1 == null) {
            t1 = P.StreamController_StreamController$broadcast(null, null, true, N.LogRecord);
            this._controller = t1;
          }
          t1.toString;
          return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
        } else
          return N.Logger_Logger("")._getStream$0();
      },
      _publish$1: function(record) {
        var t1 = this._controller;
        if (t1 != null) {
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(record);
        }
      },
      static: {Logger_Logger: function($name) {
          return $.$get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
        }}
    },
    Logger_Logger_closure: {
      "^": "Closure:1;_captured_name_0",
      call$0: function() {
        var thisName, dot, $parent, t1;
        thisName = this._captured_name_0;
        if (C.JSString_methods.startsWith$1(thisName, "."))
          H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
        dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
        if (dot === -1)
          $parent = thisName !== "" ? N.Logger_Logger("") : null;
        else {
          $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
          thisName = C.JSString_methods.substring$1(thisName, dot + 1);
        }
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, N.Logger);
        t1 = new N.Logger(thisName, $parent, null, t1, H.setRuntimeTypeInfo(new P.UnmodifiableMapView(t1), [null, null]), null);
        if ($parent != null)
          J.get$_children$x($parent).$indexSet(0, thisName, t1);
        return t1;
      }
    },
    Level: {
      "^": "Object;name>,value>",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof N.Level && this.value === other.value;
      },
      $lt: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value < t1;
      },
      $le: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value <= t1;
      },
      $gt: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value > t1;
      },
      $ge: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value >= t1;
      },
      compareTo$1: function(_, other) {
        var t1 = J.get$value$x(other);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return this.value - t1;
      },
      get$hashCode: function(_) {
        return this.value;
      },
      toString$0: function(_) {
        return this.name;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [N.Level];
      }
    },
    LogRecord: {
      "^": "Object;level<,message>,loggerName,time,sequenceNumber,error>,stackTrace<,zone<",
      toString$0: function(_) {
        return "[" + this.level.name + "] " + this.loggerName + ": " + H.S(this.message);
      }
    }
  }], ["markdown.ast", "package:markdown/src/ast.dart",, Y, {
    "^": "",
    Node1: {
      "^": "Object;"
    },
    Element1: {
      "^": "Object;tag,children>,attributes>",
      get$isEmpty: function(_) {
        return this.children == null;
      },
      accept$1: function(_, visitor) {
        var t1, t2, _i;
        if (visitor.visitElementBefore$1(this)) {
          for (t1 = this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            J.accept$1$x(t1[_i], visitor);
          visitor.buffer._contents += "</" + H.S(this.tag) + ">";
        }
      }
    },
    Text: {
      "^": "Object;text>",
      accept$1: function(_, visitor) {
        var t1 = visitor.buffer;
        t1.toString;
        t1._contents += H.S(this.text);
        return;
      }
    }
  }], ["markdown.block_parser", "package:markdown/src/block_parser.dart",, U, {
    "^": "",
    BlockSyntax_isAtBlockEnd: function(parser) {
      if (parser._pos >= parser.lines.length)
        return true;
      return C.JSArray_methods.any$1(C.List_gBu, new U.BlockSyntax_isAtBlockEnd_closure(parser));
    },
    BlockParser: {
      "^": "Object;lines,document>,_pos",
      get$next: function() {
        var t1, t2;
        t1 = this._pos;
        t2 = this.lines;
        if (t1 >= t2.length - 1)
          return;
        return t2[t1 + 1];
      },
      matches$1: function(_, regex) {
        var t1, t2;
        t1 = this._pos;
        t2 = this.lines;
        if (t1 >= t2.length)
          return false;
        return regex.firstMatch$1(t2[t1]) != null;
      },
      matchesNext$1: function(regex) {
        if (this.get$next() == null)
          return false;
        return regex.firstMatch$1(this.get$next()) != null;
      }
    },
    BlockSyntax: {
      "^": "Object;",
      get$pattern: function(_) {
        return;
      },
      get$canEndBlock: function() {
        return true;
      },
      canParse$1: function(parser) {
        var t1, t2, t3;
        t1 = this.get$pattern(this);
        t2 = parser.lines;
        t3 = parser._pos;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        return t1.firstMatch$1(t2[t3]) != null;
      },
      parseChildLines$1: function(parser) {
        var childLines, t1, t2, t3, match;
        childLines = H.setRuntimeTypeInfo([], [P.String]);
        for (t1 = parser.lines; parser._pos < t1.length;) {
          t2 = this.get$pattern(this);
          t3 = parser._pos;
          if (t3 >= t1.length)
            return H.ioore(t1, t3);
          match = t2.firstMatch$1(t1[t3]);
          if (match == null)
            break;
          t2 = match._match;
          if (1 >= t2.length)
            return H.ioore(t2, 1);
          childLines.push(t2[1]);
          ++parser._pos;
        }
        return childLines;
      }
    },
    BlockSyntax_isAtBlockEnd_closure: {
      "^": "Closure:0;_captured_parser_0",
      call$1: function(s) {
        return s.canParse$1(this._captured_parser_0) && s.get$canEndBlock();
      }
    },
    EmptyBlockSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_EMPTY();
      },
      parse$1: function(parser) {
        ++parser._pos;
        return;
      }
    },
    SetextHeaderSyntax: {
      "^": "BlockSyntax;",
      canParse$1: function(parser) {
        return parser.matchesNext$1($.$get$_RE_SETEXT());
      },
      parse$1: function(parser) {
        var t1, tag, t2, contents;
        t1 = $.$get$_RE_SETEXT().firstMatch$1(parser.get$next())._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        tag = J.$eq$(J.$index$asx(t1[1], 0), "=") ? "h1" : "h2";
        t1 = parser.lines;
        t2 = parser._pos;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        contents = X.InlineParser$(t1[t2], parser.document).parse$0();
        parser._pos = ++parser._pos + 1;
        return new Y.Element1(tag, contents, P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String));
      }
    },
    HeaderSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_HEADER();
      },
      parse$1: function(parser) {
        var t1, t2, t3, match, level, contents;
        t1 = $.$get$_RE_HEADER();
        t2 = parser.lines;
        t3 = parser._pos;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        match = t1.firstMatch$1(t2[t3]);
        ++parser._pos;
        t3 = match._match;
        if (1 >= t3.length)
          return H.ioore(t3, 1);
        level = J.get$length$asx(t3[1]);
        if (2 >= t3.length)
          return H.ioore(t3, 2);
        contents = X.InlineParser$(J.trim$0$s(t3[2]), parser.document).parse$0();
        return new Y.Element1("h" + H.S(level), contents, P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String));
      }
    },
    BlockquoteSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_BLOCKQUOTE();
      },
      parse$1: function(parser) {
        return new Y.Element1("blockquote", parser.document.parseLines$1(this.parseChildLines$1(parser)), P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String));
      }
    },
    CodeBlockSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_INDENT();
      },
      parseChildLines$1: function(parser) {
        var childLines, t1, t2, t3, t4, match, nextMatch;
        childLines = H.setRuntimeTypeInfo([], [P.String]);
        for (t1 = parser.lines; t2 = parser._pos, t3 = t1.length, t2 < t3;) {
          t4 = $.$get$_RE_INDENT();
          if (t2 >= t3)
            return H.ioore(t1, t2);
          match = t4.firstMatch$1(t1[t2]);
          if (match != null) {
            t2 = match._match;
            if (1 >= t2.length)
              return H.ioore(t2, 1);
            childLines.push(t2[1]);
            ++parser._pos;
          } else {
            nextMatch = parser.get$next() != null ? t4.firstMatch$1(parser.get$next()) : null;
            t2 = parser._pos;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            if (J.trim$0$s(t1[t2]) === "" && nextMatch != null) {
              childLines.push("");
              t2 = nextMatch._match;
              if (1 >= t2.length)
                return H.ioore(t2, 1);
              childLines.push(t2[1]);
              parser._pos = ++parser._pos + 1;
            } else
              break;
          }
        }
        return childLines;
      },
      parse$1: function(parser) {
        var childLines = this.parseChildLines$1(parser);
        childLines.push("");
        return new Y.Element1("pre", [new Y.Element1("code", [new Y.Text(N.escapeHtml(C.JSArray_methods.join$1(childLines, "\n")))], P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String))], P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String));
      }
    },
    FencedCodeBlockSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_CODE();
      },
      parseChildLines$2: function(parser, endBlock) {
        var childLines, t1, t2, t3, t4, match;
        if (endBlock == null)
          endBlock = "";
        childLines = H.setRuntimeTypeInfo([], [P.String]);
        t1 = ++parser._pos;
        for (t2 = parser.lines; t3 = t2.length, t1 < t3;) {
          t4 = $.$get$_RE_CODE();
          if (t1 < 0 || t1 >= t3)
            return H.ioore(t2, t1);
          match = t4.firstMatch$1(t2[t1]);
          if (match != null) {
            t1 = match._match;
            if (1 >= t1.length)
              return H.ioore(t1, 1);
            t1 = !J.startsWith$1$s(t1[1], endBlock);
          } else
            t1 = true;
          t3 = parser._pos;
          if (t1) {
            if (t3 >= t2.length)
              return H.ioore(t2, t3);
            childLines.push(t2[t3]);
            t1 = ++parser._pos;
          } else {
            parser._pos = t3 + 1;
            break;
          }
        }
        return childLines;
      },
      parse$1: function(parser) {
        var t1, t2, t3, endBlock, syntax, childLines, escaped;
        t1 = $.$get$_RE_CODE();
        t2 = parser.lines;
        t3 = parser._pos;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        t3 = t1.firstMatch$1(t2[t3])._match;
        t2 = t3.length;
        if (1 >= t2)
          return H.ioore(t3, 1);
        endBlock = t3[1];
        if (2 >= t2)
          return H.ioore(t3, 2);
        syntax = t3[2];
        childLines = this.parseChildLines$2(parser, endBlock);
        childLines.push("");
        escaped = N.escapeHtml(C.JSArray_methods.join$1(childLines, "\n"));
        t3 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
        if (!J.$eq$(syntax, ""))
          t3.$indexSet(0, "class", syntax);
        return new Y.Element1("pre", [new Y.Element1("code", [new Y.Text(escaped)], P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String))], t3);
      }
    },
    HorizontalRuleSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_HR();
      },
      parse$1: function(parser) {
        ++parser._pos;
        return new Y.Element1("hr", null, P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String));
      }
    },
    BlockHtmlSyntax: {
      "^": "BlockSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_HTML();
      },
      get$canEndBlock: function() {
        return false;
      },
      parse$1: function(parser) {
        var childLines, t1, t2;
        childLines = [];
        t1 = parser.lines;
        while (true) {
          if (!(parser._pos < t1.length && !parser.matches$1(0, $.$get$_RE_EMPTY())))
            break;
          t2 = parser._pos;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          childLines.push(t1[t2]);
          ++parser._pos;
        }
        return new Y.Text(C.JSArray_methods.join$1(childLines, "\n"));
      }
    },
    ListItem: {
      "^": "Object;forceBlock,lines"
    },
    ListSyntax: {
      "^": "BlockSyntax;",
      get$canEndBlock: function() {
        return false;
      },
      parse$1: function(parser) {
        var t1, items, t2, t3, t4, t5, t6, i, j, i0, itemNodes, _i, item, blockItem, blocksInList, _i0, pattern;
        t1 = {};
        items = H.setRuntimeTypeInfo([], [U.ListItem]);
        t1._captured_childLines_0 = H.setRuntimeTypeInfo([], [P.String]);
        t2 = new U.ListSyntax_parse_endItem(t1, items);
        t1._captured_match_1 = null;
        t3 = new U.ListSyntax_parse_tryMatch(t1, parser);
        for (t4 = parser.lines; parser._pos < t4.length;) {
          if (t3.call$1($.$get$_RE_EMPTY()) === true)
            t1._captured_childLines_0.push("");
          else if (t3.call$1($.$get$_RE_UL()) === true || t3.call$1($.$get$_RE_OL()) === true) {
            t2.call$0();
            t5 = t1._captured_childLines_0;
            t6 = t1._captured_match_1._match;
            if (1 >= t6.length)
              return H.ioore(t6, 1);
            t5.push(t6[1]);
          } else if (t3.call$1($.$get$_RE_INDENT()) === true) {
            t5 = t1._captured_childLines_0;
            t6 = t1._captured_match_1._match;
            if (1 >= t6.length)
              return H.ioore(t6, 1);
            t5.push(t6[1]);
          } else if (U.BlockSyntax_isAtBlockEnd(parser))
            break;
          else {
            t5 = t1._captured_childLines_0;
            if (t5.length > 0 && J.$eq$(C.JSArray_methods.get$last(t5), ""))
              break;
            t5 = t1._captured_childLines_0;
            t6 = parser._pos;
            if (t6 >= t4.length)
              return H.ioore(t4, t6);
            t5.push(t4[t6]);
          }
          ++parser._pos;
        }
        t2.call$0();
        for (i = 0; i < items.length; i = i0)
          for (j = items[i].lines.length - 1, i0 = i + 1; j > 0; --j) {
            t1 = $.$get$_RE_EMPTY();
            if (i >= items.length)
              return H.ioore(items, i);
            t2 = items[i].lines;
            if (j >= t2.length)
              return H.ioore(t2, j);
            if (t1.firstMatch$1(t2[j]) != null) {
              t1 = items.length;
              if (i < t1 - 1) {
                items[i].forceBlock = true;
                if (i0 >= t1)
                  return H.ioore(items, i0);
                items[i0].forceBlock = true;
              }
              if (i >= t1)
                return H.ioore(items, i);
              t1 = items[i].lines;
              if (0 >= t1.length)
                return H.ioore(t1, 0);
              t1.pop();
            } else
              break;
          }
        itemNodes = H.setRuntimeTypeInfo([], [Y.Node1]);
        for (t1 = items.length, t2 = parser.document, _i = 0; _i < items.length; items.length === t1 || (0, H.throwConcurrentModificationError)(items), ++_i) {
          item = items[_i];
          blockItem = item.forceBlock || item.lines.length > 1;
          blocksInList = [$.$get$_RE_BLOCKQUOTE(), $.$get$_RE_HEADER(), $.$get$_RE_HR(), $.$get$_RE_INDENT(), $.$get$_RE_UL(), $.$get$_RE_OL()];
          if (!blockItem) {
            t3 = item.lines;
            _i0 = 0;
            while (true) {
              if (!(_i0 < 6)) {
                blockItem = false;
                break;
              }
              pattern = blocksInList[_i0];
              if (0 >= t3.length)
                return H.ioore(t3, 0);
              if (pattern.firstMatch$1(t3[0]) != null) {
                blockItem = true;
                break;
              }
              ++_i0;
            }
          }
          t3 = item.lines;
          if (blockItem)
            itemNodes.push(new Y.Element1("li", t2.parseLines$1(t3), P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String)));
          else {
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            itemNodes.push(new Y.Element1("li", X.InlineParser$(t3[0], t2).parse$0(), P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String)));
          }
        }
        return new Y.Element1(this.get$listTag(), itemNodes, P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String));
      }
    },
    ListSyntax_parse_endItem: {
      "^": "Closure:1;_block_parser$_box_0,_captured_items_1",
      call$0: function() {
        var t1, t2;
        t1 = this._block_parser$_box_0;
        t2 = t1._captured_childLines_0;
        if (t2.length > 0) {
          this._captured_items_1.push(new U.ListItem(false, t2));
          t1._captured_childLines_0 = H.setRuntimeTypeInfo([], [P.String]);
        }
      }
    },
    ListSyntax_parse_tryMatch: {
      "^": "Closure:79;_block_parser$_box_0,_captured_parser_2",
      call$1: function(pattern) {
        var t1, t2, match;
        t1 = this._captured_parser_2;
        t2 = t1.lines;
        t1 = t1._pos;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        match = pattern.firstMatch$1(t2[t1]);
        this._block_parser$_box_0._captured_match_1 = match;
        return match != null;
      }
    },
    UnorderedListSyntax: {
      "^": "ListSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_UL();
      },
      get$listTag: function() {
        return "ul";
      }
    },
    OrderedListSyntax: {
      "^": "ListSyntax;",
      get$pattern: function(_) {
        return $.$get$_RE_OL();
      },
      get$listTag: function() {
        return "ol";
      }
    },
    ParagraphSyntax: {
      "^": "BlockSyntax;",
      get$canEndBlock: function() {
        return false;
      },
      canParse$1: function(parser) {
        return true;
      },
      parse$1: function(parser) {
        var childLines, t1, t2;
        childLines = [];
        for (t1 = parser.lines; !U.BlockSyntax_isAtBlockEnd(parser);) {
          t2 = parser._pos;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          childLines.push(t1[t2]);
          ++parser._pos;
        }
        return new Y.Element1("p", X.InlineParser$(C.JSArray_methods.join$1(childLines, "\n"), parser.document).parse$0(), P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String));
      }
    }
  }], ["markdown.document", "package:markdown/src/document.dart",, T, {
    "^": "",
    Document: {
      "^": "Object;refLinks<,inlineSyntaxes,linkResolver,imageLinkResolver",
      parseRefLinks$1: function(lines) {
        var pattern, t1, i, match, t2, t3, id, url, title;
        pattern = new H.JSSyntaxRegExp("^[ ]{0,3}\\[([^\\]]+)\\]:\\s+(\\S+)\\s*(\"[^\"]+\"|'[^']+'|\\([^)]+\\)|)\\s*$", H.JSSyntaxRegExp_makeNative("^[ ]{0,3}\\[([^\\]]+)\\]:\\s+(\\S+)\\s*(\"[^\"]+\"|'[^']+'|\\([^)]+\\)|)\\s*$", false, true, false), null, null);
        for (t1 = this.refLinks, i = 0; i < lines.length; ++i) {
          match = pattern.firstMatch$1(lines[i]);
          if (match != null) {
            t2 = match._match;
            t3 = t2.length;
            if (1 >= t3)
              return H.ioore(t2, 1);
            id = t2[1];
            if (2 >= t3)
              return H.ioore(t2, 2);
            url = t2[2];
            if (3 >= t3)
              return H.ioore(t2, 3);
            title = t2[3];
            t2 = J.getInterceptor(title);
            title = t2.$eq(title, "") ? null : t2.substring$2(title, 1, J.$sub$n(t2.get$length(title), 1));
            id = J.toLowerCase$0$s(id);
            t1.$indexSet(0, id, new T.Link(id, url, title));
            if (i >= lines.length)
              return H.ioore(lines, i);
            lines[i] = "";
          }
        }
      },
      parseLines$1: function(lines) {
        var parser, blocks, _i, syntax, block;
        parser = new U.BlockParser(lines, this, 0);
        blocks = [];
        for (; parser._pos < lines.length;)
          for (_i = 0; _i < 11; ++_i) {
            syntax = C.List_gBu[_i];
            if (syntax.canParse$1(parser)) {
              block = syntax.parse$1(parser);
              if (block != null)
                blocks.push(block);
              break;
            }
          }
        return blocks;
      }
    },
    Link: {
      "^": "Object;id>,url,title"
    }
  }], ["markdown.html_renderer", "package:markdown/src/html_renderer.dart",, B, {
    "^": "",
    markdownToHtml: function(markdown, imageLinkResolver, inlineOnly, inlineSyntaxes, linkResolver) {
      var $document, lines;
      $document = new T.Document(P.LinkedHashMap_LinkedHashMap$_empty(P.String, T.Link), inlineSyntaxes, linkResolver, imageLinkResolver);
      if (inlineOnly)
        return new B.HtmlRenderer(null).render$1(X.InlineParser$(markdown, $document).parse$0());
      else {
        lines = J.replaceAll$2$s(markdown, "\r\n", "\n").split("\n");
        $document.parseRefLinks$1(lines);
        return new B.HtmlRenderer(null).render$1($document.parseLines$1(lines));
      }
    },
    HtmlRenderer: {
      "^": "Object;buffer",
      render$1: function(nodes) {
        var t1, _i;
        this.buffer = new P.StringBuffer("");
        for (t1 = nodes.length, _i = 0; _i < nodes.length; nodes.length === t1 || (0, H.throwConcurrentModificationError)(nodes), ++_i)
          J.accept$1$x(nodes[_i], this);
        return J.toString$0$(this.buffer);
      },
      visitElementBefore$1: function(element) {
        var t1, attributeNames, t2, _i, $name;
        if (this.buffer._contents.length !== 0 && $.$get$HtmlRenderer__BLOCK_TAGS().firstMatch$1(element.tag) != null)
          this.buffer._contents += "\n";
        this.buffer._contents += "<" + H.S(element.tag);
        t1 = element.attributes;
        attributeNames = t1.get$keys().toList$0(0);
        C.JSArray_methods.sort$1(attributeNames, new B.HtmlRenderer_visitElementBefore_closure());
        for (t2 = attributeNames.length, _i = 0; _i < attributeNames.length; attributeNames.length === t2 || (0, H.throwConcurrentModificationError)(attributeNames), ++_i) {
          $name = attributeNames[_i];
          this.buffer._contents += " " + H.S($name) + "=\"" + H.S(t1.$index(0, $name)) + "\"";
        }
        t1 = this.buffer;
        if (element.children == null) {
          t1._contents += " />";
          return false;
        } else {
          t1._contents += ">";
          return true;
        }
      }
    },
    HtmlRenderer_visitElementBefore_closure: {
      "^": "Closure:3;",
      call$2: function(a, b) {
        return J.compareTo$1$ns(a, b);
      }
    }
  }], ["markdown.inline_parser", "package:markdown/src/inline_parser.dart",, X, {
    "^": "",
    InlineParser: {
      "^": "Object;source>,document>,syntaxes,pos<,start',_stack<",
      parse$0: function() {
        var t1, t2, t3, t4, matched, i, t5, _i;
        t1 = this._stack;
        t1.push(new X.TagState(0, 0, null, H.setRuntimeTypeInfo([], [Y.Node1])));
        for (t2 = this.source, t3 = J.getInterceptor$asx(t2), t4 = this.syntaxes; this.pos !== t3.get$length(t2);) {
          i = t1.length - 1;
          while (true) {
            if (!(i > 0)) {
              matched = false;
              break;
            }
            if (i >= t1.length)
              return H.ioore(t1, i);
            if (t1[i].tryMatch$1(this)) {
              matched = true;
              break;
            }
            --i;
          }
          if (matched)
            continue;
          t5 = t4.length;
          _i = 0;
          while (true) {
            if (!(_i < t4.length)) {
              matched = false;
              break;
            }
            if (t4[_i].tryMatch$1(this)) {
              matched = true;
              break;
            }
            t4.length === t5 || (0, H.throwConcurrentModificationError)(t4);
            ++_i;
          }
          if (matched)
            continue;
          ++this.pos;
        }
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        return t1[0].close$2(0, this, null);
      },
      writeText$0: function() {
        this.writeTextRange$2(this.start, this.pos);
        this.start = this.pos;
      },
      writeTextRange$2: function(start, end) {
        var text, nodes, t1, t2, t3;
        if (end > start) {
          text = J.substring$2$s(this.source, start, end);
          nodes = C.JSArray_methods.get$last(this._stack).children;
          if (nodes.length > 0 && C.JSArray_methods.get$last(nodes) instanceof Y.Text) {
            t1 = H.S(J.get$text$x(C.JSArray_methods.get$last(nodes))) + text;
            t2 = nodes.length;
            t3 = t2 - 1;
            if (t3 < 0)
              return H.ioore(nodes, t3);
            nodes[t3] = new Y.Text(t1);
          } else
            nodes.push(new Y.Text(text));
        }
      },
      addNode$1: function(node) {
        C.JSArray_methods.get$last(this._stack).children.push(node);
      },
      advanceBy$1: function($length) {
        var t1 = this.pos;
        if (typeof $length !== "number")
          return H.iae($length);
        this.pos = t1 + $length;
      },
      consume$1: function($length) {
        var t1 = this.pos;
        if (typeof $length !== "number")
          return H.iae($length);
        t1 += $length;
        this.pos = t1;
        this.start = t1;
      },
      InlineParser$2: function(source, $document) {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = this.syntaxes;
        C.JSArray_methods.addAll$1(t1, $.$get$InlineParser__defaultSyntaxes());
        t2 = this.document;
        t3 = X.LinkSyntax_linkPattern();
        t4 = H.JSSyntaxRegExp_makeNative("\\[", true, true, false);
        t5 = H.JSSyntaxRegExp_makeNative(t3, true, true, false);
        t6 = X.LinkSyntax_linkPattern();
        t7 = H.JSSyntaxRegExp_makeNative("!\\[", true, true, false);
        t2 = H.setRuntimeTypeInfo([new X.LinkSyntax(t2.linkResolver, false, new H.JSSyntaxRegExp(t3, t5, null, null), null, new H.JSSyntaxRegExp("\\[", t4, null, null)), new X.ImageLinkSyntax(t2.imageLinkResolver, null, false, new H.JSSyntaxRegExp(t6, H.JSSyntaxRegExp_makeNative(t6, true, true, false), null, null), null, new H.JSSyntaxRegExp("!\\[", t7, null, null))], [X.InlineSyntax]);
        C.JSArray_methods.checkGrowable$1(t1, "insertAll");
        P.RangeError_checkValueInInterval(1, 0, t1.length, "index", null);
        C.JSArray_methods.set$length(t1, t1.length + 2);
        C.JSArray_methods.setRange$4(t1, 3, t1.length, t1, 1);
        C.JSArray_methods.setRange$3(t1, 1, 3, t2);
      },
      start$0: function($receiver) {
        return this.start.call$0();
      },
      static: {InlineParser$: function(source, $document) {
          var t1 = new X.InlineParser(source, $document, H.setRuntimeTypeInfo([], [X.InlineSyntax]), 0, 0, H.setRuntimeTypeInfo([], [X.TagState]));
          t1.InlineParser$2(source, $document);
          return t1;
        }}
    },
    InlineSyntax: {
      "^": "Object;",
      tryMatch$1: function(parser) {
        var t1, t2, startMatch;
        t1 = parser.source;
        t2 = J.getInterceptor$asx(t1);
        startMatch = this.pattern.firstMatch$1(t2.substring$2(t1, parser.pos, t2.get$length(t1)));
        if (startMatch != null && startMatch._match.index === 0) {
          parser.writeTextRange$2(parser.start, parser.pos);
          parser.start = parser.pos;
          if (this.onMatch$2(parser, startMatch)) {
            t1 = startMatch._match;
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            t1 = J.get$length$asx(t1[0]);
            t2 = parser.pos;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = t2 + t1;
            parser.pos = t1;
            parser.start = t1;
          }
          return true;
        }
        return false;
      }
    },
    TextSyntax: {
      "^": "InlineSyntax;substitute,pattern",
      onMatch$2: function(parser, match) {
        var t1, t2;
        t1 = this.substitute;
        if (t1 == null) {
          t1 = match._match;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = J.get$length$asx(t1[0]);
          t2 = parser.pos;
          if (typeof t1 !== "number")
            return H.iae(t1);
          parser.pos = t2 + t1;
          return false;
        }
        C.JSArray_methods.get$last(parser._stack).children.push(new Y.Text(t1));
        return true;
      },
      static: {TextSyntax$: function(pattern, sub) {
          return new X.TextSyntax(sub, new H.JSSyntaxRegExp(pattern, H.JSSyntaxRegExp_makeNative(pattern, true, true, false), null, null));
        }}
    },
    AutolinkSyntax: {
      "^": "InlineSyntax;pattern",
      onMatch$2: function(parser, match) {
        var t1, url, t2;
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        url = t1[1];
        t1 = N.escapeHtml(url);
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
        t2.$indexSet(0, "href", url);
        C.JSArray_methods.get$last(parser._stack).children.push(new Y.Element1("a", [new Y.Text(t1)], t2));
        return true;
      }
    },
    TagSyntax: {
      "^": "InlineSyntax;endPattern,tag,pattern",
      onMatch$2: function(parser, match) {
        var t1, t2;
        t1 = parser.pos;
        t2 = match._match;
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2 = J.get$length$asx(t2[0]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        parser._stack.push(new X.TagState(t1, t1 + t2, this, H.setRuntimeTypeInfo([], [Y.Node1])));
        return true;
      },
      onMatchEnd$3: function(parser, match, state) {
        parser.addNode$1(new Y.Element1(this.tag, state.children, P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String)));
        return true;
      },
      static: {TagSyntax$: function(pattern, end, tag) {
          var t1, t2;
          t1 = H.JSSyntaxRegExp_makeNative(pattern, true, true, false);
          t2 = end != null ? end : pattern;
          return new X.TagSyntax(new H.JSSyntaxRegExp(t2, H.JSSyntaxRegExp_makeNative(t2, true, true, false), null, null), tag, new H.JSSyntaxRegExp(pattern, t1, null, null));
        }}
    },
    LinkSyntax: {
      "^": "TagSyntax;linkResolver<,resolved,endPattern,tag,pattern",
      createNode$3: ["super$LinkSyntax$createNode", function(parser, match, state) {
        var t1, textToResolve, link;
        t1 = J.$index$asx(match, 1);
        if (t1 == null || J.$eq$(t1, "")) {
          if (this.get$linkResolver() == null)
            return;
          t1 = state.children;
          if (C.JSArray_methods.any$1(t1, new X.LinkSyntax_createNode_closure()))
            return;
          textToResolve = C.JSArray_methods.fold$2(t1, "", new X.LinkSyntax_createNode_closure0());
          this.resolved = true;
          return this.linkResolver$1(textToResolve);
        } else {
          link = this.getLink$3(parser, match, state);
          if (link == null)
            return;
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
          t1.$indexSet(0, "href", N.escapeHtml(link.url));
          t1.$indexSet(0, "title", N.escapeHtml(link.title));
          N.cleanMap(t1);
          return new Y.Element1("a", state.children, t1);
        }
      }],
      getLink$3: function(parser, match, state) {
        var t1, url, title, id;
        t1 = J.getInterceptor$asx(match);
        if (t1.$index(match, 3) != null && !J.$eq$(t1.$index(match, 3), "")) {
          url = t1.$index(match, 3);
          title = t1.$index(match, 4);
          t1 = J.getInterceptor$s(url);
          return new T.Link(null, t1.startsWith$1(url, "<") && t1.endsWith$1(url, ">") ? t1.substring$2(url, 1, J.$sub$n(t1.get$length(url), 1)) : url, title);
        } else {
          id = J.toLowerCase$0$s(J.$eq$(t1.$index(match, 2), "") ? J.substring$2$s(J.get$source$x(parser), state.startPos + 1, parser.get$pos()) : t1.$index(match, 2));
          return J.get$document$x(parser).get$refLinks().$index(0, id);
        }
      },
      onMatchEnd$3: function(parser, match, state) {
        var node = this.createNode$3(parser, match, state);
        if (node == null)
          return false;
        parser.addNode$1(node);
        return true;
      },
      linkResolver$1: function(arg0) {
        return this.linkResolver.call$1(arg0);
      },
      static: {LinkSyntax_linkPattern: function() {
          return "](?:(\\s?\\[([^\\]]*)\\]|\\s?\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\))|)";
        }, LinkSyntax$: function(linkResolver, pattern) {
          var t1, t2;
          t1 = X.LinkSyntax_linkPattern();
          t2 = H.JSSyntaxRegExp_makeNative(pattern, true, true, false);
          return new X.LinkSyntax(linkResolver, false, new H.JSSyntaxRegExp(t1, H.JSSyntaxRegExp_makeNative(t1, true, true, false), null, null), null, new H.JSSyntaxRegExp(pattern, t2, null, null));
        }}
    },
    LinkSyntax_createNode_closure: {
      "^": "Closure:0;",
      call$1: function(child) {
        return !(child instanceof Y.Text);
      }
    },
    LinkSyntax_createNode_closure0: {
      "^": "Closure:3;",
      call$2: function(oldVal, child) {
        return J.$add$ns(oldVal, J.get$text$x(child));
      }
    },
    ImageLinkSyntax: {
      "^": "LinkSyntax;linkResolver:ImageLinkSyntax_linkResolver<,linkResolver,resolved,endPattern,tag,pattern",
      createNode$3: function(parser, match, state) {
        var node, t1, t2, t3;
        node = this.super$LinkSyntax$createNode(parser, match, state);
        if (this.resolved)
          return node;
        if (node == null)
          return;
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
        t2 = J.getInterceptor$x(node);
        t1.$indexSet(0, "src", t2.get$attributes(node).$index(0, "href"));
        t1.$indexSet(0, "title", t2.get$attributes(node).$index(0, "title"));
        t1.$indexSet(0, "alt", J.map$1$ax(t2.get$children(node), new X.ImageLinkSyntax_createNode_closure()).join$1(0, " "));
        N.cleanMap(t1);
        t2 = t2.get$children(node);
        t3 = J.getInterceptor$ax(t2);
        t3.clear$0(t2);
        t3.add$1(t2, new Y.Element1("img", [], t1));
        return node;
      },
      linkResolver$1: function(arg0) {
        return this.ImageLinkSyntax_linkResolver.call$1(arg0);
      },
      static: {ImageLinkSyntax$: function(linkResolver) {
          var t1, t2;
          t1 = X.LinkSyntax_linkPattern();
          t2 = H.JSSyntaxRegExp_makeNative("!\\[", true, true, false);
          return new X.ImageLinkSyntax(linkResolver, null, false, new H.JSSyntaxRegExp(t1, H.JSSyntaxRegExp_makeNative(t1, true, true, false), null, null), null, new H.JSSyntaxRegExp("!\\[", t2, null, null));
        }}
    },
    ImageLinkSyntax_createNode_closure: {
      "^": "Closure:0;",
      call$1: [function(e) {
        return e == null || J.$eq$(e, "") || !(e instanceof Y.Text) ? "" : J.get$text$x(e);
      }, null, null, 2, 0, null, 2, "call"]
    },
    CodeSyntax: {
      "^": "InlineSyntax;pattern",
      onMatch$2: function(parser, match) {
        var t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        t1 = N.escapeHtml(t1[1]);
        C.JSArray_methods.get$last(parser._stack).children.push(new Y.Element1("code", [new Y.Text(t1)], P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String)));
        return true;
      },
      static: {CodeSyntax$: function(pattern) {
          return new X.CodeSyntax(new H.JSSyntaxRegExp(pattern, H.JSSyntaxRegExp_makeNative(pattern, true, true, false), null, null));
        }}
    },
    TagState: {
      "^": "Object;startPos<,endPos<,syntax,children>",
      tryMatch$1: function(parser) {
        var t1, t2, endMatch;
        t1 = parser.source;
        t2 = J.getInterceptor$asx(t1);
        endMatch = this.syntax.endPattern.firstMatch$1(t2.substring$2(t1, parser.pos, t2.get$length(t1)));
        if (endMatch != null && endMatch._match.index === 0) {
          this.close$2(0, parser, endMatch);
          return true;
        }
        return false;
      },
      close$2: [function(_, parser, endMatch) {
        var t1, unmatchedTags, t2, _i, unmatched;
        t1 = C.JSArray_methods.indexOf$1(parser.get$_stack(), this) + 1;
        unmatchedTags = C.JSArray_methods.sublist$1(parser.get$_stack(), t1);
        C.JSArray_methods.removeRange$2(parser.get$_stack(), t1, parser.get$_stack().length);
        for (t1 = unmatchedTags.length, t2 = this.children, _i = 0; _i < unmatchedTags.length; unmatchedTags.length === t1 || (0, H.throwConcurrentModificationError)(unmatchedTags), ++_i) {
          unmatched = unmatchedTags[_i];
          parser.writeTextRange$2(unmatched.get$startPos(), unmatched.get$endPos());
          C.JSArray_methods.addAll$1(t2, J.get$children$x(unmatched));
        }
        parser.writeText$0();
        t1 = parser.get$_stack();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
        if (parser.get$_stack().length === 0)
          return t2;
        t1 = J.getInterceptor$asx(endMatch);
        if (this.syntax.onMatchEnd$3(parser, endMatch, this))
          parser.consume$1(J.get$length$asx(t1.$index(endMatch, 0)));
        else {
          J.set$start$x(parser, this.startPos);
          parser.advanceBy$1(J.get$length$asx(t1.$index(endMatch, 0)));
        }
        return;
      }, null, "get$close", 4, 0, null, 93, 94]
    }
  }], ["markdown.util", "package:markdown/src/util.dart",, N, {
    "^": "",
    escapeHtml: function(html) {
      var t1 = J.getInterceptor(html);
      if (t1.$eq(html, "") || html == null)
        return;
      t1 = t1.replaceAll$2(html, "&", "&amp;");
      H.checkString("&lt;");
      t1 = H.stringReplaceAllUnchecked(t1, "<", "&lt;");
      H.checkString("&gt;");
      return H.stringReplaceAllUnchecked(t1, ">", "&gt;");
    },
    cleanMap: function(map) {
      var t1 = map.get$keys().where$1(0, new N.cleanMap_closure(map));
      C.JSArray_methods.forEach$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0)), map.get$remove(map));
    },
    cleanMap_closure: {
      "^": "Closure:0;_captured_map_0",
      call$1: function(e) {
        var t1 = this._captured_map_0.$index(0, e);
        return t1 == null || J.$eq$(t1, "");
      }
    }
  }], ["pub_semver.src.patterns", "package:pub_semver/src/patterns.dart",, Z, {}], ["pub_semver.src.version", "package:pub_semver/src/version.dart",, T, {
    "^": "",
    Version: {
      "^": "Object;major<,minor<,patch<,preRelease<,build<,_text",
      get$min: function(_) {
        return this;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof T.Version))
          return false;
        return J.$eq$(this.major, other.major) && J.$eq$(this.minor, other.minor) && J.$eq$(this.patch, other.patch) && C.IterableEquality_DefaultEquality.equals$2(this.preRelease, other.preRelease) === true && C.IterableEquality_DefaultEquality.equals$2(this.build, other.build) === true;
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = J.$xor$n(this.major, this.minor);
        t2 = this.patch;
        if (typeof t2 !== "number")
          return H.iae(t2);
        return (t1 ^ t2 ^ C.IterableEquality_DefaultEquality.hash$1(0, this.preRelease) ^ C.IterableEquality_DefaultEquality.hash$1(0, this.build)) >>> 0;
      },
      $lt: function(_, other) {
        return this.compareTo$1(0, other) < 0;
      },
      $gt: function(_, other) {
        return this.compareTo$1(0, other) > 0;
      },
      $le: function(_, other) {
        return this.compareTo$1(0, other) <= 0;
      },
      $ge: function(_, other) {
        return this.compareTo$1(0, other) >= 0;
      },
      get$isEmpty: function(_) {
        return false;
      },
      get$isPreRelease: function() {
        return this.preRelease.length !== 0;
      },
      get$nextPatch: function() {
        if (this.preRelease.length !== 0)
          return T.Version_Version(this.major, this.minor, this.patch, null, null);
        return T.Version_Version(this.major, this.minor, J.$add$ns(this.patch, 1), null, null);
      },
      compareTo$1: function(_, other) {
        var t1, t2, comparison;
        t1 = this.major;
        t2 = J.getInterceptor(t1);
        if (!t2.$eq(t1, other.get$major()))
          return t2.compareTo$1(t1, other.get$major());
        t1 = this.minor;
        t2 = J.getInterceptor(t1);
        if (!t2.$eq(t1, other.get$minor()))
          return t2.compareTo$1(t1, other.get$minor());
        t1 = this.patch;
        t2 = J.getInterceptor(t1);
        if (!t2.$eq(t1, other.get$patch()))
          return t2.compareTo$1(t1, other.get$patch());
        t1 = this.preRelease;
        if (t1.length === 0 && other.get$isPreRelease())
          return 1;
        if (!other.get$isPreRelease() && t1.length !== 0)
          return -1;
        comparison = this._compareLists$2(t1, other.get$preRelease());
        if (comparison !== 0)
          return comparison;
        t1 = this.build;
        if (t1.length === 0 && other.get$build().length !== 0)
          return -1;
        if (other.get$build().length === 0 && t1.length !== 0)
          return 1;
        return this._compareLists$2(t1, other.get$build());
      },
      toString$0: function(_) {
        return this._text;
      },
      _compareLists$2: function(a, b) {
        var i, aPart, bPart, t1;
        for (i = 0; i < P.max(a.length, b.length); ++i) {
          aPart = i < a.length ? a[i] : null;
          bPart = i < b.length ? b[i] : null;
          t1 = J.getInterceptor(aPart);
          if (t1.$eq(aPart, bPart))
            continue;
          if (aPart == null)
            return -1;
          if (bPart == null)
            return 1;
          if (typeof aPart === "number")
            if (typeof bPart === "number")
              return C.JSNumber_methods.compareTo$1(aPart, bPart);
            else
              return -1;
          else if (typeof bPart === "number")
            return 1;
          else
            return t1.compareTo$1(aPart, bPart);
        }
        return 0;
      },
      Version$_$6: function(major, minor, patch, preRelease, build, _text) {
        if (J.$lt$n(this.major, 0) === true)
          throw H.wrapException(P.ArgumentError$("Major version must be non-negative."));
        if (J.$lt$n(this.minor, 0) === true)
          throw H.wrapException(P.ArgumentError$("Minor version must be non-negative."));
        if (J.$lt$n(this.patch, 0) === true)
          throw H.wrapException(P.ArgumentError$("Patch version must be non-negative."));
      },
      $isComparable: 1,
      $asComparable: function() {
        return [T.Version];
      },
      $isVersionRange: 1,
      static: {Version$_: function(major, minor, patch, preRelease, build, _text) {
          var t1 = preRelease == null ? [] : T.Version__splitParts(preRelease);
          t1 = new T.Version(major, minor, patch, t1, build == null ? [] : T.Version__splitParts(build), _text);
          t1.Version$_$6(major, minor, patch, preRelease, build, _text);
          return t1;
        }, Version_Version: function(major, minor, patch, build, pre) {
          var text = H.S(major) + "." + H.S(minor) + "." + H.S(patch);
          return T.Version$_(major, minor, patch, pre, build, text);
        }, Version_Version$parse: function(text) {
          var match, major, minor, patch, preRelease, build, t1, exception;
          match = $.$get$COMPLETE_VERSION().firstMatch$1(text);
          if (match == null)
            throw H.wrapException(new P.FormatException("Could not parse \"" + H.S(text) + "\".", null, null));
          try {
            t1 = match.get$_match();
            if (1 >= t1.length)
              return H.ioore(t1, 1);
            major = H.Primitives_parseInt(t1[1], null, null);
            t1 = match.get$_match();
            if (2 >= t1.length)
              return H.ioore(t1, 2);
            minor = H.Primitives_parseInt(t1[2], null, null);
            t1 = match.get$_match();
            if (3 >= t1.length)
              return H.ioore(t1, 3);
            patch = H.Primitives_parseInt(t1[3], null, null);
            t1 = match.get$_match();
            if (5 >= t1.length)
              return H.ioore(t1, 5);
            preRelease = t1[5];
            t1 = match.get$_match();
            if (8 >= t1.length)
              return H.ioore(t1, 8);
            build = t1[8];
            t1 = T.Version$_(major, minor, patch, preRelease, build, text);
            return t1;
          } catch (exception) {
            if (H.unwrapException(exception) instanceof P.FormatException)
              throw H.wrapException(new P.FormatException("Could not parse \"" + H.S(text) + "\".", null, null));
            else
              throw exception;
          }
        }, Version__splitParts: function(text) {
          return H.setRuntimeTypeInfo(new H.MappedListIterable(J.split$1$s(text, "."), new T.Version__splitParts_closure()), [null, null]).toList$0(0);
        }}
    },
    Version__splitParts_closure: {
      "^": "Closure:0;",
      call$1: [function(part) {
        var t1, exception;
        try {
          t1 = H.Primitives_parseInt(part, null, null);
          return t1;
        } catch (exception) {
          if (H.unwrapException(exception) instanceof P.FormatException)
            return part;
          else
            throw exception;
        }
      }, null, null, 2, 0, null, 95, "call"]
    }
  }], ["pub_semver.src.version_range", "package:pub_semver/src/version_range.dart",, R, {}], ["stream_transformers", "package:stream_transformers/stream_transformers.dart",, K, {
    "^": "",
    _bindStream: function(like, onCancel, onListen, sync) {
      var t1, controller;
      t1 = {};
      t1._captured_subscription_0 = null;
      t1._captured_controller_1 = null;
      controller = K._createControllerLikeStream(new K._bindStream_closure(t1, onCancel), new K._bindStream_closure0(t1, onListen), new K._bindStream_closure1(t1), new K._bindStream_closure2(t1), like, sync);
      t1._captured_controller_1 = controller;
      return controller.get$stream(controller);
    },
    _createControllerLikeStream: function(onCancel, onListen, onPause, onResume, stream, sync) {
      if (stream == null || !stream.get$isBroadcast())
        return P.StreamController_StreamController(onCancel, onListen, onPause, onResume, sync, null);
      else
        return P.StreamController_StreamController$broadcast(onCancel, onListen, sync, null);
    },
    Combine: {
      "^": "Object;_other,_combiner",
      bind$1: function(stream) {
        return K._bindStream(stream, null, new K.Combine_bind_closure(this, stream), false);
      },
      _combiner$2: function(arg0, arg1) {
        return this._combiner.call$2(arg0, arg1);
      },
      static: {Combine_all: function(streams) {
          return K._bindStream(null, null, new K.Combine_all_closure(streams), false);
        }}
    },
    Combine_all_closure: {
      "^": "Closure:80;_captured_streams_0",
      call$1: function(sink) {
        var t1, t2;
        t1 = this._captured_streams_0;
        t1 = new K.MergeAll().bind$1(P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo(new H.MappedListIterable(t1, new K.Combine_all__closure()), [null, null]), null)).transform$1(0, H.setRuntimeTypeInfo(new K.Scan(P.LinkedHashMap__makeEmpty(), new K.Combine_all__closure0()), [null, null])).where$1(0, new K.Combine_all__closure1(t1)).map$1(0, new K.Combine_all__closure2(t1));
        t2 = sink.get$addError();
        return t1.listen$3$onDone$onError(new K.Combine_all__closure3(sink), sink.get$close(sink), t2);
      }
    },
    Combine_all__closure: {
      "^": "Closure:0;",
      call$1: [function(stream) {
        return J.map$1$ax(stream, new K.Combine_all___closure0(stream));
      }, null, null, 2, 0, null, 26, "call"]
    },
    Combine_all___closure0: {
      "^": "Closure:0;_captured_stream_1",
      call$1: [function($event) {
        return [this._captured_stream_1, $event];
      }, null, null, 2, 0, null, 36, "call"]
    },
    Combine_all__closure0: {
      "^": "Closure:3;",
      call$2: [function(previous, current) {
        var values, t1;
        values = P.LinkedHashMap_LinkedHashMap$from(previous, null, null);
        t1 = J.getInterceptor$ax(current);
        values.$indexSet(0, t1.get$first(current), t1.get$last(current));
        return values;
      }, null, null, 4, 0, null, 98, 99, "call"]
    },
    Combine_all__closure1: {
      "^": "Closure:0;_captured_streams_2",
      call$1: function(values) {
        return J.$eq$(J.get$length$asx(values), 2);
      }
    },
    Combine_all__closure2: {
      "^": "Closure:0;_captured_streams_3",
      call$1: [function(values) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(this._captured_streams_3, new K.Combine_all___closure(values)), [null, null]).toList$1$growable(0, false);
      }, null, null, 2, 0, null, 45, "call"]
    },
    Combine_all___closure: {
      "^": "Closure:0;_captured_values_4",
      call$1: [function(stream) {
        return J.$index$asx(this._captured_values_4, stream);
      }, null, null, 2, 0, null, 26, "call"]
    },
    Combine_all__closure3: {
      "^": "Closure:0;_captured_sink_5",
      call$1: [function(combined) {
        return this._captured_sink_5.add$1(0, combined);
      }, null, null, 2, 0, null, 101, "call"]
    },
    Combine_bind_closure: {
      "^": "Closure;_stream_transformers$_captured_this_0,_captured_stream_1",
      call$1: function(sink) {
        var t1, t2, t3;
        t1 = this._stream_transformers$_captured_this_0;
        t2 = K.Combine_all([this._captured_stream_1, t1._other]);
        t3 = sink.get$addError();
        return t2.listen$3$onDone$onError(new K.Combine_bind__closure(t1, sink), sink.get$close(sink), t3);
      },
      $signature: function() {
        return H.computeSignature(function(A, B, R) {
          return {func: 1, args: [[P.EventSink, R]]};
        }, this._stream_transformers$_captured_this_0, "Combine");
      }
    },
    Combine_bind__closure: {
      "^": "Closure:0;_stream_transformers$_captured_this_2,_captured_sink_3",
      call$1: [function(values) {
        var t1 = J.getInterceptor$ax(values);
        return this._captured_sink_3.add$1(0, this._stream_transformers$_captured_this_2._combiner$2(t1.get$first(values), t1.get$last(values)));
      }, null, null, 2, 0, null, 45, "call"]
    },
    Debounce: {
      "^": "Object;_stream_transformers$_duration",
      bind$1: function(stream) {
        return stream.transform$1(0, H.setRuntimeTypeInfo(new K.FlatMapLatest(new K.Debounce_bind_closure(this)), [null, null]));
      }
    },
    Debounce_bind_closure: {
      "^": "Closure:0;_stream_transformers$_captured_this_0",
      call$1: function(value) {
        return P._TakeStream$(P.Stream_Stream$periodic(this._stream_transformers$_captured_this_0._stream_transformers$_duration, new K.Debounce_bind__closure(value), null), 1, null);
      }
    },
    Debounce_bind__closure: {
      "^": "Closure:0;_stream_transformers$_captured_value_1",
      call$1: function(_) {
        return this._stream_transformers$_captured_value_1;
      }
    },
    FlatMap: {
      "^": "Object;_convert",
      bind$1: function(stream) {
        var subscriptions = P.ListQueue$(null, P.StreamSubscription);
        return K._bindStream(stream, new K.FlatMap_bind_onCancel(subscriptions), new K.FlatMap_bind_onListen(this, stream, subscriptions), true);
      },
      _convert$1: function(arg0) {
        return this._convert.call$1(arg0);
      }
    },
    FlatMap_bind_onListen: {
      "^": "Closure;_captured_this_1,_captured_stream_2,_captured_subscriptions_3",
      call$1: function(sink) {
        var t1, openStreams, t2;
        t1 = {};
        openStreams = H.setRuntimeTypeInfo([], [P.Stream]);
        t1._captured_isDone_0 = false;
        t2 = new K.FlatMap_bind_onListen_closeSinkIfDone(t1, sink, openStreams);
        return this._captured_stream_2.listen$3$onDone$onError(new K.FlatMap_bind_onListen_onData(this._captured_this_1, this._captured_subscriptions_3, sink, openStreams, t2), new K.FlatMap_bind_onListen_closure(t1, t2), new K.FlatMap_bind_onListen_closure0(sink));
      },
      $signature: function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, ret: P.StreamSubscription, args: [[P.EventSink, T]]};
        }, this._captured_this_1, "FlatMap");
      }
    },
    FlatMap_bind_onListen_closeSinkIfDone: {
      "^": "Closure:2;_stream_transformers$_box_0,_captured_sink_4,_captured_openStreams_5",
      call$0: function() {
        if (this._stream_transformers$_box_0._captured_isDone_0 && this._captured_openStreams_5.length === 0)
          this._captured_sink_4.close$0(0);
      }
    },
    FlatMap_bind_onListen_onData: {
      "^": "Closure:20;_captured_this_6,_captured_subscriptions_7,_captured_sink_8,_captured_openStreams_9,_captured_closeSinkIfDone_10",
      call$1: [function(data) {
        var mappedStream, t1, t2;
        mappedStream = this._captured_this_6._convert$1(data);
        t1 = this._captured_openStreams_9;
        t1.push(mappedStream);
        t2 = this._captured_sink_8;
        this._captured_subscriptions_7._add$1(mappedStream.listen$3$onDone$onError(new K.FlatMap_bind_onListen_onData_closure(t2), new K.FlatMap_bind_onListen_onData_closure0(t1, this._captured_closeSinkIfDone_10, mappedStream), t2.get$addError()));
      }, null, null, 2, 0, null, 9, "call"]
    },
    FlatMap_bind_onListen_onData_closure: {
      "^": "Closure:0;_captured_sink_11",
      call$1: [function($event) {
        return this._captured_sink_11.add$1(0, $event);
      }, null, null, 2, 0, null, 36, "call"]
    },
    FlatMap_bind_onListen_onData_closure0: {
      "^": "Closure:1;_captured_openStreams_12,_captured_closeSinkIfDone_13,_captured_mappedStream_14",
      call$0: [function() {
        C.JSArray_methods.remove$1(this._captured_openStreams_12, this._captured_mappedStream_14);
        this._captured_closeSinkIfDone_13.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    FlatMap_bind_onListen_closure: {
      "^": "Closure:1;_stream_transformers$_box_0,_captured_closeSinkIfDone_15",
      call$0: [function() {
        this._stream_transformers$_box_0._captured_isDone_0 = true;
        this._captured_closeSinkIfDone_15.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    FlatMap_bind_onListen_closure0: {
      "^": "Closure:3;_captured_sink_16",
      call$2: [function(error, stackTrace) {
        return this._captured_sink_16.addError$2(error, stackTrace);
      }, null, null, 4, 0, null, 5, 6, "call"]
    },
    FlatMap_bind_onCancel: {
      "^": "Closure:2;_captured_subscriptions_17",
      call$0: [function() {
        for (var t1 = this._captured_subscriptions_17; !t1.get$isEmpty(t1);)
          t1.removeFirst$0().cancel$0();
      }, null, null, 0, 0, null, "call"]
    },
    FlatMapLatest: {
      "^": "Object;_convert",
      bind$1: function(stream) {
        var t1, input;
        t1 = {};
        input = stream.asBroadcastStream$1$onCancel(new K.FlatMapLatest_bind_closure());
        t1._captured_doneSubscription_0 = null;
        return K._bindStream(stream, new K.FlatMapLatest_bind_closure0(t1), new K.FlatMapLatest_bind_onListen(t1, this, input), false);
      },
      _convert$1: function(arg0) {
        return this._convert.call$1(arg0);
      }
    },
    FlatMapLatest_bind_closure: {
      "^": "Closure:0;",
      call$1: [function(subscription) {
        return subscription.cancel$0();
      }, null, null, 2, 0, null, 44, "call"]
    },
    FlatMapLatest_bind_onListen: {
      "^": "Closure;_stream_transformers$_box_0,_captured_this_1,_captured_input_2",
      call$1: function(sink) {
        var done, t1;
        done = P.StreamController_StreamController$broadcast(null, null, false, null);
        t1 = this._captured_input_2;
        this._stream_transformers$_box_0._captured_doneSubscription_0 = t1.listen$3$onDone$onError(new K.FlatMapLatest_bind_onListen_closure(done), new K.FlatMapLatest_bind_onListen_closure0(done), new K.FlatMapLatest_bind_onListen_closure1());
        return t1.transform$1(0, H.setRuntimeTypeInfo(new K.FlatMap(new K.FlatMapLatest_bind_onListen_closure2(this._captured_this_1, done)), [null, null])).listen$3$onDone$onError(new K.FlatMapLatest_bind_onListen_closure3(sink), new K.FlatMapLatest_bind_onListen_closure4(sink), sink.get$addError());
      },
      $signature: function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, ret: P.StreamSubscription, args: [[P.EventSink, T]]};
        }, this._captured_this_1, "FlatMapLatest");
      }
    },
    FlatMapLatest_bind_onListen_closure: {
      "^": "Closure:0;_captured_done_3",
      call$1: [function(value) {
        var t1 = this._captured_done_3;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(true);
        return;
      }, null, null, 2, 0, null, 8, "call"]
    },
    FlatMapLatest_bind_onListen_closure1: {
      "^": "Closure:0;",
      call$1: [function(_) {
      }, null, null, 2, 0, null, 0, "call"]
    },
    FlatMapLatest_bind_onListen_closure0: {
      "^": "Closure:1;_captured_done_4",
      call$0: [function() {
        return this._captured_done_4.close$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    FlatMapLatest_bind_onListen_closure2: {
      "^": "Closure:0;_stream_transformers$_captured_this_5,_captured_done_6",
      call$1: [function(value) {
        var t1 = this._captured_done_6;
        return J.transform$1$x(this._stream_transformers$_captured_this_5._convert$1(value), H.setRuntimeTypeInfo(new K.TakeUntil(H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)])), [null]));
      }, null, null, 2, 0, null, 8, "call"]
    },
    FlatMapLatest_bind_onListen_closure3: {
      "^": "Closure:0;_captured_sink_7",
      call$1: [function(value) {
        return this._captured_sink_7.add$1(0, value);
      }, null, null, 2, 0, null, 8, "call"]
    },
    FlatMapLatest_bind_onListen_closure4: {
      "^": "Closure:1;_captured_sink_8",
      call$0: [function() {
        return this._captured_sink_8.close$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    FlatMapLatest_bind_closure0: {
      "^": "Closure:1;_stream_transformers$_box_0",
      call$0: [function() {
        return this._stream_transformers$_box_0._captured_doneSubscription_0.cancel$0();
      }, null, null, 0, 0, null, "call"]
    },
    MergeAll: {
      "^": "Object;",
      bind$1: function(stream) {
        return stream.transform$1(0, H.setRuntimeTypeInfo(new K.FlatMap(new K.MergeAll_bind_closure()), [null, null]));
      }
    },
    MergeAll_bind_closure: {
      "^": "Closure:0;",
      call$1: [function(stream) {
        return stream;
      }, null, null, 2, 0, null, 26, "call"]
    },
    Scan: {
      "^": "Object;_initialValue,_combine",
      bind$1: function(stream) {
        return K._bindStream(stream, null, new K.Scan_bind_closure(this, stream), false);
      },
      _combine$2: function(arg0, arg1) {
        return this._combine.call$2(arg0, arg1);
      }
    },
    Scan_bind_closure: {
      "^": "Closure;_captured_this_1,_captured_stream_2",
      call$1: function(sink) {
        var t1, t2, value, t3;
        t1 = {};
        t2 = this._captured_this_1;
        value = t2._initialValue;
        t1._captured_value_0 = value;
        sink.add$1(0, value);
        t3 = sink.get$addError();
        return this._captured_stream_2.listen$3$onDone$onError(new K.Scan_bind__onData(t1, t2, sink), sink.get$close(sink), t3);
      },
      $signature: function() {
        return H.computeSignature(function(A, R) {
          return {func: 1, args: [[P.EventSink, R]]};
        }, this._captured_this_1, "Scan");
      }
    },
    Scan_bind__onData: {
      "^": "Closure;_stream_transformers$_box_0,_captured_this_3,_captured_sink_4",
      call$1: [function(data) {
        var t1, value;
        t1 = this._stream_transformers$_box_0;
        value = this._captured_this_3._combine$2(t1._captured_value_0, data);
        t1._captured_value_0 = value;
        this._captured_sink_4.add$1(0, value);
      }, null, null, 2, 0, null, 9, "call"],
      $signature: function() {
        return H.computeSignature(function(A, R) {
          return {func: 1, void: true, args: [A]};
        }, this._captured_this_3, "Scan");
      }
    },
    TakeUntil: {
      "^": "Object;_signal",
      bind$1: function(stream) {
        var t1 = {};
        t1._captured_signalSubscription_1 = null;
        return K._bindStream(stream, new K.TakeUntil_bind_closure(t1), new K.TakeUntil_bind_onListen(t1, this, stream), false);
      }
    },
    TakeUntil_bind_onListen: {
      "^": "Closure;_stream_transformers$_box_1,_stream_transformers$_captured_this_2,_captured_stream_3",
      call$1: function(sink) {
        var t1, t2, inputSubscription;
        t1 = {};
        t1._captured_inputSubscription_0 = null;
        t2 = new K.TakeUntil_bind_onListen_done(t1, sink);
        this._stream_transformers$_box_1._captured_signalSubscription_1 = P._TakeStream$(this._stream_transformers$_captured_this_2._signal, 1, null)._createSubscription$4(new K.TakeUntil_bind_onListen_closure(t2), sink.get$addError(), null, false);
        inputSubscription = this._captured_stream_3.listen$3$onDone$onError(new K.TakeUntil_bind_onListen_closure0(sink), new K.TakeUntil_bind_onListen_closure1(t2), sink.get$addError());
        t1._captured_inputSubscription_0 = inputSubscription;
        return inputSubscription;
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: P.StreamSubscription, args: [[P.EventSink, T]]};
        }, this._stream_transformers$_captured_this_2, "TakeUntil");
      }
    },
    TakeUntil_bind_onListen_done: {
      "^": "Closure:2;_stream_transformers$_box_0,_captured_sink_4",
      call$0: function() {
        this._stream_transformers$_box_0._captured_inputSubscription_0.cancel$0();
        this._captured_sink_4.close$0(0);
      }
    },
    TakeUntil_bind_onListen_closure: {
      "^": "Closure:0;_captured_done_5",
      call$1: [function(_) {
        return this._captured_done_5.call$0();
      }, null, null, 2, 0, null, 0, "call"]
    },
    TakeUntil_bind_onListen_closure0: {
      "^": "Closure:0;_captured_sink_6",
      call$1: [function(value) {
        return this._captured_sink_6.add$1(0, value);
      }, null, null, 2, 0, null, 8, "call"]
    },
    TakeUntil_bind_onListen_closure1: {
      "^": "Closure:1;_captured_done_7",
      call$0: [function() {
        return this._captured_done_7.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    TakeUntil_bind_closure: {
      "^": "Closure:1;_stream_transformers$_box_1",
      call$0: [function() {
        return this._stream_transformers$_box_1._captured_signalSubscription_1.cancel$0();
      }, null, null, 0, 0, null, "call"]
    },
    _bindStream_closure0: {
      "^": "Closure:1;_stream_transformers$_box_0,_captured_onListen_1",
      call$0: function() {
        var t1, subscription;
        t1 = this._stream_transformers$_box_0;
        subscription = this._captured_onListen_1.call$1(t1._captured_controller_1);
        t1._captured_subscription_0 = subscription;
        return subscription;
      }
    },
    _bindStream_closure1: {
      "^": "Closure:1;_stream_transformers$_box_0",
      call$0: function() {
        return J.pause$0$x(this._stream_transformers$_box_0._captured_subscription_0);
      }
    },
    _bindStream_closure2: {
      "^": "Closure:1;_stream_transformers$_box_0",
      call$0: function() {
        return this._stream_transformers$_box_0._captured_subscription_0.resume$0();
      }
    },
    _bindStream_closure: {
      "^": "Closure:1;_stream_transformers$_box_0,_captured_onCancel_2",
      call$0: [function() {
        var t1 = [this._captured_onCancel_2, this._stream_transformers$_box_0._captured_subscription_0.get$cancel()];
        t1 = H.setRuntimeTypeInfo(new H.WhereIterable(t1, new K._bindStream__closure()), [H.getTypeArgumentByIndex(t1, 0)]);
        t1 = H.MappedIterable_MappedIterable(t1, new K._bindStream__closure0(), H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
        return P.Future_wait(H.setRuntimeTypeInfo(new H.WhereIterable(t1, new K._bindStream__closure1()), [H.getRuntimeTypeArgument(t1, "Iterable", 0)]), null, false);
      }, null, null, 0, 0, null, "call"]
    },
    _bindStream__closure: {
      "^": "Closure:0;",
      call$1: function($function) {
        return $function != null;
      }
    },
    _bindStream__closure0: {
      "^": "Closure:0;",
      call$1: [function($function) {
        return $function.call$0();
      }, null, null, 2, 0, null, 68, "call"]
    },
    _bindStream__closure1: {
      "^": "Closure:0;",
      call$1: function(future) {
        return future != null;
      }
    }
  }]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.set$href$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$href(receiver, value);
  };
  J.set$innerHtml$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
  };
  J.set$start$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$start(receiver, value);
  };
  J.set$text$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$text(receiver, value);
  };
  J.get$_children$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$_children(receiver);
  };
  J.get$attributes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$attributes(receiver);
  };
  J.get$children$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$children(receiver);
  };
  J.get$classes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$classes(receiver);
  };
  J.get$data$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$data(receiver);
  };
  J.get$directory$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$directory(receiver);
  };
  J.get$document$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$document(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$files$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$files(receiver);
  };
  J.get$first$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$first(receiver);
  };
  J.get$id$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$id(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$isNotEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$kind$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$kind(receiver);
  };
  J.get$last$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$last(receiver);
  };
  J.get$left$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$left(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$location$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$location(receiver);
  };
  J.get$marginEdge$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$marginEdge(receiver);
  };
  J.get$message$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$message(receiver);
  };
  J.get$name$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$name(receiver);
  };
  J.get$nodes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$nodes(receiver);
  };
  J.get$offset$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$offset(receiver);
  };
  J.get$onChange$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onChange(receiver);
  };
  J.get$onClick$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onClick(receiver);
  };
  J.get$onDoubleClick$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onDoubleClick(receiver);
  };
  J.get$parent$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$parent(receiver);
  };
  J.get$path$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$path(receiver);
  };
  J.get$responseText$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$responseText(receiver);
  };
  J.get$result$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$result(receiver);
  };
  J.get$results$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$results(receiver);
  };
  J.get$source$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$source(receiver);
  };
  J.get$style$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$style(receiver);
  };
  J.get$tagName$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$tagName(receiver);
  };
  J.get$text$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$text(receiver);
  };
  J.get$top$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$top(receiver);
  };
  J.get$topLeft$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$topLeft(receiver);
  };
  J.get$type$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$type(receiver);
  };
  J.get$value$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$value(receiver);
  };
  J.get$version$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$version(receiver);
  };
  J.get$view$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$view(receiver);
  };
  J.$add$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ns(receiver).$add(receiver, a0);
  };
  J.$and$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver & a0) >>> 0;
    return J.getInterceptor$n(receiver).$and(receiver, a0);
  };
  J.$ge$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver >= a0;
    return J.getInterceptor$n(receiver).$ge(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
      if (a0 >>> 0 === a0 && a0 < receiver.length)
        return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$indexSet$ax = function(receiver, a0, a1) {
    if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0] = a1;
    return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
  };
  J.$le$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver <= a0;
    return J.getInterceptor$n(receiver).$le(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.$mul$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver * a0;
    return J.getInterceptor$ns(receiver).$mul(receiver, a0);
  };
  J.$shl$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).$shl(receiver, a0);
  };
  J.$sub$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver - a0;
    return J.getInterceptor$n(receiver).$sub(receiver, a0);
  };
  J.$tdiv$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
  };
  J.$xor$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver ^ a0) >>> 0;
    return J.getInterceptor$n(receiver).$xor(receiver, a0);
  };
  J._addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
  };
  J._clearChildren$0$x = function(receiver) {
    return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
  };
  J._removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
  };
  J._replaceChild$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
  };
  J.accept$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).accept$1(receiver, a0);
  };
  J.add$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).add$1(receiver, a0);
  };
  J.append$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).append$1(receiver, a0);
  };
  J.clear$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).clear$0(receiver);
  };
  J.close$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).close$0(receiver);
  };
  J.compareTo$1$ns = function(receiver, a0) {
    return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
  };
  J.complete$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).complete$1(receiver, a0);
  };
  J.contains$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.endsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
  };
  J.every$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).every$1(receiver, a0);
  };
  J.expand$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).expand$1(receiver, a0);
  };
  J.firstWhere$2$orElse$ax = function(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).firstWhere$2$orElse(receiver, a0, a1);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.format$4$lineLength$x = function(receiver, a0, a1, a2, a3) {
    return J.getInterceptor$x(receiver).format$4$lineLength(receiver, a0, a1, a2, a3);
  };
  J.getBoundingClientRect$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
  };
  J.getComputedStyle$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).getComputedStyle$0(receiver);
  };
  J.indexOf$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
  };
  J.join$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).join$1(receiver, a0);
  };
  J.map$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).map$1(receiver, a0);
  };
  J.matchAsPrefix$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
  };
  J.pause$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).pause$0(receiver);
  };
  J.preventDefault$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).preventDefault$0(receiver);
  };
  J.querySelector$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).querySelector$1(receiver, a0);
  };
  J.remove$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).remove$0(receiver);
  };
  J.remove$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
  };
  J.replaceAll$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
  };
  J.replaceWith$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
  };
  J.selectNode$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).selectNode$1(receiver, a0);
  };
  J.send$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).send$1(receiver, a0);
  };
  J.setAttribute$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setAttribute$2(receiver, a0, a1);
  };
  J.setInnerHtml$2$treeSanitizer$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setInnerHtml$2$treeSanitizer(receiver, a0, a1);
  };
  J.setInnerHtml$2$validator$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setInnerHtml$2$validator(receiver, a0, a1);
  };
  J.skip$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
  };
  J.sort$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.start$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).start$0(receiver);
  };
  J.startsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
  };
  J.substring$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).substring$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.take$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).take$1(receiver, a0);
  };
  J.toInt$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).toInt$0(receiver);
  };
  J.toList$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).toList$0(receiver);
  };
  J.toLowerCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
  };
  J.transform$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).transform$1(receiver, a0);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.trimLeft$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trimLeft$0(receiver);
  };
  J.trimRight$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trimRight$0(receiver);
  };
  J.where$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).where$1(receiver, a0);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.noSuchMethod$1$ = function(receiver, a0) {
    return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.BodyElement_methods = W.BodyElement.prototype;
  C.CssStyleDeclaration_methods = W.CssStyleDeclaration.prototype;
  C.HttpRequest_methods = W.HttpRequest.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSDouble_methods = J.JSDouble.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.NodeList_methods = W.NodeList.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
  C.C_EmptyIterator = new H.EmptyIterator();
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C__DelayedDone = new P._DelayedDone();
  C.C__RootZone = new P._RootZone();
  C.Duration_0 = new P.Duration(0);
  C.Duration_250000 = new P.Duration(250000);
  C.Duration_400000 = new P.Duration(400000);
  C.C_DefaultEquality = new Z.DefaultEquality();
  C.IterableEquality_DefaultEquality = new Z.IterableEquality(C.C_DefaultEquality);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
  C.JsonCodec_null_null = new P.JsonCodec(null, null);
  C.JsonDecoder_null = new P.JsonDecoder(null);
  C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
  C.Level_FINER_400 = new N.Level("FINER", 400);
  C.Level_FINE_500 = new N.Level("FINE", 500);
  C.Level_INFO_800 = new N.Level("INFO", 800);
  C.Level_OFF_2000 = new N.Level("OFF", 2000);
  C.Level_SEVERE_1000 = new N.Level("SEVERE", 1000);
  C.Level_WARNING_900 = new N.Level("WARNING", 900);
  C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
  C.Level_ALL_0 = new N.Level("ALL", 0);
  C.Level_FINEST_300 = new N.Level("FINEST", 300);
  C.Level_CONFIG_700 = new N.Level("CONFIG", 700);
  C.Level_SHOUT_1200 = new N.Level("SHOUT", 1200);
  C.List_O1R = Isolate.makeConstantList([C.Level_ALL_0, C.Level_FINEST_300, C.Level_FINER_400, C.Level_FINE_500, C.Level_CONFIG_700, C.Level_INFO_800, C.Level_WARNING_900, C.Level_SEVERE_1000, C.Level_SHOUT_1200, C.Level_OFF_2000]);
  C.List_ego = Isolate.makeConstantList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]);
  C.List_empty = Isolate.makeConstantList([]);
  C.C_EmptyBlockSyntax = new U.EmptyBlockSyntax();
  C.C_BlockHtmlSyntax = new U.BlockHtmlSyntax();
  C.C_SetextHeaderSyntax = new U.SetextHeaderSyntax();
  C.C_HeaderSyntax = new U.HeaderSyntax();
  C.C_CodeBlockSyntax = new U.CodeBlockSyntax();
  C.C_FencedCodeBlockSyntax = new U.FencedCodeBlockSyntax();
  C.C_BlockquoteSyntax = new U.BlockquoteSyntax();
  C.C_HorizontalRuleSyntax = new U.HorizontalRuleSyntax();
  C.C_UnorderedListSyntax = new U.UnorderedListSyntax();
  C.C_OrderedListSyntax = new U.OrderedListSyntax();
  C.C_ParagraphSyntax = new U.ParagraphSyntax();
  C.List_gBu = Isolate.makeConstantList([C.C_EmptyBlockSyntax, C.C_BlockHtmlSyntax, C.C_SetextHeaderSyntax, C.C_HeaderSyntax, C.C_CodeBlockSyntax, C.C_FencedCodeBlockSyntax, C.C_BlockquoteSyntax, C.C_HorizontalRuleSyntax, C.C_UnorderedListSyntax, C.C_OrderedListSyntax, C.C_ParagraphSyntax]);
  C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
  C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
  C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.Symbol]);
  C.Map_empty = H.setRuntimeTypeInfo(new H.ConstantStringMap(0, {}, C.List_empty0), [P.Symbol, null]);
  C.Symbol_call = new H.Symbol0("call");
  C.Type_25m = H.createRuntimeType("EditorManager");
  C.Type_43h = H.createRuntimeType("ErrorRepository");
  C.Type_CvJ = H.createRuntimeType("ProjectManager");
  C.Type_OHH = H.createRuntimeType("SdkManager");
  C.Type_bhC = H.createRuntimeType("AnalysisServer");
  C.Type_chs = H.createRuntimeType("_TestJob");
  C.Type_oyn = H.createRuntimeType("AnalysisServerDialog");
  C.Type_uti = H.createRuntimeType("RebuildJob");
  $.Primitives_mirrorFunctionCacheName = "$cachedFunction";
  $.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
  $.Primitives_timerFrequency = null;
  $.Primitives_timerTicks = null;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._package = null;
  $.Dependencies__global = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Expando__keyCount = 0;
  $.Stopwatch__frequency = null;
  $.Element__parseDocument = null;
  $.Element__parseRange = null;
  $.Element__defaultValidator = null;
  $.Element__defaultSanitizer = null;
  $.Device__isOpera = null;
  $.Device__isIE = null;
  $.Device__isFirefox = null;
  $.Device__isWebKit = null;
  $.Device__cachedCssPrefix = null;
  $._infosPrefPath = "dartlang.showInfos";
  $._todosPrefPath = "dartlang.showTodos";
  $._filterUnnamedLibraryWarningsPath = "dartlang.filterUnnamedLibraryWarnings";
  $._filterCompiledToJSWarningsPath = "dartlang.filterCompiledToJSWarnings";
  $.hierarchicalLoggingEnabled = false;
  $.recordStackTraceAtLevel = C.Level_OFF_2000;
  $._rootLevel = C.Level_INFO_800;
  $.LogRecord__nextNumber = 0;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash]($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var staticName = lazies[i++];
      var lazyValue = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["IsolateNatives_thisScript", "$get$IsolateNatives_thisScript", "thisScript", function() {
    return H.IsolateNatives_computeThisScript();
  }, "IsolateNatives_workerIds", "$get$IsolateNatives_workerIds", "workerIds", function() {
    return new P.Expando(null);
  }, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", "noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
        return "$receiver$";
      }}));
  }, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", "notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
        return "$receiver$";
      }}));
  }, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", "nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", "nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", "undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", "undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", "nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", "nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", "undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", "undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "_logger13", "$get$_logger13", "_logger", function() {
    return N.Logger_Logger("error_repository");
  }, "_logger9", "$get$_logger9", "_logger", function() {
    return N.Logger_Logger("analysis-server-gen");
  }, "_logger3", "$get$_logger3", "_logger", function() {
    return N.Logger_Logger("atom");
  }, "atom", "$get$atom", "atom", function() {
    var t1 = new E.Atom(null, null, null, null, null, null, null, $.$get$_ctx());
    t1.Atom$0();
    return t1;
  }, "shell", "$get$shell", "shell", function() {
    return new E.Shell();
  }, "_ctx", "$get$_ctx", "_ctx", function() {
    return J.$index$asx($.$get$context(), "atom");
  }, "_logger8", "$get$_logger8", "_logger", function() {
    return N.Logger_Logger("analysis-server");
  }, "_logger7", "$get$_logger7", "_logger", function() {
    return N.Logger_Logger("atom_utils");
  }, "_process", "$get$_process", "_process", function() {
    return K.require("process");
  }, "platform", "$get$platform", "platform", function() {
    return J.$index$asx($.$get$_process(), "platform");
  }, "isWindows", "$get$isWindows", "isWindows", function() {
    return J.startsWith$1$s($.$get$platform(), "win");
  }, "isMac", "$get$isMac", "isMac", function() {
    return J.$eq$($.$get$platform(), "darwin");
  }, "isLinux", "$get$isLinux", "isLinux", function() {
    return $.$get$isWindows() !== true && $.$get$isMac() !== true;
  }, "separator", "$get$separator", "separator", function() {
    return $.$get$isWindows() === true ? "\\" : "/";
  }, "_logger12", "$get$_logger12", "_logger", function() {
    return N.Logger_Logger("atom.autocomplete");
  }, "_logger10", "$get$_logger10", "_logger", function() {
    return N.Logger_Logger("changelog");
  }, "_logger2", "$get$_logger2", "_logger", function() {
    return N.Logger_Logger("editing");
  }, "_flashDuration", "$get$_flashDuration", "_flashDuration", function() {
    return P.Duration$(0, 0, 0, 100, 0, 0);
  }, "_logger0", "$get$_logger0", "_logger", function() {
    return N.Logger_Logger("formatting");
  }, "_logger4", "$get$_logger4", "_logger", function() {
    return N.Logger_Logger("jobs");
  }, "_browserWindow", "$get$_browserWindow", "_browserWindow", function() {
    return P.JsObject_JsObject$fromBrowserObject(J.$index$asx($.$get$context(), "window"));
  }, "_browserJson", "$get$_browserJson", "_browserJson", function() {
    return J.$index$asx($.$get$_browserWindow(), "JSON");
  }, "_logger1", "$get$_logger1", "_logger", function() {
    return N.Logger_Logger("js");
  }, "_logger", "$get$_logger", "_logger", function() {
    return N.Logger_Logger("plugin");
  }, "_logger6", "$get$_logger6", "_logger", function() {
    return N.Logger_Logger("process");
  }, "_logger5", "$get$_logger5", "_logger", function() {
    return N.Logger_Logger("projects");
  }, "_idRegex", "$get$_idRegex", "_idRegex", function() {
    return P.RegExp_RegExp("[_a-zA-Z0-9]", true, false);
  }, "FindReferencesView__cachePrefix", "$get$FindReferencesView__cachePrefix", "_cachePrefix", function() {
    var t1 = $.$get$separator();
    return t1 + ".pub-cache" + t1;
  }, "FindReferencesView__pubPrefix", "$get$FindReferencesView__pubPrefix", "_pubPrefix", function() {
    var t1 = $.$get$separator();
    return "hosted" + t1 + "pub.dartlang.org" + t1;
  }, "FindReferencesView__libPrefix", "$get$FindReferencesView__libPrefix", "_libPrefix", function() {
    var t1 = $.$get$separator();
    return t1 + "lib" + t1;
  }, "_minSdkVersion", "$get$_minSdkVersion", "_minSdkVersion", function() {
    return T.Version_Version$parse("1.11.0");
  }, "jobs", "$get$jobs", "jobs", function() {
    var t1 = new S.JobManager(P.StreamController_StreamController$broadcast(null, null, false, null), [], null, null);
    t1.JobManager$0();
    return t1;
  }, "state", "$get$state", "state", function() {
    return new K.State(P.LinkedHashMap__makeEmpty());
  }, "_logger11", "$get$_logger11", "_logger", function() {
    return N.Logger_Logger("autocomplete");
  }, "DartAutocompleteProvider__suggestionKindMap", "$get$DartAutocompleteProvider__suggestionKindMap", "_suggestionKindMap", function() {
    return P.LinkedHashMap__makeLiteral(["IMPORT", "import", "KEYWORD", "keyword", "PARAMETER", "variable"]);
  }, "DartAutocompleteProvider__elementKindMap", "$get$DartAutocompleteProvider__elementKindMap", "_elementKindMap", function() {
    return P.LinkedHashMap__makeLiteral(["CLASS", "class", "CLASS_TYPE_ALIAS", "class", "CONSTRUCTOR", "constant", "SETTER", "property", "GETTER", "property", "FUNCTION", "function", "METHOD", "method", "LOCAL_VARIABLE", "variable", "FUNCTION_TYPE_ALIAS", "function", "ENUM", "constant", "ENUM_CONSTANT", "constant", "FIELD", "property", "PARAMETER", "variable", "TOP_LEVEL_VARIABLE", "variable"]);
  }, "DartAutocompleteProvider__rightLabelMap", "$get$DartAutocompleteProvider__rightLabelMap", "_rightLabelMap", function() {
    return P.LinkedHashMap__makeLiteral([null, null, "FUNCTION_TYPE_ALIAS", "function type"]);
  }, "_AsyncRun_scheduleImmediateClosure", "$get$_AsyncRun_scheduleImmediateClosure", "scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "Future__nullFuture", "$get$Future__nullFuture", "_nullFuture", function() {
    return P.Future_Future$value(null, null);
  }, "_toStringVisiting", "$get$_toStringVisiting", "_toStringVisiting", function() {
    return [];
  }, "_HEIGHT", "$get$_HEIGHT", "_HEIGHT", function() {
    return ["top", "bottom"];
  }, "_WIDTH", "$get$_WIDTH", "_WIDTH", function() {
    return ["right", "left"];
  }, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", "_allowedElements", function() {
    return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], null);
  }, "_Html5NodeValidator__attributeValidators", "$get$_Html5NodeValidator__attributeValidators", "_attributeValidators", function() {
    return P.LinkedHashMap__makeEmpty();
  }, "context", "$get$context", "context", function() {
    return P._wrapToDart(self);
  }, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartObject");
  }, "_DART_CLOSURE_PROPERTY_NAME", "$get$_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "_dartProxyCtor", "$get$_dartProxyCtor", "_dartProxyCtor", function() {
    return function DartObject(o) {
      this.o = o;
    };
  }, "CssClassSetImpl__validTokenRE", "$get$CssClassSetImpl__validTokenRE", "_validTokenRE", function() {
    return P.RegExp_RegExp("^\\S+$", true, false);
  }, "_severityMap", "$get$_severityMap", "_severityMap", function() {
    return P.LinkedHashMap__makeLiteral(["ERROR", "Error", "WARNING", "Warning", "INFO", "Info"]);
  }, "Logger__loggers", "$get$Logger__loggers", "_loggers", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
  }, "_RE_EMPTY", "$get$_RE_EMPTY", "_RE_EMPTY", function() {
    return P.RegExp_RegExp("^([ \\t]*)$", true, false);
  }, "_RE_SETEXT", "$get$_RE_SETEXT", "_RE_SETEXT", function() {
    return P.RegExp_RegExp("^((=+)|(-+))$", true, false);
  }, "_RE_HEADER", "$get$_RE_HEADER", "_RE_HEADER", function() {
    return P.RegExp_RegExp("^(#{1,6})(.*?)#*$", true, false);
  }, "_RE_BLOCKQUOTE", "$get$_RE_BLOCKQUOTE", "_RE_BLOCKQUOTE", function() {
    return P.RegExp_RegExp("^[ ]{0,3}>[ ]?(.*)$", true, false);
  }, "_RE_INDENT", "$get$_RE_INDENT", "_RE_INDENT", function() {
    return P.RegExp_RegExp("^(?:    |\\t)(.*)$", true, false);
  }, "_RE_CODE", "$get$_RE_CODE", "_RE_CODE", function() {
    return P.RegExp_RegExp("^(`{3,}|~{3,})(.*)$", true, false);
  }, "_RE_HR", "$get$_RE_HR", "_RE_HR", function() {
    return P.RegExp_RegExp("^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\\*+[ ]{0,2}){3,})$", true, false);
  }, "_RE_HTML", "$get$_RE_HTML", "_RE_HTML", function() {
    return P.RegExp_RegExp("^<[ ]*\\w+[ >]", true, false);
  }, "_RE_UL", "$get$_RE_UL", "_RE_UL", function() {
    return P.RegExp_RegExp("^[ ]{0,3}[*+-][ \\t]+(.*)$", true, false);
  }, "_RE_OL", "$get$_RE_OL", "_RE_OL", function() {
    return P.RegExp_RegExp("^[ ]{0,3}\\d+\\.[ \\t]+(.*)$", true, false);
  }, "HtmlRenderer__BLOCK_TAGS", "$get$HtmlRenderer__BLOCK_TAGS", "_BLOCK_TAGS", function() {
    return P.RegExp_RegExp("blockquote|h1|h2|h3|h4|h5|h6|hr|p|pre", true, false);
  }, "InlineParser__defaultSyntaxes", "$get$InlineParser__defaultSyntaxes", "_defaultSyntaxes", function() {
    return H.setRuntimeTypeInfo([X.TextSyntax$("\\s*[A-Za-z0-9]+", null), new X.AutolinkSyntax(P.RegExp_RegExp("<((http|https|ftp)://[^>]*)>", true, true)), X.LinkSyntax$(null, "\\["), X.ImageLinkSyntax$(null), X.TextSyntax$(" \\* ", null), X.TextSyntax$(" _ ", null), X.TextSyntax$("&[#a-zA-Z0-9]*;", null), X.TextSyntax$("&", "&amp;"), X.TextSyntax$("<", "&lt;"), X.TagSyntax$("\\*\\*", null, "strong"), X.TagSyntax$("__", null, "strong"), X.TagSyntax$("\\*", null, "em"), X.TagSyntax$("_", null, "em"), X.CodeSyntax$("``\\s?((?:.|\\n)*?)\\s?``"), X.CodeSyntax$("`([^`]*)`")], [X.InlineSyntax]);
  }, "START_VERSION", "$get$START_VERSION", "START_VERSION", function() {
    return P.RegExp_RegExp("^(\\d+).(\\d+).(\\d+)(-([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?(\\+([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?", true, false);
  }, "COMPLETE_VERSION", "$get$COMPLETE_VERSION", "COMPLETE_VERSION", function() {
    return P.RegExp_RegExp($.$get$START_VERSION().pattern + "$", true, false);
  }]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = ["_", "result", "e", "obj", null, "error", "stackTrace", "m", "value", "data", "str", "b", "a", "editor", "message", "element", "val", "arg", "response", "code", "s", "node", "object", "dir", "o", "r", "stream", "x", "exitCode", "invocation", "v", "each", "options", "navInfo", "evt", "p", "event", "contents", "edit", "i", "cr", "name", "attributeName", "context", "subscription", "values", "key", "busy", "pos", "isolate", "errorCallback", "resolve", "reject", "_this", "inState", "entry", "numberOfArguments", "allPaths", "currentProjects", "newSdk", "arg1", "_newName", "analysisErrors", "analysisFlushResults", "l", "sdkPath", "version", "arg2", "function", "foundSdk", "arg3", "status", "cs", "arg4", "didFormat", "active", "theError", "theStackTrace", "ignored", "sender", "k", "ed", "map", "xhr", "attr", "callback", "captureThis", "self", "arguments", "item", "suggestions", "suggestion", "currentVersion", "parser", "endMatch", "part", "closure", "position", "previous", "current", "c", "combined", "ver"];
  init.types = [{func: 1, args: [,]}, {func: 1}, {func: 1, void: true}, {func: 1, args: [,,]}, {func: 1, args: [P.String]}, {func: 1, ret: P.Future}, {func: 1, args: [Z.ProcessResult]}, {func: 1, ret: P.bool}, {func: 1, void: true, args: [E.TextEditor]}, {func: 1, void: true, args: [P.Object], opt: [P.StackTrace]}, {func: 1, void: true, args: [E.AtomEvent]}, {func: 1, void: true, args: [{func: 1, void: true}]}, {func: 1, args: [, P.StackTrace]}, {func: 1, void: true, args: [P.String]}, {func: 1, void: true, opt: [,]}, {func: 1, void: true, args: [K.Node0]}, {func: 1, ret: P.String, args: [P.$int]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, args: [N.SourceFileEdit]}, {func: 1, args: [P.$int]}, {func: 1, void: true, args: [,]}, {func: 1, args: [P.Object]}, {func: 1, args: [E.TextEditor]}, {func: 1, args: [P.Timer]}, {func: 1, args: [P.bool]}, {func: 1, void: true, args: [,], opt: [P.StackTrace]}, {func: 1, args: [,], opt: [,]}, {func: 1, ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]}, {func: 1, args: [N.RefactoringResult]}, {func: 1, args: [N.SourceEdit]}, {func: 1, args: [N.Position]}, {func: 1, args: [N.ServerStatus]}, {func: 1, args: [N.SourceChange]}, {func: 1, ret: P.Stream, args: [P.String], opt: [P.Map]}, {func: 1, args: [W.MouseEvent]}, {func: 1, void: true, args: [N.AnalysisErrors]}, {func: 1, args: [N.FormatResult]}, {func: 1, void: true, args: [{func: 1, void: true, args: [,]}]}, {func: 1, void: true, opt: [P.Map]}, {func: 1, void: true, args: [P.Map]}, {func: 1, ret: P.Map}, {func: 1, void: true, args: [[P.List, P.String]]}, {func: 1, args: [P.StreamSubscription]}, {func: 1, args: [L.DartProject]}, {func: 1, args: [E.AtomEvent]}, {func: 1, args: [N.AvailableRefactoringsResult]}, {func: 1, args: [, P.String]}, {func: 1, args: [N.FindElementReferencesResult]}, {func: 1, void: true, args: [, W.Element]}, {func: 1, args: [E.Range]}, {func: 1, args: [[P.List, N.SearchResult]]}, {func: 1, ret: P.JsObject, args: [,]}, {func: 1, args: [N.SearchResults]}, {func: 1, void: true, args: [N.TypeHierarchyItem, W.Element]}, {func: 1, args: [N.CompletionSuggestion]}, {func: 1, void: true, args: [P.bool]}, {func: 1, args: [{func: 1, void: true}]}, {func: 1, void: true, args: [[P.List, L.DartProject]]}, {func: 1, void: true, args: [V.Sdk]}, {func: 1, void: true, args: [,,]}, {func: 1, args: [N.SourceEdit, N.SourceEdit]}, {func: 1, args: [N.FixesResult]}, {func: 1, void: true, args: [N.AnalysisNavigation]}, {func: 1, args: [P.String,,]}, {func: 1, void: true, args: [P.Object, P.StackTrace]}, {func: 1, void: true, args: [, P.StackTrace]}, {func: 1, void: true, args: [,], opt: [,]}, {func: 1, args: [P.EventSink]}, {func: 1, args: [P.Symbol,,]}, {func: 1, ret: P.$int, args: [N.AnalysisError, N.AnalysisError]}, {func: 1, args: [W.HttpRequest]}, {func: 1, void: true, args: [W.Node, W.Node]}, {func: 1, args: [N.HoverResult]}, {func: 1, void: true, args: [P.String, P.String]}, {func: 1, args: [P.JsObject]}, {func: 1, args: [P.$int,,]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, args: [P.String, [P.List, N.AnalysisError]]}, {func: 1, args: [N.AnalysisError]}, {func: 1, args: [P.RegExp]}, {func: 1, args: [[P.EventSink, P.List]]}, {func: 1, ret: P.num}, {func: 1, ret: N.ServerStatus, args: [P.Map]}, {func: 1, ret: N.VersionResult, args: [P.Map]}, {func: 1, ret: N.AnalysisErrors, args: [P.Map]}, {func: 1, ret: N.AnalysisFlushResults, args: [P.Map]}, {func: 1, ret: N.AnalysisNavigation, args: [P.Map]}, {func: 1, ret: N.HoverResult, args: [P.Map]}, {func: 1, ret: N.CompletionResults, args: [P.Map]}, {func: 1, ret: N.SuggestionsResult, args: [P.Map]}, {func: 1, ret: N.SearchResults, args: [P.Map]}, {func: 1, ret: N.FindElementReferencesResult, args: [P.Map]}, {func: 1, ret: N.TypeHierarchyResult, args: [P.Map]}, {func: 1, ret: N.FormatResult, args: [P.Map]}, {func: 1, ret: N.AvailableRefactoringsResult, args: [P.Map]}, {func: 1, ret: N.FixesResult, args: [P.Map]}, {func: 1, ret: N.RefactoringResult, args: [P.Map]}, {func: 1, ret: P.bool, args: [E.TextEditor]}, {func: 1, ret: P.$int, args: [N.CompletionSuggestion, N.CompletionSuggestion]}, {func: 1, void: true, args: [N.AnalysisFlushResults]}, {func: 1, args: [N.AnalysisNavigation]}, {func: 1, ret: P.$int, args: [P.Comparable, P.Comparable]}, {func: 1, void: true, args: [P.Object]}, {func: 1, ret: P.$int, args: [,]}, {func: 1, args: [N.TypeHierarchyResult]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          } else
            if (result === sentinelInProgress)
              H.throwCyclicInit(staticName || fieldName);
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    function intern(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    }
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(function(a) {
        H.startRootIsolate(T.entry__main$closure(), a);
      }, []);
    else
      (function(a) {
        H.startRootIsolate(T.entry__main$closure(), a);
      })([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=entry.dart.js.map
